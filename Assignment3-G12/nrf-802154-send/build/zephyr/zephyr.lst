
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
        *(p_dst++) = 0U;
    }
}

void nrf_802154_stat_totals_get(nrf_802154_stat_totals_t * p_stat_totals)
{
   0:	80 55 00 20 85 6a 00 00 37 2c 01 00 59 6a 00 00     .U. .j..7,..Yj..
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  10:	59 6a 00 00 59 6a 00 00 59 6a 00 00 00 00 00 00     Yj..Yj..Yj......
	...
  2c:	8d 63 00 00 59 6a 00 00 00 00 00 00 39 63 00 00     .c..Yj......9c..
  3c:	59 6a 00 00                                         Yj..

00000040 <_irq_vector_table>:
  40:	3d 64 00 00 01 31 01 00 3d 64 00 00 3d 64 00 00     =d...1..=d..=d..
  50:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  60:	af 30 01 00 3d 64 00 00 3d 64 00 00 e7 30 01 00     .0..=d..=d...0..
  70:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  80:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  90:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  a0:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  b0:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  c0:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  d0:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  e0:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..
  f0:	3d 64 00 00 3d 64 00 00 3d 64 00 00 3d 64 00 00     =d..=d..=d..=d..

Disassembly of section text:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     11e:	f000 b857 	b.w	1d0 <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <CONFIG_IDLE_STACK_SIZE+0x28>
     132:	f003 fb5d 	bl	37f0 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     14c:	f003 fb50 	bl	37f0 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f003 fb3f 	bl	37f0 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f003 fb31 	bl	37f0 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b80c 	b.w	1d0 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f003 fb16 	bl	37f0 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__aeabi_idiv0>:
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop

000001d4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     1d4:	b570      	push	{r4, r5, r6, lr}
     1d6:	4c17      	ldr	r4, [pc, #92]	; (234 <__data_size+0x46>)
     1d8:	7860      	ldrb	r0, [r4, #1]
     1da:	2800      	cmp	r0, #0
     1dc:	d123      	bne.n	226 <__data_size+0x38>
     1de:	2001      	movs	r0, #1
     1e0:	7060      	strb	r0, [r4, #1]
     1e2:	f003 fd90 	bl	3d06 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     1e6:	f06f 0527 	mvn.w	r5, #39	; 0x27
     1ea:	b928      	cbnz	r0, 1f8 <__data_size+0xa>
     1ec:	f003 fda1 	bl	3d32 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     1f0:	b910      	cbnz	r0, 1f8 <__data_size+0xa>
     1f2:	f003 fda8 	bl	3d46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     1f6:	b120      	cbz	r0, 202 <__data_size+0x14>
     1f8:	480f      	ldr	r0, [pc, #60]	; (238 <__data_size+0x4a>)
     1fa:	6060      	str	r0, [r4, #4]
     1fc:	70a5      	strb	r5, [r4, #2]
     1fe:	2008      	movs	r0, #8
     200:	e010      	b.n	224 <__data_size+0x36>
     202:	f003 fd55 	bl	3cb0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     206:	b940      	cbnz	r0, 21a <__data_size+0x2c>
     208:	f003 fd5c 	bl	3cc4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     20c:	b928      	cbnz	r0, 21a <__data_size+0x2c>
     20e:	f003 fd70 	bl	3cf2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     212:	b910      	cbnz	r0, 21a <__data_size+0x2c>
     214:	f003 fd81 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     218:	b130      	cbz	r0, 228 <__data_size+0x3a>
     21a:	4807      	ldr	r0, [pc, #28]	; (238 <__data_size+0x4a>)
     21c:	3031      	adds	r0, #49	; 0x31
     21e:	6060      	str	r0, [r4, #4]
     220:	70a5      	strb	r5, [r4, #2]
     222:	2004      	movs	r0, #4
     224:	70e0      	strb	r0, [r4, #3]
     226:	bd70      	pop	{r4, r5, r6, pc}
     228:	f44f 718f 	mov.w	r1, #286	; 0x11e
     22c:	2074      	movs	r0, #116	; 0x74
     22e:	f002 ff01 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     232:	0000      	.short	0x0000
     234:	20000000 	.word	0x20000000
     238:	00004022 	.word	0x00004022

0000023c <mpsl_tx_power_radio_supported_power_adjust>:
     23c:	4908      	ldr	r1, [pc, #32]	; (260 <mpsl_tx_power_radio_supported_power_adjust+0x24>)
     23e:	f991 2003 	ldrsb.w	r2, [r1, #3]
     242:	4290      	cmp	r0, r2
     244:	da03      	bge.n	24e <mpsl_tx_power_radio_supported_power_adjust+0x12>
     246:	f991 2002 	ldrsb.w	r2, [r1, #2]
     24a:	4290      	cmp	r0, r2
     24c:	dc01      	bgt.n	252 <mpsl_tx_power_radio_supported_power_adjust+0x16>
     24e:	4610      	mov	r0, r2
     250:	4770      	bx	lr
     252:	6849      	ldr	r1, [r1, #4]
     254:	1a80      	subs	r0, r0, r2
     256:	5c08      	ldrb	r0, [r1, r0]
     258:	4902      	ldr	r1, [pc, #8]	; (264 <mpsl_tx_power_radio_supported_power_adjust+0x28>)
     25a:	5608      	ldrsb	r0, [r1, r0]
     25c:	4770      	bx	lr
     25e:	0000      	.short	0x0000
     260:	20000000 	.word	0x20000000
     264:	00004014 	.word	0x00004014

00000268 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     26c:	461c      	mov	r4, r3
     26e:	4690      	mov	r8, r2
     270:	460d      	mov	r5, r1
     272:	4606      	mov	r6, r0
     274:	f06f 0715 	mvn.w	r7, #21
     278:	2804      	cmp	r0, #4
     27a:	d804      	bhi.n	286 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     27c:	b11c      	cbz	r4, 286 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     27e:	f003 fc07 	bl	3a90 <__udivmoddi4+0x2a0>
     282:	42a8      	cmp	r0, r5
     284:	d802      	bhi.n	28c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     286:	4638      	mov	r0, r7
     288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     28c:	4805      	ldr	r0, [pc, #20]	; (2a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     28e:	4642      	mov	r2, r8
     290:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     294:	b118      	cbz	r0, 29e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     296:	5740      	ldrsb	r0, [r0, r5]
     298:	4282      	cmp	r2, r0
     29a:	dd00      	ble.n	29e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     29c:	4602      	mov	r2, r0
     29e:	7022      	strb	r2, [r4, #0]
     2a0:	2000      	movs	r0, #0
     2a2:	e7f1      	b.n	288 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     2a4:	2000046c 	.word	0x2000046c

000002a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     2a8:	4801      	ldr	r0, [pc, #4]	; (2b0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     2aa:	7800      	ldrb	r0, [r0, #0]
     2ac:	4770      	bx	lr
     2ae:	0000      	.short	0x0000
     2b0:	20000008 	.word	0x20000008

000002b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     2b4:	4905      	ldr	r1, [pc, #20]	; (2cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     2b6:	780a      	ldrb	r2, [r1, #0]
     2b8:	4290      	cmp	r0, r2
     2ba:	d301      	bcc.n	2c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     2bc:	2000      	movs	r0, #0
     2be:	4770      	bx	lr
     2c0:	6849      	ldr	r1, [r1, #4]
     2c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     2c6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     2ca:	4770      	bx	lr
     2cc:	20000008 	.word	0x20000008

000002d0 <MPSL_IRQ_RADIO_Handler>:
     2d0:	490e      	ldr	r1, [pc, #56]	; (30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>)
     2d2:	b510      	push	{r4, lr}
     2d4:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     2d8:	2820      	cmp	r0, #32
     2da:	d012      	beq.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2dc:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     2e0:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     2e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     2e8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     2ec:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     2f0:	6840      	ldr	r0, [r0, #4]
     2f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     2f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2fe:	2104      	movs	r1, #4
     300:	4710      	bx	r2
     302:	f640 01bc 	movw	r1, #2236	; 0x8bc
     306:	2070      	movs	r0, #112	; 0x70
     308:	f002 fe94 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     30c:	20000880 	.word	0x20000880
     310:	b570      	push	{r4, r5, r6, lr}
     312:	4605      	mov	r5, r0
     314:	2a20      	cmp	r2, #32
     316:	d028      	beq.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     318:	4819      	ldr	r0, [pc, #100]	; (380 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x80>)
     31a:	4c1a      	ldr	r4, [pc, #104]	; (384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>)
     31c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     324:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     328:	4423      	add	r3, r4
     32a:	2920      	cmp	r1, #32
     32c:	d022      	beq.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     32e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     332:	7840      	ldrb	r0, [r0, #1]
     334:	784c      	ldrb	r4, [r1, #1]
     336:	7048      	strb	r0, [r1, #1]
     338:	4620      	mov	r0, r4
     33a:	4601      	mov	r1, r0
     33c:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     340:	4291      	cmp	r1, r2
     342:	7005      	strb	r5, [r0, #0]
     344:	7840      	ldrb	r0, [r0, #1]
     346:	d1f8      	bne.n	33a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3a>
     348:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     34c:	2a20      	cmp	r2, #32
     34e:	bf1a      	itte	ne
     350:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     354:	7054      	strbne	r4, [r2, #1]
     356:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     35a:	2220      	movs	r2, #32
     35c:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     360:	f88c 2001 	strb.w	r2, [ip, #1]
     364:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     368:	bd70      	pop	{r4, r5, r6, pc}
     36a:	f44f 7126 	mov.w	r1, #664	; 0x298
     36e:	2070      	movs	r0, #112	; 0x70
     370:	f002 fe60 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     374:	f893 4020 	ldrb.w	r4, [r3, #32]
     378:	7840      	ldrb	r0, [r0, #1]
     37a:	f883 0020 	strb.w	r0, [r3, #32]
     37e:	e7db      	b.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     380:	20000800 	.word	0x20000800
     384:	20000880 	.word	0x20000880
     388:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     38c:	b08d      	sub	sp, #52	; 0x34
     38e:	4615      	mov	r5, r2
     390:	460c      	mov	r4, r1
     392:	f001 fde9 	bl	1f68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     396:	4428      	add	r0, r5
     398:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     39c:	9008      	str	r0, [sp, #32]
     39e:	6821      	ldr	r1, [r4, #0]
     3a0:	1a08      	subs	r0, r1, r0
     3a2:	0200      	lsls	r0, r0, #8
     3a4:	17c1      	asrs	r1, r0, #31
     3a6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     3aa:	1200      	asrs	r0, r0, #8
     3ac:	2800      	cmp	r0, #0
     3ae:	f300 80f0 	bgt.w	592 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xaa>
     3b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
     3b6:	48cd      	ldr	r0, [pc, #820]	; (6ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x204>)
     3b8:	eb08 0148 	add.w	r1, r8, r8, lsl #1
     3bc:	4408      	add	r0, r1
     3be:	9009      	str	r0, [sp, #36]	; 0x24
     3c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     3c4:	2020      	movs	r0, #32
     3c6:	4eca      	ldr	r6, [pc, #808]	; (6f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x208>)
     3c8:	f10d 0a18 	add.w	sl, sp, #24
     3cc:	f10d 091c 	add.w	r9, sp, #28
     3d0:	f88d 0018 	strb.w	r0, [sp, #24]
     3d4:	2d20      	cmp	r5, #32
     3d6:	bf1c      	itt	ne
     3d8:	48c6      	ldrne	r0, [pc, #792]	; (6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>)
     3da:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     3de:	d038      	beq.n	452 <CONFIG_FLASH_SIZE+0x52>
     3e0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     3e4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     3e8:	f100 0108 	add.w	r1, r0, #8
     3ec:	68c0      	ldr	r0, [r0, #12]
     3ee:	6827      	ldr	r7, [r4, #0]
     3f0:	1a38      	subs	r0, r7, r0
     3f2:	0200      	lsls	r0, r0, #8
     3f4:	17c2      	asrs	r2, r0, #31
     3f6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     3fa:	1200      	asrs	r0, r0, #8
     3fc:	d429      	bmi.n	452 <CONFIG_FLASH_SIZE+0x52>
     3fe:	89e0      	ldrh	r0, [r4, #14]
     400:	b300      	cbz	r0, 444 <CONFIG_FLASH_SIZE+0x44>
     402:	89c8      	ldrh	r0, [r1, #14]
     404:	b9f0      	cbnz	r0, 444 <CONFIG_FLASH_SIZE+0x44>
     406:	6808      	ldr	r0, [r1, #0]
     408:	9003      	str	r0, [sp, #12]
     40a:	f002 fc8d 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     40e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     412:	bf08      	it	eq
     414:	200d      	moveq	r0, #13
     416:	d00b      	beq.n	430 <CONFIG_FLASH_SIZE+0x30>
     418:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     41c:	3856      	subs	r0, #86	; 0x56
     41e:	bf08      	it	eq
     420:	201c      	moveq	r0, #28
     422:	d005      	beq.n	430 <CONFIG_FLASH_SIZE+0x30>
     424:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     428:	389f      	subs	r0, #159	; 0x9f
     42a:	bf14      	ite	ne
     42c:	2000      	movne	r0, #0
     42e:	2032      	moveq	r0, #50	; 0x32
     430:	1c41      	adds	r1, r0, #1
     432:	9803      	ldr	r0, [sp, #12]
     434:	1a38      	subs	r0, r7, r0
     436:	0200      	lsls	r0, r0, #8
     438:	17c2      	asrs	r2, r0, #31
     43a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     43e:	1200      	asrs	r0, r0, #8
     440:	4288      	cmp	r0, r1
     442:	db06      	blt.n	452 <CONFIG_FLASH_SIZE+0x52>
     444:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     448:	f88a 5000 	strb.w	r5, [sl]
     44c:	7845      	ldrb	r5, [r0, #1]
     44e:	2d20      	cmp	r5, #32
     450:	d1c6      	bne.n	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     452:	f89a 0000 	ldrb.w	r0, [sl]
     456:	f889 0000 	strb.w	r0, [r9]
     45a:	2d20      	cmp	r5, #32
     45c:	bf1c      	itt	ne
     45e:	48a5      	ldrne	r0, [pc, #660]	; (6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>)
     460:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     464:	f000 813e 	beq.w	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     468:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     46c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     470:	6861      	ldr	r1, [r4, #4]
     472:	f8d7 8008 	ldr.w	r8, [r7, #8]
     476:	f107 0008 	add.w	r0, r7, #8
     47a:	eba8 0101 	sub.w	r1, r8, r1
     47e:	0209      	lsls	r1, r1, #8
     480:	17ca      	asrs	r2, r1, #31
     482:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     486:	1209      	asrs	r1, r1, #8
     488:	d427      	bmi.n	4da <CONFIG_FLASH_SIZE+0xda>
     48a:	89c0      	ldrh	r0, [r0, #14]
     48c:	2800      	cmp	r0, #0
     48e:	f000 8129 	beq.w	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     492:	89e0      	ldrh	r0, [r4, #14]
     494:	2800      	cmp	r0, #0
     496:	f040 8125 	bne.w	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     49a:	f8d4 a000 	ldr.w	sl, [r4]
     49e:	f002 fc43 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     4a2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     4a6:	bf08      	it	eq
     4a8:	200d      	moveq	r0, #13
     4aa:	d00b      	beq.n	4c4 <CONFIG_FLASH_SIZE+0xc4>
     4ac:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     4b0:	3856      	subs	r0, #86	; 0x56
     4b2:	bf08      	it	eq
     4b4:	201c      	moveq	r0, #28
     4b6:	d005      	beq.n	4c4 <CONFIG_FLASH_SIZE+0xc4>
     4b8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     4bc:	389f      	subs	r0, #159	; 0x9f
     4be:	bf14      	ite	ne
     4c0:	2000      	movne	r0, #0
     4c2:	2032      	moveq	r0, #50	; 0x32
     4c4:	1c41      	adds	r1, r0, #1
     4c6:	eba8 000a 	sub.w	r0, r8, sl
     4ca:	0200      	lsls	r0, r0, #8
     4cc:	17c2      	asrs	r2, r0, #31
     4ce:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     4d2:	1200      	asrs	r0, r0, #8
     4d4:	4288      	cmp	r0, r1
     4d6:	f280 8105 	bge.w	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     4da:	f889 5000 	strb.w	r5, [r9]
     4de:	7e38      	ldrb	r0, [r7, #24]
     4e0:	7c21      	ldrb	r1, [r4, #16]
     4e2:	4288      	cmp	r0, r1
     4e4:	d906      	bls.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     4e6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     4ea:	7845      	ldrb	r5, [r0, #1]
     4ec:	2d20      	cmp	r5, #32
     4ee:	d1bb      	bne.n	468 <CONFIG_FLASH_SIZE+0x68>
     4f0:	f000 b8f8 	b.w	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     4f4:	f89d 001c 	ldrb.w	r0, [sp, #28]
     4f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     4fc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     500:	8ac1      	ldrh	r1, [r0, #22]
     502:	68c5      	ldr	r5, [r0, #12]
     504:	bbe1      	cbnz	r1, 580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     506:	89e1      	ldrh	r1, [r4, #14]
     508:	b3d1      	cbz	r1, 580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     50a:	6887      	ldr	r7, [r0, #8]
     50c:	f002 fc0c 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     510:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     514:	bf08      	it	eq
     516:	200d      	moveq	r0, #13
     518:	d00b      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     51a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     51e:	3856      	subs	r0, #86	; 0x56
     520:	bf08      	it	eq
     522:	201c      	moveq	r0, #28
     524:	d005      	beq.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
     526:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     52a:	389f      	subs	r0, #159	; 0x9f
     52c:	bf14      	ite	ne
     52e:	2000      	movne	r0, #0
     530:	2032      	moveq	r0, #50	; 0x32
     532:	1c41      	adds	r1, r0, #1
     534:	1be8      	subs	r0, r5, r7
     536:	0200      	lsls	r0, r0, #8
     538:	17c2      	asrs	r2, r0, #31
     53a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     53e:	1200      	asrs	r0, r0, #8
     540:	4288      	cmp	r0, r1
     542:	da1d      	bge.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     544:	f002 fbf0 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     548:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     54c:	bf08      	it	eq
     54e:	200d      	moveq	r0, #13
     550:	d00b      	beq.n	56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
     552:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     556:	3856      	subs	r0, #86	; 0x56
     558:	bf08      	it	eq
     55a:	201c      	moveq	r0, #28
     55c:	d005      	beq.n	56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
     55e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     562:	389f      	subs	r0, #159	; 0x9f
     564:	bf14      	ite	ne
     566:	2000      	movne	r0, #0
     568:	2032      	moveq	r0, #50	; 0x32
     56a:	f89d 101c 	ldrb.w	r1, [sp, #28]
     56e:	1c40      	adds	r0, r0, #1
     570:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     574:	eb06 0181 	add.w	r1, r6, r1, lsl #2
     578:	6889      	ldr	r1, [r1, #8]
     57a:	4408      	add	r0, r1
     57c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
     580:	9808      	ldr	r0, [sp, #32]
     582:	1a28      	subs	r0, r5, r0
     584:	0200      	lsls	r0, r0, #8
     586:	17c1      	asrs	r1, r0, #31
     588:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     58c:	1200      	asrs	r0, r0, #8
     58e:	2800      	cmp	r0, #0
     590:	dd03      	ble.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     592:	b011      	add	sp, #68	; 0x44
     594:	2000      	movs	r0, #0
     596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59a:	6820      	ldr	r0, [r4, #0]
     59c:	42a8      	cmp	r0, r5
     59e:	d902      	bls.n	5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
     5a0:	68a1      	ldr	r1, [r4, #8]
     5a2:	1c49      	adds	r1, r1, #1
     5a4:	60a1      	str	r1, [r4, #8]
     5a6:	6861      	ldr	r1, [r4, #4]
     5a8:	f10d 0a18 	add.w	sl, sp, #24
     5ac:	1a08      	subs	r0, r1, r0
     5ae:	4428      	add	r0, r5
     5b0:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
     5b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5b8:	e9c4 1000 	strd	r1, r0, [r4]
     5bc:	9810      	ldr	r0, [sp, #64]	; 0x40
     5be:	900b      	str	r0, [sp, #44]	; 0x2c
     5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
     5c2:	f10d 081c 	add.w	r8, sp, #28
     5c6:	f890 5020 	ldrb.w	r5, [r0, #32]
     5ca:	2020      	movs	r0, #32
     5cc:	f88d 0018 	strb.w	r0, [sp, #24]
     5d0:	2d20      	cmp	r5, #32
     5d2:	d03c      	beq.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
     5d4:	4947      	ldr	r1, [pc, #284]	; (6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>)
     5d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
     5d8:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
     5dc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     5e0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     5e4:	f100 0108 	add.w	r1, r0, #8
     5e8:	68c0      	ldr	r0, [r0, #12]
     5ea:	6827      	ldr	r7, [r4, #0]
     5ec:	1a38      	subs	r0, r7, r0
     5ee:	0200      	lsls	r0, r0, #8
     5f0:	17c2      	asrs	r2, r0, #31
     5f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     5f6:	1200      	asrs	r0, r0, #8
     5f8:	d429      	bmi.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
     5fa:	89e0      	ldrh	r0, [r4, #14]
     5fc:	b300      	cbz	r0, 640 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x158>
     5fe:	89c8      	ldrh	r0, [r1, #14]
     600:	b9f0      	cbnz	r0, 640 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x158>
     602:	f8d1 9000 	ldr.w	r9, [r1]
     606:	f002 fb8f 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     60a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     60e:	bf08      	it	eq
     610:	200d      	moveq	r0, #13
     612:	d00b      	beq.n	62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>
     614:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     618:	3856      	subs	r0, #86	; 0x56
     61a:	bf08      	it	eq
     61c:	201c      	moveq	r0, #28
     61e:	d005      	beq.n	62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>
     620:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     624:	389f      	subs	r0, #159	; 0x9f
     626:	bf14      	ite	ne
     628:	2000      	movne	r0, #0
     62a:	2032      	moveq	r0, #50	; 0x32
     62c:	1c41      	adds	r1, r0, #1
     62e:	eba7 0009 	sub.w	r0, r7, r9
     632:	0200      	lsls	r0, r0, #8
     634:	17c2      	asrs	r2, r0, #31
     636:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     63a:	1200      	asrs	r0, r0, #8
     63c:	4288      	cmp	r0, r1
     63e:	db06      	blt.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
     640:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     644:	f88a 5000 	strb.w	r5, [sl]
     648:	7845      	ldrb	r5, [r0, #1]
     64a:	2d20      	cmp	r5, #32
     64c:	d1c6      	bne.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     64e:	f89a 0000 	ldrb.w	r0, [sl]
     652:	f888 0000 	strb.w	r0, [r8]
     656:	980b      	ldr	r0, [sp, #44]	; 0x2c
     658:	2d20      	cmp	r5, #32
     65a:	bf1c      	itt	ne
     65c:	4925      	ldrne	r1, [pc, #148]	; (6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>)
     65e:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
     662:	d03f      	beq.n	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     664:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     668:	eb06 0780 	add.w	r7, r6, r0, lsl #2
     66c:	6860      	ldr	r0, [r4, #4]
     66e:	f8d7 9008 	ldr.w	r9, [r7, #8]
     672:	f107 0108 	add.w	r1, r7, #8
     676:	eba9 0000 	sub.w	r0, r9, r0
     67a:	0200      	lsls	r0, r0, #8
     67c:	17c2      	asrs	r2, r0, #31
     67e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     682:	1200      	asrs	r0, r0, #8
     684:	d422      	bmi.n	6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>
     686:	89c8      	ldrh	r0, [r1, #14]
     688:	b360      	cbz	r0, 6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     68a:	89e0      	ldrh	r0, [r4, #14]
     68c:	bb50      	cbnz	r0, 6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     68e:	f8d4 a000 	ldr.w	sl, [r4]
     692:	f002 fb49 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     696:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     69a:	bf08      	it	eq
     69c:	200d      	moveq	r0, #13
     69e:	d00b      	beq.n	6b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d0>
     6a0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     6a4:	3856      	subs	r0, #86	; 0x56
     6a6:	bf08      	it	eq
     6a8:	201c      	moveq	r0, #28
     6aa:	d005      	beq.n	6b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d0>
     6ac:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     6b0:	389f      	subs	r0, #159	; 0x9f
     6b2:	bf14      	ite	ne
     6b4:	2000      	movne	r0, #0
     6b6:	2032      	moveq	r0, #50	; 0x32
     6b8:	1c41      	adds	r1, r0, #1
     6ba:	eba9 000a 	sub.w	r0, r9, sl
     6be:	0200      	lsls	r0, r0, #8
     6c0:	17c2      	asrs	r2, r0, #31
     6c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     6c6:	1200      	asrs	r0, r0, #8
     6c8:	4288      	cmp	r0, r1
     6ca:	da0b      	bge.n	6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>
     6cc:	f888 5000 	strb.w	r5, [r8]
     6d0:	7e38      	ldrb	r0, [r7, #24]
     6d2:	7c21      	ldrb	r1, [r4, #16]
     6d4:	4288      	cmp	r0, r1
     6d6:	f67f af0d 	bls.w	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     6da:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6de:	7845      	ldrb	r5, [r0, #1]
     6e0:	2d20      	cmp	r5, #32
     6e2:	d1bf      	bne.n	664 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17c>
     6e4:	b011      	add	sp, #68	; 0x44
     6e6:	2001      	movs	r0, #1
     6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6ec:	20000880 	.word	0x20000880
     6f0:	20000480 	.word	0x20000480
     6f4:	20000800 	.word	0x20000800
     6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6fc:	460f      	mov	r7, r1
     6fe:	4606      	mov	r6, r0
     700:	eb01 0047 	add.w	r0, r1, r7, lsl #1
     704:	494b      	ldr	r1, [pc, #300]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     706:	4699      	mov	r9, r3
     708:	4408      	add	r0, r1
     70a:	4692      	mov	sl, r2
     70c:	f890 4020 	ldrb.w	r4, [r0, #32]
     710:	2020      	movs	r0, #32
     712:	7010      	strb	r0, [r2, #0]
     714:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
     718:	2c20      	cmp	r4, #32
     71a:	bf1c      	itt	ne
     71c:	4846      	ldrne	r0, [pc, #280]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     71e:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     722:	d038      	beq.n	796 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ae>
     724:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     728:	eb08 0080 	add.w	r0, r8, r0, lsl #2
     72c:	f100 0108 	add.w	r1, r0, #8
     730:	68c0      	ldr	r0, [r0, #12]
     732:	6835      	ldr	r5, [r6, #0]
     734:	1a28      	subs	r0, r5, r0
     736:	0200      	lsls	r0, r0, #8
     738:	17c2      	asrs	r2, r0, #31
     73a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     73e:	1200      	asrs	r0, r0, #8
     740:	d429      	bmi.n	796 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ae>
     742:	89f0      	ldrh	r0, [r6, #14]
     744:	b300      	cbz	r0, 788 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a0>
     746:	89c8      	ldrh	r0, [r1, #14]
     748:	b9f0      	cbnz	r0, 788 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a0>
     74a:	6808      	ldr	r0, [r1, #0]
     74c:	9000      	str	r0, [sp, #0]
     74e:	f002 faeb 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     752:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     756:	bf08      	it	eq
     758:	200d      	moveq	r0, #13
     75a:	d00b      	beq.n	774 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28c>
     75c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     760:	3856      	subs	r0, #86	; 0x56
     762:	bf08      	it	eq
     764:	201c      	moveq	r0, #28
     766:	d005      	beq.n	774 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28c>
     768:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     76c:	389f      	subs	r0, #159	; 0x9f
     76e:	bf14      	ite	ne
     770:	2000      	movne	r0, #0
     772:	2032      	moveq	r0, #50	; 0x32
     774:	1c41      	adds	r1, r0, #1
     776:	9800      	ldr	r0, [sp, #0]
     778:	1a28      	subs	r0, r5, r0
     77a:	0200      	lsls	r0, r0, #8
     77c:	17c2      	asrs	r2, r0, #31
     77e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     782:	1200      	asrs	r0, r0, #8
     784:	4288      	cmp	r0, r1
     786:	db06      	blt.n	796 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ae>
     788:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
     78c:	f88a 4000 	strb.w	r4, [sl]
     790:	7844      	ldrb	r4, [r0, #1]
     792:	2c20      	cmp	r4, #32
     794:	d1c6      	bne.n	724 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x23c>
     796:	f89a 0000 	ldrb.w	r0, [sl]
     79a:	f889 0000 	strb.w	r0, [r9]
     79e:	2c20      	cmp	r4, #32
     7a0:	bf1c      	itt	ne
     7a2:	4825      	ldrne	r0, [pc, #148]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7a4:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
     7a8:	d040      	beq.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     7aa:	bf00      	nop
     7ac:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
     7b0:	eb08 0780 	add.w	r7, r8, r0, lsl #2
     7b4:	6870      	ldr	r0, [r6, #4]
     7b6:	68bd      	ldr	r5, [r7, #8]
     7b8:	f107 0108 	add.w	r1, r7, #8
     7bc:	1a28      	subs	r0, r5, r0
     7be:	0200      	lsls	r0, r0, #8
     7c0:	17c2      	asrs	r2, r0, #31
     7c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7c6:	1200      	asrs	r0, r0, #8
     7c8:	d422      	bmi.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     7ca:	89c8      	ldrh	r0, [r1, #14]
     7cc:	b370      	cbz	r0, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
     7ce:	89f0      	ldrh	r0, [r6, #14]
     7d0:	bb60      	cbnz	r0, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
     7d2:	f8d6 b000 	ldr.w	fp, [r6]
     7d6:	f002 faa7 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     7da:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     7de:	bf08      	it	eq
     7e0:	200d      	moveq	r0, #13
     7e2:	d00b      	beq.n	7fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x314>
     7e4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     7e8:	3856      	subs	r0, #86	; 0x56
     7ea:	bf08      	it	eq
     7ec:	201c      	moveq	r0, #28
     7ee:	d005      	beq.n	7fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x314>
     7f0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     7f4:	389f      	subs	r0, #159	; 0x9f
     7f6:	bf14      	ite	ne
     7f8:	2000      	movne	r0, #0
     7fa:	2032      	moveq	r0, #50	; 0x32
     7fc:	1c41      	adds	r1, r0, #1
     7fe:	eba5 000b 	sub.w	r0, r5, fp
     802:	0200      	lsls	r0, r0, #8
     804:	17c2      	asrs	r2, r0, #31
     806:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     80a:	1200      	asrs	r0, r0, #8
     80c:	4288      	cmp	r0, r1
     80e:	da0d      	bge.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     810:	f889 4000 	strb.w	r4, [r9]
     814:	7e38      	ldrb	r0, [r7, #24]
     816:	7c31      	ldrb	r1, [r6, #16]
     818:	4288      	cmp	r0, r1
     81a:	d802      	bhi.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     81c:	2000      	movs	r0, #0
     81e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     822:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
     826:	7844      	ldrb	r4, [r0, #1]
     828:	2c20      	cmp	r4, #32
     82a:	d1bf      	bne.n	7ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c4>
     82c:	2001      	movs	r0, #1
     82e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     832:	0000      	.short	0x0000
     834:	20000880 	.word	0x20000880
     838:	20000800 	.word	0x20000800
     83c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     840:	b098      	sub	sp, #96	; 0x60
     842:	4615      	mov	r5, r2
     844:	468b      	mov	fp, r1
     846:	f001 fe3d 	bl	24c4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     84a:	4604      	mov	r4, r0
     84c:	f002 f89e 	bl	298c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     850:	4606      	mov	r6, r0
     852:	f1bb 0f01 	cmp.w	fp, #1
     856:	bf18      	it	ne
     858:	f1bb 0f02 	cmpne.w	fp, #2
     85c:	d005      	beq.n	86a <__z_interrupt_stack_SIZEOF+0x2a>
     85e:	f640 1192 	movw	r1, #2450	; 0x992
     862:	f04f 0070 	mov.w	r0, #112	; 0x70
     866:	f002 fbe5 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     86a:	49ff      	ldr	r1, [pc, #1020]	; (c68 <__z_interrupt_stack_SIZEOF+0x428>)
     86c:	2001      	movs	r0, #1
     86e:	6008      	str	r0, [r1, #0]
     870:	49fe      	ldr	r1, [pc, #1016]	; (c6c <__z_interrupt_stack_SIZEOF+0x42c>)
     872:	6889      	ldr	r1, [r1, #8]
     874:	6008      	str	r0, [r1, #0]
     876:	2000      	movs	r0, #0
     878:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
     87c:	900e      	str	r0, [sp, #56]	; 0x38
     87e:	1e40      	subs	r0, r0, #1
     880:	900f      	str	r0, [sp, #60]	; 0x3c
     882:	49fb      	ldr	r1, [pc, #1004]	; (c70 <__z_interrupt_stack_SIZEOF+0x430>)
     884:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
     888:	eb01 0180 	add.w	r1, r1, r0, lsl #2
     88c:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
     890:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     894:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
     898:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
     89c:	6989      	ldr	r1, [r1, #24]
     89e:	9114      	str	r1, [sp, #80]	; 0x50
     8a0:	f003 f919 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     8a4:	4601      	mov	r1, r0
     8a6:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
     8aa:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     8ae:	4bf1      	ldr	r3, [pc, #964]	; (c74 <__z_interrupt_stack_SIZEOF+0x434>)
     8b0:	4440      	add	r0, r8
     8b2:	1c42      	adds	r2, r0, #1
     8b4:	1888      	adds	r0, r1, r2
     8b6:	4299      	cmp	r1, r3
     8b8:	d84f      	bhi.n	95a <__z_interrupt_stack_SIZEOF+0x11a>
     8ba:	4def      	ldr	r5, [pc, #956]	; (c78 <__z_interrupt_stack_SIZEOF+0x438>)
     8bc:	42aa      	cmp	r2, r5
     8be:	dc53      	bgt.n	968 <__z_interrupt_stack_SIZEOF+0x128>
     8c0:	4269      	negs	r1, r5
     8c2:	428a      	cmp	r2, r1
     8c4:	db58      	blt.n	978 <__z_interrupt_stack_SIZEOF+0x138>
     8c6:	1c59      	adds	r1, r3, #1
     8c8:	4281      	cmp	r1, r0
     8ca:	bfdc      	itt	le
     8cc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     8d0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     8d4:	dd05      	ble.n	8e2 <__z_interrupt_stack_SIZEOF+0xa2>
     8d6:	2800      	cmp	r0, #0
     8d8:	bfbc      	itt	lt
     8da:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     8de:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     8e2:	900c      	str	r0, [sp, #48]	; 0x30
     8e4:	48e5      	ldr	r0, [pc, #916]	; (c7c <__z_interrupt_stack_SIZEOF+0x43c>)
     8e6:	f1b8 0f00 	cmp.w	r8, #0
     8ea:	8b80      	ldrh	r0, [r0, #28]
     8ec:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
     8f0:	bf04      	itt	eq
     8f2:	2000      	moveq	r0, #0
     8f4:	900b      	streq	r0, [sp, #44]	; 0x2c
     8f6:	d00b      	beq.n	910 <__z_interrupt_stack_SIZEOF+0xd0>
     8f8:	2001      	movs	r0, #1
     8fa:	900b      	str	r0, [sp, #44]	; 0x2c
     8fc:	48df      	ldr	r0, [pc, #892]	; (c7c <__z_interrupt_stack_SIZEOF+0x43c>)
     8fe:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
     902:	b928      	cbnz	r0, 910 <__z_interrupt_stack_SIZEOF+0xd0>
     904:	f002 fb1e 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     908:	2800      	cmp	r0, #0
     90a:	bf08      	it	eq
     90c:	2701      	moveq	r7, #1
     90e:	d000      	beq.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
     910:	2700      	movs	r7, #0
     912:	f002 fa09 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     916:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     91a:	bf08      	it	eq
     91c:	200d      	moveq	r0, #13
     91e:	d00b      	beq.n	938 <__z_interrupt_stack_SIZEOF+0xf8>
     920:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     924:	3856      	subs	r0, #86	; 0x56
     926:	bf08      	it	eq
     928:	201c      	moveq	r0, #28
     92a:	d005      	beq.n	938 <__z_interrupt_stack_SIZEOF+0xf8>
     92c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     930:	389f      	subs	r0, #159	; 0x9f
     932:	bf14      	ite	ne
     934:	2000      	movne	r0, #0
     936:	2032      	moveq	r0, #50	; 0x32
     938:	f04f 0900 	mov.w	r9, #0
     93c:	46ca      	mov	sl, r9
     93e:	9009      	str	r0, [sp, #36]	; 0x24
     940:	4546      	cmp	r6, r8
     942:	d937      	bls.n	9b4 <__z_interrupt_stack_SIZEOF+0x174>
     944:	990c      	ldr	r1, [sp, #48]	; 0x30
     946:	f8df 932c 	ldr.w	r9, [pc, #812]	; c74 <__z_interrupt_stack_SIZEOF+0x434>
     94a:	ea6f 0c06 	mvn.w	ip, r6
     94e:	466b      	mov	r3, sp
     950:	aa16      	add	r2, sp, #88	; 0x58
     952:	eb01 000c 	add.w	r0, r1, ip
     956:	4549      	cmp	r1, r9
     958:	d904      	bls.n	964 <__z_interrupt_stack_SIZEOF+0x124>
     95a:	f240 519e 	movw	r1, #1438	; 0x59e
     95e:	2070      	movs	r0, #112	; 0x70
     960:	f002 fb68 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     964:	45ac      	cmp	ip, r5
     966:	dd04      	ble.n	972 <__z_interrupt_stack_SIZEOF+0x132>
     968:	f240 519f 	movw	r1, #1439	; 0x59f
     96c:	2070      	movs	r0, #112	; 0x70
     96e:	f002 fb61 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     972:	49c3      	ldr	r1, [pc, #780]	; (c80 <__z_interrupt_stack_SIZEOF+0x440>)
     974:	458c      	cmp	ip, r1
     976:	da04      	bge.n	982 <__z_interrupt_stack_SIZEOF+0x142>
     978:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
     97c:	2070      	movs	r0, #112	; 0x70
     97e:	f002 fb59 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     982:	49c0      	ldr	r1, [pc, #768]	; (c84 <__z_interrupt_stack_SIZEOF+0x444>)
     984:	4281      	cmp	r1, r0
     986:	bfdc      	itt	le
     988:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     98c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     990:	dd05      	ble.n	99e <__z_interrupt_stack_SIZEOF+0x15e>
     992:	2800      	cmp	r0, #0
     994:	bfbc      	itt	lt
     996:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     99a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     99e:	4619      	mov	r1, r3
     9a0:	f001 fafe 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9a4:	9800      	ldr	r0, [sp, #0]
     9a6:	9910      	ldr	r1, [sp, #64]	; 0x40
     9a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9ac:	9000      	str	r0, [sp, #0]
     9ae:	1a08      	subs	r0, r1, r0
     9b0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
     9b4:	2f00      	cmp	r7, #0
     9b6:	bf18      	it	ne
     9b8:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
     9bc:	d105      	bne.n	9ca <__z_interrupt_stack_SIZEOF+0x18a>
     9be:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     9c2:	2800      	cmp	r0, #0
     9c4:	bf18      	it	ne
     9c6:	f04f 0a02 	movne.w	sl, #2
     9ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     9ce:	d008      	beq.n	9e2 <__z_interrupt_stack_SIZEOF+0x1a2>
     9d0:	9810      	ldr	r0, [sp, #64]	; 0x40
     9d2:	1b00      	subs	r0, r0, r4
     9d4:	0200      	lsls	r0, r0, #8
     9d6:	17c1      	asrs	r1, r0, #31
     9d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9dc:	1200      	asrs	r0, r0, #8
     9de:	2801      	cmp	r0, #1
     9e0:	da02      	bge.n	9e8 <__z_interrupt_stack_SIZEOF+0x1a8>
     9e2:	2003      	movs	r0, #3
     9e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
     9e6:	e00d      	b.n	a04 <__z_interrupt_stack_SIZEOF+0x1c4>
     9e8:	b157      	cbz	r7, a00 <__z_interrupt_stack_SIZEOF+0x1c0>
     9ea:	48a4      	ldr	r0, [pc, #656]	; (c7c <__z_interrupt_stack_SIZEOF+0x43c>)
     9ec:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
     9f0:	b130      	cbz	r0, a00 <__z_interrupt_stack_SIZEOF+0x1c0>
     9f2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     9f6:	f110 0a00 	adds.w	sl, r0, #0
     9fa:	bf18      	it	ne
     9fc:	f04f 0a02 	movne.w	sl, #2
     a00:	4625      	mov	r5, r4
     a02:	2000      	movs	r0, #0
     a04:	4482      	add	sl, r0
     a06:	9810      	ldr	r0, [sp, #64]	; 0x40
     a08:	eba0 0009 	sub.w	r0, r0, r9
     a0c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     a10:	1e50      	subs	r0, r2, #1
     a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a16:	1b41      	subs	r1, r0, r5
     a18:	0209      	lsls	r1, r1, #8
     a1a:	17cb      	asrs	r3, r1, #31
     a1c:	eb01 6113 	add.w	r1, r1, r3, lsr #24
     a20:	1209      	asrs	r1, r1, #8
     a22:	4551      	cmp	r1, sl
     a24:	db04      	blt.n	a30 <__z_interrupt_stack_SIZEOF+0x1f0>
     a26:	f1b9 0f00 	cmp.w	r9, #0
     a2a:	bf18      	it	ne
     a2c:	9210      	strne	r2, [sp, #64]	; 0x40
     a2e:	e02d      	b.n	a8c <__z_interrupt_stack_SIZEOF+0x24c>
     a30:	f1b9 0f00 	cmp.w	r9, #0
     a34:	d005      	beq.n	a42 <__z_interrupt_stack_SIZEOF+0x202>
     a36:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
     a3a:	b920      	cbnz	r0, a46 <__z_interrupt_stack_SIZEOF+0x206>
     a3c:	f001 ff9c 	bl	2978 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
     a40:	b108      	cbz	r0, a46 <__z_interrupt_stack_SIZEOF+0x206>
     a42:	b9af      	cbnz	r7, a70 <__z_interrupt_stack_SIZEOF+0x230>
     a44:	e00c      	b.n	a60 <__z_interrupt_stack_SIZEOF+0x220>
     a46:	b92f      	cbnz	r7, a54 <__z_interrupt_stack_SIZEOF+0x214>
     a48:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     a4c:	2800      	cmp	r0, #0
     a4e:	bf18      	it	ne
     a50:	f1aa 0a02 	subne.w	sl, sl, #2
     a54:	f04f 0900 	mov.w	r9, #0
     a58:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
     a5c:	464e      	mov	r6, r9
     a5e:	e007      	b.n	a70 <__z_interrupt_stack_SIZEOF+0x230>
     a60:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
     a64:	b120      	cbz	r0, a70 <__z_interrupt_stack_SIZEOF+0x230>
     a66:	2000      	movs	r0, #0
     a68:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
     a6c:	f1aa 0a02 	sub.w	sl, sl, #2
     a70:	9810      	ldr	r0, [sp, #64]	; 0x40
     a72:	eba0 0009 	sub.w	r0, r0, r9
     a76:	1e40      	subs	r0, r0, #1
     a78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a7c:	1b41      	subs	r1, r0, r5
     a7e:	0209      	lsls	r1, r1, #8
     a80:	17ca      	asrs	r2, r1, #31
     a82:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     a86:	1209      	asrs	r1, r1, #8
     a88:	4551      	cmp	r1, sl
     a8a:	db7c      	blt.n	b86 <__z_interrupt_stack_SIZEOF+0x346>
     a8c:	970a      	str	r7, [sp, #40]	; 0x28
     a8e:	4605      	mov	r5, r0
     a90:	f04f 0900 	mov.w	r9, #0
     a94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
     a96:	f001 fbed 	bl	2274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a9a:	1a28      	subs	r0, r5, r0
     a9c:	0200      	lsls	r0, r0, #8
     a9e:	17c1      	asrs	r1, r0, #31
     aa0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     aa4:	ea4f 2a20 	mov.w	sl, r0, asr #8
     aa8:	f002 f93e 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     aac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     ab0:	bf08      	it	eq
     ab2:	200d      	moveq	r0, #13
     ab4:	d00b      	beq.n	ace <__z_interrupt_stack_SIZEOF+0x28e>
     ab6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     aba:	3856      	subs	r0, #86	; 0x56
     abc:	bf08      	it	eq
     abe:	201c      	moveq	r0, #28
     ac0:	d005      	beq.n	ace <__z_interrupt_stack_SIZEOF+0x28e>
     ac2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     ac6:	389f      	subs	r0, #159	; 0x9f
     ac8:	bf14      	ite	ne
     aca:	2000      	movne	r0, #0
     acc:	2032      	moveq	r0, #50	; 0x32
     ace:	300b      	adds	r0, #11
     ad0:	4582      	cmp	sl, r0
     ad2:	da20      	bge.n	b16 <__z_interrupt_stack_SIZEOF+0x2d6>
     ad4:	f1bb 0f01 	cmp.w	fp, #1
     ad8:	d002      	beq.n	ae0 <__z_interrupt_stack_SIZEOF+0x2a0>
     ada:	980a      	ldr	r0, [sp, #40]	; 0x28
     adc:	b140      	cbz	r0, af0 <__z_interrupt_stack_SIZEOF+0x2b0>
     ade:	e012      	b.n	b06 <__z_interrupt_stack_SIZEOF+0x2c6>
     ae0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ae4:	d11c      	bne.n	b20 <__z_interrupt_stack_SIZEOF+0x2e0>
     ae6:	f640 1113 	movw	r1, #2323	; 0x913
     aea:	2070      	movs	r0, #112	; 0x70
     aec:	f002 faa2 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     af0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af4:	d007      	beq.n	b06 <__z_interrupt_stack_SIZEOF+0x2c6>
     af6:	1b60      	subs	r0, r4, r5
     af8:	0200      	lsls	r0, r0, #8
     afa:	17c1      	asrs	r1, r0, #31
     afc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b00:	1200      	asrs	r0, r0, #8
     b02:	2804      	cmp	r0, #4
     b04:	dd04      	ble.n	b10 <__z_interrupt_stack_SIZEOF+0x2d0>
     b06:	462c      	mov	r4, r5
     b08:	4620      	mov	r0, r4
     b0a:	f001 fbd9 	bl	22c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b0e:	e007      	b.n	b20 <__z_interrupt_stack_SIZEOF+0x2e0>
     b10:	2800      	cmp	r0, #0
     b12:	dc64      	bgt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b14:	e004      	b.n	b20 <__z_interrupt_stack_SIZEOF+0x2e0>
     b16:	462c      	mov	r4, r5
     b18:	4620      	mov	r0, r4
     b1a:	f001 fbd1 	bl	22c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b1e:	46b9      	mov	r9, r7
     b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b24:	d056      	beq.n	bd4 <__z_interrupt_stack_SIZEOF+0x394>
     b26:	9810      	ldr	r0, [sp, #64]	; 0x40
     b28:	9a11      	ldr	r2, [sp, #68]	; 0x44
     b2a:	1b00      	subs	r0, r0, r4
     b2c:	1b12      	subs	r2, r2, r4
     b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     b36:	2801      	cmp	r0, #1
     b38:	d351      	bcc.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b3e:	bf98      	it	ls
     b40:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
     b44:	d84b      	bhi.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b46:	4620      	mov	r0, r4
     b48:	f002 ffc5 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
     b4e:	4a4a      	ldr	r2, [pc, #296]	; (c78 <__z_interrupt_stack_SIZEOF+0x438>)
     b50:	1a0d      	subs	r5, r1, r0
     b52:	f04f 0a00 	mov.w	sl, #0
     b56:	1aaa      	subs	r2, r5, r2
     b58:	f17a 0200 	sbcs.w	r2, sl, #0
     b5c:	d318      	bcc.n	b90 <__z_interrupt_stack_SIZEOF+0x350>
     b5e:	4b46      	ldr	r3, [pc, #280]	; (c78 <__z_interrupt_stack_SIZEOF+0x438>)
     b60:	1a42      	subs	r2, r0, r1
     b62:	1ad3      	subs	r3, r2, r3
     b64:	f17a 0300 	sbcs.w	r3, sl, #0
     b68:	d312      	bcc.n	b90 <__z_interrupt_stack_SIZEOF+0x350>
     b6a:	4b42      	ldr	r3, [pc, #264]	; (c74 <__z_interrupt_stack_SIZEOF+0x434>)
     b6c:	42ab      	cmp	r3, r5
     b6e:	bf3e      	ittt	cc
     b70:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
     b74:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
     b78:	1845      	addcc	r5, r0, r1
     b7a:	d309      	bcc.n	b90 <__z_interrupt_stack_SIZEOF+0x350>
     b7c:	4293      	cmp	r3, r2
     b7e:	d232      	bcs.n	be6 <__z_interrupt_stack_SIZEOF+0x3a6>
     b80:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
     b84:	e000      	b.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
     b86:	e02a      	b.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b88:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
     b8c:	4408      	add	r0, r1
     b8e:	4245      	negs	r5, r0
     b90:	4f3a      	ldr	r7, [pc, #232]	; (c7c <__z_interrupt_stack_SIZEOF+0x43c>)
     b92:	7fb8      	ldrb	r0, [r7, #30]
     b94:	b360      	cbz	r0, bf0 <__z_interrupt_stack_SIZEOF+0x3b0>
     b96:	bf00      	nop
     b98:	f1bb 0f01 	cmp.w	fp, #1
     b9c:	d005      	beq.n	baa <__z_interrupt_stack_SIZEOF+0x36a>
     b9e:	2002      	movs	r0, #2
     ba0:	f001 fdca 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba4:	2001      	movs	r0, #1
     ba6:	f001 fdc7 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     baa:	45b0      	cmp	r8, r6
     bac:	d22c      	bcs.n	c08 <__z_interrupt_stack_SIZEOF+0x3c8>
     bae:	eba5 0106 	sub.w	r1, r5, r6
     bb2:	f04f 0002 	mov.w	r0, #2
     bb6:	f001 fd09 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bba:	b390      	cbz	r0, c22 <__z_interrupt_stack_SIZEOF+0x3e2>
     bbc:	f1b8 0f00 	cmp.w	r8, #0
     bc0:	bf1c      	itt	ne
     bc2:	eba5 0108 	subne.w	r1, r5, r8
     bc6:	2001      	movne	r0, #1
     bc8:	d034      	beq.n	c34 <__z_interrupt_stack_SIZEOF+0x3f4>
     bca:	bf00      	nop
     bcc:	f001 fcfe 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bd0:	b338      	cbz	r0, c22 <__z_interrupt_stack_SIZEOF+0x3e2>
     bd2:	e02f      	b.n	c34 <__z_interrupt_stack_SIZEOF+0x3f4>
     bd4:	f640 2126 	movw	r1, #2598	; 0xa26
     bd8:	2070      	movs	r0, #112	; 0x70
     bda:	f002 fa2b 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bde:	b01b      	add	sp, #108	; 0x6c
     be0:	2000      	movs	r0, #0
     be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     be6:	f640 21fa 	movw	r1, #2810	; 0xafa
     bea:	2070      	movs	r0, #112	; 0x70
     bec:	f002 fa22 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bf0:	45b0      	cmp	r8, r6
     bf2:	bf34      	ite	cc
     bf4:	4630      	movcc	r0, r6
     bf6:	4640      	movcs	r0, r8
     bf8:	301e      	adds	r0, #30
     bfa:	42a8      	cmp	r0, r5
     bfc:	dbcc      	blt.n	b98 <__z_interrupt_stack_SIZEOF+0x358>
     bfe:	f640 213a 	movw	r1, #2618	; 0xa3a
     c02:	2070      	movs	r0, #112	; 0x70
     c04:	f002 fa16 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c08:	d90c      	bls.n	c24 <__z_interrupt_stack_SIZEOF+0x3e4>
     c0a:	eba5 0108 	sub.w	r1, r5, r8
     c0e:	2001      	movs	r0, #1
     c10:	f001 fcdc 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c14:	b128      	cbz	r0, c22 <__z_interrupt_stack_SIZEOF+0x3e2>
     c16:	2e00      	cmp	r6, #0
     c18:	bf1c      	itt	ne
     c1a:	1ba9      	subne	r1, r5, r6
     c1c:	2002      	movne	r0, #2
     c1e:	d009      	beq.n	c34 <__z_interrupt_stack_SIZEOF+0x3f4>
     c20:	e7d4      	b.n	bcc <__z_interrupt_stack_SIZEOF+0x38c>
     c22:	e041      	b.n	ca8 <__z_interrupt_stack_SIZEOF+0x468>
     c24:	ea56 0008 	orrs.w	r0, r6, r8
     c28:	d004      	beq.n	c34 <__z_interrupt_stack_SIZEOF+0x3f4>
     c2a:	f640 1176 	movw	r1, #2422	; 0x976
     c2e:	2070      	movs	r0, #112	; 0x70
     c30:	f002 fa00 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c34:	4629      	mov	r1, r5
     c36:	2000      	movs	r0, #0
     c38:	f001 fcc8 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c3c:	b3a0      	cbz	r0, ca8 <__z_interrupt_stack_SIZEOF+0x468>
     c3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
     c40:	2601      	movs	r6, #1
     c42:	2800      	cmp	r0, #0
     c44:	bf04      	itt	eq
     c46:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
     c4a:	2800      	cmpeq	r0, #0
     c4c:	d002      	beq.n	c54 <__z_interrupt_stack_SIZEOF+0x414>
     c4e:	f1b9 0f00 	cmp.w	r9, #0
     c52:	d034      	beq.n	cbe <__z_interrupt_stack_SIZEOF+0x47e>
     c54:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     c58:	b118      	cbz	r0, c62 <__z_interrupt_stack_SIZEOF+0x422>
     c5a:	f002 f86b 	bl	2d34 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c5e:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
     c62:	f1b9 0f00 	cmp.w	r9, #0
     c66:	e00f      	b.n	c88 <__z_interrupt_stack_SIZEOF+0x448>
     c68:	40000508 	.word	0x40000508
     c6c:	20000010 	.word	0x20000010
     c70:	20000480 	.word	0x20000480
     c74:	1e847fff 	.word	0x1e847fff
     c78:	0f424000 	.word	0x0f424000
     c7c:	20000880 	.word	0x20000880
     c80:	f0bdc000 	.word	0xf0bdc000
     c84:	1e848000 	.word	0x1e848000
     c88:	d01c      	beq.n	cc4 <__z_interrupt_stack_SIZEOF+0x484>
     c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
     c8c:	1a20      	subs	r0, r4, r0
     c8e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c92:	2005      	movs	r0, #5
     c94:	f001 fc9a 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c98:	b360      	cbz	r0, cf4 <__z_interrupt_stack_SIZEOF+0x4b4>
     c9a:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     c9e:	2800      	cmp	r0, #0
     ca0:	bf08      	it	eq
     ca2:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
     ca6:	e015      	b.n	cd4 <__z_interrupt_stack_SIZEOF+0x494>
     ca8:	e7ff      	b.n	caa <__z_interrupt_stack_SIZEOF+0x46a>
     caa:	2002      	movs	r0, #2
     cac:	f001 fd44 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cb0:	2001      	movs	r0, #1
     cb2:	f001 fd41 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cb6:	b01b      	add	sp, #108	; 0x6c
     cb8:	2000      	movs	r0, #0
     cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cbe:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
     cc2:	b190      	cbz	r0, cea <__z_interrupt_stack_SIZEOF+0x4aa>
     cc4:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
     cc8:	b120      	cbz	r0, cd4 <__z_interrupt_stack_SIZEOF+0x494>
     cca:	2005      	movs	r0, #5
     ccc:	f001 fd34 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cd0:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
     cd4:	eba5 0008 	sub.w	r0, r5, r8
     cd8:	f1a0 0119 	sub.w	r1, r0, #25
     cdc:	2900      	cmp	r1, #0
     cde:	dc0e      	bgt.n	cfe <__z_interrupt_stack_SIZEOF+0x4be>
     ce0:	f640 2163 	movw	r1, #2659	; 0xa63
     ce4:	2070      	movs	r0, #112	; 0x70
     ce6:	f002 f9a5 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cea:	f002 f83f 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     cee:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
     cf2:	e7b6      	b.n	c62 <__z_interrupt_stack_SIZEOF+0x422>
     cf4:	f44f 713e 	mov.w	r1, #760	; 0x2f8
     cf8:	2070      	movs	r0, #112	; 0x70
     cfa:	f002 f99b 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cfe:	2003      	movs	r0, #3
     d00:	f001 fc64 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d04:	b1c0      	cbz	r0, d38 <__z_interrupt_stack_SIZEOF+0x4f8>
     d06:	480f      	ldr	r0, [pc, #60]	; (d44 <__z_interrupt_stack_SIZEOF+0x504>)
     d08:	6880      	ldr	r0, [r0, #8]
     d0a:	f8c0 a000 	str.w	sl, [r0]
     d0e:	480e      	ldr	r0, [pc, #56]	; (d48 <__z_interrupt_stack_SIZEOF+0x508>)
     d10:	f8c0 a000 	str.w	sl, [r0]
     d14:	ac0e      	add	r4, sp, #56	; 0x38
     d16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     d1a:	6038      	str	r0, [r7, #0]
     d1c:	6079      	str	r1, [r7, #4]
     d1e:	60ba      	str	r2, [r7, #8]
     d20:	60fb      	str	r3, [r7, #12]
     d22:	ac12      	add	r4, sp, #72	; 0x48
     d24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     d28:	6138      	str	r0, [r7, #16]
     d2a:	6179      	str	r1, [r7, #20]
     d2c:	61ba      	str	r2, [r7, #24]
     d2e:	61fb      	str	r3, [r7, #28]
     d30:	b01b      	add	sp, #108	; 0x6c
     d32:	2001      	movs	r0, #1
     d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d38:	f640 216b 	movw	r1, #2667	; 0xa6b
     d3c:	2070      	movs	r0, #112	; 0x70
     d3e:	f002 f979 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d42:	0000      	.short	0x0000
     d44:	20000010 	.word	0x20000010
     d48:	40000508 	.word	0x40000508
     d4c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d50:	4614      	mov	r4, r2
     d52:	460d      	mov	r5, r1
     d54:	f04f 0a00 	mov.w	sl, #0
     d58:	890a      	ldrh	r2, [r1, #8]
     d5a:	4651      	mov	r1, sl
     d5c:	f362 411f 	bfi	r1, r2, #16, #16
     d60:	7aaa      	ldrb	r2, [r5, #10]
     d62:	46d1      	mov	r9, sl
     d64:	f362 0907 	bfi	r9, r2, #0, #8
     d68:	7aea      	ldrb	r2, [r5, #11]
     d6a:	4606      	mov	r6, r0
     d6c:	f362 290f 	bfi	r9, r2, #8, #8
     d70:	782a      	ldrb	r2, [r5, #0]
     d72:	b083      	sub	sp, #12
     d74:	6840      	ldr	r0, [r0, #4]
     d76:	f8c4 a000 	str.w	sl, [r4]
     d7a:	f362 4917 	bfi	r9, r2, #16, #8
     d7e:	f8c4 a004 	str.w	sl, [r4, #4]
     d82:	f8c4 9010 	str.w	r9, [r4, #16]
     d86:	e9c4 0102 	strd	r0, r1, [r4, #8]
     d8a:	4f9d      	ldr	r7, [pc, #628]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     d8c:	6870      	ldr	r0, [r6, #4]
     d8e:	fba0 8907 	umull	r8, r9, r0, r7
     d92:	6830      	ldr	r0, [r6, #0]
     d94:	f002 fe9f 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     d98:	eb10 0108 	adds.w	r1, r0, r8
     d9c:	eb4a 0209 	adc.w	r2, sl, r9
     da0:	7828      	ldrb	r0, [r5, #0]
     da2:	ea4f 0967 	mov.w	r9, r7, asr #1
     da6:	f1c9 0b00 	rsb	fp, r9, #0
     daa:	b170      	cbz	r0, dca <__z_interrupt_stack_SIZEOF+0x58a>
     dac:	89e0      	ldrh	r0, [r4, #14]
     dae:	f894 8011 	ldrb.w	r8, [r4, #17]
     db2:	43c0      	mvns	r0, r0
     db4:	f8d5 a004 	ldr.w	sl, [r5, #4]
     db8:	f104 020c 	add.w	r2, r4, #12
     dbc:	4548      	cmp	r0, r9
     dbe:	dd7c      	ble.n	eba <__z_interrupt_stack_SIZEOF+0x67a>
     dc0:	f240 519f 	movw	r1, #1439	; 0x59f
     dc4:	2070      	movs	r0, #112	; 0x70
     dc6:	f002 f935 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dca:	f8df c238 	ldr.w	ip, [pc, #568]	; 1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
     dce:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
     dd2:	eb11 0a0c 	adds.w	sl, r1, ip
     dd6:	f142 0c00 	adc.w	ip, r2, #0
     dda:	ebb0 0a0a 	subs.w	sl, r0, sl
     dde:	eb73 0c0c 	sbcs.w	ip, r3, ip
     de2:	d272      	bcs.n	eca <__z_interrupt_stack_SIZEOF+0x68a>
     de4:	1a41      	subs	r1, r0, r1
     de6:	eb73 0102 	sbcs.w	r1, r3, r2
     dea:	d36e      	bcc.n	eca <__z_interrupt_stack_SIZEOF+0x68a>
     dec:	ebb0 0608 	subs.w	r6, r0, r8
     df0:	42b7      	cmp	r7, r6
     df2:	d82b      	bhi.n	e4c <__z_interrupt_stack_SIZEOF+0x60c>
     df4:	89e0      	ldrh	r0, [r4, #14]
     df6:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
     dfa:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
     dfe:	43c1      	mvns	r1, r0
     e00:	4a81      	ldr	r2, [pc, #516]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     e02:	eb08 0001 	add.w	r0, r8, r1
     e06:	4542      	cmp	r2, r8
     e08:	d32b      	bcc.n	e62 <__z_interrupt_stack_SIZEOF+0x622>
     e0a:	4549      	cmp	r1, r9
     e0c:	dcd8      	bgt.n	dc0 <__z_interrupt_stack_SIZEOF+0x580>
     e0e:	4559      	cmp	r1, fp
     e10:	db66      	blt.n	ee0 <__z_interrupt_stack_SIZEOF+0x6a0>
     e12:	4287      	cmp	r7, r0
     e14:	bfdc      	itt	le
     e16:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e1a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e1e:	dd05      	ble.n	e2c <__z_interrupt_stack_SIZEOF+0x5ec>
     e20:	2800      	cmp	r0, #0
     e22:	bfbc      	itt	lt
     e24:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e28:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e2c:	466a      	mov	r2, sp
     e2e:	a901      	add	r1, sp, #4
     e30:	f001 f8b6 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e34:	89e0      	ldrh	r0, [r4, #14]
     e36:	f89d 1000 	ldrb.w	r1, [sp]
     e3a:	1a30      	subs	r0, r6, r0
     e3c:	1a40      	subs	r0, r0, r1
     e3e:	1e40      	subs	r0, r0, #1
     e40:	42b8      	cmp	r0, r7
     e42:	d302      	bcc.n	e4a <__z_interrupt_stack_SIZEOF+0x60a>
     e44:	68a0      	ldr	r0, [r4, #8]
     e46:	1c40      	adds	r0, r0, #1
     e48:	60a0      	str	r0, [r4, #8]
     e4a:	4646      	mov	r6, r8
     e4c:	89e0      	ldrh	r0, [r4, #14]
     e4e:	4b6e      	ldr	r3, [pc, #440]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     e50:	43c1      	mvns	r1, r0
     e52:	686d      	ldr	r5, [r5, #4]
     e54:	f894 8011 	ldrb.w	r8, [r4, #17]
     e58:	1870      	adds	r0, r6, r1
     e5a:	f104 020c 	add.w	r2, r4, #12
     e5e:	429e      	cmp	r6, r3
     e60:	d904      	bls.n	e6c <__z_interrupt_stack_SIZEOF+0x62c>
     e62:	f240 519e 	movw	r1, #1438	; 0x59e
     e66:	2070      	movs	r0, #112	; 0x70
     e68:	f002 f8e4 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e6c:	4549      	cmp	r1, r9
     e6e:	dca7      	bgt.n	dc0 <__z_interrupt_stack_SIZEOF+0x580>
     e70:	4559      	cmp	r1, fp
     e72:	db35      	blt.n	ee0 <__z_interrupt_stack_SIZEOF+0x6a0>
     e74:	4287      	cmp	r7, r0
     e76:	bfdc      	itt	le
     e78:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e7c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e80:	dd05      	ble.n	e8e <__z_interrupt_stack_SIZEOF+0x64e>
     e82:	2800      	cmp	r0, #0
     e84:	bfbc      	itt	lt
     e86:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e8a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e8e:	4621      	mov	r1, r4
     e90:	f001 f886 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e94:	6820      	ldr	r0, [r4, #0]
     e96:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e9a:	1970      	adds	r0, r6, r5
     e9c:	1c40      	adds	r0, r0, #1
     e9e:	6021      	str	r1, [r4, #0]
     ea0:	f1b8 0f00 	cmp.w	r8, #0
     ea4:	bf08      	it	eq
     ea6:	307a      	addeq	r0, #122	; 0x7a
     ea8:	d004      	beq.n	eb4 <__z_interrupt_stack_SIZEOF+0x674>
     eaa:	f1b8 0f01 	cmp.w	r8, #1
     eae:	bf08      	it	eq
     eb0:	3048      	addeq	r0, #72	; 0x48
     eb2:	d13a      	bne.n	f2a <__z_interrupt_stack_SIZEOF+0x6ea>
     eb4:	f001 f858 	bl	1f68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     eb8:	e001      	b.n	ebe <__z_interrupt_stack_SIZEOF+0x67e>
     eba:	e00e      	b.n	eda <__z_interrupt_stack_SIZEOF+0x69a>
     ebc:	e005      	b.n	eca <__z_interrupt_stack_SIZEOF+0x68a>
     ebe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ec2:	6060      	str	r0, [r4, #4]
     ec4:	b007      	add	sp, #28
     ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eca:	6830      	ldr	r0, [r6, #0]
     ecc:	1e40      	subs	r0, r0, #1
     ece:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ed2:	6020      	str	r0, [r4, #0]
     ed4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     ed8:	e7f3      	b.n	ec2 <__z_interrupt_stack_SIZEOF+0x682>
     eda:	4601      	mov	r1, r0
     edc:	4558      	cmp	r0, fp
     ede:	da04      	bge.n	eea <__z_interrupt_stack_SIZEOF+0x6aa>
     ee0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
     ee4:	2070      	movs	r0, #112	; 0x70
     ee6:	f002 f8a5 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eea:	4287      	cmp	r7, r0
     eec:	bfdc      	itt	le
     eee:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     ef2:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     ef6:	dd05      	ble.n	f04 <__z_interrupt_stack_SIZEOF+0x6c4>
     ef8:	2800      	cmp	r0, #0
     efa:	bfbc      	itt	lt
     efc:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     f00:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     f04:	4621      	mov	r1, r4
     f06:	f001 f84b 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f0a:	6820      	ldr	r0, [r4, #0]
     f0c:	f1b8 0f00 	cmp.w	r8, #0
     f10:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f14:	f10a 0001 	add.w	r0, sl, #1
     f18:	6021      	str	r1, [r4, #0]
     f1a:	bf08      	it	eq
     f1c:	307a      	addeq	r0, #122	; 0x7a
     f1e:	d009      	beq.n	f34 <__z_interrupt_stack_SIZEOF+0x6f4>
     f20:	f1b8 0f01 	cmp.w	r8, #1
     f24:	bf08      	it	eq
     f26:	3048      	addeq	r0, #72	; 0x48
     f28:	d004      	beq.n	f34 <__z_interrupt_stack_SIZEOF+0x6f4>
     f2a:	f240 6139 	movw	r1, #1593	; 0x639
     f2e:	2070      	movs	r0, #112	; 0x70
     f30:	f002 f880 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f34:	f001 f818 	bl	1f68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f38:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f3c:	6061      	str	r1, [r4, #4]
     f3e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
     f42:	aa01      	add	r2, sp, #4
     f44:	4669      	mov	r1, sp
     f46:	4648      	mov	r0, r9
     f48:	6837      	ldr	r7, [r6, #0]
     f4a:	f001 f829 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f4e:	f001 fd1d 	bl	298c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
     f52:	f001 f809 	bl	1f68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f56:	4680      	mov	r8, r0
     f58:	482c      	ldr	r0, [pc, #176]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     f5a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
     f5e:	2920      	cmp	r1, #32
     f60:	d02a      	beq.n	fb8 <__z_interrupt_stack_SIZEOF+0x778>
     f62:	68c0      	ldr	r0, [r0, #12]
     f64:	1d40      	adds	r0, r0, #5
     f66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f6a:	bf00      	nop
     f6c:	e9d4 2100 	ldrd	r2, r1, [r4]
     f70:	1a89      	subs	r1, r1, r2
     f72:	4401      	add	r1, r0
     f74:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     f78:	e9c4 0100 	strd	r0, r1, [r4]
     f7c:	6831      	ldr	r1, [r6, #0]
     f7e:	4281      	cmp	r1, r0
     f80:	d902      	bls.n	f88 <__z_interrupt_stack_SIZEOF+0x748>
     f82:	68a0      	ldr	r0, [r4, #8]
     f84:	1c40      	adds	r0, r0, #1
     f86:	60a0      	str	r0, [r4, #8]
     f88:	6832      	ldr	r2, [r6, #0]
     f8a:	6928      	ldr	r0, [r5, #16]
     f8c:	4621      	mov	r1, r4
     f8e:	9b06      	ldr	r3, [sp, #24]
     f90:	f7ff f9fa 	bl	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     f94:	2800      	cmp	r0, #0
     f96:	bf1c      	itt	ne
     f98:	b007      	addne	sp, #28
     f9a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f9e:	e9d4 1000 	ldrd	r1, r0, [r4]
     fa2:	1a40      	subs	r0, r0, r1
     fa4:	6831      	ldr	r1, [r6, #0]
     fa6:	6021      	str	r1, [r4, #0]
     fa8:	6831      	ldr	r1, [r6, #0]
     faa:	4408      	add	r0, r1
     fac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fb0:	6060      	str	r0, [r4, #4]
     fb2:	b007      	add	sp, #28
     fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fb8:	3709      	adds	r7, #9
     fba:	f1b9 0f00 	cmp.w	r9, #0
     fbe:	d016      	beq.n	fee <__z_interrupt_stack_SIZEOF+0x7ae>
     fc0:	f001 ffc0 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     fc4:	b998      	cbnz	r0, fee <__z_interrupt_stack_SIZEOF+0x7ae>
     fc6:	f001 feaf 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
     fca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
     fce:	bf08      	it	eq
     fd0:	200d      	moveq	r0, #13
     fd2:	d00b      	beq.n	fec <__z_interrupt_stack_SIZEOF+0x7ac>
     fd4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
     fd8:	3856      	subs	r0, #86	; 0x56
     fda:	bf08      	it	eq
     fdc:	201c      	moveq	r0, #28
     fde:	d005      	beq.n	fec <__z_interrupt_stack_SIZEOF+0x7ac>
     fe0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
     fe4:	389f      	subs	r0, #159	; 0x9f
     fe6:	bf14      	ite	ne
     fe8:	2000      	movne	r0, #0
     fea:	2032      	moveq	r0, #50	; 0x32
     fec:	4407      	add	r7, r0
     fee:	9800      	ldr	r0, [sp, #0]
     ff0:	4580      	cmp	r8, r0
     ff2:	bf84      	itt	hi
     ff4:	eba8 0000 	subhi.w	r0, r8, r0
     ff8:	4407      	addhi	r7, r0
     ffa:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     ffe:	e7b5      	b.n	f6c <__z_interrupt_stack_SIZEOF+0x72c>
    1000:	1e848000 	.word	0x1e848000
    1004:	0f424000 	.word	0x0f424000
    1008:	1e847fff 	.word	0x1e847fff
    100c:	20000880 	.word	0x20000880
    1010:	b570      	push	{r4, r5, r6, lr}
    1012:	4d1e      	ldr	r5, [pc, #120]	; (108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>)
    1014:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1018:	2820      	cmp	r0, #32
    101a:	bf18      	it	ne
    101c:	bd70      	popne	{r4, r5, r6, pc}
    101e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1022:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1026:	4428      	add	r0, r5
    1028:	f890 4020 	ldrb.w	r4, [r0, #32]
    102c:	2c20      	cmp	r4, #32
    102e:	d027      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    1030:	4b17      	ldr	r3, [pc, #92]	; (1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    1032:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1036:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    103a:	7849      	ldrb	r1, [r1, #1]
    103c:	f880 1020 	strb.w	r1, [r0, #32]
    1040:	20ff      	movs	r0, #255	; 0xff
    1042:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1046:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    104a:	4621      	mov	r1, r4
    104c:	2002      	movs	r0, #2
    104e:	f000 f891 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1052:	2000      	movs	r0, #0
    1054:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1058:	77a8      	strb	r0, [r5, #30]
    105a:	490e      	ldr	r1, [pc, #56]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    105c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1060:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1064:	7e00      	ldrb	r0, [r0, #24]
    1066:	2800      	cmp	r0, #0
    1068:	bf08      	it	eq
    106a:	f002 fb59 	bleq	3720 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    106e:	2000      	movs	r0, #0
    1070:	4909      	ldr	r1, [pc, #36]	; (1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
    1072:	6849      	ldr	r1, [r1, #4]
    1074:	2900      	cmp	r1, #0
    1076:	bf08      	it	eq
    1078:	bd70      	popeq	{r4, r5, r6, pc}
    107a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    107e:	4708      	bx	r1
    1080:	f240 3132 	movw	r1, #818	; 0x332
    1084:	2070      	movs	r0, #112	; 0x70
    1086:	f001 ffd5 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    108a:	0000      	.short	0x0000
    108c:	20000880 	.word	0x20000880
    1090:	20000800 	.word	0x20000800
    1094:	20000480 	.word	0x20000480
    1098:	20000010 	.word	0x20000010
    109c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10a0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    10a4:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    10a8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    10ac:	4440      	add	r0, r8
    10ae:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    10b2:	2c20      	cmp	r4, #32
    10b4:	bf08      	it	eq
    10b6:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    10ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    10be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    10c2:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    10c6:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    10ca:	2607      	movs	r6, #7
    10cc:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    10d0:	2801      	cmp	r0, #1
    10d2:	d00e      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10d4:	2804      	cmp	r0, #4
    10d6:	bf08      	it	eq
    10d8:	2602      	moveq	r6, #2
    10da:	d00a      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10dc:	2805      	cmp	r0, #5
    10de:	bf0c      	ite	eq
    10e0:	2603      	moveq	r6, #3
    10e2:	2806      	cmpne	r0, #6
    10e4:	d005      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10e6:	f640 01dd 	movw	r1, #2269	; 0x8dd
    10ea:	f04f 0070 	mov.w	r0, #112	; 0x70
    10ee:	f001 ffa1 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	f1bb 0f00 	cmp.w	fp, #0
    10f6:	bf18      	it	ne
    10f8:	f3af 8000 	nopne.w
    10fc:	f3ef 8010 	mrs	r0, PRIMASK
    1100:	b672      	cpsid	i
    1102:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1106:	784a      	ldrb	r2, [r1, #1]
    1108:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    110c:	4441      	add	r1, r8
    110e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1112:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1116:	42a2      	cmp	r2, r4
    1118:	bf04      	itt	eq
    111a:	2220      	moveq	r2, #32
    111c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1120:	b1c0      	cbz	r0, 1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    1122:	462a      	mov	r2, r5
    1124:	4621      	mov	r1, r4
    1126:	2001      	movs	r0, #1
    1128:	f000 f824 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    112c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1130:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1134:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1138:	6840      	ldr	r0, [r0, #4]
    113a:	4631      	mov	r1, r6
    113c:	4790      	blx	r2
    113e:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1142:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1146:	4440      	add	r0, r8
    1148:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    114c:	2c20      	cmp	r4, #32
    114e:	d1ba      	bne.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
    1150:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1154:	4806      	ldr	r0, [pc, #24]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
    1156:	2800      	cmp	r0, #0
    1158:	bf18      	it	ne
    115a:	f3af 8000 	nopne.w
    115e:	b662      	cpsie	i
    1160:	e7df      	b.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
    1162:	0000      	.short	0x0000
    1164:	20000880 	.word	0x20000880
    1168:	00000000 	.word	0x00000000
    116c:	20000800 	.word	0x20000800
    1170:	00000000 	.word	0x00000000
    1174:	f8df c058 	ldr.w	ip, [pc, #88]	; 11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
    1178:	b510      	push	{r4, lr}
    117a:	2300      	movs	r3, #0
    117c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1180:	2807      	cmp	r0, #7
    1182:	d21f      	bcs.n	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
    1184:	e8df f000 	tbb	[pc, r0]
    1188:	05050505 	.word	0x05050505
    118c:	00040404 	.word	0x00040404
    1190:	2301      	movs	r3, #1
    1192:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1196:	2b00      	cmp	r3, #0
    1198:	bf08      	it	eq
    119a:	bd10      	popeq	{r4, pc}
    119c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    11a0:	480c      	ldr	r0, [pc, #48]	; (11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>)
    11a2:	4402      	add	r2, r0
    11a4:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    11a8:	2820      	cmp	r0, #32
    11aa:	bf0e      	itee	eq
    11ac:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    11b0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    11b4:	7041      	strbne	r1, [r0, #1]
    11b6:	2020      	movs	r0, #32
    11b8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    11bc:	7058      	strb	r0, [r3, #1]
    11be:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    11c2:	bd10      	pop	{r4, pc}
    11c4:	f240 216e 	movw	r1, #622	; 0x26e
    11c8:	2070      	movs	r0, #112	; 0x70
    11ca:	f001 ff33 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ce:	0000      	.short	0x0000
    11d0:	20000800 	.word	0x20000800
    11d4:	20000880 	.word	0x20000880
    11d8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    11dc:	460f      	mov	r7, r1
    11de:	4680      	mov	r8, r0
    11e0:	f8df a158 	ldr.w	sl, [pc, #344]	; 133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
    11e4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    11e8:	4450      	add	r0, sl
    11ea:	f1b8 0f01 	cmp.w	r8, #1
    11ee:	f890 4020 	ldrb.w	r4, [r0, #32]
    11f2:	4625      	mov	r5, r4
    11f4:	bf18      	it	ne
    11f6:	f1b8 0f02 	cmpne.w	r8, #2
    11fa:	d005      	beq.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    11fc:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1200:	f04f 0070 	mov.w	r0, #112	; 0x70
    1204:	f001 ff16 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1208:	f04f 0b00 	mov.w	fp, #0
    120c:	2d20      	cmp	r5, #32
    120e:	d042      	beq.n	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
    1210:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1214:	2600      	movs	r6, #0
    1216:	2800      	cmp	r0, #0
    1218:	bf08      	it	eq
    121a:	2602      	moveq	r6, #2
    121c:	f001 f82a 	bl	2274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1220:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1340 <CONFIG_FPROTECT_BLOCK_SIZE+0x340>
    1224:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1228:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    122c:	688a      	ldr	r2, [r1, #8]
    122e:	68c9      	ldr	r1, [r1, #12]
    1230:	1a12      	subs	r2, r2, r0
    1232:	1a09      	subs	r1, r1, r0
    1234:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1238:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    123c:	4296      	cmp	r6, r2
    123e:	bf99      	ittee	ls
    1240:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1244:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1248:	4a3e      	ldrhi	r2, [pc, #248]	; (1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>)
    124a:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    124e:	d920      	bls.n	1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
    1250:	4622      	mov	r2, r4
    1252:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1256:	784c      	ldrb	r4, [r1, #1]
    1258:	2c20      	cmp	r4, #32
    125a:	d012      	beq.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
    125c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1260:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1264:	688b      	ldr	r3, [r1, #8]
    1266:	68c9      	ldr	r1, [r1, #12]
    1268:	1a1b      	subs	r3, r3, r0
    126a:	1a09      	subs	r1, r1, r0
    126c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1270:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1274:	429e      	cmp	r6, r3
    1276:	bf9c      	itt	ls
    1278:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    127c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1280:	d8e6      	bhi.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1282:	2a20      	cmp	r2, #32
    1284:	d005      	beq.n	1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
    1286:	463b      	mov	r3, r7
    1288:	2120      	movs	r1, #32
    128a:	2004      	movs	r0, #4
    128c:	f7ff f840 	bl	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
    1290:	4604      	mov	r4, r0
    1292:	42ac      	cmp	r4, r5
    1294:	d116      	bne.n	12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>
    1296:	482c      	ldr	r0, [pc, #176]	; (1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>)
    1298:	2800      	cmp	r0, #0
    129a:	bf18      	it	ne
    129c:	f3af 8000 	nopne.w
    12a0:	f000 ffe8 	bl	2274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12a4:	4603      	mov	r3, r0
    12a6:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    12aa:	2820      	cmp	r0, #32
    12ac:	d00d      	beq.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    12ae:	f8da 0008 	ldr.w	r0, [sl, #8]
    12b2:	1c99      	adds	r1, r3, #2
    12b4:	1a08      	subs	r0, r1, r0
    12b6:	0200      	lsls	r0, r0, #8
    12b8:	17c1      	asrs	r1, r0, #31
    12ba:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    12be:	1200      	asrs	r0, r0, #8
    12c0:	2800      	cmp	r0, #0
    12c2:	dd02      	ble.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    12c4:	2000      	movs	r0, #0
    12c6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    12ca:	2d20      	cmp	r5, #32
    12cc:	d014      	beq.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
    12ce:	462a      	mov	r2, r5
    12d0:	4641      	mov	r1, r8
    12d2:	4618      	mov	r0, r3
    12d4:	f7ff fab2 	bl	83c <CONFIG_ISR_STACK_SIZE+0x3c>
    12d8:	2800      	cmp	r0, #0
    12da:	bf1e      	ittt	ne
    12dc:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    12e0:	2002      	movne	r0, #2
    12e2:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    12e6:	463b      	mov	r3, r7
    12e8:	462a      	mov	r2, r5
    12ea:	2120      	movs	r1, #32
    12ec:	2004      	movs	r0, #4
    12ee:	f7ff f80f 	bl	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
    12f2:	2000      	movs	r0, #0
    12f4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    12f8:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    12fc:	b118      	cbz	r0, 1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
    12fe:	f001 fd19 	bl	2d34 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1302:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1306:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    130a:	b120      	cbz	r0, 1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
    130c:	2005      	movs	r0, #5
    130e:	f001 fa13 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1312:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1316:	2004      	movs	r0, #4
    1318:	f001 fa0e 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    131c:	f001 fa7c 	bl	2818 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1320:	2020      	movs	r0, #32
    1322:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1326:	4809      	ldr	r0, [pc, #36]	; (134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>)
    1328:	6880      	ldr	r0, [r0, #8]
    132a:	f8c0 b000 	str.w	fp, [r0]
    132e:	4808      	ldr	r0, [pc, #32]	; (1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>)
    1330:	f8c0 b000 	str.w	fp, [r0]
    1334:	2001      	movs	r0, #1
    1336:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    133a:	0000      	.short	0x0000
    133c:	20000880 	.word	0x20000880
    1340:	20000480 	.word	0x20000480
    1344:	20000800 	.word	0x20000800
    1348:	00000000 	.word	0x00000000
    134c:	20000010 	.word	0x20000010
    1350:	40000508 	.word	0x40000508

00001354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1358:	4e69      	ldr	r6, [pc, #420]	; (1500 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    135a:	4607      	mov	r7, r0
    135c:	b08d      	sub	sp, #52	; 0x34
    135e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1362:	4688      	mov	r8, r1
    1364:	2820      	cmp	r0, #32
    1366:	d055      	beq.n	1414 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    1368:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    136c:	f106 0408 	add.w	r4, r6, #8
    1370:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1374:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    1378:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    137c:	2020      	movs	r0, #32
    137e:	f88d 0020 	strb.w	r0, [sp, #32]
    1382:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    1386:	aa0a      	add	r2, sp, #40	; 0x28
    1388:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    138c:	4430      	add	r0, r6
    138e:	a909      	add	r1, sp, #36	; 0x24
    1390:	f890 5020 	ldrb.w	r5, [r0, #32]
    1394:	68f0      	ldr	r0, [r6, #12]
    1396:	9002      	str	r0, [sp, #8]
    1398:	6830      	ldr	r0, [r6, #0]
    139a:	4438      	add	r0, r7
    139c:	f000 fe00 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    13a0:	f8da 000c 	ldr.w	r0, [sl, #12]
    13a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    13a6:	2f65      	cmp	r7, #101	; 0x65
    13a8:	4408      	add	r0, r1
    13aa:	d338      	bcc.n	141e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    13ac:	4a55      	ldr	r2, [pc, #340]	; (1504 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    13ae:	2100      	movs	r1, #0
    13b0:	1bd2      	subs	r2, r2, r7
    13b2:	eb71 0201 	sbcs.w	r2, r1, r1
    13b6:	d332      	bcc.n	141e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    13b8:	6822      	ldr	r2, [r4, #0]
    13ba:	1a82      	subs	r2, r0, r2
    13bc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    13c0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    13c4:	d82b      	bhi.n	141e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    13c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13ca:	6060      	str	r0, [r4, #4]
    13cc:	4630      	mov	r0, r6
    13ce:	f884 8010 	strb.w	r8, [r4, #16]
    13d2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    13d6:	f10d 0a20 	add.w	sl, sp, #32
    13da:	2d20      	cmp	r5, #32
    13dc:	bf1c      	itt	ne
    13de:	494a      	ldrne	r1, [pc, #296]	; (1508 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    13e0:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13e4:	d050      	beq.n	1488 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    13e6:	bf00      	nop
    13e8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    13ec:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    13f0:	6861      	ldr	r1, [r4, #4]
    13f2:	f8d8 6008 	ldr.w	r6, [r8, #8]
    13f6:	f108 0008 	add.w	r0, r8, #8
    13fa:	1a71      	subs	r1, r6, r1
    13fc:	0209      	lsls	r1, r1, #8
    13fe:	17ca      	asrs	r2, r1, #31
    1400:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1404:	1209      	asrs	r1, r1, #8
    1406:	d42d      	bmi.n	1464 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    1408:	89c0      	ldrh	r0, [r0, #14]
    140a:	2800      	cmp	r0, #0
    140c:	d03c      	beq.n	1488 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    140e:	89e0      	ldrh	r0, [r4, #14]
    1410:	b148      	cbz	r0, 1426 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    1412:	e039      	b.n	1488 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1414:	f640 3168 	movw	r1, #2920	; 0xb68
    1418:	2070      	movs	r0, #112	; 0x70
    141a:	f001 fe0b 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    141e:	b00d      	add	sp, #52	; 0x34
    1420:	2001      	movs	r0, #1
    1422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1426:	6820      	ldr	r0, [r4, #0]
    1428:	900c      	str	r0, [sp, #48]	; 0x30
    142a:	f001 fc7d 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    142e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1432:	bf08      	it	eq
    1434:	200d      	moveq	r0, #13
    1436:	d00b      	beq.n	1450 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1438:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    143c:	3856      	subs	r0, #86	; 0x56
    143e:	bf08      	it	eq
    1440:	201c      	moveq	r0, #28
    1442:	d005      	beq.n	1450 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    1444:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1448:	389f      	subs	r0, #159	; 0x9f
    144a:	bf14      	ite	ne
    144c:	2000      	movne	r0, #0
    144e:	2032      	moveq	r0, #50	; 0x32
    1450:	1c41      	adds	r1, r0, #1
    1452:	980c      	ldr	r0, [sp, #48]	; 0x30
    1454:	1a30      	subs	r0, r6, r0
    1456:	0200      	lsls	r0, r0, #8
    1458:	17c2      	asrs	r2, r0, #31
    145a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    145e:	1200      	asrs	r0, r0, #8
    1460:	4288      	cmp	r0, r1
    1462:	da11      	bge.n	1488 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    1464:	f88a 5000 	strb.w	r5, [sl]
    1468:	f898 1018 	ldrb.w	r1, [r8, #24]
    146c:	7c20      	ldrb	r0, [r4, #16]
    146e:	4281      	cmp	r1, r0
    1470:	d805      	bhi.n	147e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    1472:	9802      	ldr	r0, [sp, #8]
    1474:	6060      	str	r0, [r4, #4]
    1476:	b00d      	add	sp, #52	; 0x34
    1478:	2002      	movs	r0, #2
    147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    147e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1482:	7845      	ldrb	r5, [r0, #1]
    1484:	2d20      	cmp	r5, #32
    1486:	d1af      	bne.n	13e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    1488:	2005      	movs	r0, #5
    148a:	f001 f955 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    148e:	4c1c      	ldr	r4, [pc, #112]	; (1500 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1494:	6060      	str	r0, [r4, #4]
    1496:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    149a:	f89d 2020 	ldrb.w	r2, [sp, #32]
    149e:	2120      	movs	r1, #32
    14a0:	2a20      	cmp	r2, #32
    14a2:	d003      	beq.n	14ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    14a4:	2005      	movs	r0, #5
    14a6:	f7fe ff33 	bl	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
    14aa:	e004      	b.n	14b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    14ac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    14b0:	4420      	add	r0, r4
    14b2:	f890 0020 	ldrb.w	r0, [r0, #32]
    14b6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    14ba:	4913      	ldr	r1, [pc, #76]	; (1508 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    14bc:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    14c0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    14c4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    14c8:	7048      	strb	r0, [r1, #1]
    14ca:	6820      	ldr	r0, [r4, #0]
    14cc:	4438      	add	r0, r7
    14ce:	6020      	str	r0, [r4, #0]
    14d0:	20ff      	movs	r0, #255	; 0xff
    14d2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    14d6:	7e60      	ldrb	r0, [r4, #25]
    14d8:	2801      	cmp	r0, #1
    14da:	d105      	bne.n	14e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    14dc:	68e0      	ldr	r0, [r4, #12]
    14de:	1e40      	subs	r0, r0, #1
    14e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14e4:	f000 ff8c 	bl	2400 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    14e8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    14ec:	2820      	cmp	r0, #32
    14ee:	d003      	beq.n	14f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    14f0:	4806      	ldr	r0, [pc, #24]	; (150c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    14f2:	7840      	ldrb	r0, [r0, #1]
    14f4:	f001 fe6c 	bl	31d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14f8:	b00d      	add	sp, #52	; 0x34
    14fa:	2000      	movs	r0, #0
    14fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1500:	20000880 	.word	0x20000880
    1504:	0f424000 	.word	0x0f424000
    1508:	20000800 	.word	0x20000800
    150c:	20000010 	.word	0x20000010

00001510 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    1510:	b570      	push	{r4, r5, r6, lr}
    1512:	4a24      	ldr	r2, [pc, #144]	; (15a4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    1514:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1518:	2920      	cmp	r1, #32
    151a:	d03a      	beq.n	1592 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    151c:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
    1520:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    1524:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1528:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    152c:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
    1530:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
    1534:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1538:	4411      	add	r1, r2
    153a:	f891 1020 	ldrb.w	r1, [r1, #32]
    153e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    1542:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1546:	2920      	cmp	r1, #32
    1548:	d028      	beq.n	159c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    154a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    154e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1552:	7e2d      	ldrb	r5, [r5, #24]
    1554:	4285      	cmp	r5, r0
    1556:	bf84      	itt	hi
    1558:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    155c:	7849      	ldrbhi	r1, [r1, #1]
    155e:	d8f2      	bhi.n	1546 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    1560:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1564:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1568:	f8dc 000c 	ldr.w	r0, [ip, #12]
    156c:	6889      	ldr	r1, [r1, #8]
    156e:	6814      	ldr	r4, [r2, #0]
    1570:	1a08      	subs	r0, r1, r0
    1572:	0200      	lsls	r0, r0, #8
    1574:	17c1      	asrs	r1, r0, #31
    1576:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    157a:	1200      	asrs	r0, r0, #8
    157c:	d407      	bmi.n	158e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    157e:	f002 faaa 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1582:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1586:	4288      	cmp	r0, r1
    1588:	bf24      	itt	cs
    158a:	1b00      	subcs	r0, r0, r4
    158c:	bd70      	popcs	{r4, r5, r6, pc}
    158e:	2000      	movs	r0, #0
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	f640 313a 	movw	r1, #2874	; 0xb3a
    1596:	2070      	movs	r0, #112	; 0x70
    1598:	f001 fd4c 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15a0:	bd70      	pop	{r4, r5, r6, pc}
    15a2:	0000      	.short	0x0000
    15a4:	20000880 	.word	0x20000880

000015a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    15a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15aa:	4d6b      	ldr	r5, [pc, #428]	; (1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    15ac:	4a6b      	ldr	r2, [pc, #428]	; (175c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    15ae:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    15b2:	2601      	movs	r6, #1
    15b4:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    15b8:	2808      	cmp	r0, #8
    15ba:	d27c      	bcs.n	16b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    15bc:	e8df f000 	tbb	[pc, r0]
    15c0:	a9977004 	.word	0xa9977004
    15c4:	b3ae41c7 	.word	0xb3ae41c7
    15c8:	b919      	cbnz	r1, 15d2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    15ca:	f001 fbcf 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15ce:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    15d2:	8ae0      	ldrh	r0, [r4, #22]
    15d4:	b110      	cbz	r0, 15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    15d6:	f001 fcb5 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15da:	b180      	cbz	r0, 15fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    15dc:	f7ff fd18 	bl	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    15e0:	20ff      	movs	r0, #255	; 0xff
    15e2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    15e6:	6861      	ldr	r1, [r4, #4]
    15e8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    15ec:	d003      	beq.n	15f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    15ee:	2005      	movs	r0, #5
    15f0:	f000 ffec 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    15f4:	b140      	cbz	r0, 1608 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    15f6:	7e60      	ldrb	r0, [r4, #25]
    15f8:	2801      	cmp	r0, #1
    15fa:	d110      	bne.n	161e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    15fc:	e009      	b.n	1612 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    15fe:	f640 0169 	movw	r1, #2153	; 0x869
    1602:	2070      	movs	r0, #112	; 0x70
    1604:	f001 fd16 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1608:	f640 016e 	movw	r1, #2158	; 0x86e
    160c:	2070      	movs	r0, #112	; 0x70
    160e:	f001 fd11 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1612:	68e0      	ldr	r0, [r4, #12]
    1614:	1e40      	subs	r0, r0, #1
    1616:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    161a:	f000 fef1 	bl	2400 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    161e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1622:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1626:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    162a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    162e:	6840      	ldr	r0, [r0, #4]
    1630:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1634:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1638:	b001      	add	sp, #4
    163a:	2101      	movs	r1, #1
    163c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1640:	4710      	bx	r2
    1642:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1646:	b140      	cbz	r0, 165a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    1648:	b919      	cbnz	r1, 1652 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    164a:	f001 fb8f 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    164e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    1652:	2000      	movs	r0, #0
    1654:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    165a:	f7ff fcd9 	bl	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    165e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1662:	6060      	str	r0, [r4, #4]
    1664:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1668:	f88d 0000 	strb.w	r0, [sp]
    166c:	f89d 0000 	ldrb.w	r0, [sp]
    1670:	b188      	cbz	r0, 1696 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    1672:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1676:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    167a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    167e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1682:	6840      	ldr	r0, [r0, #4]
    1684:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1688:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    168c:	b001      	add	sp, #4
    168e:	2106      	movs	r1, #6
    1690:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1694:	4710      	bx	r2
    1696:	f640 0185 	movw	r1, #2181	; 0x885
    169a:	2070      	movs	r0, #112	; 0x70
    169c:	f001 fcca 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16a0:	f7ff fcb6 	bl	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    16a4:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    16a8:	f001 fc4c 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16ac:	b120      	cbz	r0, 16b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    16ae:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    16b2:	b130      	cbz	r0, 16c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    16b4:	e009      	b.n	16ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    16b6:	e04a      	b.n	174e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    16b8:	f640 0193 	movw	r1, #2195	; 0x893
    16bc:	2070      	movs	r0, #112	; 0x70
    16be:	f001 fcb9 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16c2:	f001 fb53 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16c6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    16ca:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16ce:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    16d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    16d6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    16da:	6840      	ldr	r0, [r0, #4]
    16dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    16e0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    16e4:	b001      	add	sp, #4
    16e6:	2100      	movs	r1, #0
    16e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16ec:	4710      	bx	r2
    16ee:	f001 f92f 	bl	2950 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    16f2:	8ae0      	ldrh	r0, [r4, #22]
    16f4:	b110      	cbz	r0, 16fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    16f6:	f001 fc25 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16fa:	b128      	cbz	r0, 1708 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    16fc:	f001 f93c 	bl	2978 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    1700:	2800      	cmp	r0, #0
    1702:	bf18      	it	ne
    1704:	7766      	strbne	r6, [r4, #29]
    1706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1708:	f640 019d 	movw	r1, #2205	; 0x89d
    170c:	2070      	movs	r0, #112	; 0x70
    170e:	f001 fc91 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1712:	4813      	ldr	r0, [pc, #76]	; (1760 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1714:	6006      	str	r6, [r0, #0]
    1716:	6890      	ldr	r0, [r2, #8]
    1718:	6006      	str	r6, [r0, #0]
    171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    171c:	7810      	ldrb	r0, [r2, #0]
    171e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1722:	f001 bd55 	b.w	31d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1726:	f7ff fc73 	bl	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    172a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    172e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1732:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1736:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    173a:	6840      	ldr	r0, [r0, #4]
    173c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1740:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    1744:	b001      	add	sp, #4
    1746:	2105      	movs	r1, #5
    1748:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    174c:	4710      	bx	r2
    174e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    1752:	2070      	movs	r0, #112	; 0x70
    1754:	f001 fc6e 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1758:	20000480 	.word	0x20000480
    175c:	20000010 	.word	0x20000010
    1760:	40000508 	.word	0x40000508

00001764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1764:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1768:	4682      	mov	sl, r0
    176a:	48ef      	ldr	r0, [pc, #956]	; (1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    176c:	b095      	sub	sp, #84	; 0x54
    176e:	6800      	ldr	r0, [r0, #0]
    1770:	4dee      	ldr	r5, [pc, #952]	; (1b2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    1772:	05c0      	lsls	r0, r0, #23
    1774:	0dc0      	lsrs	r0, r0, #23
    1776:	d00e      	beq.n	1796 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1778:	3810      	subs	r0, #16
    177a:	b240      	sxtb	r0, r0
    177c:	2800      	cmp	r0, #0
    177e:	bfb8      	it	lt
    1780:	f000 000f 	andlt.w	r0, r0, #15
    1784:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1788:	bfac      	ite	ge
    178a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    178e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1792:	0940      	lsrs	r0, r0, #5
    1794:	d00d      	beq.n	17b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1796:	9816      	ldr	r0, [sp, #88]	; 0x58
    1798:	f04f 0b00 	mov.w	fp, #0
    179c:	7800      	ldrb	r0, [r0, #0]
    179e:	2800      	cmp	r0, #0
    17a0:	bf18      	it	ne
    17a2:	2801      	cmpne	r0, #1
    17a4:	d018      	beq.n	17d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17a6:	f240 713b 	movw	r1, #1851	; 0x73b
    17aa:	f04f 0070 	mov.w	r0, #112	; 0x70
    17ae:	f001 fc41 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17b2:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    17b6:	f04f 0b01 	mov.w	fp, #1
    17ba:	2820      	cmp	r0, #32
    17bc:	d007      	beq.n	17ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    17be:	9816      	ldr	r0, [sp, #88]	; 0x58
    17c0:	7800      	ldrb	r0, [r0, #0]
    17c2:	b148      	cbz	r0, 17d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17c4:	f240 7137 	movw	r1, #1847	; 0x737
    17c8:	2070      	movs	r0, #112	; 0x70
    17ca:	f001 fc33 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17ce:	f240 7134 	movw	r1, #1844	; 0x734
    17d2:	2070      	movs	r0, #112	; 0x70
    17d4:	f001 fc2e 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d8:	4cd5      	ldr	r4, [pc, #852]	; (1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    17da:	b124      	cbz	r4, 17e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    17dc:	2100      	movs	r1, #0
    17de:	f240 703e 	movw	r0, #1854	; 0x73e
    17e2:	f3af 8000 	nop.w
    17e6:	2000      	movs	r0, #0
    17e8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    17ec:	49d1      	ldr	r1, [pc, #836]	; (1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    17ee:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    17f2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    17f6:	f04f 0901 	mov.w	r9, #1
    17fa:	9000      	str	r0, [sp, #0]
    17fc:	b124      	cbz	r4, 1808 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    17fe:	2100      	movs	r1, #0
    1800:	f240 7049 	movw	r0, #1865	; 0x749
    1804:	f3af 8000 	nop.w
    1808:	f1b9 0f00 	cmp.w	r9, #0
    180c:	d00a      	beq.n	1824 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    180e:	bf00      	nop
    1810:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    1814:	f04f 0800 	mov.w	r8, #0
    1818:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    181c:	f1bb 0f00 	cmp.w	fp, #0
    1820:	d007      	beq.n	1832 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    1822:	e038      	b.n	1896 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    1824:	48c4      	ldr	r0, [pc, #784]	; (1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    1826:	2800      	cmp	r0, #0
    1828:	bf18      	it	ne
    182a:	f3af 8000 	nopne.w
    182e:	b662      	cpsie	i
    1830:	e7ee      	b.n	1810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    1832:	4637      	mov	r7, r6
    1834:	2001      	movs	r0, #1
    1836:	ea20 0607 	bic.w	r6, r0, r7
    183a:	48c0      	ldr	r0, [pc, #768]	; (1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    183c:	2240      	movs	r2, #64	; 0x40
    183e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1842:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1846:	f002 fa88 	bl	3d5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    184a:	b124      	cbz	r4, 1856 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    184c:	2100      	movs	r1, #0
    184e:	f240 505e 	movw	r0, #1374	; 0x55e
    1852:	f3af 8000 	nop.w
    1856:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    185a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    185e:	4429      	add	r1, r5
    1860:	4428      	add	r0, r5
    1862:	8c0a      	ldrh	r2, [r1, #32]
    1864:	8402      	strh	r2, [r0, #32]
    1866:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    186a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    186e:	b124      	cbz	r4, 187a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1870:	2100      	movs	r1, #0
    1872:	f240 5062 	movw	r0, #1378	; 0x562
    1876:	f3af 8000 	nop.w
    187a:	b124      	cbz	r4, 1886 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    187c:	2100      	movs	r1, #0
    187e:	f240 7053 	movw	r0, #1875	; 0x753
    1882:	f3af 8000 	nop.w
    1886:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    188a:	f88d 0008 	strb.w	r0, [sp, #8]
    188e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1892:	2800      	cmp	r0, #0
    1894:	d1b2      	bne.n	17fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1896:	b124      	cbz	r4, 18a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    1898:	2100      	movs	r1, #0
    189a:	f240 705d 	movw	r0, #1885	; 0x75d
    189e:	f3af 8000 	nop.w
    18a2:	a802      	add	r0, sp, #8
    18a4:	f000 fcec 	bl	2280 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    18a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    18ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    18b0:	4633      	mov	r3, r6
    18b2:	aa09      	add	r2, sp, #36	; 0x24
    18b4:	a80e      	add	r0, sp, #56	; 0x38
    18b6:	9916      	ldr	r1, [sp, #88]	; 0x58
    18b8:	f7ff fa48 	bl	d4c <__z_interrupt_stack_SIZEOF+0x50c>
    18bc:	b124      	cbz	r4, 18c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    18be:	2100      	movs	r1, #0
    18c0:	f240 7064 	movw	r0, #1892	; 0x764
    18c4:	f3af 8000 	nop.w
    18c8:	4a9c      	ldr	r2, [pc, #624]	; (1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    18ca:	990e      	ldr	r1, [sp, #56]	; 0x38
    18cc:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    18d0:	a809      	add	r0, sp, #36	; 0x24
    18d2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    18d6:	2a01      	cmp	r2, #1
    18d8:	bf18      	it	ne
    18da:	2a02      	cmpne	r2, #2
    18dc:	d138      	bne.n	1950 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    18de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18e2:	eba2 0201 	sub.w	r2, r2, r1
    18e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    18ea:	eba3 0101 	sub.w	r1, r3, r1
    18ee:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    18f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    18f6:	2a02      	cmp	r2, #2
    18f8:	d364      	bcc.n	19c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    18fa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    18fe:	bf98      	it	ls
    1900:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1904:	d85e      	bhi.n	19c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    1906:	f04f 0801 	mov.w	r8, #1
    190a:	ab14      	add	r3, sp, #80	; 0x50
    190c:	aa13      	add	r2, sp, #76	; 0x4c
    190e:	4631      	mov	r1, r6
    1910:	f7fe fef2 	bl	6f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x210>
    1914:	2800      	cmp	r0, #0
    1916:	d05d      	beq.n	19d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1918:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    191c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    1920:	4633      	mov	r3, r6
    1922:	428a      	cmp	r2, r1
    1924:	d05a      	beq.n	19dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    1926:	2005      	movs	r0, #5
    1928:	f7fe fcf2 	bl	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
    192c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1930:	7048      	strb	r0, [r1, #1]
    1932:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1936:	2820      	cmp	r0, #32
    1938:	bf1c      	itt	ne
    193a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    193e:	f880 a001 	strbne.w	sl, [r0, #1]
    1942:	d057      	beq.n	19f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    1944:	4632      	mov	r2, r6
    1946:	4651      	mov	r1, sl
    1948:	f05f 0003 	movs.w	r0, #3
    194c:	f7ff fc12 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1950:	b124      	cbz	r4, 195c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    1952:	2100      	movs	r1, #0
    1954:	f240 7069 	movw	r0, #1897	; 0x769
    1958:	f3af 8000 	nop.w
    195c:	4878      	ldr	r0, [pc, #480]	; (1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    195e:	2800      	cmp	r0, #0
    1960:	bf18      	it	ne
    1962:	f3af 8000 	nopne.w
    1966:	f3ef 8910 	mrs	r9, PRIMASK
    196a:	b672      	cpsid	i
    196c:	b124      	cbz	r4, 1978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    196e:	2100      	movs	r1, #0
    1970:	f240 706f 	movw	r0, #1903	; 0x76f
    1974:	f3af 8000 	nop.w
    1978:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    197c:	f88d 0008 	strb.w	r0, [sp, #8]
    1980:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1984:	2800      	cmp	r0, #0
    1986:	f47f af39 	bne.w	17fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    198a:	b124      	cbz	r4, 1996 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    198c:	2100      	movs	r1, #0
    198e:	f240 7077 	movw	r0, #1911	; 0x777
    1992:	f3af 8000 	nop.w
    1996:	af09      	add	r7, sp, #36	; 0x24
    1998:	9800      	ldr	r0, [sp, #0]
    199a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    199e:	f100 0708 	add.w	r7, r0, #8
    19a2:	f1b8 0f00 	cmp.w	r8, #0
    19a6:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    19aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    19ac:	6181      	str	r1, [r0, #24]
    19ae:	d051      	beq.n	1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    19b0:	b124      	cbz	r4, 19bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19b2:	2100      	movs	r1, #0
    19b4:	f240 7084 	movw	r0, #1924	; 0x784
    19b8:	f3af 8000 	nop.w
    19bc:	f1bb 0f00 	cmp.w	fp, #0
    19c0:	d139      	bne.n	1a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    19c2:	e01f      	b.n	1a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    19c4:	4632      	mov	r2, r6
    19c6:	4651      	mov	r1, sl
    19c8:	2004      	movs	r0, #4
    19ca:	f7ff fbd3 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    19ce:	f04f 0801 	mov.w	r8, #1
    19d2:	e7bd      	b.n	1950 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    19d4:	4632      	mov	r2, r6
    19d6:	4651      	mov	r1, sl
    19d8:	2004      	movs	r0, #4
    19da:	e7b7      	b.n	194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    19dc:	2920      	cmp	r1, #32
    19de:	bf19      	ittee	ne
    19e0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    19e4:	7840      	ldrbne	r0, [r0, #1]
    19e6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    19ea:	4428      	addeq	r0, r5
    19ec:	bf08      	it	eq
    19ee:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    19f2:	e79b      	b.n	192c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    19f4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    19f8:	4429      	add	r1, r5
    19fa:	f881 a020 	strb.w	sl, [r1, #32]
    19fe:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    1a02:	e79f      	b.n	1944 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    1a04:	9811      	ldr	r0, [sp, #68]	; 0x44
    1a06:	f010 0fff 	tst.w	r0, #255	; 0xff
    1a0a:	d014      	beq.n	1a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1a0c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1a10:	2820      	cmp	r0, #32
    1a12:	d110      	bne.n	1a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1a14:	b124      	cbz	r4, 1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    1a16:	2100      	movs	r1, #0
    1a18:	f240 7089 	movw	r0, #1929	; 0x789
    1a1c:	f3af 8000 	nop.w
    1a20:	4631      	mov	r1, r6
    1a22:	2002      	movs	r0, #2
    1a24:	f7ff fbd8 	bl	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
    1a28:	9010      	str	r0, [sp, #64]	; 0x40
    1a2a:	b920      	cbnz	r0, 1a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1a2c:	9816      	ldr	r0, [sp, #88]	; 0x58
    1a2e:	7800      	ldrb	r0, [r0, #0]
    1a30:	b1e8      	cbz	r0, 1a6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    1a32:	2801      	cmp	r0, #1
    1a34:	d02a      	beq.n	1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1a36:	b124      	cbz	r4, 1a42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1a38:	2100      	movs	r1, #0
    1a3a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    1a3e:	f3af 8000 	nop.w
    1a42:	20ff      	movs	r0, #255	; 0xff
    1a44:	f1bb 0f00 	cmp.w	fp, #0
    1a48:	bf18      	it	ne
    1a4a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    1a4e:	d026      	beq.n	1a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    1a50:	f04f 0801 	mov.w	r8, #1
    1a54:	b124      	cbz	r4, 1a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a56:	2100      	movs	r1, #0
    1a58:	f240 70b7 	movw	r0, #1975	; 0x7b7
    1a5c:	f3af 8000 	nop.w
    1a60:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a62:	4e38      	ldr	r6, [pc, #224]	; (1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    1a64:	2802      	cmp	r0, #2
    1a66:	d023      	beq.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    1a68:	2801      	cmp	r0, #1
    1a6a:	d029      	beq.n	1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    1a6c:	e02d      	b.n	1aca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    1a6e:	b124      	cbz	r4, 1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    1a70:	2100      	movs	r1, #0
    1a72:	f240 7091 	movw	r0, #1937	; 0x791
    1a76:	f3af 8000 	nop.w
    1a7a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1a7e:	4651      	mov	r1, sl
    1a80:	2004      	movs	r0, #4
    1a82:	f7ff fb77 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1a86:	f04f 0801 	mov.w	r8, #1
    1a8a:	e7e3      	b.n	1a54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    1a8c:	2c00      	cmp	r4, #0
    1a8e:	f43f aeb5 	beq.w	17fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1a92:	2100      	movs	r1, #0
    1a94:	f240 709c 	movw	r0, #1948	; 0x79c
    1a98:	f3af 8000 	nop.w
    1a9c:	e6ae      	b.n	17fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    1a9e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1aa2:	2101      	movs	r1, #1
    1aa4:	4391      	bics	r1, r2
    1aa6:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    1aaa:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1aae:	e7cf      	b.n	1a50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    1ab0:	68a8      	ldr	r0, [r5, #8]
    1ab2:	990e      	ldr	r1, [sp, #56]	; 0x38
    1ab4:	1a40      	subs	r0, r0, r1
    1ab6:	f002 f80e 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1aba:	6871      	ldr	r1, [r6, #4]
    1abc:	b921      	cbnz	r1, 1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    1abe:	e004      	b.n	1aca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    1ac0:	6871      	ldr	r1, [r6, #4]
    1ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ac6:	b101      	cbz	r1, 1aca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    1ac8:	4788      	blx	r1
    1aca:	f1b9 0f00 	cmp.w	r9, #0
    1ace:	d024      	beq.n	1b1a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    1ad0:	b124      	cbz	r4, 1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    1ad2:	2100      	movs	r1, #0
    1ad4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    1ad8:	f3af 8000 	nop.w
    1adc:	f1b8 0f00 	cmp.w	r8, #0
    1ae0:	d011      	beq.n	1b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    1ae2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    1ae6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1aea:	4428      	add	r0, r5
    1aec:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1af0:	2820      	cmp	r0, #32
    1af2:	d008      	beq.n	1b06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    1af4:	b124      	cbz	r4, 1b00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    1af6:	2100      	movs	r1, #0
    1af8:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1afc:	f3af 8000 	nop.w
    1b00:	7870      	ldrb	r0, [r6, #1]
    1b02:	f001 fb65 	bl	31d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b06:	b124      	cbz	r4, 1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    1b08:	2100      	movs	r1, #0
    1b0a:	f240 70d3 	movw	r0, #2003	; 0x7d3
    1b0e:	f3af 8000 	nop.w
    1b12:	b017      	add	sp, #92	; 0x5c
    1b14:	4640      	mov	r0, r8
    1b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b1a:	4807      	ldr	r0, [pc, #28]	; (1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    1b1c:	2800      	cmp	r0, #0
    1b1e:	bf18      	it	ne
    1b20:	f3af 8000 	nopne.w
    1b24:	b662      	cpsie	i
    1b26:	e7d3      	b.n	1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    1b28:	e000ed04 	.word	0xe000ed04
    1b2c:	20000880 	.word	0x20000880
    1b30:	00000000 	.word	0x00000000
    1b34:	20000480 	.word	0x20000480
    1b38:	00000000 	.word	0x00000000
    1b3c:	20000800 	.word	0x20000800
    1b40:	00000000 	.word	0x00000000
    1b44:	20000010 	.word	0x20000010

00001b48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    1b48:	b570      	push	{r4, r5, r6, lr}
    1b4a:	460d      	mov	r5, r1
    1b4c:	4606      	mov	r6, r0
    1b4e:	f001 f9e7 	bl	2f20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    1b52:	480f      	ldr	r0, [pc, #60]	; (1b90 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    1b54:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    1b58:	2400      	movs	r4, #0
    1b5a:	3880      	subs	r0, #128	; 0x80
    1b5c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    1b60:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    1b64:	b129      	cbz	r1, 1b72 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    1b66:	1c61      	adds	r1, r4, #1
    1b68:	b2cc      	uxtb	r4, r1
    1b6a:	2c20      	cmp	r4, #32
    1b6c:	d3f8      	bcc.n	1b60 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    1b6e:	2020      	movs	r0, #32
    1b70:	bd70      	pop	{r4, r5, r6, pc}
    1b72:	4808      	ldr	r0, [pc, #32]	; (1b94 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    1b74:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1b78:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    1b7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1b80:	4621      	mov	r1, r4
    1b82:	6045      	str	r5, [r0, #4]
    1b84:	2001      	movs	r0, #1
    1b86:	f7ff faf5 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1b8a:	4620      	mov	r0, r4
    1b8c:	bd70      	pop	{r4, r5, r6, pc}
    1b8e:	0000      	.short	0x0000
    1b90:	20000880 	.word	0x20000880
    1b94:	20000480 	.word	0x20000480

00001b98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    1b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b9c:	b083      	sub	sp, #12
    1b9e:	f000 fb69 	bl	2274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1ba2:	4605      	mov	r5, r0
    1ba4:	f000 fe38 	bl	2818 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1ba8:	4c84      	ldr	r4, [pc, #528]	; (1dbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    1baa:	6860      	ldr	r0, [r4, #4]
    1bac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1bb0:	bf1c      	itt	ne
    1bb2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1bb6:	6060      	strne	r0, [r4, #4]
    1bb8:	7fa0      	ldrb	r0, [r4, #30]
    1bba:	f8df 9204 	ldr.w	r9, [pc, #516]	; 1dc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    1bbe:	b990      	cbnz	r0, 1be6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    1bc0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    1bc4:	1a40      	subs	r0, r0, r1
    1bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bca:	f44f 710c 	mov.w	r1, #560	; 0x230
    1bce:	f001 ffb5 	bl	3b3c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    1bd2:	68e1      	ldr	r1, [r4, #12]
    1bd4:	4408      	add	r0, r1
    1bd6:	1a28      	subs	r0, r5, r0
    1bd8:	0200      	lsls	r0, r0, #8
    1bda:	17c1      	asrs	r1, r0, #31
    1bdc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1be0:	1200      	asrs	r0, r0, #8
    1be2:	0fc0      	lsrs	r0, r0, #31
    1be4:	d012      	beq.n	1c0c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    1be6:	7e60      	ldrb	r0, [r4, #25]
    1be8:	b320      	cbz	r0, 1c34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    1bea:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1bee:	f88d 0000 	strb.w	r0, [sp]
    1bf2:	f89d 0000 	ldrb.w	r0, [sp]
    1bf6:	b1e8      	cbz	r0, 1c34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    1bf8:	f000 fc6a 	bl	24d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    1bfc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1c00:	b1f0      	cbz	r0, 1c40 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    1c02:	f240 31f5 	movw	r1, #1013	; 0x3f5
    1c06:	2070      	movs	r0, #112	; 0x70
    1c08:	f001 fa14 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c10:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    1c14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    1c1c:	6840      	ldr	r0, [r0, #4]
    1c1e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    1c22:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1c26:	2108      	movs	r1, #8
    1c28:	4790      	blx	r2
    1c2a:	f240 31dd 	movw	r1, #989	; 0x3dd
    1c2e:	2070      	movs	r0, #112	; 0x70
    1c30:	f001 fa00 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c34:	1ce8      	adds	r0, r5, #3
    1c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c3a:	f000 fb41 	bl	22c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1c3e:	e7dd      	b.n	1bfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    1c40:	2001      	movs	r0, #1
    1c42:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    1c46:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c4a:	2820      	cmp	r0, #32
    1c4c:	d021      	beq.n	1c92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    1c4e:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    1c52:	2020      	movs	r0, #32
    1c54:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    1c58:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    1c5c:	2000      	movs	r0, #0
    1c5e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    1c62:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1c66:	6020      	str	r0, [r4, #0]
    1c68:	f000 fe96 	bl	2998 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    1c6c:	7720      	strb	r0, [r4, #28]
    1c6e:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    1c72:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1c76:	1907      	adds	r7, r0, r4
    1c78:	f897 0020 	ldrb.w	r0, [r7, #32]
    1c7c:	2820      	cmp	r0, #32
    1c7e:	d058      	beq.n	1d32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    1c80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c84:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    1c88:	f899 001a 	ldrb.w	r0, [r9, #26]
    1c8c:	2801      	cmp	r0, #1
    1c8e:	d005      	beq.n	1c9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    1c90:	e04f      	b.n	1d32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    1c92:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    1c96:	2070      	movs	r0, #112	; 0x70
    1c98:	f001 f9cc 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c9c:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    1ca0:	aa01      	add	r2, sp, #4
    1ca2:	4669      	mov	r1, sp
    1ca4:	4658      	mov	r0, fp
    1ca6:	f000 f97b 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1caa:	f000 fe6f 	bl	298c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1cae:	f000 f95b 	bl	1f68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1cb2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cb6:	2820      	cmp	r0, #32
    1cb8:	d004      	beq.n	1cc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    1cba:	68e0      	ldr	r0, [r4, #12]
    1cbc:	1d40      	adds	r0, r0, #5
    1cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cc2:	e01d      	b.n	1d00 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    1cc4:	f105 0a09 	add.w	sl, r5, #9
    1cc8:	f1bb 0f00 	cmp.w	fp, #0
    1ccc:	d016      	beq.n	1cfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    1cce:	f001 f939 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cd2:	b998      	cbnz	r0, 1cfc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    1cd4:	f001 f828 	bl	2d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1cd8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1cdc:	bf08      	it	eq
    1cde:	200d      	moveq	r0, #13
    1ce0:	d00b      	beq.n	1cfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    1ce2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1ce6:	3856      	subs	r0, #86	; 0x56
    1ce8:	bf08      	it	eq
    1cea:	201c      	moveq	r0, #28
    1cec:	d005      	beq.n	1cfa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    1cee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1cf2:	389f      	subs	r0, #159	; 0x9f
    1cf4:	bf14      	ite	ne
    1cf6:	2000      	movne	r0, #0
    1cf8:	2032      	moveq	r0, #50	; 0x32
    1cfa:	4482      	add	sl, r0
    1cfc:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    1d00:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1d04:	1a81      	subs	r1, r0, r2
    1d06:	0209      	lsls	r1, r1, #8
    1d08:	17cb      	asrs	r3, r1, #31
    1d0a:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1d0e:	1209      	asrs	r1, r1, #8
    1d10:	2900      	cmp	r1, #0
    1d12:	dc0e      	bgt.n	1d32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    1d14:	f109 0308 	add.w	r3, r9, #8
    1d18:	4282      	cmp	r2, r0
    1d1a:	d202      	bcs.n	1d22 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    1d1c:	6899      	ldr	r1, [r3, #8]
    1d1e:	1e49      	subs	r1, r1, #1
    1d20:	6099      	str	r1, [r3, #8]
    1d22:	e9d3 2100 	ldrd	r2, r1, [r3]
    1d26:	1a89      	subs	r1, r1, r2
    1d28:	6018      	str	r0, [r3, #0]
    1d2a:	4408      	add	r0, r1
    1d2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d30:	6058      	str	r0, [r3, #4]
    1d32:	4631      	mov	r1, r6
    1d34:	2001      	movs	r0, #1
    1d36:	f7ff fa4f 	bl	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
    1d3a:	ea5f 0900 	movs.w	r9, r0
    1d3e:	d0f8      	beq.n	1d32 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    1d40:	4820      	ldr	r0, [pc, #128]	; (1dc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    1d42:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d46:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    1d4a:	2802      	cmp	r0, #2
    1d4c:	d104      	bne.n	1d58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    1d4e:	4632      	mov	r2, r6
    1d50:	4641      	mov	r1, r8
    1d52:	2006      	movs	r0, #6
    1d54:	f7ff fa0e 	bl	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    1d58:	20ff      	movs	r0, #255	; 0xff
    1d5a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    1d5e:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    1d62:	4e19      	ldr	r6, [pc, #100]	; (1dc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    1d64:	2820      	cmp	r0, #32
    1d66:	bf1c      	itt	ne
    1d68:	7870      	ldrbne	r0, [r6, #1]
    1d6a:	f001 fa31 	blne	31d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1d6e:	7f20      	ldrb	r0, [r4, #28]
    1d70:	b120      	cbz	r0, 1d7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    1d72:	f000 fded 	bl	2950 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    1d76:	2000      	movs	r0, #0
    1d78:	7720      	strb	r0, [r4, #28]
    1d7a:	7760      	strb	r0, [r4, #29]
    1d7c:	f1b9 0f02 	cmp.w	r9, #2
    1d80:	d011      	beq.n	1da6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    1d82:	f1b9 0f01 	cmp.w	r9, #1
    1d86:	bf1c      	itt	ne
    1d88:	b003      	addne	sp, #12
    1d8a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d92:	6871      	ldr	r1, [r6, #4]
    1d94:	2900      	cmp	r1, #0
    1d96:	bf04      	itt	eq
    1d98:	b003      	addeq	sp, #12
    1d9a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d9e:	b003      	add	sp, #12
    1da0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da4:	4708      	bx	r1
    1da6:	68a0      	ldr	r0, [r4, #8]
    1da8:	1b40      	subs	r0, r0, r5
    1daa:	f001 fe94 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1dae:	6871      	ldr	r1, [r6, #4]
    1db0:	2900      	cmp	r1, #0
    1db2:	d1f4      	bne.n	1d9e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    1db4:	b003      	add	sp, #12
    1db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dba:	0000      	.short	0x0000
    1dbc:	20000880 	.word	0x20000880
    1dc0:	20000480 	.word	0x20000480
    1dc4:	20000800 	.word	0x20000800
    1dc8:	20000010 	.word	0x20000010

00001dcc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    1dcc:	b570      	push	{r4, r5, r6, lr}
    1dce:	4c42      	ldr	r4, [pc, #264]	; (1ed8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    1dd0:	4605      	mov	r5, r0
    1dd2:	b082      	sub	sp, #8
    1dd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dd8:	2820      	cmp	r0, #32
    1dda:	d008      	beq.n	1dee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    1ddc:	6860      	ldr	r0, [r4, #4]
    1dde:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1de2:	d009      	beq.n	1df8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    1de4:	f640 21d9 	movw	r1, #2777	; 0xad9
    1de8:	2070      	movs	r0, #112	; 0x70
    1dea:	f001 f923 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dee:	f640 21d8 	movw	r1, #2776	; 0xad8
    1df2:	2070      	movs	r0, #112	; 0x70
    1df4:	f001 f91e 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1df8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1dfc:	4937      	ldr	r1, [pc, #220]	; (1edc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    1dfe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1e02:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    1e06:	68b0      	ldr	r0, [r6, #8]
    1e08:	f001 fe65 	bl	3ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e0c:	4602      	mov	r2, r0
    1e0e:	8af0      	ldrh	r0, [r6, #22]
    1e10:	7d31      	ldrb	r1, [r6, #20]
    1e12:	4b33      	ldr	r3, [pc, #204]	; (1ee0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    1e14:	4408      	add	r0, r1
    1e16:	1c40      	adds	r0, r0, #1
    1e18:	1811      	adds	r1, r2, r0
    1e1a:	429a      	cmp	r2, r3
    1e1c:	d817      	bhi.n	1e4e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    1e1e:	4a31      	ldr	r2, [pc, #196]	; (1ee4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    1e20:	4290      	cmp	r0, r2
    1e22:	dc1b      	bgt.n	1e5c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    1e24:	f1c2 0c00 	rsb	ip, r2, #0
    1e28:	4560      	cmp	r0, ip
    1e2a:	db1e      	blt.n	1e6a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    1e2c:	0056      	lsls	r6, r2, #1
    1e2e:	428e      	cmp	r6, r1
    1e30:	bfdc      	itt	le
    1e32:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1e36:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1e3a:	dd05      	ble.n	1e48 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    1e3c:	2900      	cmp	r1, #0
    1e3e:	bfbc      	itt	lt
    1e40:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1e44:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1e48:	1948      	adds	r0, r1, r5
    1e4a:	4299      	cmp	r1, r3
    1e4c:	d904      	bls.n	1e58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    1e4e:	f240 519e 	movw	r1, #1438	; 0x59e
    1e52:	2070      	movs	r0, #112	; 0x70
    1e54:	f001 f8ee 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e58:	4295      	cmp	r5, r2
    1e5a:	dd04      	ble.n	1e66 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    1e5c:	f240 519f 	movw	r1, #1439	; 0x59f
    1e60:	2070      	movs	r0, #112	; 0x70
    1e62:	f001 f8e7 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e66:	4565      	cmp	r5, ip
    1e68:	da04      	bge.n	1e74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    1e6a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    1e6e:	2070      	movs	r0, #112	; 0x70
    1e70:	f001 f8e0 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e74:	4286      	cmp	r6, r0
    1e76:	bfdc      	itt	le
    1e78:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e7c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e80:	dd05      	ble.n	1e8e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    1e82:	2800      	cmp	r0, #0
    1e84:	bfbc      	itt	lt
    1e86:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e8a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e8e:	aa01      	add	r2, sp, #4
    1e90:	4669      	mov	r1, sp
    1e92:	f000 f885 	bl	1fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1e9a:	280f      	cmp	r0, #15
    1e9c:	bf8c      	ite	hi
    1e9e:	2001      	movhi	r0, #1
    1ea0:	2000      	movls	r0, #0
    1ea2:	9900      	ldr	r1, [sp, #0]
    1ea4:	4408      	add	r0, r1
    1ea6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1eaa:	6061      	str	r1, [r4, #4]
    1eac:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    1eb0:	f88d 0000 	strb.w	r0, [sp]
    1eb4:	f89d 0000 	ldrb.w	r0, [sp]
    1eb8:	2800      	cmp	r0, #0
    1eba:	bf04      	itt	eq
    1ebc:	b002      	addeq	sp, #8
    1ebe:	bd70      	popeq	{r4, r5, r6, pc}
    1ec0:	2005      	movs	r0, #5
    1ec2:	f000 fb83 	bl	25cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1ec6:	2800      	cmp	r0, #0
    1ec8:	bf1c      	itt	ne
    1eca:	b002      	addne	sp, #8
    1ecc:	bd70      	popne	{r4, r5, r6, pc}
    1ece:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    1ed2:	2070      	movs	r0, #112	; 0x70
    1ed4:	f001 f8ae 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ed8:	20000880 	.word	0x20000880
    1edc:	20000480 	.word	0x20000480
    1ee0:	1e847fff 	.word	0x1e847fff
    1ee4:	0f424000 	.word	0x0f424000

00001ee8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    1ee8:	b570      	push	{r4, r5, r6, lr}
    1eea:	4c1c      	ldr	r4, [pc, #112]	; (1f5c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    1eec:	2120      	movs	r1, #32
    1eee:	f884 1020 	strb.w	r1, [r4, #32]
    1ef2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    1ef6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    1efa:	2000      	movs	r0, #0
    1efc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    1f00:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    1f04:	1e42      	subs	r2, r0, #1
    1f06:	e9c4 0200 	strd	r0, r2, [r4]
    1f0a:	77a0      	strb	r0, [r4, #30]
    1f0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    1f10:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    1f14:	7720      	strb	r0, [r4, #28]
    1f16:	7760      	strb	r0, [r4, #29]
    1f18:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    1f1c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1f20:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1f24:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    1f28:	2210      	movs	r2, #16
    1f2a:	7088      	strb	r0, [r1, #2]
    1f2c:	f801 0f04 	strb.w	r0, [r1, #4]!
    1f30:	1e52      	subs	r2, r2, #1
    1f32:	d1fa      	bne.n	1f2a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    1f34:	f000 fd3a 	bl	29ac <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    1f38:	4d09      	ldr	r5, [pc, #36]	; (1f60 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    1f3a:	2601      	movs	r6, #1
    1f3c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1f40:	20ff      	movs	r0, #255	; 0xff
    1f42:	7028      	strb	r0, [r5, #0]
    1f44:	4807      	ldr	r0, [pc, #28]	; (1f64 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    1f46:	f001 f925 	bl	3194 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1f4a:	7068      	strb	r0, [r5, #1]
    1f4c:	f001 f980 	bl	3250 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    1f50:	60a8      	str	r0, [r5, #8]
    1f52:	f000 fcb5 	bl	28c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    1f56:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
    1f5c:	20000880 	.word	0x20000880
    1f60:	20000010 	.word	0x20000010
    1f64:	0000109d 	.word	0x0000109d

00001f68 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    1f68:	0b41      	lsrs	r1, r0, #13
    1f6a:	f248 6237 	movw	r2, #34359	; 0x8637
    1f6e:	4351      	muls	r1, r2
    1f70:	0c0a      	lsrs	r2, r1, #16
    1f72:	4b09      	ldr	r3, [pc, #36]	; (1f98 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    1f74:	0251      	lsls	r1, r2, #9
    1f76:	fb02 0203 	mla	r2, r2, r3, r0
    1f7a:	4808      	ldr	r0, [pc, #32]	; (1f9c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    1f7c:	4350      	muls	r0, r2
    1f7e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    1f82:	306e      	adds	r0, #110	; 0x6e
    1f84:	0d40      	lsrs	r0, r0, #21
    1f86:	425b      	negs	r3, r3
    1f88:	fb10 f303 	smulbb	r3, r0, r3
    1f8c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    1f90:	bf88      	it	hi
    1f92:	1c49      	addhi	r1, r1, #1
    1f94:	4408      	add	r0, r1
    1f96:	4770      	bx	lr
    1f98:	ffffc2f7 	.word	0xffffc2f7
    1f9c:	00010c6f 	.word	0x00010c6f

00001fa0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    1fa0:	0b43      	lsrs	r3, r0, #13
    1fa2:	f248 6c37 	movw	ip, #34359	; 0x8637
    1fa6:	fb03 f30c 	mul.w	r3, r3, ip
    1faa:	b430      	push	{r4, r5}
    1fac:	0c1b      	lsrs	r3, r3, #16
    1fae:	f8df c044 	ldr.w	ip, [pc, #68]	; 1ff4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    1fb2:	025c      	lsls	r4, r3, #9
    1fb4:	fb03 030c 	mla	r3, r3, ip, r0
    1fb8:	480f      	ldr	r0, [pc, #60]	; (1ff8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    1fba:	4358      	muls	r0, r3
    1fbc:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    1fc0:	eb04 000c 	add.w	r0, r4, ip
    1fc4:	f643 5409 	movw	r4, #15625	; 0x3d09
    1fc8:	fb1c f404 	smulbb	r4, ip, r4
    1fcc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    1fd0:	f643 5508 	movw	r5, #15624	; 0x3d08
    1fd4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    1fd8:	442c      	add	r4, r5
    1fda:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    1fde:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    1fe2:	bf84      	itt	hi
    1fe4:	f04f 0c00 	movhi.w	ip, #0
    1fe8:	1c40      	addhi	r0, r0, #1
    1fea:	6008      	str	r0, [r1, #0]
    1fec:	f882 c000 	strb.w	ip, [r2]
    1ff0:	bc30      	pop	{r4, r5}
    1ff2:	4770      	bx	lr
    1ff4:	ffffc2f7 	.word	0xffffc2f7
    1ff8:	00010c6f 	.word	0x00010c6f

00001ffc <MPSL_IRQ_RTC0_Handler>:
    1ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2000:	4d3b      	ldr	r5, [pc, #236]	; (20f0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2002:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2006:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 20f4 <MPSL_IRQ_RTC0_Handler+0xf8>
    200a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    200e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2012:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2016:	f04f 0400 	mov.w	r4, #0
    201a:	d019      	beq.n	2050 <MPSL_IRQ_RTC0_Handler+0x54>
    201c:	4836      	ldr	r0, [pc, #216]	; (20f8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    201e:	6800      	ldr	r0, [r0, #0]
    2020:	b1b0      	cbz	r0, 2050 <MPSL_IRQ_RTC0_Handler+0x54>
    2022:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2026:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    202a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    202e:	f8d8 1000 	ldr.w	r1, [r8]
    2032:	1a40      	subs	r0, r0, r1
    2034:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2038:	2802      	cmp	r0, #2
    203a:	d302      	bcc.n	2042 <MPSL_IRQ_RTC0_Handler+0x46>
    203c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2040:	d906      	bls.n	2050 <MPSL_IRQ_RTC0_Handler+0x54>
    2042:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2046:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    204a:	2004      	movs	r0, #4
    204c:	f7ff faac 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2050:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2054:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2058:	d01a      	beq.n	2090 <MPSL_IRQ_RTC0_Handler+0x94>
    205a:	4828      	ldr	r0, [pc, #160]	; (20fc <MPSL_IRQ_RTC0_Handler+0x100>)
    205c:	6800      	ldr	r0, [r0, #0]
    205e:	b1b8      	cbz	r0, 2090 <MPSL_IRQ_RTC0_Handler+0x94>
    2060:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    2064:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2068:	4825      	ldr	r0, [pc, #148]	; (2100 <MPSL_IRQ_RTC0_Handler+0x104>)
    206a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    206e:	f8d8 1000 	ldr.w	r1, [r8]
    2072:	1a40      	subs	r0, r0, r1
    2074:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2078:	2802      	cmp	r0, #2
    207a:	d302      	bcc.n	2082 <MPSL_IRQ_RTC0_Handler+0x86>
    207c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2080:	d906      	bls.n	2090 <MPSL_IRQ_RTC0_Handler+0x94>
    2082:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2086:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    208a:	2005      	movs	r0, #5
    208c:	f7ff fa8c 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2090:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2094:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2098:	d01a      	beq.n	20d0 <MPSL_IRQ_RTC0_Handler+0xd4>
    209a:	481a      	ldr	r0, [pc, #104]	; (2104 <MPSL_IRQ_RTC0_Handler+0x108>)
    209c:	6800      	ldr	r0, [r0, #0]
    209e:	b1b8      	cbz	r0, 20d0 <MPSL_IRQ_RTC0_Handler+0xd4>
    20a0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    20a4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    20a8:	4817      	ldr	r0, [pc, #92]	; (2108 <MPSL_IRQ_RTC0_Handler+0x10c>)
    20aa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    20ae:	f8d8 1000 	ldr.w	r1, [r8]
    20b2:	1a40      	subs	r0, r0, r1
    20b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    20b8:	2802      	cmp	r0, #2
    20ba:	d302      	bcc.n	20c2 <MPSL_IRQ_RTC0_Handler+0xc6>
    20bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    20c0:	d906      	bls.n	20d0 <MPSL_IRQ_RTC0_Handler+0xd4>
    20c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    20c6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    20ca:	2006      	movs	r0, #6
    20cc:	f7ff fa6c 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    20d0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    20d4:	2800      	cmp	r0, #0
    20d6:	bf08      	it	eq
    20d8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    20dc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    20e0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    20e4:	4809      	ldr	r0, [pc, #36]	; (210c <MPSL_IRQ_RTC0_Handler+0x110>)
    20e6:	68c1      	ldr	r1, [r0, #12]
    20e8:	1c49      	adds	r1, r1, #1
    20ea:	60c1      	str	r1, [r0, #12]
    20ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20f0:	4000b000 	.word	0x4000b000
    20f4:	4000b504 	.word	0x4000b504
    20f8:	4000b140 	.word	0x4000b140
    20fc:	4000b144 	.word	0x4000b144
    2100:	4000b004 	.word	0x4000b004
    2104:	4000b148 	.word	0x4000b148
    2108:	4000b008 	.word	0x4000b008
    210c:	2000001c 	.word	0x2000001c

00002110 <MPSL_IRQ_TIMER0_Handler>:
    2110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2114:	4d38      	ldr	r5, [pc, #224]	; (21f8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2116:	7828      	ldrb	r0, [r5, #0]
    2118:	2804      	cmp	r0, #4
    211a:	d068      	beq.n	21ee <MPSL_IRQ_TIMER0_Handler+0xde>
    211c:	1ca8      	adds	r0, r5, #2
    211e:	2201      	movs	r2, #1
    2120:	7801      	ldrb	r1, [r0, #0]
    2122:	b159      	cbz	r1, 213c <MPSL_IRQ_TIMER0_Handler+0x2c>
    2124:	2901      	cmp	r1, #1
    2126:	bf08      	it	eq
    2128:	706a      	strbeq	r2, [r5, #1]
    212a:	d002      	beq.n	2132 <MPSL_IRQ_TIMER0_Handler+0x22>
    212c:	7869      	ldrb	r1, [r5, #1]
    212e:	2900      	cmp	r1, #0
    2130:	d058      	beq.n	21e4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2132:	2102      	movs	r1, #2
    2134:	7001      	strb	r1, [r0, #0]
    2136:	7840      	ldrb	r0, [r0, #1]
    2138:	f000 fafe 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    213c:	4c2f      	ldr	r4, [pc, #188]	; (21fc <MPSL_IRQ_TIMER0_Handler+0xec>)
    213e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2142:	f04f 0800 	mov.w	r8, #0
    2146:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    214a:	f44f 7780 	mov.w	r7, #256	; 0x100
    214e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2152:	d00a      	beq.n	216a <MPSL_IRQ_TIMER0_Handler+0x5a>
    2154:	482a      	ldr	r0, [pc, #168]	; (2200 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2156:	6800      	ldr	r0, [r0, #0]
    2158:	b138      	cbz	r0, 216a <MPSL_IRQ_TIMER0_Handler+0x5a>
    215a:	2003      	movs	r0, #3
    215c:	f000 faec 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2160:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2164:	2003      	movs	r0, #3
    2166:	f7ff fa1f 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    216a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    216e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2172:	d00a      	beq.n	218a <MPSL_IRQ_TIMER0_Handler+0x7a>
    2174:	4823      	ldr	r0, [pc, #140]	; (2204 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2176:	6800      	ldr	r0, [r0, #0]
    2178:	b138      	cbz	r0, 218a <MPSL_IRQ_TIMER0_Handler+0x7a>
    217a:	2002      	movs	r0, #2
    217c:	f000 fadc 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2180:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2184:	2002      	movs	r0, #2
    2186:	f7ff fa0f 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    218a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    218e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2192:	d00a      	beq.n	21aa <MPSL_IRQ_TIMER0_Handler+0x9a>
    2194:	481c      	ldr	r0, [pc, #112]	; (2208 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2196:	6800      	ldr	r0, [r0, #0]
    2198:	b138      	cbz	r0, 21aa <MPSL_IRQ_TIMER0_Handler+0x9a>
    219a:	2001      	movs	r0, #1
    219c:	f000 facc 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    21a0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    21a4:	2001      	movs	r0, #1
    21a6:	f7ff f9ff 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    21aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    21ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    21b2:	bf08      	it	eq
    21b4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    21b8:	4814      	ldr	r0, [pc, #80]	; (220c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    21ba:	6800      	ldr	r0, [r0, #0]
    21bc:	2800      	cmp	r0, #0
    21be:	bf08      	it	eq
    21c0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    21c4:	2000      	movs	r0, #0
    21c6:	f000 fab7 	bl	2738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    21ca:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    21ce:	2004      	movs	r0, #4
    21d0:	7028      	strb	r0, [r5, #0]
    21d2:	f8c5 8004 	str.w	r8, [r5, #4]
    21d6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    21da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    21de:	2000      	movs	r0, #0
    21e0:	f7ff b9e2 	b.w	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    21e4:	f240 41a3 	movw	r1, #1187	; 0x4a3
    21e8:	206c      	movs	r0, #108	; 0x6c
    21ea:	f000 ff23 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    21f2:	2007      	movs	r0, #7
    21f4:	f7ff b9d8 	b.w	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    21f8:	2000001c 	.word	0x2000001c
    21fc:	40008000 	.word	0x40008000
    2200:	4000814c 	.word	0x4000814c
    2204:	40008148 	.word	0x40008148
    2208:	40008144 	.word	0x40008144
    220c:	40008140 	.word	0x40008140
    2210:	2201      	movs	r2, #1
    2212:	0211      	lsls	r1, r2, #8
    2214:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2218:	2000      	movs	r0, #0
    221a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    221e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2222:	f3bf 8f4f 	dsb	sy
    2226:	f3bf 8f6f 	isb	sy
    222a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    222e:	490e      	ldr	r1, [pc, #56]	; (2268 <MPSL_IRQ_TIMER0_Handler+0x158>)
    2230:	f841 2f04 	str.w	r2, [r1, #4]!
    2234:	1e43      	subs	r3, r0, #1
    2236:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    223a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    223e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2242:	4b0a      	ldr	r3, [pc, #40]	; (226c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2244:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2248:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    224c:	1d1b      	adds	r3, r3, #4
    224e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2252:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2256:	1d1b      	adds	r3, r3, #4
    2258:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    225c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2260:	60ca      	str	r2, [r1, #12]
    2262:	4903      	ldr	r1, [pc, #12]	; (2270 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2264:	7048      	strb	r0, [r1, #1]
    2266:	4770      	bx	lr
    2268:	40008000 	.word	0x40008000
    226c:	40008004 	.word	0x40008004
    2270:	2000001c 	.word	0x2000001c

00002274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2276:	6800      	ldr	r0, [r0, #0]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	4000b504 	.word	0x4000b504

00002280 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    2280:	b430      	push	{r4, r5}
    2282:	f3ef 8c10 	mrs	ip, PRIMASK
    2286:	b672      	cpsid	i
    2288:	2500      	movs	r5, #0
    228a:	4b0b      	ldr	r3, [pc, #44]	; (22b8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    228c:	4a0b      	ldr	r2, [pc, #44]	; (22bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    228e:	bf00      	nop
    2290:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2294:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    2298:	b12c      	cbz	r4, 22a6 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    229a:	68d1      	ldr	r1, [r2, #12]
    229c:	1c49      	adds	r1, r1, #1
    229e:	60d1      	str	r1, [r2, #12]
    22a0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    22a4:	e7f4      	b.n	2290 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    22a6:	68d2      	ldr	r2, [r2, #12]
    22a8:	f1bc 0f00 	cmp.w	ip, #0
    22ac:	d100      	bne.n	22b0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    22ae:	b662      	cpsie	i
    22b0:	e9c0 1200 	strd	r1, r2, [r0]
    22b4:	bc30      	pop	{r4, r5}
    22b6:	4770      	bx	lr
    22b8:	4000b000 	.word	0x4000b000
    22bc:	2000001c 	.word	0x2000001c

000022c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    22c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22c4:	4e46      	ldr	r6, [pc, #280]	; (23e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    22c6:	4605      	mov	r5, r0
    22c8:	1eb7      	subs	r7, r6, #2
    22ca:	7833      	ldrb	r3, [r6, #0]
    22cc:	68b9      	ldr	r1, [r7, #8]
    22ce:	2b01      	cmp	r3, #1
    22d0:	bf04      	itt	eq
    22d2:	42a9      	cmpeq	r1, r5
    22d4:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    22d8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    22dc:	4a41      	ldr	r2, [pc, #260]	; (23e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    22de:	6010      	str	r0, [r2, #0]
    22e0:	4a42      	ldr	r2, [pc, #264]	; (23ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    22e2:	4841      	ldr	r0, [pc, #260]	; (23e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    22e4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    22e8:	f102 0c04 	add.w	ip, r2, #4
    22ec:	f04f 0400 	mov.w	r4, #0
    22f0:	2b00      	cmp	r3, #0
    22f2:	d062      	beq.n	23ba <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    22f4:	483e      	ldr	r0, [pc, #248]	; (23f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    22f6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    22fa:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    22fe:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2302:	bf00      	nop
    2304:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    2308:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    230c:	f04f 0801 	mov.w	r8, #1
    2310:	2800      	cmp	r0, #0
    2312:	bf01      	itttt	eq
    2314:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    2318:	2800      	cmpeq	r0, #0
    231a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    231e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    2322:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2326:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    232a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    232e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2332:	4830      	ldr	r0, [pc, #192]	; (23f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2334:	f8d0 c000 	ldr.w	ip, [r0]
    2338:	eba5 0c0c 	sub.w	ip, r5, ip
    233c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    2340:	f1bc 0f02 	cmp.w	ip, #2
    2344:	d344      	bcc.n	23d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    2346:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    234a:	d841      	bhi.n	23d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    234c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    2350:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    2354:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    2358:	b12b      	cbz	r3, 2366 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    235a:	6802      	ldr	r2, [r0, #0]
    235c:	1a8a      	subs	r2, r1, r2
    235e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2362:	2a02      	cmp	r2, #2
    2364:	d3f9      	bcc.n	235a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    2366:	f8c7 8004 	str.w	r8, [r7, #4]
    236a:	703c      	strb	r4, [r7, #0]
    236c:	f7ff ff50 	bl	2210 <MPSL_IRQ_TIMER0_Handler+0x100>
    2370:	4821      	ldr	r0, [pc, #132]	; (23f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2372:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2376:	f364 0101 	bfi	r1, r4, #0, #2
    237a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    237e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2382:	2102      	movs	r1, #2
    2384:	f361 0201 	bfi	r2, r1, #0, #2
    2388:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    238c:	2104      	movs	r1, #4
    238e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    2392:	f8c0 800c 	str.w	r8, [r0, #12]
    2396:	6879      	ldr	r1, [r7, #4]
    2398:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    239c:	1580      	asrs	r0, r0, #22
    239e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    23a2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    23a6:	4915      	ldr	r1, [pc, #84]	; (23fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    23a8:	05c0      	lsls	r0, r0, #23
    23aa:	6008      	str	r0, [r1, #0]
    23ac:	2004      	movs	r0, #4
    23ae:	60bd      	str	r5, [r7, #8]
    23b0:	7070      	strb	r0, [r6, #1]
    23b2:	f886 8000 	strb.w	r8, [r6]
    23b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    23ba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    23be:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    23c2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    23c6:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    23ca:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    23ce:	e799      	b.n	2304 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    23d0:	2000      	movs	r0, #0
    23d2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    23d6:	f240 2197 	movw	r1, #663	; 0x297
    23da:	206c      	movs	r0, #108	; 0x6c
    23dc:	f000 fe2a 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23e0:	2000001e 	.word	0x2000001e
    23e4:	4001f508 	.word	0x4001f508
    23e8:	fffbfffd 	.word	0xfffbfffd
    23ec:	4000b000 	.word	0x4000b000
    23f0:	fffafffd 	.word	0xfffafffd
    23f4:	4000b504 	.word	0x4000b504
    23f8:	40008000 	.word	0x40008000
    23fc:	4001f504 	.word	0x4001f504

00002400 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	4c2a      	ldr	r4, [pc, #168]	; (24ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    2404:	68a1      	ldr	r1, [r4, #8]
    2406:	4281      	cmp	r1, r0
    2408:	bf14      	ite	ne
    240a:	2201      	movne	r2, #1
    240c:	2200      	moveq	r2, #0
    240e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 24b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    2412:	f89c 5000 	ldrb.w	r5, [ip]
    2416:	2d02      	cmp	r5, #2
    2418:	d002      	beq.n	2420 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    241a:	2a00      	cmp	r2, #0
    241c:	d034      	beq.n	2488 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    241e:	e002      	b.n	2426 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2420:	2a00      	cmp	r2, #0
    2422:	bf08      	it	eq
    2424:	bd70      	popeq	{r4, r5, r6, pc}
    2426:	7862      	ldrb	r2, [r4, #1]
    2428:	b39a      	cbz	r2, 2492 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    242a:	4b22      	ldr	r3, [pc, #136]	; (24b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    242c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2430:	601a      	str	r2, [r3, #0]
    2432:	4b21      	ldr	r3, [pc, #132]	; (24b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    2434:	1392      	asrs	r2, r2, #14
    2436:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    243a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    243e:	2200      	movs	r2, #0
    2440:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    2444:	4a1d      	ldr	r2, [pc, #116]	; (24bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2446:	6816      	ldr	r6, [r2, #0]
    2448:	1b86      	subs	r6, r0, r6
    244a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    244e:	2e02      	cmp	r6, #2
    2450:	d324      	bcc.n	249c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2452:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    2456:	d821      	bhi.n	249c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2458:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    245c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    2460:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    2464:	b12d      	cbz	r5, 2472 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    2466:	6813      	ldr	r3, [r2, #0]
    2468:	1acb      	subs	r3, r1, r3
    246a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    246e:	2b02      	cmp	r3, #2
    2470:	d3f9      	bcc.n	2466 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    2472:	4b13      	ldr	r3, [pc, #76]	; (24c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2474:	2102      	movs	r1, #2
    2476:	074a      	lsls	r2, r1, #29
    2478:	601a      	str	r2, [r3, #0]
    247a:	60a0      	str	r0, [r4, #8]
    247c:	2004      	movs	r0, #4
    247e:	f88c 0001 	strb.w	r0, [ip, #1]
    2482:	f88c 1000 	strb.w	r1, [ip]
    2486:	bd70      	pop	{r4, r5, r6, pc}
    2488:	f240 21a5 	movw	r1, #677	; 0x2a5
    248c:	206c      	movs	r0, #108	; 0x6c
    248e:	f000 fdd1 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2492:	f240 21a9 	movw	r1, #681	; 0x2a9
    2496:	206c      	movs	r0, #108	; 0x6c
    2498:	f000 fdcc 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    249c:	2000      	movs	r0, #0
    249e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    24a2:	f240 21b5 	movw	r1, #693	; 0x2b5
    24a6:	206c      	movs	r0, #108	; 0x6c
    24a8:	f000 fdc4 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24ac:	2000001c 	.word	0x2000001c
    24b0:	2000001e 	.word	0x2000001e
    24b4:	4001f508 	.word	0x4001f508
    24b8:	4000b000 	.word	0x4000b000
    24bc:	4000b504 	.word	0x4000b504
    24c0:	4001f504 	.word	0x4001f504

000024c4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    24c4:	4801      	ldr	r0, [pc, #4]	; (24cc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    24c6:	6880      	ldr	r0, [r0, #8]
    24c8:	4770      	bx	lr
    24ca:	0000      	.short	0x0000
    24cc:	2000001c 	.word	0x2000001c

000024d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    24d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24d4:	4836      	ldr	r0, [pc, #216]	; (25b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    24d6:	4a35      	ldr	r2, [pc, #212]	; (25ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    24d8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    24dc:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 25b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    24e0:	1d03      	adds	r3, r0, #4
    24e2:	2100      	movs	r1, #0
    24e4:	f89c 4000 	ldrb.w	r4, [ip]
    24e8:	b184      	cbz	r4, 250c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    24ea:	4a33      	ldr	r2, [pc, #204]	; (25b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    24ec:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    24f0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    24f4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    24f8:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    24fc:	2301      	movs	r3, #1
    24fe:	2a00      	cmp	r2, #0
    2500:	bf04      	itt	eq
    2502:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    2506:	2800      	cmpeq	r0, #0
    2508:	d111      	bne.n	252e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    250a:	e00a      	b.n	2522 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    250c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2510:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2514:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2518:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    251c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2520:	e7ea      	b.n	24f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2522:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2526:	f44f 6000 	mov.w	r0, #2048	; 0x800
    252a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    252e:	2c02      	cmp	r4, #2
    2530:	d004      	beq.n	253c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    2532:	f240 21c1 	movw	r1, #705	; 0x2c1
    2536:	206c      	movs	r0, #108	; 0x6c
    2538:	f000 fd7c 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    253c:	4e1f      	ldr	r6, [pc, #124]	; (25bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    253e:	6830      	ldr	r0, [r6, #0]
    2540:	4c1f      	ldr	r4, [pc, #124]	; (25c0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2542:	1cc0      	adds	r0, r0, #3
    2544:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2548:	68a2      	ldr	r2, [r4, #8]
    254a:	4d1e      	ldr	r5, [pc, #120]	; (25c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    254c:	4290      	cmp	r0, r2
    254e:	d00b      	beq.n	2568 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2550:	6837      	ldr	r7, [r6, #0]
    2552:	1bd7      	subs	r7, r2, r7
    2554:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2558:	2f04      	cmp	r7, #4
    255a:	d305      	bcc.n	2568 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    255c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    2560:	d802      	bhi.n	2568 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    2562:	f7ff fead 	bl	22c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2566:	e01b      	b.n	25a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2568:	6830      	ldr	r0, [r6, #0]
    256a:	1a10      	subs	r0, r2, r0
    256c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2570:	2802      	cmp	r0, #2
    2572:	d313      	bcc.n	259c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    2574:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2578:	d810      	bhi.n	259c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    257a:	4a13      	ldr	r2, [pc, #76]	; (25c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    257c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2580:	6010      	str	r0, [r2, #0]
    2582:	6063      	str	r3, [r4, #4]
    2584:	7021      	strb	r1, [r4, #0]
    2586:	606b      	str	r3, [r5, #4]
    2588:	60eb      	str	r3, [r5, #12]
    258a:	0040      	lsls	r0, r0, #1
    258c:	1f11      	subs	r1, r2, #4
    258e:	6008      	str	r0, [r1, #0]
    2590:	2004      	movs	r0, #4
    2592:	f88c 0001 	strb.w	r0, [ip, #1]
    2596:	f88c 3000 	strb.w	r3, [ip]
    259a:	e001      	b.n	25a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    259c:	6063      	str	r3, [r4, #4]
    259e:	7021      	strb	r1, [r4, #0]
    25a0:	6860      	ldr	r0, [r4, #4]
    25a2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    25a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25aa:	0000      	.short	0x0000
    25ac:	fffbfffd 	.word	0xfffbfffd
    25b0:	4000b000 	.word	0x4000b000
    25b4:	2000001e 	.word	0x2000001e
    25b8:	fffafffd 	.word	0xfffafffd
    25bc:	4000b504 	.word	0x4000b504
    25c0:	2000001c 	.word	0x2000001c
    25c4:	40008000 	.word	0x40008000
    25c8:	4001f508 	.word	0x4001f508

000025cc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    25cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25d0:	4a54      	ldr	r2, [pc, #336]	; (2724 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    25d2:	2500      	movs	r5, #0
    25d4:	2401      	movs	r4, #1
    25d6:	f892 c000 	ldrb.w	ip, [r2]
    25da:	7853      	ldrb	r3, [r2, #1]
    25dc:	f44f 76a0 	mov.w	r6, #320	; 0x140
    25e0:	2807      	cmp	r0, #7
    25e2:	d27d      	bcs.n	26e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    25e4:	e8df f000 	tbb	[pc, r0]
    25e8:	04040404 	.word	0x04040404
    25ec:	00585858 	.word	0x00585858
    25f0:	4a4d      	ldr	r2, [pc, #308]	; (2728 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    25f2:	6897      	ldr	r7, [r2, #8]
    25f4:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    25f8:	bf04      	itt	eq
    25fa:	7852      	ldrbeq	r2, [r2, #1]
    25fc:	2a00      	cmpeq	r2, #0
    25fe:	d003      	beq.n	2608 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2600:	f1bc 0f02 	cmp.w	ip, #2
    2604:	d005      	beq.n	2612 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2606:	e026      	b.n	2656 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2608:	f240 3151 	movw	r1, #849	; 0x351
    260c:	206c      	movs	r0, #108	; 0x6c
    260e:	f000 fd11 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2612:	1f1a      	subs	r2, r3, #4
    2614:	b2d2      	uxtb	r2, r2
    2616:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    261a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    261e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    2622:	2200      	movs	r2, #0
    2624:	f1bc 0f01 	cmp.w	ip, #1
    2628:	d003      	beq.n	2632 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    262a:	f1bc 0f02 	cmp.w	ip, #2
    262e:	d008      	beq.n	2642 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    2630:	e00e      	b.n	2650 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2632:	2b04      	cmp	r3, #4
    2634:	bf24      	itt	cs
    2636:	6837      	ldrcs	r7, [r6, #0]
    2638:	2f00      	cmpcs	r7, #0
    263a:	bf08      	it	eq
    263c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    2640:	e006      	b.n	2650 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    2642:	2b04      	cmp	r3, #4
    2644:	bf24      	itt	cs
    2646:	6837      	ldrcs	r7, [r6, #0]
    2648:	2f00      	cmpcs	r7, #0
    264a:	bf08      	it	eq
    264c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    2650:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    2654:	d1e5      	bne.n	2622 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    2656:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 272c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    265a:	f100 0210 	add.w	r2, r0, #16
    265e:	fa04 f202 	lsl.w	r2, r4, r2
    2662:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    2666:	f04f 0340 	mov.w	r3, #64	; 0x40
    266a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    266e:	b2db      	uxtb	r3, r3
    2670:	4463      	add	r3, ip
    2672:	601c      	str	r4, [r3, #0]
    2674:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2678:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    267c:	eba1 0303 	sub.w	r3, r1, r3
    2680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2684:	2b03      	cmp	r3, #3
    2686:	bf26      	itte	cs
    2688:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    268c:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    2690:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    2694:	d237      	bcs.n	2706 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    2696:	e03c      	b.n	2712 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    2698:	f1bc 0f00 	cmp.w	ip, #0
    269c:	d006      	beq.n	26ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    269e:	4283      	cmp	r3, r0
    26a0:	d104      	bne.n	26ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    26a2:	f240 3171 	movw	r1, #881	; 0x371
    26a6:	206c      	movs	r0, #108	; 0x6c
    26a8:	f000 fcc4 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26ac:	1f02      	subs	r2, r0, #4
    26ae:	b2d3      	uxtb	r3, r2
    26b0:	2b03      	cmp	r3, #3
    26b2:	d304      	bcc.n	26be <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    26b4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    26b8:	206c      	movs	r0, #108	; 0x6c
    26ba:	f000 fcbb 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26be:	f8df c070 	ldr.w	ip, [pc, #112]	; 2730 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    26c2:	f103 0210 	add.w	r2, r3, #16
    26c6:	fa04 f202 	lsl.w	r2, r4, r2
    26ca:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    26ce:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    26d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    26d6:	f84c 5003 	str.w	r5, [ip, r3]
    26da:	4b16      	ldr	r3, [pc, #88]	; (2734 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    26dc:	681b      	ldr	r3, [r3, #0]
    26de:	e000      	b.n	26e2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    26e0:	e01a      	b.n	2718 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    26e2:	1f00      	subs	r0, r0, #4
    26e4:	1acb      	subs	r3, r1, r3
    26e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    26ea:	b2c0      	uxtb	r0, r0
    26ec:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    26f0:	2b02      	cmp	r3, #2
    26f2:	d30b      	bcc.n	270c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    26f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    26f8:	d808      	bhi.n	270c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    26fa:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    26fe:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    2702:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    2706:	2001      	movs	r0, #1
    2708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    270c:	2100      	movs	r1, #0
    270e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2712:	2000      	movs	r0, #0
    2714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2718:	f240 3175 	movw	r1, #885	; 0x375
    271c:	206c      	movs	r0, #108	; 0x6c
    271e:	f000 fc89 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2722:	0000      	.short	0x0000
    2724:	2000001e 	.word	0x2000001e
    2728:	2000001c 	.word	0x2000001c
    272c:	40008000 	.word	0x40008000
    2730:	4000b000 	.word	0x4000b000
    2734:	4000b504 	.word	0x4000b504

00002738 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    273c:	2601      	movs	r6, #1
    273e:	2700      	movs	r7, #0
    2740:	f44f 78a0 	mov.w	r8, #320	; 0x140
    2744:	2807      	cmp	r0, #7
    2746:	d251      	bcs.n	27ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    2748:	e8df f000 	tbb	[pc, r0]
    274c:	04040404 	.word	0x04040404
    2750:	00191919 	.word	0x00191919
    2754:	f100 0110 	add.w	r1, r0, #16
    2758:	fa06 f201 	lsl.w	r2, r6, r1
    275c:	4926      	ldr	r1, [pc, #152]	; (27f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    275e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2762:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2766:	2200      	movs	r2, #0
    2768:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    276c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    2770:	508f      	str	r7, [r1, r2]
    2772:	4922      	ldr	r1, [pc, #136]	; (27fc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2774:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2778:	9000      	str	r0, [sp, #0]
    277a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    277e:	4d20      	ldr	r5, [pc, #128]	; (2800 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2780:	1f01      	subs	r1, r0, #4
    2782:	b2cc      	uxtb	r4, r1
    2784:	7829      	ldrb	r1, [r5, #0]
    2786:	b179      	cbz	r1, 27a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    2788:	786a      	ldrb	r2, [r5, #1]
    278a:	4282      	cmp	r2, r0
    278c:	d10c      	bne.n	27a8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    278e:	4a1d      	ldr	r2, [pc, #116]	; (2804 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2790:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2794:	6010      	str	r0, [r2, #0]
    2796:	2901      	cmp	r1, #1
    2798:	bf08      	it	eq
    279a:	f7ff fd39 	bleq	2210 <MPSL_IRQ_TIMER0_Handler+0x100>
    279e:	702f      	strb	r7, [r5, #0]
    27a0:	4919      	ldr	r1, [pc, #100]	; (2808 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    27a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    27a6:	6088      	str	r0, [r1, #8]
    27a8:	4918      	ldr	r1, [pc, #96]	; (280c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    27aa:	f104 0010 	add.w	r0, r4, #16
    27ae:	fa06 f000 	lsl.w	r0, r6, r0
    27b2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    27b6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    27ba:	00a0      	lsls	r0, r4, #2
    27bc:	4408      	add	r0, r1
    27be:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    27c2:	4a13      	ldr	r2, [pc, #76]	; (2810 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    27c4:	6812      	ldr	r2, [r2, #0]
    27c6:	1a80      	subs	r0, r0, r2
    27c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27cc:	2802      	cmp	r0, #2
    27ce:	d307      	bcc.n	27e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    27d0:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    27d4:	2000      	movs	r0, #0
    27d6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    27da:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    27de:	500f      	str	r7, [r1, r0]
    27e0:	480c      	ldr	r0, [pc, #48]	; (2814 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    27e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    27e6:	9000      	str	r0, [sp, #0]
    27e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27ec:	f240 31f9 	movw	r1, #1017	; 0x3f9
    27f0:	206c      	movs	r0, #108	; 0x6c
    27f2:	f000 fc1f 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27f6:	0000      	.short	0x0000
    27f8:	40008000 	.word	0x40008000
    27fc:	40008140 	.word	0x40008140
    2800:	2000001e 	.word	0x2000001e
    2804:	4001f508 	.word	0x4001f508
    2808:	2000001c 	.word	0x2000001c
    280c:	4000b000 	.word	0x4000b000
    2810:	4000b504 	.word	0x4000b504
    2814:	4000b140 	.word	0x4000b140

00002818 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2818:	4825      	ldr	r0, [pc, #148]	; (28b0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    281a:	4a24      	ldr	r2, [pc, #144]	; (28ac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    281c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2820:	4924      	ldr	r1, [pc, #144]	; (28b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    2822:	1d03      	adds	r3, r0, #4
    2824:	f891 c000 	ldrb.w	ip, [r1]
    2828:	2100      	movs	r1, #0
    282a:	f1bc 0f00 	cmp.w	ip, #0
    282e:	d010      	beq.n	2852 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    2830:	4a21      	ldr	r2, [pc, #132]	; (28b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    2832:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2836:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    283a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    283e:	bf00      	nop
    2840:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    2844:	2a00      	cmp	r2, #0
    2846:	bf04      	itt	eq
    2848:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    284c:	2800      	cmpeq	r0, #0
    284e:	d111      	bne.n	2874 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    2850:	e00a      	b.n	2868 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2852:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    2856:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    285a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    285e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    2862:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2866:	e7eb      	b.n	2840 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2868:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    286c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2870:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    2874:	4811      	ldr	r0, [pc, #68]	; (28bc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    2876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    287a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    287e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2882:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2886:	f100 0204 	add.w	r2, r0, #4
    288a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    288e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2892:	f102 0204 	add.w	r2, r2, #4
    2896:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    289a:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    289e:	f102 0204 	add.w	r2, r2, #4
    28a2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    28a6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    28aa:	4770      	bx	lr
    28ac:	fffbfffd 	.word	0xfffbfffd
    28b0:	4000b000 	.word	0x4000b000
    28b4:	2000001e 	.word	0x2000001e
    28b8:	fffafffd 	.word	0xfffafffd
    28bc:	40008000 	.word	0x40008000

000028c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    28c0:	b570      	push	{r4, r5, r6, lr}
    28c2:	481f      	ldr	r0, [pc, #124]	; (2940 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    28c4:	2400      	movs	r4, #0
    28c6:	2104      	movs	r1, #4
    28c8:	7004      	strb	r4, [r0, #0]
    28ca:	1e80      	subs	r0, r0, #2
    28cc:	7001      	strb	r1, [r0, #0]
    28ce:	0589      	lsls	r1, r1, #22
    28d0:	60c4      	str	r4, [r0, #12]
    28d2:	6081      	str	r1, [r0, #8]
    28d4:	f7ff fc9c 	bl	2210 <MPSL_IRQ_TIMER0_Handler+0x100>
    28d8:	2501      	movs	r5, #1
    28da:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    28de:	02eb      	lsls	r3, r5, #11
    28e0:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    28e4:	f3bf 8f4f 	dsb	sy
    28e8:	f3bf 8f6f 	isb	sy
    28ec:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    28f0:	4814      	ldr	r0, [pc, #80]	; (2944 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    28f2:	6045      	str	r5, [r0, #4]
    28f4:	6085      	str	r5, [r0, #8]
    28f6:	4914      	ldr	r1, [pc, #80]	; (2948 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    28f8:	680a      	ldr	r2, [r1, #0]
    28fa:	2a00      	cmp	r2, #0
    28fc:	d1fc      	bne.n	28f8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    28fe:	1e51      	subs	r1, r2, #1
    2900:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2904:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2908:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    290c:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2910:	490e      	ldr	r1, [pc, #56]	; (294c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    2912:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2916:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    291a:	1d09      	adds	r1, r1, #4
    291c:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2920:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    2924:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    2928:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    292c:	6005      	str	r5, [r0, #0]
    292e:	f44f 7182 	mov.w	r1, #260	; 0x104
    2932:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    2936:	2102      	movs	r1, #2
    2938:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    293c:	bd70      	pop	{r4, r5, r6, pc}
    293e:	0000      	.short	0x0000
    2940:	2000001e 	.word	0x2000001e
    2944:	4000b000 	.word	0x4000b000
    2948:	4000b504 	.word	0x4000b504
    294c:	4000b004 	.word	0x4000b004

00002950 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    2950:	4808      	ldr	r0, [pc, #32]	; (2974 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    2952:	f990 0000 	ldrsb.w	r0, [r0]
    2956:	2800      	cmp	r0, #0
    2958:	bfb8      	it	lt
    295a:	4770      	bxlt	lr
    295c:	f000 011f 	and.w	r1, r0, #31
    2960:	2201      	movs	r2, #1
    2962:	fa02 f101 	lsl.w	r1, r2, r1
    2966:	0940      	lsrs	r0, r0, #5
    2968:	0080      	lsls	r0, r0, #2
    296a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    296e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2972:	4770      	bx	lr
    2974:	20000080 	.word	0x20000080

00002978 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    2978:	4803      	ldr	r0, [pc, #12]	; (2988 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    297a:	7800      	ldrb	r0, [r0, #0]
    297c:	2803      	cmp	r0, #3
    297e:	bf0c      	ite	eq
    2980:	2001      	moveq	r0, #1
    2982:	2000      	movne	r0, #0
    2984:	4770      	bx	lr
    2986:	0000      	.short	0x0000
    2988:	2000007c 	.word	0x2000007c

0000298c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    298c:	4801      	ldr	r0, [pc, #4]	; (2994 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    298e:	8840      	ldrh	r0, [r0, #2]
    2990:	4770      	bx	lr
    2992:	0000      	.short	0x0000
    2994:	2000007c 	.word	0x2000007c

00002998 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    2998:	4803      	ldr	r0, [pc, #12]	; (29a8 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    299a:	7800      	ldrb	r0, [r0, #0]
    299c:	2802      	cmp	r0, #2
    299e:	bf16      	itet	ne
    29a0:	2803      	cmpne	r0, #3
    29a2:	2001      	moveq	r0, #1
    29a4:	2000      	movne	r0, #0
    29a6:	4770      	bx	lr
    29a8:	2000007c 	.word	0x2000007c

000029ac <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    29ac:	4802      	ldr	r0, [pc, #8]	; (29b8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    29ae:	2100      	movs	r1, #0
    29b0:	7001      	strb	r1, [r0, #0]
    29b2:	8041      	strh	r1, [r0, #2]
    29b4:	4770      	bx	lr
    29b6:	0000      	.short	0x0000
    29b8:	2000007c 	.word	0x2000007c

000029bc <MPSL_IRQ_CLOCK_Handler>:
    29bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29c0:	4c16      	ldr	r4, [pc, #88]	; (2a1c <MPSL_IRQ_CLOCK_Handler+0x60>)
    29c2:	7a60      	ldrb	r0, [r4, #9]
    29c4:	2800      	cmp	r0, #0
    29c6:	d027      	beq.n	2a18 <MPSL_IRQ_CLOCK_Handler+0x5c>
    29c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    29cc:	058d      	lsls	r5, r1, #22
    29ce:	4628      	mov	r0, r5
    29d0:	f001 f8d8 	bl	3b84 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    29d4:	4680      	mov	r8, r0
    29d6:	f44f 7182 	mov.w	r1, #260	; 0x104
    29da:	4628      	mov	r0, r5
    29dc:	f001 f8d2 	bl	3b84 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    29e0:	2600      	movs	r6, #0
    29e2:	4607      	mov	r7, r0
    29e4:	f1b8 0f00 	cmp.w	r8, #0
    29e8:	d009      	beq.n	29fe <MPSL_IRQ_CLOCK_Handler+0x42>
    29ea:	2001      	movs	r0, #1
    29ec:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    29f0:	7920      	ldrb	r0, [r4, #4]
    29f2:	b120      	cbz	r0, 29fe <MPSL_IRQ_CLOCK_Handler+0x42>
    29f4:	7126      	strb	r6, [r4, #4]
    29f6:	69e0      	ldr	r0, [r4, #28]
    29f8:	b108      	cbz	r0, 29fe <MPSL_IRQ_CLOCK_Handler+0x42>
    29fa:	4780      	blx	r0
    29fc:	61e6      	str	r6, [r4, #28]
    29fe:	b137      	cbz	r7, 2a0e <MPSL_IRQ_CLOCK_Handler+0x52>
    2a00:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2a04:	2002      	movs	r0, #2
    2a06:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2a0a:	f000 fa47 	bl	2e9c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    2a0e:	4640      	mov	r0, r8
    2a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a14:	f000 b858 	b.w	2ac8 <MPSL_IRQ_CLOCK_Handler+0x10c>
    2a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a1c:	2000002c 	.word	0x2000002c
    2a20:	b510      	push	{r4, lr}
    2a22:	f001 f959 	bl	3cd8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    2a26:	b930      	cbnz	r0, 2a36 <MPSL_IRQ_CLOCK_Handler+0x7a>
    2a28:	f001 f977 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    2a2c:	b918      	cbnz	r0, 2a36 <MPSL_IRQ_CLOCK_Handler+0x7a>
    2a2e:	f001 f98a 	bl	3d46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    2a32:	2800      	cmp	r0, #0
    2a34:	d002      	beq.n	2a3c <MPSL_IRQ_CLOCK_Handler+0x80>
    2a36:	4902      	ldr	r1, [pc, #8]	; (2a40 <MPSL_IRQ_CLOCK_Handler+0x84>)
    2a38:	2002      	movs	r0, #2
    2a3a:	6008      	str	r0, [r1, #0]
    2a3c:	bd10      	pop	{r4, pc}
    2a3e:	0000      	.short	0x0000
    2a40:	40000c34 	.word	0x40000c34
    2a44:	b570      	push	{r4, r5, r6, lr}
    2a46:	f000 f991 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2a4a:	f000 fa7b 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a4e:	4c09      	ldr	r4, [pc, #36]	; (2a74 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    2a50:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2a54:	b130      	cbz	r0, 2a64 <MPSL_IRQ_CLOCK_Handler+0xa8>
    2a56:	f7ff ffe3 	bl	2a20 <MPSL_IRQ_CLOCK_Handler+0x64>
    2a5a:	2001      	movs	r0, #1
    2a5c:	6128      	str	r0, [r5, #16]
    2a5e:	2004      	movs	r0, #4
    2a60:	72a0      	strb	r0, [r4, #10]
    2a62:	e004      	b.n	2a6e <MPSL_IRQ_CLOCK_Handler+0xb2>
    2a64:	2003      	movs	r0, #3
    2a66:	72a0      	strb	r0, [r4, #10]
    2a68:	2001      	movs	r0, #1
    2a6a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    2a6e:	2000      	movs	r0, #0
    2a70:	71e0      	strb	r0, [r4, #7]
    2a72:	bd70      	pop	{r4, r5, r6, pc}
    2a74:	2000002c 	.word	0x2000002c
    2a78:	b570      	push	{r4, r5, r6, lr}
    2a7a:	4c12      	ldr	r4, [pc, #72]	; (2ac4 <MPSL_IRQ_CLOCK_Handler+0x108>)
    2a7c:	79a0      	ldrb	r0, [r4, #6]
    2a7e:	b1e0      	cbz	r0, 2aba <MPSL_IRQ_CLOCK_Handler+0xfe>
    2a80:	79e1      	ldrb	r1, [r4, #7]
    2a82:	1e40      	subs	r0, r0, #1
    2a84:	4281      	cmp	r1, r0
    2a86:	da18      	bge.n	2aba <MPSL_IRQ_CLOCK_Handler+0xfe>
    2a88:	f000 fa5c 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2a8c:	4605      	mov	r5, r0
    2a8e:	f000 fb3f 	bl	3110 <mpsl_temperature_get>
    2a92:	79a1      	ldrb	r1, [r4, #6]
    2a94:	2901      	cmp	r1, #1
    2a96:	d902      	bls.n	2a9e <MPSL_IRQ_CLOCK_Handler+0xe2>
    2a98:	79e1      	ldrb	r1, [r4, #7]
    2a9a:	1c49      	adds	r1, r1, #1
    2a9c:	71e1      	strb	r1, [r4, #7]
    2a9e:	b10d      	cbz	r5, 2aa4 <MPSL_IRQ_CLOCK_Handler+0xe8>
    2aa0:	6961      	ldr	r1, [r4, #20]
    2aa2:	e000      	b.n	2aa6 <MPSL_IRQ_CLOCK_Handler+0xea>
    2aa4:	6921      	ldr	r1, [r4, #16]
    2aa6:	1a41      	subs	r1, r0, r1
    2aa8:	2902      	cmp	r1, #2
    2aaa:	da02      	bge.n	2ab2 <MPSL_IRQ_CLOCK_Handler+0xf6>
    2aac:	f111 0f02 	cmn.w	r1, #2
    2ab0:	dc07      	bgt.n	2ac2 <MPSL_IRQ_CLOCK_Handler+0x106>
    2ab2:	b10d      	cbz	r5, 2ab8 <MPSL_IRQ_CLOCK_Handler+0xfc>
    2ab4:	6160      	str	r0, [r4, #20]
    2ab6:	e000      	b.n	2aba <MPSL_IRQ_CLOCK_Handler+0xfe>
    2ab8:	6120      	str	r0, [r4, #16]
    2aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2abe:	f7ff bfc1 	b.w	2a44 <MPSL_IRQ_CLOCK_Handler+0x88>
    2ac2:	bd70      	pop	{r4, r5, r6, pc}
    2ac4:	2000002c 	.word	0x2000002c
    2ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2acc:	4606      	mov	r6, r0
    2ace:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2ad2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2ad6:	4628      	mov	r0, r5
    2ad8:	f001 f854 	bl	3b84 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2adc:	4680      	mov	r8, r0
    2ade:	f44f 7188 	mov.w	r1, #272	; 0x110
    2ae2:	4628      	mov	r0, r5
    2ae4:	f001 f84e 	bl	3b84 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2ae8:	4c27      	ldr	r4, [pc, #156]	; (2b88 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    2aea:	4682      	mov	sl, r0
    2aec:	7827      	ldrb	r7, [r4, #0]
    2aee:	f104 0008 	add.w	r0, r4, #8
    2af2:	f001 f8bb 	bl	3c6c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    2af6:	b110      	cbz	r0, 2afe <MPSL_IRQ_CLOCK_Handler+0x142>
    2af8:	f240 11b9 	movw	r1, #441	; 0x1b9
    2afc:	e016      	b.n	2b2c <MPSL_IRQ_CLOCK_Handler+0x170>
    2afe:	f04f 0901 	mov.w	r9, #1
    2b02:	b146      	cbz	r6, 2b16 <MPSL_IRQ_CLOCK_Handler+0x15a>
    2b04:	7aa0      	ldrb	r0, [r4, #10]
    2b06:	2803      	cmp	r0, #3
    2b08:	d105      	bne.n	2b16 <MPSL_IRQ_CLOCK_Handler+0x15a>
    2b0a:	2004      	movs	r0, #4
    2b0c:	72a0      	strb	r0, [r4, #10]
    2b0e:	f7ff ff87 	bl	2a20 <MPSL_IRQ_CLOCK_Handler+0x64>
    2b12:	f8c5 9010 	str.w	r9, [r5, #16]
    2b16:	2600      	movs	r6, #0
    2b18:	f1b8 0f00 	cmp.w	r8, #0
    2b1c:	d018      	beq.n	2b50 <MPSL_IRQ_CLOCK_Handler+0x194>
    2b1e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    2b22:	7aa0      	ldrb	r0, [r4, #10]
    2b24:	2804      	cmp	r0, #4
    2b26:	d004      	beq.n	2b32 <MPSL_IRQ_CLOCK_Handler+0x176>
    2b28:	f240 11cb 	movw	r1, #459	; 0x1cb
    2b2c:	206d      	movs	r0, #109	; 0x6d
    2b2e:	f000 fa81 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b32:	f001 f8d1 	bl	3cd8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    2b36:	b928      	cbnz	r0, 2b44 <MPSL_IRQ_CLOCK_Handler+0x188>
    2b38:	f001 f8ef 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    2b3c:	b910      	cbnz	r0, 2b44 <MPSL_IRQ_CLOCK_Handler+0x188>
    2b3e:	f001 f902 	bl	3d46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    2b42:	b108      	cbz	r0, 2b48 <MPSL_IRQ_CLOCK_Handler+0x18c>
    2b44:	4811      	ldr	r0, [pc, #68]	; (2b8c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    2b46:	6006      	str	r6, [r0, #0]
    2b48:	2002      	movs	r0, #2
    2b4a:	72a0      	strb	r0, [r4, #10]
    2b4c:	f000 f8f2 	bl	2d34 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2b50:	f1ba 0f00 	cmp.w	sl, #0
    2b54:	d008      	beq.n	2b68 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    2b56:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    2b5a:	7aa0      	ldrb	r0, [r4, #10]
    2b5c:	2802      	cmp	r0, #2
    2b5e:	d101      	bne.n	2b64 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    2b60:	f7ff ff8a 	bl	2a78 <MPSL_IRQ_CLOCK_Handler+0xbc>
    2b64:	f8c5 9014 	str.w	r9, [r5, #20]
    2b68:	b13f      	cbz	r7, 2b7a <MPSL_IRQ_CLOCK_Handler+0x1be>
    2b6a:	7026      	strb	r6, [r4, #0]
    2b6c:	7aa0      	ldrb	r0, [r4, #10]
    2b6e:	2802      	cmp	r0, #2
    2b70:	d101      	bne.n	2b76 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    2b72:	f7ff ff67 	bl	2a44 <MPSL_IRQ_CLOCK_Handler+0x88>
    2b76:	f000 f8dd 	bl	2d34 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2b7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b7e:	4802      	ldr	r0, [pc, #8]	; (2b88 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    2b80:	3008      	adds	r0, #8
    2b82:	f001 b88a 	b.w	3c9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    2b86:	0000      	.short	0x0000
    2b88:	2000002c 	.word	0x2000002c
    2b8c:	40000c34 	.word	0x40000c34
    2b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b94:	4c5f      	ldr	r4, [pc, #380]	; (2d14 <MPSL_IRQ_CLOCK_Handler+0x358>)
    2b96:	2700      	movs	r7, #0
    2b98:	4606      	mov	r6, r0
    2b9a:	61a7      	str	r7, [r4, #24]
    2b9c:	7842      	ldrb	r2, [r0, #1]
    2b9e:	7881      	ldrb	r1, [r0, #2]
    2ba0:	7800      	ldrb	r0, [r0, #0]
    2ba2:	72e0      	strb	r0, [r4, #11]
    2ba4:	7162      	strb	r2, [r4, #5]
    2ba6:	71a1      	strb	r1, [r4, #6]
    2ba8:	71e7      	strb	r7, [r4, #7]
    2baa:	f04f 0801 	mov.w	r8, #1
    2bae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2bb2:	2805      	cmp	r0, #5
    2bb4:	d225      	bcs.n	2c02 <MPSL_IRQ_CLOCK_Handler+0x246>
    2bb6:	e8df f000 	tbb	[pc, r0]
    2bba:	0310      	.short	0x0310
    2bbc:	00222006 	.word	0x00222006
    2bc0:	f8c4 8018 	str.w	r8, [r4, #24]
    2bc4:	e009      	b.n	2bda <MPSL_IRQ_CLOCK_Handler+0x21e>
    2bc6:	f000 f8d1 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2bca:	2101      	movs	r1, #1
    2bcc:	4628      	mov	r0, r5
    2bce:	f000 ffde 	bl	3b8e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    2bd2:	2800      	cmp	r0, #0
    2bd4:	d0f9      	beq.n	2bca <MPSL_IRQ_CLOCK_Handler+0x20e>
    2bd6:	2002      	movs	r0, #2
    2bd8:	61a0      	str	r0, [r4, #24]
    2bda:	f001 f804 	bl	3be6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    2bde:	b1b0      	cbz	r0, 2c0e <MPSL_IRQ_CLOCK_Handler+0x252>
    2be0:	f000 f9ca 	bl	2f78 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    2be4:	7e21      	ldrb	r1, [r4, #24]
    2be6:	f001 0103 	and.w	r1, r1, #3
    2bea:	4288      	cmp	r0, r1
    2bec:	d10f      	bne.n	2c0e <MPSL_IRQ_CLOCK_Handler+0x252>
    2bee:	79b0      	ldrb	r0, [r6, #6]
    2bf0:	b150      	cbz	r0, 2c08 <MPSL_IRQ_CLOCK_Handler+0x24c>
    2bf2:	2002      	movs	r0, #2
    2bf4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    2bf8:	e070      	b.n	2cdc <MPSL_IRQ_CLOCK_Handler+0x320>
    2bfa:	4847      	ldr	r0, [pc, #284]	; (2d18 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    2bfc:	e7ec      	b.n	2bd8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    2bfe:	4847      	ldr	r0, [pc, #284]	; (2d1c <MPSL_IRQ_CLOCK_Handler+0x360>)
    2c00:	e7ea      	b.n	2bd8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    2c02:	f240 313a 	movw	r1, #826	; 0x33a
    2c06:	e04d      	b.n	2ca4 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    2c08:	f000 f98a 	bl	2f20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2c0c:	e066      	b.n	2cdc <MPSL_IRQ_CLOCK_Handler+0x320>
    2c0e:	f8c5 800c 	str.w	r8, [r5, #12]
    2c12:	f44f 7a82 	mov.w	sl, #260	; 0x104
    2c16:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    2c1a:	69a0      	ldr	r0, [r4, #24]
    2c1c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    2c20:	f001 f846 	bl	3cb0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    2c24:	b940      	cbnz	r0, 2c38 <MPSL_IRQ_CLOCK_Handler+0x27c>
    2c26:	f001 f84d 	bl	3cc4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    2c2a:	b928      	cbnz	r0, 2c38 <MPSL_IRQ_CLOCK_Handler+0x27c>
    2c2c:	f001 f861 	bl	3cf2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    2c30:	b910      	cbnz	r0, 2c38 <MPSL_IRQ_CLOCK_Handler+0x27c>
    2c32:	f001 f872 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    2c36:	b138      	cbz	r0, 2c48 <MPSL_IRQ_CLOCK_Handler+0x28c>
    2c38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    2c3c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    2c40:	4937      	ldr	r1, [pc, #220]	; (2d20 <MPSL_IRQ_CLOCK_Handler+0x364>)
    2c42:	f3c0 3042 	ubfx	r0, r0, #13, #3
    2c46:	6008      	str	r0, [r1, #0]
    2c48:	f001 f832 	bl	3cb0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    2c4c:	b940      	cbnz	r0, 2c60 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    2c4e:	f001 f839 	bl	3cc4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    2c52:	b928      	cbnz	r0, 2c60 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    2c54:	f001 f84d 	bl	3cf2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    2c58:	b910      	cbnz	r0, 2c60 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    2c5a:	f001 f85e 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    2c5e:	b118      	cbz	r0, 2c68 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    2c60:	492f      	ldr	r1, [pc, #188]	; (2d20 <MPSL_IRQ_CLOCK_Handler+0x364>)
    2c62:	3110      	adds	r1, #16
    2c64:	f8c1 8000 	str.w	r8, [r1]
    2c68:	f8c5 8008 	str.w	r8, [r5, #8]
    2c6c:	2002      	movs	r0, #2
    2c6e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    2c72:	79b0      	ldrb	r0, [r6, #6]
    2c74:	bb90      	cbnz	r0, 2cdc <MPSL_IRQ_CLOCK_Handler+0x320>
    2c76:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    2c7a:	f010 0f02 	tst.w	r0, #2
    2c7e:	d00f      	beq.n	2ca0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    2c80:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2d24 <MPSL_IRQ_CLOCK_Handler+0x368>
    2c84:	f8d9 1000 	ldr.w	r1, [r9]
    2c88:	43c9      	mvns	r1, r1
    2c8a:	f341 1100 	sbfx	r1, r1, #4, #1
    2c8e:	f101 0801 	add.w	r8, r1, #1
    2c92:	f8d9 1000 	ldr.w	r1, [r9]
    2c96:	f041 0110 	orr.w	r1, r1, #16
    2c9a:	f8c9 1000 	str.w	r1, [r9]
    2c9e:	e007      	b.n	2cb0 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    2ca0:	f240 21fb 	movw	r1, #763	; 0x2fb
    2ca4:	206d      	movs	r0, #109	; 0x6d
    2ca6:	f000 f9c5 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2caa:	bf00      	nop
    2cac:	f000 fae6 	bl	327c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2cb0:	4651      	mov	r1, sl
    2cb2:	4628      	mov	r0, r5
    2cb4:	f000 ff66 	bl	3b84 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2cb8:	2800      	cmp	r0, #0
    2cba:	d0f7      	beq.n	2cac <MPSL_IRQ_CLOCK_Handler+0x2f0>
    2cbc:	f000 f930 	bl	2f20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2cc0:	f1b8 0f00 	cmp.w	r8, #0
    2cc4:	d105      	bne.n	2cd2 <MPSL_IRQ_CLOCK_Handler+0x316>
    2cc6:	f8d9 1000 	ldr.w	r1, [r9]
    2cca:	f021 0110 	bic.w	r1, r1, #16
    2cce:	f8c9 1000 	str.w	r1, [r9]
    2cd2:	2002      	movs	r0, #2
    2cd4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2cd8:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    2cdc:	79a0      	ldrb	r0, [r4, #6]
    2cde:	b170      	cbz	r0, 2cfe <MPSL_IRQ_CLOCK_Handler+0x342>
    2ce0:	7830      	ldrb	r0, [r6, #0]
    2ce2:	b960      	cbnz	r0, 2cfe <MPSL_IRQ_CLOCK_Handler+0x342>
    2ce4:	f000 f92e 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2ce8:	4606      	mov	r6, r0
    2cea:	f000 fa11 	bl	3110 <mpsl_temperature_get>
    2cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2cf2:	b116      	cbz	r6, 2cfa <MPSL_IRQ_CLOCK_Handler+0x33e>
    2cf4:	e9c4 1004 	strd	r1, r0, [r4, #16]
    2cf8:	e001      	b.n	2cfe <MPSL_IRQ_CLOCK_Handler+0x342>
    2cfa:	e9c4 0104 	strd	r0, r1, [r4, #16]
    2cfe:	2101      	movs	r1, #1
    2d00:	4628      	mov	r0, r5
    2d02:	f000 ff44 	bl	3b8e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    2d06:	b108      	cbz	r0, 2d0c <MPSL_IRQ_CLOCK_Handler+0x350>
    2d08:	f000 f916 	bl	2f38 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    2d0c:	72a7      	strb	r7, [r4, #10]
    2d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d12:	0000      	.short	0x0000
    2d14:	2000002c 	.word	0x2000002c
    2d18:	00020001 	.word	0x00020001
    2d1c:	00030001 	.word	0x00030001
    2d20:	4000053c 	.word	0x4000053c
    2d24:	e000ed10 	.word	0xe000ed10

00002d28 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    2d28:	4801      	ldr	r0, [pc, #4]	; (2d30 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    2d2a:	89c0      	ldrh	r0, [r0, #14]
    2d2c:	4770      	bx	lr
    2d2e:	0000      	.short	0x0000
    2d30:	2000002c 	.word	0x2000002c

00002d34 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    2d34:	b510      	push	{r4, lr}
    2d36:	f3ef 8410 	mrs	r4, PRIMASK
    2d3a:	b672      	cpsid	i
    2d3c:	480a      	ldr	r0, [pc, #40]	; (2d68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    2d3e:	7841      	ldrb	r1, [r0, #1]
    2d40:	b129      	cbz	r1, 2d4e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    2d42:	7841      	ldrb	r1, [r0, #1]
    2d44:	1e49      	subs	r1, r1, #1
    2d46:	7041      	strb	r1, [r0, #1]
    2d48:	7841      	ldrb	r1, [r0, #1]
    2d4a:	b129      	cbz	r1, 2d58 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    2d4c:	e008      	b.n	2d60 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    2d4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2d52:	206d      	movs	r0, #109	; 0x6d
    2d54:	f000 f96e 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d58:	7880      	ldrb	r0, [r0, #2]
    2d5a:	b908      	cbnz	r0, 2d60 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    2d5c:	f000 f900 	bl	2f60 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    2d60:	2c00      	cmp	r4, #0
    2d62:	d100      	bne.n	2d66 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    2d64:	b662      	cpsie	i
    2d66:	bd10      	pop	{r4, pc}
    2d68:	2000002c 	.word	0x2000002c

00002d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    2d6c:	b510      	push	{r4, lr}
    2d6e:	f3ef 8410 	mrs	r4, PRIMASK
    2d72:	b672      	cpsid	i
    2d74:	4806      	ldr	r0, [pc, #24]	; (2d90 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    2d76:	7841      	ldrb	r1, [r0, #1]
    2d78:	1c49      	adds	r1, r1, #1
    2d7a:	7041      	strb	r1, [r0, #1]
    2d7c:	7840      	ldrb	r0, [r0, #1]
    2d7e:	2801      	cmp	r0, #1
    2d80:	d101      	bne.n	2d86 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    2d82:	f000 ff1b 	bl	3bbc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    2d86:	2c00      	cmp	r4, #0
    2d88:	d100      	bne.n	2d8c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    2d8a:	b662      	cpsie	i
    2d8c:	bd10      	pop	{r4, pc}
    2d8e:	0000      	.short	0x0000
    2d90:	2000002c 	.word	0x2000002c

00002d94 <mpsl_clock_hfclk_release>:
    2d94:	4805      	ldr	r0, [pc, #20]	; (2dac <mpsl_clock_hfclk_release+0x18>)
    2d96:	b510      	push	{r4, lr}
    2d98:	78c1      	ldrb	r1, [r0, #3]
    2d9a:	b121      	cbz	r1, 2da6 <mpsl_clock_hfclk_release+0x12>
    2d9c:	2100      	movs	r1, #0
    2d9e:	7101      	strb	r1, [r0, #4]
    2da0:	70c1      	strb	r1, [r0, #3]
    2da2:	f7ff ffc7 	bl	2d34 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2da6:	2000      	movs	r0, #0
    2da8:	bd10      	pop	{r4, pc}
    2daa:	0000      	.short	0x0000
    2dac:	2000002c 	.word	0x2000002c

00002db0 <mpsl_clock_hfclk_request>:
    2db0:	b570      	push	{r4, r5, r6, lr}
    2db2:	4c0c      	ldr	r4, [pc, #48]	; (2de4 <mpsl_clock_hfclk_request+0x34>)
    2db4:	78e1      	ldrb	r1, [r4, #3]
    2db6:	b961      	cbnz	r1, 2dd2 <mpsl_clock_hfclk_request+0x22>
    2db8:	2501      	movs	r5, #1
    2dba:	70e5      	strb	r5, [r4, #3]
    2dbc:	61e0      	str	r0, [r4, #28]
    2dbe:	f7ff ffd5 	bl	2d6c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2dc2:	f000 f8bf 	bl	2f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2dc6:	b130      	cbz	r0, 2dd6 <mpsl_clock_hfclk_request+0x26>
    2dc8:	69e0      	ldr	r0, [r4, #28]
    2dca:	b110      	cbz	r0, 2dd2 <mpsl_clock_hfclk_request+0x22>
    2dcc:	4780      	blx	r0
    2dce:	2000      	movs	r0, #0
    2dd0:	61e0      	str	r0, [r4, #28]
    2dd2:	2000      	movs	r0, #0
    2dd4:	bd70      	pop	{r4, r5, r6, pc}
    2dd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2dda:	7125      	strb	r5, [r4, #4]
    2ddc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    2de0:	e7f7      	b.n	2dd2 <mpsl_clock_hfclk_request+0x22>
    2de2:	0000      	.short	0x0000
    2de4:	2000002c 	.word	0x2000002c

00002de8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    2de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dec:	0005      	movs	r5, r0
    2dee:	f06f 0015 	mvn.w	r0, #21
    2df2:	d03f      	beq.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2df4:	7829      	ldrb	r1, [r5, #0]
    2df6:	2904      	cmp	r1, #4
    2df8:	d83c      	bhi.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2dfa:	2900      	cmp	r1, #0
    2dfc:	7869      	ldrb	r1, [r5, #1]
    2dfe:	d03b      	beq.n	2e78 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    2e00:	2900      	cmp	r1, #0
    2e02:	d137      	bne.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2e04:	78a9      	ldrb	r1, [r5, #2]
    2e06:	2900      	cmp	r1, #0
    2e08:	d134      	bne.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2e0a:	2000      	movs	r0, #0
    2e0c:	f000 fe85 	bl	3b1a <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA+0x2a>
    2e10:	2000      	movs	r0, #0
    2e12:	f000 fe75 	bl	3b00 <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA+0x10>
    2e16:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    2e1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2e1e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    2e22:	2600      	movs	r6, #0
    2e24:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    2e28:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    2e2c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    2e30:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    2e34:	4c14      	ldr	r4, [pc, #80]	; (2e88 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    2e36:	7066      	strb	r6, [r4, #1]
    2e38:	88a8      	ldrh	r0, [r5, #4]
    2e3a:	81a0      	strh	r0, [r4, #12]
    2e3c:	f000 feb5 	bl	3baa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    2e40:	2701      	movs	r7, #1
    2e42:	b108      	cbz	r0, 2e48 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    2e44:	70e7      	strb	r7, [r4, #3]
    2e46:	7067      	strb	r7, [r4, #1]
    2e48:	2101      	movs	r1, #1
    2e4a:	4640      	mov	r0, r8
    2e4c:	f000 fe9f 	bl	3b8e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    2e50:	b108      	cbz	r0, 2e56 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    2e52:	f000 f871 	bl	2f38 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    2e56:	f240 50f5 	movw	r0, #1525	; 0x5f5
    2e5a:	81e0      	strh	r0, [r4, #14]
    2e5c:	4628      	mov	r0, r5
    2e5e:	f7ff fe97 	bl	2b90 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    2e62:	7267      	strb	r7, [r4, #9]
    2e64:	2000      	movs	r0, #0
    2e66:	f000 fe4b 	bl	3b00 <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA+0x10>
    2e6a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2e6e:	4630      	mov	r0, r6
    2e70:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    2e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e78:	2900      	cmp	r1, #0
    2e7a:	d0fb      	beq.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2e7c:	2920      	cmp	r1, #32
    2e7e:	d8f9      	bhi.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2e80:	78a9      	ldrb	r1, [r5, #2]
    2e82:	2921      	cmp	r1, #33	; 0x21
    2e84:	d9c1      	bls.n	2e0a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    2e86:	e7f5      	b.n	2e74 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    2e88:	2000002c 	.word	0x2000002c

00002e8c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    2e8c:	4802      	ldr	r0, [pc, #8]	; (2e98 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    2e8e:	7a80      	ldrb	r0, [r0, #10]
    2e90:	2800      	cmp	r0, #0
    2e92:	d000      	beq.n	2e96 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    2e94:	2001      	movs	r0, #1
    2e96:	4770      	bx	lr
    2e98:	2000002c 	.word	0x2000002c

00002e9c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    2e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e9e:	4d1f      	ldr	r5, [pc, #124]	; (2f1c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    2ea0:	7ae8      	ldrb	r0, [r5, #11]
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d10f      	bne.n	2ec6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    2ea6:	7e28      	ldrb	r0, [r5, #24]
    2ea8:	f000 0003 	and.w	r0, r0, #3
    2eac:	f000 fe8b 	bl	3bc6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    2eb0:	2800      	cmp	r0, #0
    2eb2:	d008      	beq.n	2ec6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    2eb4:	f3ef 8110 	mrs	r1, PRIMASK
    2eb8:	b672      	cpsid	i
    2eba:	f7ff ffe7 	bl	2e8c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    2ebe:	b118      	cbz	r0, 2ec8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    2ec0:	2900      	cmp	r1, #0
    2ec2:	d100      	bne.n	2ec6 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    2ec4:	b662      	cpsie	i
    2ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ec8:	2601      	movs	r6, #1
    2eca:	72ae      	strb	r6, [r5, #10]
    2ecc:	b901      	cbnz	r1, 2ed0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    2ece:	b662      	cpsie	i
    2ed0:	2018      	movs	r0, #24
    2ed2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2ed6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2eda:	61a6      	str	r6, [r4, #24]
    2edc:	f44f 7020 	mov.w	r0, #640	; 0x280
    2ee0:	f8ad 0000 	strh.w	r0, [sp]
    2ee4:	f8bd 0000 	ldrh.w	r0, [sp]
    2ee8:	1e41      	subs	r1, r0, #1
    2eea:	f8ad 1000 	strh.w	r1, [sp]
    2eee:	d2f9      	bcs.n	2ee4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    2ef0:	2700      	movs	r7, #0
    2ef2:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    2ef6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    2efa:	4808      	ldr	r0, [pc, #32]	; (2f1c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    2efc:	3008      	adds	r0, #8
    2efe:	f000 fec8 	bl	3c92 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    2f02:	702f      	strb	r7, [r5, #0]
    2f04:	f7ff fd9e 	bl	2a44 <MPSL_IRQ_CLOCK_Handler+0x88>
    2f08:	6166      	str	r6, [r4, #20]
    2f0a:	7968      	ldrb	r0, [r5, #5]
    2f0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    2f10:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    2f14:	2018      	movs	r0, #24
    2f16:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    2f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f1c:	2000002c 	.word	0x2000002c

00002f20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    2f20:	b510      	push	{r4, lr}
    2f22:	4c04      	ldr	r4, [pc, #16]	; (2f34 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    2f24:	7e20      	ldrb	r0, [r4, #24]
    2f26:	f000 0003 	and.w	r0, r0, #3
    2f2a:	f000 fe4c 	bl	3bc6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    2f2e:	2800      	cmp	r0, #0
    2f30:	d0f8      	beq.n	2f24 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    2f32:	bd10      	pop	{r4, pc}
    2f34:	2000002c 	.word	0x2000002c

00002f38 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    2f38:	4901      	ldr	r1, [pc, #4]	; (2f40 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    2f3a:	2001      	movs	r0, #1
    2f3c:	7008      	strb	r0, [r1, #0]
    2f3e:	4770      	bx	lr
    2f40:	20000081 	.word	0x20000081

00002f44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    2f44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2f48:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    2f4c:	b918      	cbnz	r0, 2f56 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    2f4e:	4803      	ldr	r0, [pc, #12]	; (2f5c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    2f50:	7800      	ldrb	r0, [r0, #0]
    2f52:	2800      	cmp	r0, #0
    2f54:	d000      	beq.n	2f58 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    2f56:	2001      	movs	r0, #1
    2f58:	4770      	bx	lr
    2f5a:	0000      	.short	0x0000
    2f5c:	20000081 	.word	0x20000081

00002f60 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    2f60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2f64:	2101      	movs	r1, #1
    2f66:	6041      	str	r1, [r0, #4]
    2f68:	2100      	movs	r1, #0
    2f6a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    2f6e:	4801      	ldr	r0, [pc, #4]	; (2f74 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    2f70:	7001      	strb	r1, [r0, #0]
    2f72:	4770      	bx	lr
    2f74:	20000081 	.word	0x20000081

00002f78 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    2f78:	4802      	ldr	r0, [pc, #8]	; (2f84 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    2f7a:	6800      	ldr	r0, [r0, #0]
    2f7c:	f000 0003 	and.w	r0, r0, #3
    2f80:	4770      	bx	lr
    2f82:	0000      	.short	0x0000
    2f84:	4000041c 	.word	0x4000041c
    2f88:	b510      	push	{r4, lr}
    2f8a:	b131      	cbz	r1, 2f9a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    2f8c:	2901      	cmp	r1, #1
    2f8e:	d007      	beq.n	2fa0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    2f90:	f240 3102 	movw	r1, #770	; 0x302
    2f94:	a005      	add	r0, pc, #20	; (adr r0, 2fac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    2f96:	f000 f821 	bl	2fdc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    2f9a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    2f9e:	e001      	b.n	2fa4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    2fa0:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    2fa4:	f000 0001 	and.w	r0, r0, #1
    2fa8:	bd10      	pop	{r4, pc}
    2faa:	0000      	.short	0x0000
    2fac:	5f66726e 	.word	0x5f66726e
    2fb0:	636f6c63 	.word	0x636f6c63
    2fb4:	00682e6b 	.word	0x00682e6b
    2fb8:	f3bf 8f4f 	dsb	sy
    2fbc:	4805      	ldr	r0, [pc, #20]	; (2fd4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    2fbe:	6801      	ldr	r1, [r0, #0]
    2fc0:	4a05      	ldr	r2, [pc, #20]	; (2fd8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    2fc2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    2fc6:	4311      	orrs	r1, r2
    2fc8:	6001      	str	r1, [r0, #0]
    2fca:	f3bf 8f4f 	dsb	sy
    2fce:	bf00      	nop
    2fd0:	e7fd      	b.n	2fce <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    2fd2:	0000      	.short	0x0000
    2fd4:	e000ed0c 	.word	0xe000ed0c
    2fd8:	05fa0004 	.word	0x05fa0004

00002fdc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    2fdc:	b672      	cpsid	i
    2fde:	4a03      	ldr	r2, [pc, #12]	; (2fec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    2fe0:	6852      	ldr	r2, [r2, #4]
    2fe2:	b102      	cbz	r2, 2fe6 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    2fe4:	4790      	blx	r2
    2fe6:	f7ff ffe7 	bl	2fb8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    2fea:	0000      	.short	0x0000
    2fec:	2000004c 	.word	0x2000004c
    2ff0:	4806      	ldr	r0, [pc, #24]	; (300c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    2ff2:	b510      	push	{r4, lr}
    2ff4:	2100      	movs	r1, #0
    2ff6:	6001      	str	r1, [r0, #0]
    2ff8:	2101      	movs	r1, #1
    2ffa:	6001      	str	r1, [r0, #0]
    2ffc:	4608      	mov	r0, r1
    2ffe:	f000 fe09 	bl	3c14 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3006:	2001      	movs	r0, #1
    3008:	f000 bdf7 	b.w	3bfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    300c:	40001ffc 	.word	0x40001ffc
    3010:	4807      	ldr	r0, [pc, #28]	; (3030 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    3012:	b510      	push	{r4, lr}
    3014:	2101      	movs	r1, #1
    3016:	6041      	str	r1, [r0, #4]
    3018:	1e89      	subs	r1, r1, #2
    301a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    301e:	200c      	movs	r0, #12
    3020:	f000 fdf8 	bl	3c14 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3028:	200c      	movs	r0, #12
    302a:	f000 bde6 	b.w	3bfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    302e:	0000      	.short	0x0000
    3030:	4000c000 	.word	0x4000c000

00003034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3034:	b50e      	push	{r1, r2, r3, lr}
    3036:	b672      	cpsid	i
    3038:	4a0f      	ldr	r2, [pc, #60]	; (3078 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    303a:	6855      	ldr	r5, [r2, #4]
    303c:	b1d5      	cbz	r5, 3074 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    303e:	2200      	movs	r2, #0
    3040:	4603      	mov	r3, r0
    3042:	466e      	mov	r6, sp
    3044:	240a      	movs	r4, #10
    3046:	e003      	b.n	3050 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3048:	fbb0 f0f4 	udiv	r0, r0, r4
    304c:	1c52      	adds	r2, r2, #1
    304e:	b2d2      	uxtb	r2, r2
    3050:	2800      	cmp	r0, #0
    3052:	d1f9      	bne.n	3048 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3054:	54b0      	strb	r0, [r6, r2]
    3056:	e009      	b.n	306c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3058:	fbb3 f0f4 	udiv	r0, r3, r4
    305c:	fb04 3010 	mls	r0, r4, r0, r3
    3060:	fbb3 f3f4 	udiv	r3, r3, r4
    3064:	1e52      	subs	r2, r2, #1
    3066:	b2d2      	uxtb	r2, r2
    3068:	3030      	adds	r0, #48	; 0x30
    306a:	54b0      	strb	r0, [r6, r2]
    306c:	2a00      	cmp	r2, #0
    306e:	d1f3      	bne.n	3058 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3070:	4630      	mov	r0, r6
    3072:	47a8      	blx	r5
    3074:	f7ff ffa0 	bl	2fb8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3078:	2000004c 	.word	0x2000004c

0000307c <mpsl_init>:
    307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3080:	4c18      	ldr	r4, [pc, #96]	; (30e4 <mpsl_init+0x68>)
    3082:	4606      	mov	r6, r0
    3084:	4617      	mov	r7, r2
    3086:	7860      	ldrb	r0, [r4, #1]
    3088:	460d      	mov	r5, r1
    308a:	b118      	cbz	r0, 3094 <mpsl_init+0x18>
    308c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3094:	f7fd f89e 	bl	1d4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    3098:	b906      	cbnz	r6, 309c <mpsl_init+0x20>
    309a:	4e13      	ldr	r6, [pc, #76]	; (30e8 <mpsl_init+0x6c>)
    309c:	6067      	str	r7, [r4, #4]
    309e:	7025      	strb	r5, [r4, #0]
    30a0:	f7ff ffa6 	bl	2ff0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    30a4:	f7ff ffb4 	bl	3010 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    30a8:	4630      	mov	r0, r6
    30aa:	f7ff fe9d 	bl	2de8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    30ae:	0006      	movs	r6, r0
    30b0:	d1ee      	bne.n	3090 <mpsl_init+0x14>
    30b2:	f7fe ff19 	bl	1ee8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    30b6:	f7ff fef1 	bl	2e9c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    30ba:	f000 fcfc 	bl	3ab6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    30be:	4628      	mov	r0, r5
    30c0:	f000 fd9b 	bl	3bfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    30c4:	2001      	movs	r0, #1
    30c6:	2d00      	cmp	r5, #0
    30c8:	db09      	blt.n	30de <mpsl_init+0x62>
    30ca:	f005 011f 	and.w	r1, r5, #31
    30ce:	fa00 f101 	lsl.w	r1, r0, r1
    30d2:	096a      	lsrs	r2, r5, #5
    30d4:	0092      	lsls	r2, r2, #2
    30d6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    30da:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    30de:	7060      	strb	r0, [r4, #1]
    30e0:	4630      	mov	r0, r6
    30e2:	e7d5      	b.n	3090 <mpsl_init+0x14>
    30e4:	2000004c 	.word	0x2000004c
    30e8:	00003c36 	.word	0x00003c36

000030ec <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    30ec:	4807      	ldr	r0, [pc, #28]	; (310c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    30ee:	f990 0000 	ldrsb.w	r0, [r0]
    30f2:	2800      	cmp	r0, #0
    30f4:	db09      	blt.n	310a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    30f6:	f000 021f 	and.w	r2, r0, #31
    30fa:	2101      	movs	r1, #1
    30fc:	4091      	lsls	r1, r2
    30fe:	0940      	lsrs	r0, r0, #5
    3100:	0080      	lsls	r0, r0, #2
    3102:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3106:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    310a:	4770      	bx	lr
    310c:	2000004c 	.word	0x2000004c

00003110 <mpsl_temperature_get>:
    3110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3114:	2601      	movs	r6, #1
    3116:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    311a:	0331      	lsls	r1, r6, #12
    311c:	f04f 0800 	mov.w	r8, #0
    3120:	4640      	mov	r0, r8
    3122:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3126:	f3bf 8f4f 	dsb	sy
    312a:	f3bf 8f6f 	isb	sy
    312e:	4c16      	ldr	r4, [pc, #88]	; (3188 <mpsl_temperature_get+0x78>)
    3130:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3134:	200c      	movs	r0, #12
    3136:	f000 fd8c 	bl	3c52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    313a:	4d14      	ldr	r5, [pc, #80]	; (318c <mpsl_temperature_get+0x7c>)
    313c:	6828      	ldr	r0, [r5, #0]
    313e:	43c0      	mvns	r0, r0
    3140:	f340 1700 	sbfx	r7, r0, #4, #1
    3144:	6828      	ldr	r0, [r5, #0]
    3146:	f040 0010 	orr.w	r0, r0, #16
    314a:	6028      	str	r0, [r5, #0]
    314c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3150:	6026      	str	r6, [r4, #0]
    3152:	1c7f      	adds	r7, r7, #1
    3154:	e002      	b.n	315c <mpsl_temperature_get+0x4c>
    3156:	bf00      	nop
    3158:	f000 f890 	bl	327c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    315c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3160:	2800      	cmp	r0, #0
    3162:	d0f9      	beq.n	3158 <mpsl_temperature_get+0x48>
    3164:	b91f      	cbnz	r7, 316e <mpsl_temperature_get+0x5e>
    3166:	6828      	ldr	r0, [r5, #0]
    3168:	f020 0010 	bic.w	r0, r0, #16
    316c:	6028      	str	r0, [r5, #0]
    316e:	4808      	ldr	r0, [pc, #32]	; (3190 <mpsl_temperature_get+0x80>)
    3170:	6805      	ldr	r5, [r0, #0]
    3172:	6066      	str	r6, [r4, #4]
    3174:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3178:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    317c:	200c      	movs	r0, #12
    317e:	f000 fd68 	bl	3c52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3182:	4628      	mov	r0, r5
    3184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3188:	4000c000 	.word	0x4000c000
    318c:	e000ed10 	.word	0xe000ed10
    3190:	4000c508 	.word	0x4000c508

00003194 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3194:	b510      	push	{r4, lr}
    3196:	4602      	mov	r2, r0
    3198:	2005      	movs	r0, #5
    319a:	490c      	ldr	r1, [pc, #48]	; (31cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    319c:	e004      	b.n	31a8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    319e:	bf00      	nop
    31a0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    31a4:	791b      	ldrb	r3, [r3, #4]
    31a6:	b133      	cbz	r3, 31b6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    31a8:	1e40      	subs	r0, r0, #1
    31aa:	b2c0      	uxtb	r0, r0
    31ac:	d2f8      	bcs.n	31a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    31ae:	2148      	movs	r1, #72	; 0x48
    31b0:	2069      	movs	r0, #105	; 0x69
    31b2:	f7ff ff3f 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31b6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    31ba:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    31be:	2200      	movs	r2, #0
    31c0:	714a      	strb	r2, [r1, #5]
    31c2:	718a      	strb	r2, [r1, #6]
    31c4:	2201      	movs	r2, #1
    31c6:	710a      	strb	r2, [r1, #4]
    31c8:	bd10      	pop	{r4, pc}
    31ca:	0000      	.short	0x0000
    31cc:	200008b0 	.word	0x200008b0

000031d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    31d0:	b510      	push	{r4, lr}
    31d2:	2805      	cmp	r0, #5
    31d4:	d301      	bcc.n	31da <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    31d6:	2158      	movs	r1, #88	; 0x58
    31d8:	e006      	b.n	31e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    31da:	490a      	ldr	r1, [pc, #40]	; (3204 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    31dc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    31e0:	7901      	ldrb	r1, [r0, #4]
    31e2:	2901      	cmp	r1, #1
    31e4:	d003      	beq.n	31ee <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    31e6:	2159      	movs	r1, #89	; 0x59
    31e8:	2069      	movs	r0, #105	; 0x69
    31ea:	f7ff ff23 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31ee:	7941      	ldrb	r1, [r0, #5]
    31f0:	7982      	ldrb	r2, [r0, #6]
    31f2:	1c49      	adds	r1, r1, #1
    31f4:	b2c9      	uxtb	r1, r1
    31f6:	428a      	cmp	r2, r1
    31f8:	d000      	beq.n	31fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    31fa:	7141      	strb	r1, [r0, #5]
    31fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3200:	f7ff bf74 	b.w	30ec <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3204:	200008b0 	.word	0x200008b0

00003208 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3208:	b570      	push	{r4, r5, r6, lr}
    320a:	2505      	movs	r5, #5
    320c:	4e0e      	ldr	r6, [pc, #56]	; (3248 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    320e:	4c0f      	ldr	r4, [pc, #60]	; (324c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3210:	e016      	b.n	3240 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3212:	7821      	ldrb	r1, [r4, #0]
    3214:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3218:	7902      	ldrb	r2, [r0, #4]
    321a:	2a01      	cmp	r2, #1
    321c:	d108      	bne.n	3230 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    321e:	7942      	ldrb	r2, [r0, #5]
    3220:	7983      	ldrb	r3, [r0, #6]
    3222:	429a      	cmp	r2, r3
    3224:	d004      	beq.n	3230 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3226:	7942      	ldrb	r2, [r0, #5]
    3228:	7182      	strb	r2, [r0, #6]
    322a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    322e:	4780      	blx	r0
    3230:	7820      	ldrb	r0, [r4, #0]
    3232:	1c40      	adds	r0, r0, #1
    3234:	b2c0      	uxtb	r0, r0
    3236:	7020      	strb	r0, [r4, #0]
    3238:	2805      	cmp	r0, #5
    323a:	d301      	bcc.n	3240 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    323c:	2000      	movs	r0, #0
    323e:	7020      	strb	r0, [r4, #0]
    3240:	1e6d      	subs	r5, r5, #1
    3242:	b2ed      	uxtb	r5, r5
    3244:	d2e5      	bcs.n	3212 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3246:	bd70      	pop	{r4, r5, r6, pc}
    3248:	200008b0 	.word	0x200008b0
    324c:	20000082 	.word	0x20000082

00003250 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3250:	b500      	push	{lr}
    3252:	f000 fd2d 	bl	3cb0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3256:	b940      	cbnz	r0, 326a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3258:	f000 fd34 	bl	3cc4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    325c:	b928      	cbnz	r0, 326a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    325e:	f000 fd48 	bl	3cf2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3262:	b910      	cbnz	r0, 326a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3264:	f000 fd59 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3268:	b108      	cbz	r0, 326e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    326a:	4802      	ldr	r0, [pc, #8]	; (3274 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    326c:	bd00      	pop	{pc}
    326e:	4802      	ldr	r0, [pc, #8]	; (3278 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3270:	bd00      	pop	{pc}
    3272:	0000      	.short	0x0000
    3274:	4000050c 	.word	0x4000050c
    3278:	4001e700 	.word	0x4001e700

0000327c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    327c:	b510      	push	{r4, lr}
    327e:	f000 fd4c 	bl	3d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3282:	b330      	cbz	r0, 32d2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3284:	f3ef 8010 	mrs	r0, PRIMASK
    3288:	b1c8      	cbz	r0, 32be <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    328a:	2100      	movs	r1, #0
    328c:	b672      	cpsid	i
    328e:	4812      	ldr	r0, [pc, #72]	; (32d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3290:	6802      	ldr	r2, [r0, #0]
    3292:	6803      	ldr	r3, [r0, #0]
    3294:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3298:	f043 0310 	orr.w	r3, r3, #16
    329c:	6003      	str	r3, [r0, #0]
    329e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    32a2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    32a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    32aa:	431c      	orrs	r4, r3
    32ac:	d000      	beq.n	32b0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    32ae:	bf40      	sev
    32b0:	bf20      	wfe
    32b2:	bf00      	nop
    32b4:	bf00      	nop
    32b6:	bf00      	nop
    32b8:	bf00      	nop
    32ba:	b112      	cbz	r2, 32c2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    32bc:	e005      	b.n	32ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    32be:	2101      	movs	r1, #1
    32c0:	e7e4      	b.n	328c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    32c2:	6802      	ldr	r2, [r0, #0]
    32c4:	f022 0210 	bic.w	r2, r2, #16
    32c8:	6002      	str	r2, [r0, #0]
    32ca:	2900      	cmp	r1, #0
    32cc:	d000      	beq.n	32d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    32ce:	b662      	cpsie	i
    32d0:	bd10      	pop	{r4, pc}
    32d2:	bf20      	wfe
    32d4:	bd10      	pop	{r4, pc}
    32d6:	0000      	.short	0x0000
    32d8:	e000ed10 	.word	0xe000ed10

000032dc <mpsl_cx_granted_ops_get>:
    32dc:	4901      	ldr	r1, [pc, #4]	; (32e4 <mpsl_cx_granted_ops_get+0x8>)
    32de:	6809      	ldr	r1, [r1, #0]
    32e0:	6889      	ldr	r1, [r1, #8]
    32e2:	4708      	bx	r1
    32e4:	20000054 	.word	0x20000054

000032e8 <mpsl_cx_register_callback>:
    32e8:	4901      	ldr	r1, [pc, #4]	; (32f0 <mpsl_cx_register_callback+0x8>)
    32ea:	6809      	ldr	r1, [r1, #0]
    32ec:	6909      	ldr	r1, [r1, #16]
    32ee:	4708      	bx	r1
    32f0:	20000054 	.word	0x20000054

000032f4 <mpsl_cx_release>:
    32f4:	4801      	ldr	r0, [pc, #4]	; (32fc <mpsl_cx_release+0x8>)
    32f6:	6800      	ldr	r0, [r0, #0]
    32f8:	6840      	ldr	r0, [r0, #4]
    32fa:	4700      	bx	r0
    32fc:	20000054 	.word	0x20000054

00003300 <mpsl_cx_request>:
    3300:	4901      	ldr	r1, [pc, #4]	; (3308 <mpsl_cx_request+0x8>)
    3302:	6809      	ldr	r1, [r1, #0]
    3304:	6809      	ldr	r1, [r1, #0]
    3306:	4708      	bx	r1
    3308:	20000054 	.word	0x20000054

0000330c <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI>:
    330c:	00003f23 00003f1b 00003f0f 00003f1f     #?...?...?...?..
    331c:	00003f17 b5104809 29047881 2910d008     .?...H...x.)...)
    332c:	2920d00a f240d008 206b11cd fe7cf7ff     .. )..@...k ..|.
    333c:	70812110 ffdef00b 0000bd10 20000058     .!.p........X.. 

0000334c <nrf_raal_continuous_ended>:
    334c:	480b      	ldr	r0, [pc, #44]	; (337c <nrf_raal_continuous_ended+0x30>)
    334e:	b510      	push	{r4, lr}
    3350:	7801      	ldrb	r1, [r0, #0]
    3352:	b131      	cbz	r1, 3362 <nrf_raal_continuous_ended+0x16>
    3354:	f3ef 8410 	mrs	r4, PRIMASK
    3358:	b672      	cpsid	i
    335a:	7881      	ldrb	r1, [r0, #2]
    335c:	2910      	cmp	r1, #16
    335e:	d005      	beq.n	336c <nrf_raal_continuous_ended+0x20>
    3360:	e008      	b.n	3374 <nrf_raal_continuous_ended+0x28>
    3362:	f240 311b 	movw	r1, #795	; 0x31b
    3366:	206b      	movs	r0, #107	; 0x6b
    3368:	f7ff fe64 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    336c:	2108      	movs	r1, #8
    336e:	7081      	strb	r1, [r0, #2]
    3370:	f7fe fc12 	bl	1b98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    3374:	2c00      	cmp	r4, #0
    3376:	d100      	bne.n	337a <nrf_raal_continuous_ended+0x2e>
    3378:	b662      	cpsie	i
    337a:	bd10      	pop	{r4, pc}
    337c:	20000058 	.word	0x20000058

00003380 <nrf_raal_continuous_mode_enter>:
    3380:	b570      	push	{r4, r5, r6, lr}
    3382:	4c12      	ldr	r4, [pc, #72]	; (33cc <nrf_raal_continuous_mode_enter+0x4c>)
    3384:	7820      	ldrb	r0, [r4, #0]
    3386:	b158      	cbz	r0, 33a0 <nrf_raal_continuous_mode_enter+0x20>
    3388:	f3ef 8510 	mrs	r5, PRIMASK
    338c:	b672      	cpsid	i
    338e:	7960      	ldrb	r0, [r4, #5]
    3390:	b148      	cbz	r0, 33a6 <nrf_raal_continuous_mode_enter+0x26>
    3392:	2802      	cmp	r0, #2
    3394:	d009      	beq.n	33aa <nrf_raal_continuous_mode_enter+0x2a>
    3396:	f44f 7139 	mov.w	r1, #740	; 0x2e4
    339a:	206b      	movs	r0, #107	; 0x6b
    339c:	f7ff fe4a 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33a0:	f240 21d1 	movw	r1, #721	; 0x2d1
    33a4:	e7f9      	b.n	339a <nrf_raal_continuous_mode_enter+0x1a>
    33a6:	2001      	movs	r0, #1
    33a8:	e003      	b.n	33b2 <nrf_raal_continuous_mode_enter+0x32>
    33aa:	78a1      	ldrb	r1, [r4, #2]
    33ac:	2000      	movs	r0, #0
    33ae:	2904      	cmp	r1, #4
    33b0:	d001      	beq.n	33b6 <nrf_raal_continuous_mode_enter+0x36>
    33b2:	7160      	strb	r0, [r4, #5]
    33b4:	e002      	b.n	33bc <nrf_raal_continuous_mode_enter+0x3c>
    33b6:	7160      	strb	r0, [r4, #5]
    33b8:	f00b ff92 	bl	f2e0 <nrf_raal_timeslot_started>
    33bc:	b905      	cbnz	r5, 33c0 <nrf_raal_continuous_mode_enter+0x40>
    33be:	b662      	cpsie	i
    33c0:	78e0      	ldrb	r0, [r4, #3]
    33c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    33c6:	f7ff bf03 	b.w	31d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    33ca:	0000      	.short	0x0000
    33cc:	20000058 	.word	0x20000058

000033d0 <nrf_raal_continuous_mode_exit>:
    33d0:	480e      	ldr	r0, [pc, #56]	; (340c <nrf_raal_continuous_mode_exit+0x3c>)
    33d2:	b510      	push	{r4, lr}
    33d4:	7801      	ldrb	r1, [r0, #0]
    33d6:	b159      	cbz	r1, 33f0 <nrf_raal_continuous_mode_exit+0x20>
    33d8:	f3ef 8110 	mrs	r1, PRIMASK
    33dc:	b672      	cpsid	i
    33de:	7942      	ldrb	r2, [r0, #5]
    33e0:	b14a      	cbz	r2, 33f6 <nrf_raal_continuous_mode_exit+0x26>
    33e2:	2a01      	cmp	r2, #1
    33e4:	d009      	beq.n	33fa <nrf_raal_continuous_mode_exit+0x2a>
    33e6:	f44f 7143 	mov.w	r1, #780	; 0x30c
    33ea:	206b      	movs	r0, #107	; 0x6b
    33ec:	f7ff fe22 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33f0:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    33f4:	e7f9      	b.n	33ea <nrf_raal_continuous_mode_exit+0x1a>
    33f6:	2202      	movs	r2, #2
    33f8:	e000      	b.n	33fc <nrf_raal_continuous_mode_exit+0x2c>
    33fa:	2200      	movs	r2, #0
    33fc:	7142      	strb	r2, [r0, #5]
    33fe:	b901      	cbnz	r1, 3402 <nrf_raal_continuous_mode_exit+0x32>
    3400:	b662      	cpsie	i
    3402:	78c0      	ldrb	r0, [r0, #3]
    3404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3408:	f7ff bee2 	b.w	31d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    340c:	20000058 	.word	0x20000058

00003410 <nrf_raal_init>:
    3410:	b510      	push	{r4, lr}
    3412:	4c13      	ldr	r4, [pc, #76]	; (3460 <nrf_raal_init+0x50>)
    3414:	7820      	ldrb	r0, [r4, #0]
    3416:	b110      	cbz	r0, 341e <nrf_raal_init+0xe>
    3418:	f240 218d 	movw	r1, #653	; 0x28d
    341c:	e01d      	b.n	345a <nrf_raal_init+0x4a>
    341e:	2000      	movs	r0, #0
    3420:	7060      	strb	r0, [r4, #1]
    3422:	2001      	movs	r0, #1
    3424:	70a0      	strb	r0, [r4, #2]
    3426:	480f      	ldr	r0, [pc, #60]	; (3464 <nrf_raal_init+0x54>)
    3428:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    342c:	6001      	str	r1, [r0, #0]
    342e:	2105      	movs	r1, #5
    3430:	8101      	strh	r1, [r0, #8]
    3432:	21b7      	movs	r1, #183	; 0xb7
    3434:	8141      	strh	r1, [r0, #10]
    3436:	490c      	ldr	r1, [pc, #48]	; (3468 <nrf_raal_init+0x58>)
    3438:	6041      	str	r1, [r0, #4]
    343a:	480c      	ldr	r0, [pc, #48]	; (346c <nrf_raal_init+0x5c>)
    343c:	f7ff feaa 	bl	3194 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3440:	70e0      	strb	r0, [r4, #3]
    3442:	2100      	movs	r1, #0
    3444:	480a      	ldr	r0, [pc, #40]	; (3470 <nrf_raal_init+0x60>)
    3446:	f7fe fb7f 	bl	1b48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    344a:	7120      	strb	r0, [r4, #4]
    344c:	2820      	cmp	r0, #32
    344e:	d002      	beq.n	3456 <nrf_raal_init+0x46>
    3450:	2001      	movs	r0, #1
    3452:	7020      	strb	r0, [r4, #0]
    3454:	bd10      	pop	{r4, pc}
    3456:	f44f 7127 	mov.w	r1, #668	; 0x29c
    345a:	206b      	movs	r0, #107	; 0x6b
    345c:	f7ff fdea 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3460:	20000058 	.word	0x20000058
    3464:	20000460 	.word	0x20000460
    3468:	0f423fff 	.word	0x0f423fff
    346c:	00003599 	.word	0x00003599
    3470:	000034c9 	.word	0x000034c9

00003474 <nrf_raal_timeslot_us_left_get>:
    3474:	4811      	ldr	r0, [pc, #68]	; (34bc <nrf_raal_timeslot_us_left_get+0x48>)
    3476:	b510      	push	{r4, lr}
    3478:	7881      	ldrb	r1, [r0, #2]
    347a:	2904      	cmp	r1, #4
    347c:	d001      	beq.n	3482 <nrf_raal_timeslot_us_left_get+0xe>
    347e:	2000      	movs	r0, #0
    3480:	bd10      	pop	{r4, pc}
    3482:	7980      	ldrb	r0, [r0, #6]
    3484:	b1a8      	cbz	r0, 34b2 <nrf_raal_timeslot_us_left_get+0x3e>
    3486:	f7fe fef5 	bl	2274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    348a:	1c44      	adds	r4, r0, #1
    348c:	2001      	movs	r0, #1
    348e:	f000 fb2f 	bl	3af0 <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA>
    3492:	1b00      	subs	r0, r0, r4
    3494:	0200      	lsls	r0, r0, #8
    3496:	17c1      	asrs	r1, r0, #31
    3498:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    349c:	1200      	asrs	r0, r0, #8
    349e:	2800      	cmp	r0, #0
    34a0:	dc00      	bgt.n	34a4 <nrf_raal_timeslot_us_left_get+0x30>
    34a2:	2000      	movs	r0, #0
    34a4:	4906      	ldr	r1, [pc, #24]	; (34c0 <nrf_raal_timeslot_us_left_get+0x4c>)
    34a6:	fba0 0101 	umull	r0, r1, r0, r1
    34aa:	0bc0      	lsrs	r0, r0, #15
    34ac:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    34b0:	bd10      	pop	{r4, pc}
    34b2:	4804      	ldr	r0, [pc, #16]	; (34c4 <nrf_raal_timeslot_us_left_get+0x50>)
    34b4:	6801      	ldr	r1, [r0, #0]
    34b6:	8940      	ldrh	r0, [r0, #10]
    34b8:	1a08      	subs	r0, r1, r0
    34ba:	bd10      	pop	{r4, pc}
    34bc:	20000058 	.word	0x20000058
    34c0:	000f4240 	.word	0x000f4240
    34c4:	20000460 	.word	0x20000460
    34c8:	b570      	push	{r4, r5, r6, lr}
    34ca:	460e      	mov	r6, r1
    34cc:	f7fe fed2 	bl	2274 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    34d0:	2500      	movs	r5, #0
    34d2:	4c2e      	ldr	r4, [pc, #184]	; (358c <nrf_raal_timeslot_us_left_get+0x118>)
    34d4:	2e08      	cmp	r6, #8
    34d6:	d231      	bcs.n	353c <nrf_raal_timeslot_us_left_get+0xc8>
    34d8:	e8df f006 	tbb	[pc, r6]
    34dc:	3b3b0430 	.word	0x3b3b0430
    34e0:	414c1c21 	.word	0x414c1c21
    34e4:	2101      	movs	r1, #1
    34e6:	2002      	movs	r0, #2
    34e8:	f000 f900 	bl	36ec <nrf_raal_timeslot_us_left_get+0x278>
    34ec:	7860      	ldrb	r0, [r4, #1]
    34ee:	b158      	cbz	r0, 3508 <nrf_raal_timeslot_us_left_get+0x94>
    34f0:	2004      	movs	r0, #4
    34f2:	70a0      	strb	r0, [r4, #2]
    34f4:	4826      	ldr	r0, [pc, #152]	; (3590 <nrf_raal_timeslot_us_left_get+0x11c>)
    34f6:	6800      	ldr	r0, [r0, #0]
    34f8:	60a0      	str	r0, [r4, #8]
    34fa:	71a5      	strb	r5, [r4, #6]
    34fc:	7960      	ldrb	r0, [r4, #5]
    34fe:	2802      	cmp	r0, #2
    3500:	d03f      	beq.n	3582 <nrf_raal_timeslot_us_left_get+0x10e>
    3502:	f00b feed 	bl	f2e0 <nrf_raal_timeslot_started>
    3506:	e03c      	b.n	3582 <nrf_raal_timeslot_us_left_get+0x10e>
    3508:	2020      	movs	r0, #32
    350a:	70a0      	strb	r0, [r4, #2]
    350c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3510:	f7fe bb42 	b.w	1b98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    3514:	f240 2115 	movw	r1, #533	; 0x215
    3518:	206b      	movs	r0, #107	; 0x6b
    351a:	f7ff fd8b 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    351e:	7860      	ldrb	r0, [r4, #1]
    3520:	2800      	cmp	r0, #0
    3522:	d00b      	beq.n	353c <nrf_raal_timeslot_us_left_get+0xc8>
    3524:	78a0      	ldrb	r0, [r4, #2]
    3526:	2804      	cmp	r0, #4
    3528:	d009      	beq.n	353e <nrf_raal_timeslot_us_left_get+0xca>
    352a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    352e:	2002      	movs	r0, #2
    3530:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    3534:	f3bf 8f4f 	dsb	sy
    3538:	f3bf 8f6f 	isb	sy
    353c:	bd70      	pop	{r4, r5, r6, pc}
    353e:	f000 f873 	bl	3628 <nrf_raal_timeslot_us_left_get+0x1b4>
    3542:	b118      	cbz	r0, 354c <nrf_raal_timeslot_us_left_get+0xd8>
    3544:	4813      	ldr	r0, [pc, #76]	; (3594 <nrf_raal_timeslot_us_left_get+0x120>)
    3546:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    354a:	b9b0      	cbnz	r0, 357a <nrf_raal_timeslot_us_left_get+0x106>
    354c:	f007 faa2 	bl	aa94 <nrf_802154_radio_irq_handler>
    3550:	bd70      	pop	{r4, r5, r6, pc}
    3552:	2101      	movs	r1, #1
    3554:	2002      	movs	r0, #2
    3556:	e004      	b.n	3562 <nrf_raal_timeslot_us_left_get+0xee>
    3558:	2001      	movs	r0, #1
    355a:	70a0      	strb	r0, [r4, #2]
    355c:	bd70      	pop	{r4, r5, r6, pc}
    355e:	2101      	movs	r1, #1
    3560:	2028      	movs	r0, #40	; 0x28
    3562:	f000 f8c3 	bl	36ec <nrf_raal_timeslot_us_left_get+0x278>
    3566:	7860      	ldrb	r0, [r4, #1]
    3568:	2800      	cmp	r0, #0
    356a:	d0f5      	beq.n	3558 <nrf_raal_timeslot_us_left_get+0xe4>
    356c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3570:	f000 b896 	b.w	36a0 <nrf_raal_timeslot_us_left_get+0x22c>
    3574:	f000 f858 	bl	3628 <nrf_raal_timeslot_us_left_get+0x1b4>
    3578:	b118      	cbz	r0, 3582 <nrf_raal_timeslot_us_left_get+0x10e>
    357a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    357e:	f7ff becf 	b.w	3320 <sym_OW4FCVYV7CD5K552B5EATVXKXK5HNDFX7JEYSUI+0x14>
    3582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3586:	f000 b857 	b.w	3638 <nrf_raal_timeslot_us_left_get+0x1c4>
    358a:	0000      	.short	0x0000
    358c:	20000058 	.word	0x20000058
    3590:	20000460 	.word	0x20000460
    3594:	4000b000 	.word	0x4000b000
    3598:	b570      	push	{r4, r5, r6, lr}
    359a:	f3ef 8410 	mrs	r4, PRIMASK
    359e:	b672      	cpsid	i
    35a0:	4d20      	ldr	r5, [pc, #128]	; (3624 <nrf_raal_timeslot_us_left_get+0x1b0>)
    35a2:	2000      	movs	r0, #0
    35a4:	7969      	ldrb	r1, [r5, #5]
    35a6:	7168      	strb	r0, [r5, #5]
    35a8:	b3c1      	cbz	r1, 361c <nrf_raal_timeslot_us_left_get+0x1a8>
    35aa:	2901      	cmp	r1, #1
    35ac:	d006      	beq.n	35bc <nrf_raal_timeslot_us_left_get+0x148>
    35ae:	2902      	cmp	r1, #2
    35b0:	d018      	beq.n	35e4 <nrf_raal_timeslot_us_left_get+0x170>
    35b2:	f384 8810 	msr	PRIMASK, r4
    35b6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    35ba:	e028      	b.n	360e <nrf_raal_timeslot_us_left_get+0x19a>
    35bc:	f384 8810 	msr	PRIMASK, r4
    35c0:	7868      	ldrb	r0, [r5, #1]
    35c2:	b110      	cbz	r0, 35ca <nrf_raal_timeslot_us_left_get+0x156>
    35c4:	f240 115b 	movw	r1, #347	; 0x15b
    35c8:	e021      	b.n	360e <nrf_raal_timeslot_us_left_get+0x19a>
    35ca:	2100      	movs	r1, #0
    35cc:	2014      	movs	r0, #20
    35ce:	f000 f88d 	bl	36ec <nrf_raal_timeslot_us_left_get+0x278>
    35d2:	2001      	movs	r0, #1
    35d4:	7068      	strb	r0, [r5, #1]
    35d6:	78a8      	ldrb	r0, [r5, #2]
    35d8:	2801      	cmp	r0, #1
    35da:	d121      	bne.n	3620 <nrf_raal_timeslot_us_left_get+0x1ac>
    35dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    35e0:	f000 b85e 	b.w	36a0 <nrf_raal_timeslot_us_left_get+0x22c>
    35e4:	7869      	ldrb	r1, [r5, #1]
    35e6:	b149      	cbz	r1, 35fc <nrf_raal_timeslot_us_left_get+0x188>
    35e8:	7068      	strb	r0, [r5, #1]
    35ea:	78a8      	ldrb	r0, [r5, #2]
    35ec:	2808      	cmp	r0, #8
    35ee:	d015      	beq.n	361c <nrf_raal_timeslot_us_left_get+0x1a8>
    35f0:	dc07      	bgt.n	3602 <nrf_raal_timeslot_us_left_get+0x18e>
    35f2:	2802      	cmp	r0, #2
    35f4:	d012      	beq.n	361c <nrf_raal_timeslot_us_left_get+0x1a8>
    35f6:	2804      	cmp	r0, #4
    35f8:	d107      	bne.n	360a <nrf_raal_timeslot_us_left_get+0x196>
    35fa:	e00b      	b.n	3614 <nrf_raal_timeslot_us_left_get+0x1a0>
    35fc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    3600:	e005      	b.n	360e <nrf_raal_timeslot_us_left_get+0x19a>
    3602:	2810      	cmp	r0, #16
    3604:	d006      	beq.n	3614 <nrf_raal_timeslot_us_left_get+0x1a0>
    3606:	2820      	cmp	r0, #32
    3608:	d008      	beq.n	361c <nrf_raal_timeslot_us_left_get+0x1a8>
    360a:	f44f 71c4 	mov.w	r1, #392	; 0x188
    360e:	206b      	movs	r0, #107	; 0x6b
    3610:	f7ff fd10 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3614:	2020      	movs	r0, #32
    3616:	70a8      	strb	r0, [r5, #2]
    3618:	f7fe fabe 	bl	1b98 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    361c:	f384 8810 	msr	PRIMASK, r4
    3620:	bd70      	pop	{r4, r5, r6, pc}
    3622:	0000      	.short	0x0000
    3624:	20000058 	.word	0x20000058
    3628:	4802      	ldr	r0, [pc, #8]	; (3634 <nrf_raal_timeslot_us_left_get+0x1c0>)
    362a:	7980      	ldrb	r0, [r0, #6]
    362c:	2801      	cmp	r0, #1
    362e:	d000      	beq.n	3632 <nrf_raal_timeslot_us_left_get+0x1be>
    3630:	2000      	movs	r0, #0
    3632:	4770      	bx	lr
    3634:	20000058 	.word	0x20000058
    3638:	b570      	push	{r4, r5, r6, lr}
    363a:	2003      	movs	r0, #3
    363c:	f7fd ff68 	bl	1510 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    3640:	4d15      	ldr	r5, [pc, #84]	; (3698 <nrf_raal_timeslot_us_left_get+0x224>)
    3642:	6829      	ldr	r1, [r5, #0]
    3644:	4281      	cmp	r1, r0
    3646:	d800      	bhi.n	364a <nrf_raal_timeslot_us_left_get+0x1d6>
    3648:	4608      	mov	r0, r1
    364a:	4606      	mov	r6, r0
    364c:	2103      	movs	r1, #3
    364e:	f7fd fe81 	bl	1354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    3652:	4c12      	ldr	r4, [pc, #72]	; (369c <nrf_raal_timeslot_us_left_get+0x228>)
    3654:	2101      	movs	r1, #1
    3656:	b130      	cbz	r0, 3666 <nrf_raal_timeslot_us_left_get+0x1f2>
    3658:	2801      	cmp	r0, #1
    365a:	d018      	beq.n	368e <nrf_raal_timeslot_us_left_get+0x21a>
    365c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    3660:	206b      	movs	r0, #107	; 0x6b
    3662:	f7ff fce7 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3666:	6828      	ldr	r0, [r5, #0]
    3668:	42b0      	cmp	r0, r6
    366a:	68a0      	ldr	r0, [r4, #8]
    366c:	d106      	bne.n	367c <nrf_raal_timeslot_us_left_get+0x208>
    366e:	f7fe fbad 	bl	1dcc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    3672:	6828      	ldr	r0, [r5, #0]
    3674:	68a1      	ldr	r1, [r4, #8]
    3676:	4408      	add	r0, r1
    3678:	60a0      	str	r0, [r4, #8]
    367a:	bd70      	pop	{r4, r5, r6, pc}
    367c:	4430      	add	r0, r6
    367e:	60a0      	str	r0, [r4, #8]
    3680:	71a1      	strb	r1, [r4, #6]
    3682:	8969      	ldrh	r1, [r5, #10]
    3684:	1a40      	subs	r0, r0, r1
    3686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    368a:	f7fe bb9f 	b.w	1dcc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    368e:	71a1      	strb	r1, [r4, #6]
    3690:	8968      	ldrh	r0, [r5, #10]
    3692:	68a1      	ldr	r1, [r4, #8]
    3694:	1a08      	subs	r0, r1, r0
    3696:	e7f6      	b.n	3686 <nrf_raal_timeslot_us_left_get+0x212>
    3698:	20000460 	.word	0x20000460
    369c:	20000058 	.word	0x20000058
    36a0:	b510      	push	{r4, lr}
    36a2:	2218      	movs	r2, #24
    36a4:	2100      	movs	r1, #0
    36a6:	480f      	ldr	r0, [pc, #60]	; (36e4 <nrf_raal_timeslot_us_left_get+0x270>)
    36a8:	f000 fbd1 	bl	3e4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    36ac:	480d      	ldr	r0, [pc, #52]	; (36e4 <nrf_raal_timeslot_us_left_get+0x270>)
    36ae:	2101      	movs	r1, #1
    36b0:	7001      	strb	r1, [r0, #0]
    36b2:	2100      	movs	r1, #0
    36b4:	8101      	strh	r1, [r0, #8]
    36b6:	2103      	movs	r1, #3
    36b8:	7281      	strb	r1, [r0, #10]
    36ba:	f100 0118 	add.w	r1, r0, #24
    36be:	680a      	ldr	r2, [r1, #0]
    36c0:	6042      	str	r2, [r0, #4]
    36c2:	6849      	ldr	r1, [r1, #4]
    36c4:	6101      	str	r1, [r0, #16]
    36c6:	4808      	ldr	r0, [pc, #32]	; (36e8 <nrf_raal_timeslot_us_left_get+0x274>)
    36c8:	2102      	movs	r1, #2
    36ca:	7081      	strb	r1, [r0, #2]
    36cc:	4905      	ldr	r1, [pc, #20]	; (36e4 <nrf_raal_timeslot_us_left_get+0x270>)
    36ce:	7900      	ldrb	r0, [r0, #4]
    36d0:	f7fe f848 	bl	1764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    36d4:	2800      	cmp	r0, #0
    36d6:	d104      	bne.n	36e2 <nrf_raal_timeslot_us_left_get+0x26e>
    36d8:	f44f 7183 	mov.w	r1, #262	; 0x106
    36dc:	206b      	movs	r0, #107	; 0x6b
    36de:	f7ff fca9 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36e2:	bd10      	pop	{r4, pc}
    36e4:	20000448 	.word	0x20000448
    36e8:	20000058 	.word	0x20000058
    36ec:	4a0b      	ldr	r2, [pc, #44]	; (371c <nrf_raal_timeslot_us_left_get+0x2a8>)
    36ee:	b510      	push	{r4, lr}
    36f0:	7892      	ldrb	r2, [r2, #2]
    36f2:	b112      	cbz	r2, 36fa <nrf_raal_timeslot_us_left_get+0x286>
    36f4:	1e53      	subs	r3, r2, #1
    36f6:	421a      	tst	r2, r3
    36f8:	d001      	beq.n	36fe <nrf_raal_timeslot_us_left_get+0x28a>
    36fa:	21e0      	movs	r1, #224	; 0xe0
    36fc:	e009      	b.n	3712 <nrf_raal_timeslot_us_left_get+0x29e>
    36fe:	b121      	cbz	r1, 370a <nrf_raal_timeslot_us_left_get+0x296>
    3700:	4002      	ands	r2, r0
    3702:	0690      	lsls	r0, r2, #26
    3704:	d108      	bne.n	3718 <nrf_raal_timeslot_us_left_get+0x2a4>
    3706:	21e5      	movs	r1, #229	; 0xe5
    3708:	e003      	b.n	3712 <nrf_raal_timeslot_us_left_get+0x29e>
    370a:	4382      	bics	r2, r0
    370c:	0690      	lsls	r0, r2, #26
    370e:	d103      	bne.n	3718 <nrf_raal_timeslot_us_left_get+0x2a4>
    3710:	21e9      	movs	r1, #233	; 0xe9
    3712:	206b      	movs	r0, #107	; 0x6b
    3714:	f7ff fc8e 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3718:	bd10      	pop	{r4, pc}
    371a:	0000      	.short	0x0000
    371c:	20000058 	.word	0x20000058

00003720 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    3720:	4901      	ldr	r1, [pc, #4]	; (3728 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    3722:	2001      	movs	r0, #1
    3724:	7088      	strb	r0, [r1, #2]
    3726:	4770      	bx	lr
    3728:	20000064 	.word	0x20000064

0000372c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    372c:	00003fa5 00003fdd 00003fc7 00003fb5     .?...?...?...?..
    373c:	00003fc1 00003faf 00003fa3 00003fa1     .?...?...?...?..
    374c:	00003fd9 00003fcd 00003fbb 00003fa9     .?...?...?...?..
    375c:	00003f9b 00003f93 00003f97 00003f8d     .?...?...?...?..

0000376c <mpsl_fem_abort_clear>:
    376c:	4801      	ldr	r0, [pc, #4]	; (3774 <mpsl_fem_abort_clear+0x8>)
    376e:	6800      	ldr	r0, [r0, #0]
    3770:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    3772:	4700      	bx	r0
    3774:	20000078 	.word	0x20000078

00003778 <mpsl_fem_abort_set>:
    3778:	4a01      	ldr	r2, [pc, #4]	; (3780 <mpsl_fem_abort_set+0x8>)
    377a:	6812      	ldr	r2, [r2, #0]
    377c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    377e:	4710      	bx	r2
    3780:	20000078 	.word	0x20000078

00003784 <mpsl_fem_deactivate_now>:
    3784:	4901      	ldr	r1, [pc, #4]	; (378c <mpsl_fem_deactivate_now+0x8>)
    3786:	6809      	ldr	r1, [r1, #0]
    3788:	6989      	ldr	r1, [r1, #24]
    378a:	4708      	bx	r1
    378c:	20000078 	.word	0x20000078

00003790 <mpsl_fem_disable>:
    3790:	4801      	ldr	r0, [pc, #4]	; (3798 <mpsl_fem_disable+0x8>)
    3792:	6800      	ldr	r0, [r0, #0]
    3794:	6800      	ldr	r0, [r0, #0]
    3796:	4700      	bx	r0
    3798:	20000078 	.word	0x20000078

0000379c <mpsl_fem_lna_configuration_clear>:
    379c:	4801      	ldr	r0, [pc, #4]	; (37a4 <mpsl_fem_lna_configuration_clear+0x8>)
    379e:	6800      	ldr	r0, [r0, #0]
    37a0:	6940      	ldr	r0, [r0, #20]
    37a2:	4700      	bx	r0
    37a4:	20000078 	.word	0x20000078

000037a8 <mpsl_fem_lna_configuration_set>:
    37a8:	4a01      	ldr	r2, [pc, #4]	; (37b0 <mpsl_fem_lna_configuration_set+0x8>)
    37aa:	6812      	ldr	r2, [r2, #0]
    37ac:	68d2      	ldr	r2, [r2, #12]
    37ae:	4710      	bx	r2
    37b0:	20000078 	.word	0x20000078

000037b4 <mpsl_fem_pa_configuration_clear>:
    37b4:	4801      	ldr	r0, [pc, #4]	; (37bc <mpsl_fem_pa_configuration_clear+0x8>)
    37b6:	6800      	ldr	r0, [r0, #0]
    37b8:	6900      	ldr	r0, [r0, #16]
    37ba:	4700      	bx	r0
    37bc:	20000078 	.word	0x20000078

000037c0 <mpsl_fem_pa_configuration_set>:
    37c0:	4a01      	ldr	r2, [pc, #4]	; (37c8 <mpsl_fem_pa_configuration_set+0x8>)
    37c2:	6812      	ldr	r2, [r2, #0]
    37c4:	6892      	ldr	r2, [r2, #8]
    37c6:	4710      	bx	r2
    37c8:	20000078 	.word	0x20000078

000037cc <mpsl_fem_pa_gain_set>:
    37cc:	4901      	ldr	r1, [pc, #4]	; (37d4 <mpsl_fem_pa_gain_set+0x8>)
    37ce:	6809      	ldr	r1, [r1, #0]
    37d0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    37d2:	4708      	bx	r1
    37d4:	20000078 	.word	0x20000078

000037d8 <mpsl_fem_tx_power_split>:
    37d8:	4b01      	ldr	r3, [pc, #4]	; (37e0 <mpsl_fem_tx_power_split+0x8>)
    37da:	681b      	ldr	r3, [r3, #0]
    37dc:	685b      	ldr	r3, [r3, #4]
    37de:	4718      	bx	r3
    37e0:	20000078 	.word	0x20000078

000037e4 <mpsl_fem_device_config_254_apply_get>:
    37e4:	4801      	ldr	r0, [pc, #4]	; (37ec <mpsl_fem_device_config_254_apply_get+0x8>)
    37e6:	7800      	ldrb	r0, [r0, #0]
    37e8:	4770      	bx	lr
    37ea:	0000      	.short	0x0000
    37ec:	20000083 	.word	0x20000083

000037f0 <__udivmoddi4>:
    37f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37f4:	4686      	mov	lr, r0
    37f6:	468c      	mov	ip, r1
    37f8:	4608      	mov	r0, r1
    37fa:	9e08      	ldr	r6, [sp, #32]
    37fc:	4615      	mov	r5, r2
    37fe:	4674      	mov	r4, lr
    3800:	4619      	mov	r1, r3
    3802:	2b00      	cmp	r3, #0
    3804:	f040 80c2 	bne.w	398c <__udivmoddi4+0x19c>
    3808:	4285      	cmp	r5, r0
    380a:	fab2 f282 	clz	r2, r2
    380e:	d945      	bls.n	389c <__udivmoddi4+0xac>
    3810:	b14a      	cbz	r2, 3826 <__udivmoddi4+0x36>
    3812:	f1c2 0320 	rsb	r3, r2, #32
    3816:	fa00 fc02 	lsl.w	ip, r0, r2
    381a:	fa2e f303 	lsr.w	r3, lr, r3
    381e:	4095      	lsls	r5, r2
    3820:	ea43 0c0c 	orr.w	ip, r3, ip
    3824:	4094      	lsls	r4, r2
    3826:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    382a:	b2a8      	uxth	r0, r5
    382c:	fbbc f8fe 	udiv	r8, ip, lr
    3830:	0c23      	lsrs	r3, r4, #16
    3832:	fb0e cc18 	mls	ip, lr, r8, ip
    3836:	fb08 f900 	mul.w	r9, r8, r0
    383a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    383e:	4599      	cmp	r9, r3
    3840:	d928      	bls.n	3894 <__udivmoddi4+0xa4>
    3842:	18eb      	adds	r3, r5, r3
    3844:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    3848:	d204      	bcs.n	3854 <__udivmoddi4+0x64>
    384a:	4599      	cmp	r9, r3
    384c:	d902      	bls.n	3854 <__udivmoddi4+0x64>
    384e:	f1a8 0702 	sub.w	r7, r8, #2
    3852:	442b      	add	r3, r5
    3854:	eba3 0309 	sub.w	r3, r3, r9
    3858:	b2a4      	uxth	r4, r4
    385a:	fbb3 fcfe 	udiv	ip, r3, lr
    385e:	fb0e 331c 	mls	r3, lr, ip, r3
    3862:	fb0c f000 	mul.w	r0, ip, r0
    3866:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    386a:	42a0      	cmp	r0, r4
    386c:	d914      	bls.n	3898 <__udivmoddi4+0xa8>
    386e:	192c      	adds	r4, r5, r4
    3870:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    3874:	d204      	bcs.n	3880 <__udivmoddi4+0x90>
    3876:	42a0      	cmp	r0, r4
    3878:	d902      	bls.n	3880 <__udivmoddi4+0x90>
    387a:	f1ac 0302 	sub.w	r3, ip, #2
    387e:	442c      	add	r4, r5
    3880:	1a24      	subs	r4, r4, r0
    3882:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    3886:	b11e      	cbz	r6, 3890 <__udivmoddi4+0xa0>
    3888:	40d4      	lsrs	r4, r2
    388a:	2300      	movs	r3, #0
    388c:	6034      	str	r4, [r6, #0]
    388e:	6073      	str	r3, [r6, #4]
    3890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3894:	4647      	mov	r7, r8
    3896:	e7dd      	b.n	3854 <__udivmoddi4+0x64>
    3898:	4663      	mov	r3, ip
    389a:	e7f1      	b.n	3880 <__udivmoddi4+0x90>
    389c:	bb92      	cbnz	r2, 3904 <__udivmoddi4+0x114>
    389e:	1b43      	subs	r3, r0, r5
    38a0:	2101      	movs	r1, #1
    38a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    38a6:	b2af      	uxth	r7, r5
    38a8:	fbb3 fcfe 	udiv	ip, r3, lr
    38ac:	0c20      	lsrs	r0, r4, #16
    38ae:	fb0e 331c 	mls	r3, lr, ip, r3
    38b2:	fb0c f807 	mul.w	r8, ip, r7
    38b6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    38ba:	4598      	cmp	r8, r3
    38bc:	d962      	bls.n	3984 <__udivmoddi4+0x194>
    38be:	18eb      	adds	r3, r5, r3
    38c0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    38c4:	d204      	bcs.n	38d0 <__udivmoddi4+0xe0>
    38c6:	4598      	cmp	r8, r3
    38c8:	d902      	bls.n	38d0 <__udivmoddi4+0xe0>
    38ca:	f1ac 0002 	sub.w	r0, ip, #2
    38ce:	442b      	add	r3, r5
    38d0:	eba3 0308 	sub.w	r3, r3, r8
    38d4:	b2a4      	uxth	r4, r4
    38d6:	fbb3 fcfe 	udiv	ip, r3, lr
    38da:	fb0e 331c 	mls	r3, lr, ip, r3
    38de:	fb0c f707 	mul.w	r7, ip, r7
    38e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    38e6:	42a7      	cmp	r7, r4
    38e8:	d94e      	bls.n	3988 <__udivmoddi4+0x198>
    38ea:	192c      	adds	r4, r5, r4
    38ec:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    38f0:	d204      	bcs.n	38fc <__udivmoddi4+0x10c>
    38f2:	42a7      	cmp	r7, r4
    38f4:	d902      	bls.n	38fc <__udivmoddi4+0x10c>
    38f6:	f1ac 0302 	sub.w	r3, ip, #2
    38fa:	442c      	add	r4, r5
    38fc:	1be4      	subs	r4, r4, r7
    38fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    3902:	e7c0      	b.n	3886 <__udivmoddi4+0x96>
    3904:	f1c2 0320 	rsb	r3, r2, #32
    3908:	fa20 f103 	lsr.w	r1, r0, r3
    390c:	4095      	lsls	r5, r2
    390e:	4090      	lsls	r0, r2
    3910:	fa2e f303 	lsr.w	r3, lr, r3
    3914:	4303      	orrs	r3, r0
    3916:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    391a:	b2af      	uxth	r7, r5
    391c:	fbb1 fcfe 	udiv	ip, r1, lr
    3920:	fb0e 101c 	mls	r0, lr, ip, r1
    3924:	0c19      	lsrs	r1, r3, #16
    3926:	fb0c f807 	mul.w	r8, ip, r7
    392a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    392e:	4588      	cmp	r8, r1
    3930:	fa04 f402 	lsl.w	r4, r4, r2
    3934:	d922      	bls.n	397c <__udivmoddi4+0x18c>
    3936:	1869      	adds	r1, r5, r1
    3938:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    393c:	d204      	bcs.n	3948 <__udivmoddi4+0x158>
    393e:	4588      	cmp	r8, r1
    3940:	d902      	bls.n	3948 <__udivmoddi4+0x158>
    3942:	f1ac 0002 	sub.w	r0, ip, #2
    3946:	4429      	add	r1, r5
    3948:	eba1 0108 	sub.w	r1, r1, r8
    394c:	b29b      	uxth	r3, r3
    394e:	fbb1 fcfe 	udiv	ip, r1, lr
    3952:	fb0e 111c 	mls	r1, lr, ip, r1
    3956:	fb0c f707 	mul.w	r7, ip, r7
    395a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    395e:	429f      	cmp	r7, r3
    3960:	d90e      	bls.n	3980 <__udivmoddi4+0x190>
    3962:	18eb      	adds	r3, r5, r3
    3964:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    3968:	d204      	bcs.n	3974 <__udivmoddi4+0x184>
    396a:	429f      	cmp	r7, r3
    396c:	d902      	bls.n	3974 <__udivmoddi4+0x184>
    396e:	f1ac 0102 	sub.w	r1, ip, #2
    3972:	442b      	add	r3, r5
    3974:	1bdb      	subs	r3, r3, r7
    3976:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    397a:	e792      	b.n	38a2 <__udivmoddi4+0xb2>
    397c:	4660      	mov	r0, ip
    397e:	e7e3      	b.n	3948 <__udivmoddi4+0x158>
    3980:	4661      	mov	r1, ip
    3982:	e7f7      	b.n	3974 <__udivmoddi4+0x184>
    3984:	4660      	mov	r0, ip
    3986:	e7a3      	b.n	38d0 <__udivmoddi4+0xe0>
    3988:	4663      	mov	r3, ip
    398a:	e7b7      	b.n	38fc <__udivmoddi4+0x10c>
    398c:	4283      	cmp	r3, r0
    398e:	d906      	bls.n	399e <__udivmoddi4+0x1ae>
    3990:	b916      	cbnz	r6, 3998 <__udivmoddi4+0x1a8>
    3992:	2100      	movs	r1, #0
    3994:	4608      	mov	r0, r1
    3996:	e77b      	b.n	3890 <__udivmoddi4+0xa0>
    3998:	e9c6 e000 	strd	lr, r0, [r6]
    399c:	e7f9      	b.n	3992 <__udivmoddi4+0x1a2>
    399e:	fab3 f783 	clz	r7, r3
    39a2:	b98f      	cbnz	r7, 39c8 <__udivmoddi4+0x1d8>
    39a4:	4283      	cmp	r3, r0
    39a6:	d301      	bcc.n	39ac <__udivmoddi4+0x1bc>
    39a8:	4572      	cmp	r2, lr
    39aa:	d808      	bhi.n	39be <__udivmoddi4+0x1ce>
    39ac:	ebbe 0402 	subs.w	r4, lr, r2
    39b0:	eb60 0303 	sbc.w	r3, r0, r3
    39b4:	2001      	movs	r0, #1
    39b6:	469c      	mov	ip, r3
    39b8:	b91e      	cbnz	r6, 39c2 <__udivmoddi4+0x1d2>
    39ba:	2100      	movs	r1, #0
    39bc:	e768      	b.n	3890 <__udivmoddi4+0xa0>
    39be:	4638      	mov	r0, r7
    39c0:	e7fa      	b.n	39b8 <__udivmoddi4+0x1c8>
    39c2:	e9c6 4c00 	strd	r4, ip, [r6]
    39c6:	e7f8      	b.n	39ba <__udivmoddi4+0x1ca>
    39c8:	f1c7 0c20 	rsb	ip, r7, #32
    39cc:	40bb      	lsls	r3, r7
    39ce:	fa22 f40c 	lsr.w	r4, r2, ip
    39d2:	431c      	orrs	r4, r3
    39d4:	fa2e f10c 	lsr.w	r1, lr, ip
    39d8:	fa20 f30c 	lsr.w	r3, r0, ip
    39dc:	40b8      	lsls	r0, r7
    39de:	4301      	orrs	r1, r0
    39e0:	ea4f 4914 	mov.w	r9, r4, lsr #16
    39e4:	fa0e f507 	lsl.w	r5, lr, r7
    39e8:	fbb3 f8f9 	udiv	r8, r3, r9
    39ec:	fa1f fe84 	uxth.w	lr, r4
    39f0:	fb09 3018 	mls	r0, r9, r8, r3
    39f4:	0c0b      	lsrs	r3, r1, #16
    39f6:	fb08 fa0e 	mul.w	sl, r8, lr
    39fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    39fe:	459a      	cmp	sl, r3
    3a00:	fa02 f207 	lsl.w	r2, r2, r7
    3a04:	d940      	bls.n	3a88 <__udivmoddi4+0x298>
    3a06:	18e3      	adds	r3, r4, r3
    3a08:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    3a0c:	d204      	bcs.n	3a18 <__udivmoddi4+0x228>
    3a0e:	459a      	cmp	sl, r3
    3a10:	d902      	bls.n	3a18 <__udivmoddi4+0x228>
    3a12:	f1a8 0002 	sub.w	r0, r8, #2
    3a16:	4423      	add	r3, r4
    3a18:	eba3 030a 	sub.w	r3, r3, sl
    3a1c:	b289      	uxth	r1, r1
    3a1e:	fbb3 f8f9 	udiv	r8, r3, r9
    3a22:	fb09 3318 	mls	r3, r9, r8, r3
    3a26:	fb08 fe0e 	mul.w	lr, r8, lr
    3a2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3a2e:	458e      	cmp	lr, r1
    3a30:	d92c      	bls.n	3a8c <__udivmoddi4+0x29c>
    3a32:	1861      	adds	r1, r4, r1
    3a34:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    3a38:	d204      	bcs.n	3a44 <__udivmoddi4+0x254>
    3a3a:	458e      	cmp	lr, r1
    3a3c:	d902      	bls.n	3a44 <__udivmoddi4+0x254>
    3a3e:	f1a8 0302 	sub.w	r3, r8, #2
    3a42:	4421      	add	r1, r4
    3a44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    3a48:	fba0 9802 	umull	r9, r8, r0, r2
    3a4c:	eba1 010e 	sub.w	r1, r1, lr
    3a50:	4541      	cmp	r1, r8
    3a52:	46ce      	mov	lr, r9
    3a54:	4643      	mov	r3, r8
    3a56:	d302      	bcc.n	3a5e <__udivmoddi4+0x26e>
    3a58:	d106      	bne.n	3a68 <__udivmoddi4+0x278>
    3a5a:	454d      	cmp	r5, r9
    3a5c:	d204      	bcs.n	3a68 <__udivmoddi4+0x278>
    3a5e:	ebb9 0e02 	subs.w	lr, r9, r2
    3a62:	eb68 0304 	sbc.w	r3, r8, r4
    3a66:	3801      	subs	r0, #1
    3a68:	2e00      	cmp	r6, #0
    3a6a:	d0a6      	beq.n	39ba <__udivmoddi4+0x1ca>
    3a6c:	ebb5 020e 	subs.w	r2, r5, lr
    3a70:	eb61 0103 	sbc.w	r1, r1, r3
    3a74:	fa01 fc0c 	lsl.w	ip, r1, ip
    3a78:	fa22 f307 	lsr.w	r3, r2, r7
    3a7c:	ea4c 0303 	orr.w	r3, ip, r3
    3a80:	40f9      	lsrs	r1, r7
    3a82:	e9c6 3100 	strd	r3, r1, [r6]
    3a86:	e798      	b.n	39ba <__udivmoddi4+0x1ca>
    3a88:	4640      	mov	r0, r8
    3a8a:	e7c5      	b.n	3a18 <__udivmoddi4+0x228>
    3a8c:	4643      	mov	r3, r8
    3a8e:	e7d9      	b.n	3a44 <__udivmoddi4+0x254>
    3a90:	2804      	cmp	r0, #4
    3a92:	d202      	bcs.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a94:	f04f 0028 	mov.w	r0, #40	; 0x28
    3a98:	4770      	bx	lr
    3a9a:	d102      	bne.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a9c:	f04f 0010 	mov.w	r0, #16
    3aa0:	4770      	bx	lr
    3aa2:	f04f 0000 	mov.w	r0, #0
    3aa6:	4770      	bx	lr
    3aa8:	2100      	movs	r1, #0
    3aaa:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    3aae:	f800 1f24 	strb.w	r1, [r0, #36]!
    3ab2:	7041      	strb	r1, [r0, #1]
    3ab4:	4770      	bx	lr

00003ab6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    3ab6:	b570      	push	{r4, r5, r6, lr}
    3ab8:	f7fc fbf6 	bl	2a8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    3abc:	4605      	mov	r5, r0
    3abe:	2400      	movs	r4, #0
    3ac0:	e006      	b.n	3ad0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    3ac2:	4620      	mov	r0, r4
    3ac4:	f7fc fbf6 	bl	2b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    3ac8:	f7ff ffee 	bl	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3acc:	1c64      	adds	r4, r4, #1
    3ace:	b2e4      	uxtb	r4, r4
    3ad0:	42ac      	cmp	r4, r5
    3ad2:	d3f6      	bcc.n	3ac2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    3ad4:	bd70      	pop	{r4, r5, r6, pc}

00003ad6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    3ad6:	0a41      	lsrs	r1, r0, #9
    3ad8:	f643 5209 	movw	r2, #15625	; 0x3d09
    3adc:	4351      	muls	r1, r2
    3ade:	f3c0 0008 	ubfx	r0, r0, #0, #9
    3ae2:	fb10 f002 	smulbb	r0, r0, r2
    3ae6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    3aea:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    3aee:	4770      	bx	lr

00003af0 <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA>:
    3af0:	0080      	lsls	r0, r0, #2
    3af2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3af6:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3afa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3afe:	4770      	bx	lr
    3b00:	2800      	cmp	r0, #0
    3b02:	db09      	blt.n	3b18 <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA+0x28>
    3b04:	f000 021f 	and.w	r2, r0, #31
    3b08:	2101      	movs	r1, #1
    3b0a:	4091      	lsls	r1, r2
    3b0c:	0940      	lsrs	r0, r0, #5
    3b0e:	0080      	lsls	r0, r0, #2
    3b10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3b14:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    3b18:	4770      	bx	lr
    3b1a:	2800      	cmp	r0, #0
    3b1c:	db0d      	blt.n	3b3a <sym_FY657WZD5QKMAW2TUBIU3E4BZ5M7DEVBKNG65HA+0x4a>
    3b1e:	f000 021f 	and.w	r2, r0, #31
    3b22:	2101      	movs	r1, #1
    3b24:	4091      	lsls	r1, r2
    3b26:	0940      	lsrs	r0, r0, #5
    3b28:	0080      	lsls	r0, r0, #2
    3b2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3b2e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    3b32:	f3bf 8f4f 	dsb	sy
    3b36:	f3bf 8f6f 	isb	sy
    3b3a:	4770      	bx	lr

00003b3c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    3b3c:	b570      	push	{r4, r5, r6, lr}
    3b3e:	4602      	mov	r2, r0
    3b40:	2000      	movs	r0, #0
    3b42:	2900      	cmp	r1, #0
    3b44:	d01d      	beq.n	3b82 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    3b46:	fba2 0101 	umull	r0, r1, r2, r1
    3b4a:	0a40      	lsrs	r0, r0, #9
    3b4c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    3b50:	0a49      	lsrs	r1, r1, #9
    3b52:	1c40      	adds	r0, r0, #1
    3b54:	f141 0100 	adc.w	r1, r1, #0
    3b58:	f240 72a1 	movw	r2, #1953	; 0x7a1
    3b5c:	1883      	adds	r3, r0, r2
    3b5e:	f141 0100 	adc.w	r1, r1, #0
    3b62:	1c5b      	adds	r3, r3, #1
    3b64:	f141 0400 	adc.w	r4, r1, #0
    3b68:	2100      	movs	r1, #0
    3b6a:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    3b6e:	41a1      	sbcs	r1, r4
    3b70:	d203      	bcs.n	3b7a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    3b72:	2172      	movs	r1, #114	; 0x72
    3b74:	206d      	movs	r0, #109	; 0x6d
    3b76:	f7ff fa5d 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b7a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    3b7e:	fbb0 f0f2 	udiv	r0, r0, r2
    3b82:	bd70      	pop	{r4, r5, r6, pc}
    3b84:	5840      	ldr	r0, [r0, r1]
    3b86:	2800      	cmp	r0, #0
    3b88:	d000      	beq.n	3b8c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    3b8a:	2001      	movs	r0, #1
    3b8c:	4770      	bx	lr
    3b8e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    3b92:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    3b96:	f002 0201 	and.w	r2, r2, #1
    3b9a:	03c0      	lsls	r0, r0, #15
    3b9c:	d503      	bpl.n	3ba6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    3b9e:	428a      	cmp	r2, r1
    3ba0:	d101      	bne.n	3ba6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    3ba2:	2001      	movs	r0, #1
    3ba4:	4770      	bx	lr
    3ba6:	2000      	movs	r0, #0
    3ba8:	4770      	bx	lr

00003baa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    3baa:	b510      	push	{r4, lr}
    3bac:	2101      	movs	r1, #1
    3bae:	0788      	lsls	r0, r1, #30
    3bb0:	f7ff f9ea 	bl	2f88 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d000      	beq.n	3bba <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    3bb8:	2001      	movs	r0, #1
    3bba:	bd10      	pop	{r4, pc}

00003bbc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    3bbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3bc0:	2101      	movs	r1, #1
    3bc2:	6001      	str	r1, [r0, #0]
    3bc4:	4770      	bx	lr

00003bc6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    3bc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3bca:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    3bce:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    3bd2:	f002 0203 	and.w	r2, r2, #3
    3bd6:	03c9      	lsls	r1, r1, #15
    3bd8:	d503      	bpl.n	3be2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    3bda:	4282      	cmp	r2, r0
    3bdc:	d101      	bne.n	3be2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    3bde:	2001      	movs	r0, #1
    3be0:	4770      	bx	lr
    3be2:	2000      	movs	r0, #0
    3be4:	4770      	bx	lr

00003be6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    3be6:	b510      	push	{r4, lr}
    3be8:	2100      	movs	r1, #0
    3bea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3bee:	f7ff f9cb 	bl	2f88 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d000      	beq.n	3bf8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    3bf6:	2001      	movs	r0, #1
    3bf8:	bd10      	pop	{r4, pc}
    3bfa:	2800      	cmp	r0, #0
    3bfc:	db09      	blt.n	3c12 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    3bfe:	f000 021f 	and.w	r2, r0, #31
    3c02:	2101      	movs	r1, #1
    3c04:	4091      	lsls	r1, r2
    3c06:	0940      	lsrs	r0, r0, #5
    3c08:	0080      	lsls	r0, r0, #2
    3c0a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3c0e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    3c12:	4770      	bx	lr
    3c14:	2800      	cmp	r0, #0
    3c16:	db0d      	blt.n	3c34 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    3c18:	f000 021f 	and.w	r2, r0, #31
    3c1c:	2101      	movs	r1, #1
    3c1e:	4091      	lsls	r1, r2
    3c20:	0940      	lsrs	r0, r0, #5
    3c22:	0080      	lsls	r0, r0, #2
    3c24:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3c28:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    3c2c:	f3bf 8f4f 	dsb	sy
    3c30:	f3bf 8f6f 	isb	sy
    3c34:	4770      	bx	lr
    3c36:	1000      	.short	0x1000
    3c38:	00fa0002 	.word	0x00fa0002
    3c3c:	edb80000 	.word	0xedb80000
    3c40:	0ef2aa4d 	.word	0x0ef2aa4d
    3c44:	b5ea3202 	.word	0xb5ea3202
    3c48:	d1502fde 	.word	0xd1502fde
    3c4c:	d2b55ab7 	.word	0xd2b55ab7
    3c50:	41c7      	.short	0x41c7
    3c52:	2800      	cmp	r0, #0
    3c54:	db09      	blt.n	3c6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    3c56:	f000 021f 	and.w	r2, r0, #31
    3c5a:	2101      	movs	r1, #1
    3c5c:	4091      	lsls	r1, r2
    3c5e:	0940      	lsrs	r0, r0, #5
    3c60:	0080      	lsls	r0, r0, #2
    3c62:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3c66:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    3c6a:	4770      	bx	lr

00003c6c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    3c6c:	f3ef 8110 	mrs	r1, PRIMASK
    3c70:	b672      	cpsid	i
    3c72:	7802      	ldrb	r2, [r0, #0]
    3c74:	2a01      	cmp	r2, #1
    3c76:	d001      	beq.n	3c7c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    3c78:	2201      	movs	r2, #1
    3c7a:	e000      	b.n	3c7e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    3c7c:	2200      	movs	r2, #0
    3c7e:	2301      	movs	r3, #1
    3c80:	7003      	strb	r3, [r0, #0]
    3c82:	b901      	cbnz	r1, 3c86 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    3c84:	b662      	cpsie	i
    3c86:	b10a      	cbz	r2, 3c8c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    3c88:	2000      	movs	r0, #0
    3c8a:	4770      	bx	lr
    3c8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3c90:	4770      	bx	lr

00003c92 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    3c92:	2100      	movs	r1, #0
    3c94:	7001      	strb	r1, [r0, #0]
    3c96:	4608      	mov	r0, r1
    3c98:	4770      	bx	lr

00003c9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    3c9a:	f3ef 8110 	mrs	r1, PRIMASK
    3c9e:	b672      	cpsid	i
    3ca0:	2200      	movs	r2, #0
    3ca2:	7002      	strb	r2, [r0, #0]
    3ca4:	b901      	cbnz	r1, 3ca8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    3ca6:	b662      	cpsie	i
    3ca8:	2000      	movs	r0, #0
    3caa:	4770      	bx	lr

00003cac <mpsl_low_priority_process>:
    3cac:	f7ff baac 	b.w	3208 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00003cb0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    3cb0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3cb4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3cb8:	280f      	cmp	r0, #15
    3cba:	d001      	beq.n	3cc0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    3cbc:	2000      	movs	r0, #0
    3cbe:	4770      	bx	lr
    3cc0:	2001      	movs	r0, #1
    3cc2:	4770      	bx	lr

00003cc4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    3cc4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3cc8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3ccc:	280a      	cmp	r0, #10
    3cce:	d001      	beq.n	3cd4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    3cd0:	2000      	movs	r0, #0
    3cd2:	4770      	bx	lr
    3cd4:	2001      	movs	r0, #1
    3cd6:	4770      	bx	lr

00003cd8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    3cd8:	b500      	push	{lr}
    3cda:	f7ff fff3 	bl	3cc4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3cde:	b120      	cbz	r0, 3cea <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    3ce0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3ce4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    3ce8:	b108      	cbz	r0, 3cee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    3cea:	2000      	movs	r0, #0
    3cec:	bd00      	pop	{pc}
    3cee:	2001      	movs	r0, #1
    3cf0:	bd00      	pop	{pc}

00003cf2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    3cf2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3cf6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3cfa:	280e      	cmp	r0, #14
    3cfc:	d001      	beq.n	3d02 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    3cfe:	2000      	movs	r0, #0
    3d00:	4770      	bx	lr
    3d02:	2001      	movs	r0, #1
    3d04:	4770      	bx	lr

00003d06 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    3d06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3d0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3d0e:	2810      	cmp	r0, #16
    3d10:	d001      	beq.n	3d16 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    3d12:	2000      	movs	r0, #0
    3d14:	4770      	bx	lr
    3d16:	2001      	movs	r0, #1
    3d18:	4770      	bx	lr

00003d1a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    3d1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3d1e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3d22:	2806      	cmp	r0, #6
    3d24:	d003      	beq.n	3d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    3d26:	1c40      	adds	r0, r0, #1
    3d28:	d001      	beq.n	3d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    3d2a:	2000      	movs	r0, #0
    3d2c:	4770      	bx	lr
    3d2e:	2001      	movs	r0, #1
    3d30:	4770      	bx	lr

00003d32 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    3d32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3d36:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3d3a:	280d      	cmp	r0, #13
    3d3c:	d001      	beq.n	3d42 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    3d3e:	2000      	movs	r0, #0
    3d40:	4770      	bx	lr
    3d42:	2001      	movs	r0, #1
    3d44:	4770      	bx	lr

00003d46 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    3d46:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3d4a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    3d4e:	2808      	cmp	r0, #8
    3d50:	d001      	beq.n	3d56 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    3d52:	2000      	movs	r0, #0
    3d54:	4770      	bx	lr
    3d56:	2001      	movs	r0, #1
    3d58:	4770      	bx	lr

00003d5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    3d5a:	b4f0      	push	{r4, r5, r6, r7}
    3d5c:	ea80 0c01 	eor.w	ip, r0, r1
    3d60:	4603      	mov	r3, r0
    3d62:	f01c 0f03 	tst.w	ip, #3
    3d66:	d13c      	bne.n	3de2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    3d68:	f013 0f03 	tst.w	r3, #3
    3d6c:	d00b      	beq.n	3d86 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    3d6e:	2a00      	cmp	r2, #0
    3d70:	bf04      	itt	eq
    3d72:	bcf0      	popeq	{r4, r5, r6, r7}
    3d74:	4770      	bxeq	lr
    3d76:	f811 cb01 	ldrb.w	ip, [r1], #1
    3d7a:	f803 cb01 	strb.w	ip, [r3], #1
    3d7e:	1e52      	subs	r2, r2, #1
    3d80:	f013 0f03 	tst.w	r3, #3
    3d84:	d1f3      	bne.n	3d6e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    3d86:	2a03      	cmp	r2, #3
    3d88:	d94f      	bls.n	3e2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    3d8a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    3d8e:	d24c      	bcs.n	3e2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    3d90:	f1c2 0c00 	rsb	ip, r2, #0
    3d94:	ea4f 74ec 	mov.w	r4, ip, asr #31
    3d98:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    3d9c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    3da0:	f1cc 0c00 	rsb	ip, ip, #0
    3da4:	f1bc 0f00 	cmp.w	ip, #0
    3da8:	dd1b      	ble.n	3de2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    3daa:	1f0d      	subs	r5, r1, #4
    3dac:	1f1c      	subs	r4, r3, #4
    3dae:	f01c 0f01 	tst.w	ip, #1
    3db2:	d003      	beq.n	3dbc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    3db4:	f855 6f04 	ldr.w	r6, [r5, #4]!
    3db8:	f844 6f04 	str.w	r6, [r4, #4]!
    3dbc:	ea5f 066c 	movs.w	r6, ip, asr #1
    3dc0:	d007      	beq.n	3dd2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    3dc2:	686f      	ldr	r7, [r5, #4]
    3dc4:	6067      	str	r7, [r4, #4]
    3dc6:	f855 7f08 	ldr.w	r7, [r5, #8]!
    3dca:	f844 7f08 	str.w	r7, [r4, #8]!
    3dce:	1e76      	subs	r6, r6, #1
    3dd0:	d1f7      	bne.n	3dc2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    3dd2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    3dd6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    3dda:	f1cc 0c00 	rsb	ip, ip, #0
    3dde:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    3de2:	2a00      	cmp	r2, #0
    3de4:	bf04      	itt	eq
    3de6:	bcf0      	popeq	{r4, r5, r6, r7}
    3de8:	4770      	bxeq	lr
    3dea:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    3dee:	d226      	bcs.n	3e3e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    3df0:	2a00      	cmp	r2, #0
    3df2:	bfdc      	itt	le
    3df4:	bcf0      	pople	{r4, r5, r6, r7}
    3df6:	4770      	bxle	lr
    3df8:	1e49      	subs	r1, r1, #1
    3dfa:	1e5b      	subs	r3, r3, #1
    3dfc:	f012 0f01 	tst.w	r2, #1
    3e00:	d003      	beq.n	3e0a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    3e02:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    3e06:	f803 cf01 	strb.w	ip, [r3, #1]!
    3e0a:	1052      	asrs	r2, r2, #1
    3e0c:	bf04      	itt	eq
    3e0e:	bcf0      	popeq	{r4, r5, r6, r7}
    3e10:	4770      	bxeq	lr
    3e12:	f891 c001 	ldrb.w	ip, [r1, #1]
    3e16:	f883 c001 	strb.w	ip, [r3, #1]
    3e1a:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    3e1e:	f803 cf02 	strb.w	ip, [r3, #2]!
    3e22:	1e52      	subs	r2, r2, #1
    3e24:	d1f5      	bne.n	3e12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    3e26:	bcf0      	pop	{r4, r5, r6, r7}
    3e28:	4770      	bx	lr
    3e2a:	2a04      	cmp	r2, #4
    3e2c:	d3d9      	bcc.n	3de2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    3e2e:	f851 cb04 	ldr.w	ip, [r1], #4
    3e32:	1f12      	subs	r2, r2, #4
    3e34:	f843 cb04 	str.w	ip, [r3], #4
    3e38:	2a04      	cmp	r2, #4
    3e3a:	d2f8      	bcs.n	3e2e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    3e3c:	e7d1      	b.n	3de2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    3e3e:	f811 cb01 	ldrb.w	ip, [r1], #1
    3e42:	f803 cb01 	strb.w	ip, [r3], #1
    3e46:	1e52      	subs	r2, r2, #1
    3e48:	d1f9      	bne.n	3e3e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    3e4a:	bcf0      	pop	{r4, r5, r6, r7}
    3e4c:	4770      	bx	lr

00003e4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    3e4e:	b470      	push	{r4, r5, r6}
    3e50:	4603      	mov	r3, r0
    3e52:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    3e56:	f010 0f03 	tst.w	r0, #3
    3e5a:	d009      	beq.n	3e70 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    3e5c:	2a00      	cmp	r2, #0
    3e5e:	bf04      	itt	eq
    3e60:	bc70      	popeq	{r4, r5, r6}
    3e62:	4770      	bxeq	lr
    3e64:	f803 cb01 	strb.w	ip, [r3], #1
    3e68:	1e52      	subs	r2, r2, #1
    3e6a:	f013 0f03 	tst.w	r3, #3
    3e6e:	d1f5      	bne.n	3e5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    3e70:	b2c9      	uxtb	r1, r1
    3e72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3e76:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    3e7a:	2a03      	cmp	r2, #3
    3e7c:	d939      	bls.n	3ef2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    3e7e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    3e82:	d236      	bcs.n	3ef2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    3e84:	4251      	negs	r1, r2
    3e86:	17cc      	asrs	r4, r1, #31
    3e88:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    3e8c:	1089      	asrs	r1, r1, #2
    3e8e:	424e      	negs	r6, r1
    3e90:	2e00      	cmp	r6, #0
    3e92:	dd11      	ble.n	3eb8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    3e94:	1f19      	subs	r1, r3, #4
    3e96:	f016 0f01 	tst.w	r6, #1
    3e9a:	bf18      	it	ne
    3e9c:	f841 5f04 	strne.w	r5, [r1, #4]!
    3ea0:	1074      	asrs	r4, r6, #1
    3ea2:	d004      	beq.n	3eae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    3ea4:	604d      	str	r5, [r1, #4]
    3ea6:	f841 5f08 	str.w	r5, [r1, #8]!
    3eaa:	1e64      	subs	r4, r4, #1
    3eac:	d1fa      	bne.n	3ea4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    3eae:	4271      	negs	r1, r6
    3eb0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    3eb4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3eb8:	2a00      	cmp	r2, #0
    3eba:	bf04      	itt	eq
    3ebc:	bc70      	popeq	{r4, r5, r6}
    3ebe:	4770      	bxeq	lr
    3ec0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    3ec4:	d21d      	bcs.n	3f02 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    3ec6:	2a00      	cmp	r2, #0
    3ec8:	bfdc      	itt	le
    3eca:	bc70      	pople	{r4, r5, r6}
    3ecc:	4770      	bxle	lr
    3ece:	1e59      	subs	r1, r3, #1
    3ed0:	f012 0f01 	tst.w	r2, #1
    3ed4:	bf18      	it	ne
    3ed6:	f801 cf01 	strbne.w	ip, [r1, #1]!
    3eda:	1052      	asrs	r2, r2, #1
    3edc:	bf04      	itt	eq
    3ede:	bc70      	popeq	{r4, r5, r6}
    3ee0:	4770      	bxeq	lr
    3ee2:	f881 c001 	strb.w	ip, [r1, #1]
    3ee6:	f801 cf02 	strb.w	ip, [r1, #2]!
    3eea:	1e52      	subs	r2, r2, #1
    3eec:	d1f9      	bne.n	3ee2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    3eee:	bc70      	pop	{r4, r5, r6}
    3ef0:	4770      	bx	lr
    3ef2:	2a04      	cmp	r2, #4
    3ef4:	d3e0      	bcc.n	3eb8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    3ef6:	1f12      	subs	r2, r2, #4
    3ef8:	f843 5b04 	str.w	r5, [r3], #4
    3efc:	2a04      	cmp	r2, #4
    3efe:	d2fa      	bcs.n	3ef6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    3f00:	e7da      	b.n	3eb8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    3f02:	f803 cb01 	strb.w	ip, [r3], #1
    3f06:	1e52      	subs	r2, r2, #1
    3f08:	d1fb      	bne.n	3f02 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    3f0a:	bc70      	pop	{r4, r5, r6}
    3f0c:	4770      	bx	lr
    3f0e:	2107      	movs	r1, #7
    3f10:	7001      	strb	r1, [r0, #0]
    3f12:	2000      	movs	r0, #0
    3f14:	4770      	bx	lr
    3f16:	2000      	movs	r0, #0
    3f18:	4770      	bx	lr
    3f1a:	2000      	movs	r0, #0
    3f1c:	4770      	bx	lr
    3f1e:	2000      	movs	r0, #0
    3f20:	4770      	bx	lr
    3f22:	b108      	cbz	r0, 3f28 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xda>
    3f24:	2000      	movs	r0, #0
    3f26:	4770      	bx	lr
    3f28:	f06f 0015 	mvn.w	r0, #21
    3f2c:	4770      	bx	lr

00003f2e <nrf_raal_timeslot_request>:
    3f2e:	b510      	push	{r4, lr}
    3f30:	4604      	mov	r4, r0
    3f32:	f7ff fa9f 	bl	3474 <nrf_raal_timeslot_us_left_get>
    3f36:	42a0      	cmp	r0, r4
    3f38:	d901      	bls.n	3f3e <nrf_raal_timeslot_request+0x10>
    3f3a:	2001      	movs	r0, #1
    3f3c:	bd10      	pop	{r4, pc}
    3f3e:	2000      	movs	r0, #0
    3f40:	bd10      	pop	{r4, pc}

00003f42 <nrf_802154_fal_tx_power_split>:
    3f42:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3f44:	4604      	mov	r4, r0
    3f46:	380b      	subs	r0, #11
    3f48:	4615      	mov	r5, r2
    3f4a:	280f      	cmp	r0, #15
    3f4c:	d901      	bls.n	3f52 <nrf_802154_fal_tx_power_split+0x10>
    3f4e:	214e      	movs	r1, #78	; 0x4e
    3f50:	e008      	b.n	3f64 <nrf_802154_fal_tx_power_split+0x22>
    3f52:	b2c0      	uxtb	r0, r0
    3f54:	460a      	mov	r2, r1
    3f56:	4601      	mov	r1, r0
    3f58:	ab01      	add	r3, sp, #4
    3f5a:	2004      	movs	r0, #4
    3f5c:	f7fc f984 	bl	268 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    3f60:	b118      	cbz	r0, 3f6a <nrf_802154_fal_tx_power_split+0x28>
    3f62:	2157      	movs	r1, #87	; 0x57
    3f64:	2064      	movs	r0, #100	; 0x64
    3f66:	f7ff f865 	bl	3034 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f6a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    3f6e:	4669      	mov	r1, sp
    3f70:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    3f74:	f602 122e 	addw	r2, r2, #2350	; 0x92e
    3f78:	f7ff fc2e 	bl	37d8 <mpsl_fem_tx_power_split>
    3f7c:	f89d 1000 	ldrb.w	r1, [sp]
    3f80:	7029      	strb	r1, [r5, #0]
    3f82:	f8bd 1001 	ldrh.w	r1, [sp, #1]
    3f86:	f8a5 1001 	strh.w	r1, [r5, #1]
    3f8a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f90:	4770      	bx	lr
    3f92:	2000      	movs	r0, #0
    3f94:	4770      	bx	lr
    3f96:	2000      	movs	r0, #0
    3f98:	4770      	bx	lr
    3f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f9e:	4770      	bx	lr
    3fa0:	4770      	bx	lr
    3fa2:	4770      	bx	lr
    3fa4:	2000      	movs	r0, #0
    3fa6:	4770      	bx	lr
    3fa8:	2100      	movs	r1, #0
    3faa:	7001      	strb	r1, [r0, #0]
    3fac:	4770      	bx	lr
    3fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fb2:	4770      	bx	lr
    3fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fb8:	4770      	bx	lr
    3fba:	2100      	movs	r1, #0
    3fbc:	7001      	strb	r1, [r0, #0]
    3fbe:	4770      	bx	lr
    3fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fc4:	4770      	bx	lr
    3fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fca:	4770      	bx	lr
    3fcc:	7800      	ldrb	r0, [r0, #0]
    3fce:	2800      	cmp	r0, #0
    3fd0:	d001      	beq.n	3fd6 <nrf_802154_fal_tx_power_split+0x94>
    3fd2:	f06f 0015 	mvn.w	r0, #21
    3fd6:	4770      	bx	lr
    3fd8:	2000      	movs	r0, #0
    3fda:	4770      	bx	lr
    3fdc:	2200      	movs	r2, #0
    3fde:	f000 b802 	b.w	3fe6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00003fe2 <mpsl_fem_init>:
    3fe2:	f7fc b8f7 	b.w	1d4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00003fe6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    3fe6:	b570      	push	{r4, r5, r6, lr}
    3fe8:	4614      	mov	r4, r2
    3fea:	460d      	mov	r5, r1
    3fec:	1b00      	subs	r0, r0, r4
    3fee:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    3ff2:	4288      	cmp	r0, r1
    3ff4:	da01      	bge.n	3ffa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    3ff6:	4608      	mov	r0, r1
    3ff8:	e002      	b.n	4000 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    3ffa:	287f      	cmp	r0, #127	; 0x7f
    3ffc:	dd00      	ble.n	4000 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    3ffe:	207f      	movs	r0, #127	; 0x7f
    4000:	b240      	sxtb	r0, r0
    4002:	f7fc f91b 	bl	23c <mpsl_tx_power_radio_supported_power_adjust>
    4006:	7028      	strb	r0, [r5, #0]
    4008:	706c      	strb	r4, [r5, #1]
    400a:	2100      	movs	r1, #0
    400c:	4420      	add	r0, r4
    400e:	70a9      	strb	r1, [r5, #2]
    4010:	b240      	sxtb	r0, r0
    4012:	bd70      	pop	{r4, r5, r6, pc}
    4014:	f4f0ecd8 	.word	0xf4f0ecd8
    4018:	0200fcf8 	.word	0x0200fcf8
    401c:	06050403 	.word	0x06050403
    4020:	00000807 	.word	0x00000807
	...
    4034:	01010000 	.word	0x01010000
    4038:	02020101 	.word	0x02020101
    403c:	03030202 	.word	0x03030202
    4040:	04040303 	.word	0x04040303
    4044:	05050404 	.word	0x05050404
    4048:	06060505 	.word	0x06060505
    404c:	0a090807 	.word	0x0a090807
    4050:	000d0c0b 	.word	0x000d0c0b
	...
    4064:	01000000 	.word	0x01000000
    4068:	02010101 	.word	0x02010101
    406c:	03020202 	.word	0x03020202
    4070:	04030303 	.word	0x04030303
    4074:	05040404 	.word	0x05040404
    4078:	06050505 	.word	0x06050505
    407c:	09080606 	.word	0x09080606

00004080 <rf_setup>:
	gpio_add_callback(button->port, button_cb_data);
	//LOG_DBG("Set up button at %s pin %d\n", button->port->name, button->pin);
}

static int rf_setup(const struct device *dev)
{
    4080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_INF("RF setup started");
    4082:	4b08      	ldr	r3, [pc, #32]	; (40a4 <rf_setup+0x24>)
    4084:	4808      	ldr	r0, [pc, #32]	; (40a8 <rf_setup+0x28>)
    4086:	9305      	str	r3, [sp, #20]
    4088:	aa04      	add	r2, sp, #16
    408a:	2302      	movs	r3, #2
    408c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4090:	9304      	str	r3, [sp, #16]
    4092:	f00e f8f5 	bl	12280 <z_log_msg_static_create.constprop.0>
	ARG_UNUSED(dev);

	/* nrf radio driver initialization */
	nrf_802154_init();
    4096:	f004 fa7b 	bl	8590 <nrf_802154_init>

	return 0;
}
    409a:	2000      	movs	r0, #0
    409c:	b007      	add	sp, #28
    409e:	f85d fb04 	ldr.w	pc, [sp], #4
    40a2:	bf00      	nop
    40a4:	000148e8 	.word	0x000148e8
    40a8:	00014420 	.word	0x00014420

000040ac <button1_pressed.part.0>:
	const nrf_802154_transmit_done_metadata_t *p_metadata) {
	LOG_INF("frame was transmitted!");
}


void button1_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
    40ac:	b590      	push	{r4, r7, lr}
    40ae:	b087      	sub	sp, #28
{
	int val = gpio_pin_get_dt(&button1);
	if (val == 1) {
		LOG_DBG("Button1 pressed.\n");
    40b0:	466c      	mov	r4, sp
void button1_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
    40b2:	af00      	add	r7, sp, #0
		LOG_DBG("Button1 pressed.\n");
    40b4:	b088      	sub	sp, #32
    40b6:	466a      	mov	r2, sp
    40b8:	4b0f      	ldr	r3, [pc, #60]	; (40f8 <button1_pressed.part.0+0x4c>)
    40ba:	6153      	str	r3, [r2, #20]
    40bc:	4b0f      	ldr	r3, [pc, #60]	; (40fc <button1_pressed.part.0+0x50>)
    40be:	6193      	str	r3, [r2, #24]
    40c0:	2303      	movs	r3, #3
    40c2:	480f      	ldr	r0, [pc, #60]	; (4100 <button1_pressed.part.0+0x54>)
    40c4:	f842 3f10 	str.w	r3, [r2, #16]!
    40c8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    40cc:	f00e f8d8 	bl	12280 <z_log_msg_static_create.constprop.0>
		if(!nrf_802154_transmit_raw(pkt, &metadata)) {
    40d0:	490c      	ldr	r1, [pc, #48]	; (4104 <button1_pressed.part.0+0x58>)
    40d2:	480d      	ldr	r0, [pc, #52]	; (4108 <button1_pressed.part.0+0x5c>)
    40d4:	46a5      	mov	sp, r4
    40d6:	f004 fa89 	bl	85ec <nrf_802154_transmit_raw>
    40da:	b950      	cbnz	r0, 40f2 <button1_pressed.part.0+0x46>
			LOG_ERR("driver could not schedule the transmission procedure.");
    40dc:	4b0b      	ldr	r3, [pc, #44]	; (410c <button1_pressed.part.0+0x60>)
    40de:	617b      	str	r3, [r7, #20]
    40e0:	2302      	movs	r3, #2
    40e2:	4807      	ldr	r0, [pc, #28]	; (4100 <button1_pressed.part.0+0x54>)
    40e4:	613b      	str	r3, [r7, #16]
    40e6:	f107 0210 	add.w	r2, r7, #16
    40ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40ee:	f00e f8c7 	bl	12280 <z_log_msg_static_create.constprop.0>
		}
	}
}
    40f2:	371c      	adds	r7, #28
    40f4:	46bd      	mov	sp, r7
    40f6:	bd90      	pop	{r4, r7, pc}
    40f8:	000148f9 	.word	0x000148f9
    40fc:	00014a2a 	.word	0x00014a2a
    4100:	00014420 	.word	0x00014420
    4104:	00014a46 	.word	0x00014a46
    4108:	20002e1a 	.word	0x20002e1a
    410c:	0001490f 	.word	0x0001490f

00004110 <button1_pressed>:
{
    4110:	b513      	push	{r0, r1, r4, lr}
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
    4112:	480a      	ldr	r0, [pc, #40]	; (413c <button1_pressed+0x2c>)
    4114:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
    4116:	6883      	ldr	r3, [r0, #8]
    4118:	a901      	add	r1, sp, #4
    411a:	685b      	ldr	r3, [r3, #4]
    411c:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
    411e:	b920      	cbnz	r0, 412a <button1_pressed+0x1a>
		*value ^= data->invert;
    4120:	6823      	ldr	r3, [r4, #0]
    4122:	9801      	ldr	r0, [sp, #4]
    4124:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    4126:	f3c0 20c0 	ubfx	r0, r0, #11, #1
	if (val == 1) {
    412a:	2801      	cmp	r0, #1
    412c:	d104      	bne.n	4138 <button1_pressed+0x28>
}
    412e:	b002      	add	sp, #8
    4130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4134:	f7ff bfba 	b.w	40ac <button1_pressed.part.0>
    4138:	b002      	add	sp, #8
    413a:	bd10      	pop	{r4, pc}
    413c:	00014308 	.word	0x00014308

00004140 <init_button>:
				 gpio_callback_handler_t cb) {
    4140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4144:	4604      	mov	r4, r0
    4146:	af00      	add	r7, sp, #0
	if (!device_is_ready(button->port)) {
    4148:	6800      	ldr	r0, [r0, #0]
				 gpio_callback_handler_t cb) {
    414a:	460d      	mov	r5, r1
    414c:	4616      	mov	r6, r2
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    414e:	f00f fc60 	bl	13a12 <z_device_is_ready>
    4152:	4603      	mov	r3, r0
    4154:	6820      	ldr	r0, [r4, #0]
	if (!device_is_ready(button->port)) {
    4156:	b9bb      	cbnz	r3, 4188 <init_button+0x48>
		LOG_DBG("Error: button device %s is not ready\n",
    4158:	466c      	mov	r4, sp
    415a:	b08a      	sub	sp, #40	; 0x28
    415c:	6803      	ldr	r3, [r0, #0]
    415e:	466a      	mov	r2, sp
    4160:	4934      	ldr	r1, [pc, #208]	; (4234 <init_button+0xf4>)
    4162:	6151      	str	r1, [r2, #20]
    4164:	4934      	ldr	r1, [pc, #208]	; (4238 <init_button+0xf8>)
    4166:	e9c2 1306 	strd	r1, r3, [r2, #24]
    416a:	f240 3301 	movw	r3, #769	; 0x301
    416e:	8413      	strh	r3, [r2, #32]
    4170:	4b32      	ldr	r3, [pc, #200]	; (423c <init_button+0xfc>)
    4172:	f842 3f10 	str.w	r3, [r2, #16]!
    4176:	f44f 5114 	mov.w	r1, #9472	; 0x2500
		LOG_DBG("Error %d: failed to configure %s pin %d\n",
    417a:	4831      	ldr	r0, [pc, #196]	; (4240 <init_button+0x100>)
    417c:	f00e f880 	bl	12280 <z_log_msg_static_create.constprop.0>
    4180:	46a5      	mov	sp, r4
}
    4182:	46bd      	mov	sp, r7
    4184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				  spec->dt_flags | extra_flags);
    4188:	88e3      	ldrh	r3, [r4, #6]
				  spec->pin,
    418a:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
    418c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
    4190:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    4194:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4198:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    419c:	f04f 0c01 	mov.w	ip, #1
    41a0:	f8de 3000 	ldr.w	r3, [lr]
    41a4:	fa0c fc01 	lsl.w	ip, ip, r1
    41a8:	bf14      	ite	ne
    41aa:	ea4c 0303 	orrne.w	r3, ip, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    41ae:	ea23 030c 	biceq.w	r3, r3, ip
    41b2:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    41b6:	f8d8 3000 	ldr.w	r3, [r8]
    41ba:	4798      	blx	r3
	if (ret != 0) {
    41bc:	4603      	mov	r3, r0
    41be:	7921      	ldrb	r1, [r4, #4]
    41c0:	6820      	ldr	r0, [r4, #0]
    41c2:	b19b      	cbz	r3, 41ec <init_button+0xac>
		LOG_DBG("Error %d: failed to configure %s pin %d\n",
    41c4:	466c      	mov	r4, sp
    41c6:	b08c      	sub	sp, #48	; 0x30
    41c8:	6800      	ldr	r0, [r0, #0]
    41ca:	466a      	mov	r2, sp
    41cc:	4d1d      	ldr	r5, [pc, #116]	; (4244 <init_button+0x104>)
    41ce:	6155      	str	r5, [r2, #20]
    41d0:	4d19      	ldr	r5, [pc, #100]	; (4238 <init_button+0xf8>)
    41d2:	e9c2 0108 	strd	r0, r1, [r2, #32]
    41d6:	e9c2 5306 	strd	r5, r3, [r2, #24]
    41da:	f240 4302 	movw	r3, #1026	; 0x402
    41de:	8513      	strh	r3, [r2, #40]	; 0x28
    41e0:	4b19      	ldr	r3, [pc, #100]	; (4248 <init_button+0x108>)
    41e2:	f842 3f10 	str.w	r3, [r2, #16]!
    41e6:	f44f 5154 	mov.w	r1, #13568	; 0x3500
    41ea:	e7c6      	b.n	417a <init_button+0x3a>
	return api->pin_interrupt_configure(port, pin, mode, trig);
    41ec:	6883      	ldr	r3, [r0, #8]
    41ee:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    41f2:	f8d3 8018 	ldr.w	r8, [r3, #24]
    41f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
    41fa:	47c0      	blx	r8
	if (ret != 0) {
    41fc:	7923      	ldrb	r3, [r4, #4]
    41fe:	b160      	cbz	r0, 421a <init_button+0xda>
		LOG_DBG("Error %d: failed to configure interrupt on %s pin %d\n",
    4200:	6822      	ldr	r2, [r4, #0]
    4202:	466c      	mov	r4, sp
    4204:	b08c      	sub	sp, #48	; 0x30
    4206:	6811      	ldr	r1, [r2, #0]
    4208:	466a      	mov	r2, sp
    420a:	4d10      	ldr	r5, [pc, #64]	; (424c <init_button+0x10c>)
    420c:	6155      	str	r5, [r2, #20]
    420e:	4d0a      	ldr	r5, [pc, #40]	; (4238 <init_button+0xf8>)
    4210:	e9c2 1308 	strd	r1, r3, [r2, #32]
    4214:	e9c2 5006 	strd	r5, r0, [r2, #24]
    4218:	e7df      	b.n	41da <init_button+0x9a>
	gpio_init_callback(button_cb_data, cb, BIT(button->pin));
    421a:	2201      	movs	r2, #1
    421c:	fa02 f303 	lsl.w	r3, r2, r3
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
    4220:	e9c5 6301 	strd	r6, r3, [r5, #4]
	gpio_add_callback(button->port, button_cb_data);
    4224:	6820      	ldr	r0, [r4, #0]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    4226:	6883      	ldr	r3, [r0, #8]
    4228:	69db      	ldr	r3, [r3, #28]
    422a:	2b00      	cmp	r3, #0
    422c:	d0a9      	beq.n	4182 <init_button+0x42>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    422e:	4629      	mov	r1, r5
    4230:	4798      	blx	r3
    4232:	e7a6      	b.n	4182 <init_button+0x42>
    4234:	00014945 	.word	0x00014945
    4238:	00014a3a 	.word	0x00014a3a
    423c:	01000004 	.word	0x01000004
    4240:	00014420 	.word	0x00014420
    4244:	0001496f 	.word	0x0001496f
    4248:	01000006 	.word	0x01000006
    424c:	0001499c 	.word	0x0001499c

00004250 <nrf_802154_tx_started>:
void nrf_802154_tx_started(const uint8_t *p_frame) {
    4250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_INF("tx started");
    4252:	4b06      	ldr	r3, [pc, #24]	; (426c <nrf_802154_tx_started+0x1c>)
    4254:	9305      	str	r3, [sp, #20]
    4256:	4806      	ldr	r0, [pc, #24]	; (4270 <nrf_802154_tx_started+0x20>)
    4258:	2302      	movs	r3, #2
    425a:	aa04      	add	r2, sp, #16
    425c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4260:	9304      	str	r3, [sp, #16]
    4262:	f00e f80d 	bl	12280 <z_log_msg_static_create.constprop.0>
}
    4266:	b007      	add	sp, #28
    4268:	f85d fb04 	ldr.w	pc, [sp], #4
    426c:	000149d6 	.word	0x000149d6
    4270:	00014420 	.word	0x00014420

00004274 <nrf_802154_transmit_failed>:
{
    4274:	b590      	push	{r4, r7, lr}
    4276:	b087      	sub	sp, #28
	LOG_INF("tx failed error %u!", error);
    4278:	466c      	mov	r4, sp
{
    427a:	af00      	add	r7, sp, #0
	LOG_INF("tx failed error %u!", error);
    427c:	b088      	sub	sp, #32
    427e:	466a      	mov	r2, sp
    4280:	4b0f      	ldr	r3, [pc, #60]	; (42c0 <nrf_802154_transmit_failed+0x4c>)
    4282:	4810      	ldr	r0, [pc, #64]	; (42c4 <nrf_802154_transmit_failed+0x50>)
    4284:	e9c2 3105 	strd	r3, r1, [r2, #20]
    4288:	2303      	movs	r3, #3
    428a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    428e:	f842 3f10 	str.w	r3, [r2, #16]!
    4292:	f00d fff5 	bl	12280 <z_log_msg_static_create.constprop.0>
	if(!nrf_802154_transmit_raw(pkt, &metadata)) {
    4296:	490c      	ldr	r1, [pc, #48]	; (42c8 <nrf_802154_transmit_failed+0x54>)
    4298:	480c      	ldr	r0, [pc, #48]	; (42cc <nrf_802154_transmit_failed+0x58>)
    429a:	46a5      	mov	sp, r4
    429c:	f004 f9a6 	bl	85ec <nrf_802154_transmit_raw>
    42a0:	b950      	cbnz	r0, 42b8 <nrf_802154_transmit_failed+0x44>
		LOG_ERR("driver could not schedule the transmission procedure.");
    42a2:	4b0b      	ldr	r3, [pc, #44]	; (42d0 <nrf_802154_transmit_failed+0x5c>)
    42a4:	617b      	str	r3, [r7, #20]
    42a6:	2302      	movs	r3, #2
    42a8:	4806      	ldr	r0, [pc, #24]	; (42c4 <nrf_802154_transmit_failed+0x50>)
    42aa:	613b      	str	r3, [r7, #16]
    42ac:	f107 0210 	add.w	r2, r7, #16
    42b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    42b4:	f00d ffe4 	bl	12280 <z_log_msg_static_create.constprop.0>
}
    42b8:	371c      	adds	r7, #28
    42ba:	46bd      	mov	sp, r7
    42bc:	bd90      	pop	{r4, r7, pc}
    42be:	bf00      	nop
    42c0:	000149e1 	.word	0x000149e1
    42c4:	00014420 	.word	0x00014420
    42c8:	00014a46 	.word	0x00014a46
    42cc:	20002e1a 	.word	0x20002e1a
    42d0:	0001490f 	.word	0x0001490f

000042d4 <nrf_802154_transmitted_raw>:
	const nrf_802154_transmit_done_metadata_t *p_metadata) {
    42d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_INF("frame was transmitted!");
    42d6:	4b06      	ldr	r3, [pc, #24]	; (42f0 <nrf_802154_transmitted_raw+0x1c>)
    42d8:	9305      	str	r3, [sp, #20]
    42da:	4806      	ldr	r0, [pc, #24]	; (42f4 <nrf_802154_transmitted_raw+0x20>)
    42dc:	2302      	movs	r3, #2
    42de:	aa04      	add	r2, sp, #16
    42e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    42e4:	9304      	str	r3, [sp, #16]
    42e6:	f00d ffcb 	bl	12280 <z_log_msg_static_create.constprop.0>
}
    42ea:	b007      	add	sp, #28
    42ec:	f85d fb04 	ldr.w	pc, [sp], #4
    42f0:	000149f5 	.word	0x000149f5
    42f4:	00014420 	.word	0x00014420

000042f8 <main>:

int main(int argc, char **argv) {
    42f8:	b5b0      	push	{r4, r5, r7, lr}
    42fa:	b084      	sub	sp, #16
	nrf_802154_channel_set(20u);
    42fc:	2014      	movs	r0, #20
int main(int argc, char **argv) {
    42fe:	af00      	add	r7, sp, #0
	nrf_802154_channel_set(20u);
    4300:	f00e ff78 	bl	131f4 <nrf_802154_channel_set>
	LOG_DBG("channel: %u", nrf_802154_channel_get());
    4304:	466c      	mov	r4, sp
    4306:	f00e ff85 	bl	13214 <nrf_802154_channel_get>
    430a:	b088      	sub	sp, #32
    430c:	466a      	mov	r2, sp
    430e:	4b27      	ldr	r3, [pc, #156]	; (43ac <main+0xb4>)
    4310:	6153      	str	r3, [r2, #20]
    4312:	4b27      	ldr	r3, [pc, #156]	; (43b0 <main+0xb8>)
    4314:	e9c2 3006 	strd	r3, r0, [r2, #24]
    4318:	2304      	movs	r3, #4
    431a:	f842 3f10 	str.w	r3, [r2, #16]!
    431e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    4322:	4824      	ldr	r0, [pc, #144]	; (43b4 <main+0xbc>)
    4324:	f00d ffac 	bl	12280 <z_log_msg_static_create.constprop.0>

	// set the pan_id (2 bytes, little-endian)
	uint8_t src_pan_id[] = {0x10, 0x01}; 
    4328:	f44f 7388 	mov.w	r3, #272	; 0x110
    432c:	46a5      	mov	sp, r4
	nrf_802154_pan_id_set(src_pan_id);
    432e:	4638      	mov	r0, r7
	uint8_t src_pan_id[] = {0x10, 0x01}; 
    4330:	803b      	strh	r3, [r7, #0]
	nrf_802154_pan_id_set(src_pan_id);
    4332:	f00e ff73 	bl	1321c <nrf_802154_pan_id_set>

	// set the extended address (8 bytes, little-endian)
	uint8_t src_extended_addr[] = {0x55, 0xae, 0xca, 0xc4, 0x35, 0x33, 0xfe, 0xf3};
    4336:	4a20      	ldr	r2, [pc, #128]	; (43b8 <main+0xc0>)
	nrf_802154_extended_address_set(src_extended_addr);

	uint8_t dst_short_addr[] = {0xab, 0xcd};

	pkt[0] = 20u + FCS_LENGTH; /* Length for nrf_transmit (length of pkt + FCS) */
    4338:	4c20      	ldr	r4, [pc, #128]	; (43bc <main+0xc4>)
	uint8_t src_extended_addr[] = {0x55, 0xae, 0xca, 0xc4, 0x35, 0x33, 0xfe, 0xf3};
    433a:	6810      	ldr	r0, [r2, #0]
    433c:	6851      	ldr	r1, [r2, #4]
    433e:	f107 0308 	add.w	r3, r7, #8
    4342:	c303      	stmia	r3!, {r0, r1}
	nrf_802154_extended_address_set(src_extended_addr);
    4344:	f107 0008 	add.w	r0, r7, #8
    4348:	f00e ff6a 	bl	13220 <nrf_802154_extended_address_set>
	uint8_t dst_short_addr[] = {0xab, 0xcd};
    434c:	f64c 53ab 	movw	r3, #52651	; 0xcdab
    4350:	80bb      	strh	r3, [r7, #4]
	pkt[0] = 20u + FCS_LENGTH; /* Length for nrf_transmit (length of pkt + FCS) */
    4352:	2316      	movs	r3, #22
    4354:	7023      	strb	r3, [r4, #0]
	pkt[1] = 0x21; /* Frame Control Field */
    4356:	2321      	movs	r3, #33	; 0x21
    4358:	7063      	strb	r3, [r4, #1]
	pkt[2] = 0xc8; /* Frame Control Field */
    435a:	23c8      	movs	r3, #200	; 0xc8
    435c:	70a3      	strb	r3, [r4, #2]
	pkt[3] = 0x00; /* Sequence number */
	pkt[4] = 0x10; /* Destination PAN ID 0xffff */
    435e:	2310      	movs	r3, #16
	pkt[3] = 0x00; /* Sequence number */
    4360:	2500      	movs	r5, #0
	pkt[4] = 0x10; /* Destination PAN ID 0xffff */
    4362:	7123      	strb	r3, [r4, #4]
	pkt[5] = 0x01; /* Destination PAN ID */
    4364:	2301      	movs	r3, #1
    4366:	7163      	strb	r3, [r4, #5]
	memcpy(&pkt[6], dst_short_addr, 2); /* Destination extended address */
    4368:	1d39      	adds	r1, r7, #4
	pkt[3] = 0x00; /* Sequence number */
    436a:	70e5      	strb	r5, [r4, #3]
	memcpy(&pkt[6], dst_short_addr, 2); /* Destination extended address */
    436c:	2202      	movs	r2, #2
    436e:	1da0      	adds	r0, r4, #6
    4370:	f00e fcac 	bl	12ccc <memcpy>
	memcpy(&pkt[8], src_pan_id, 2); /* Source PAN ID */
    4374:	4639      	mov	r1, r7
    4376:	2202      	movs	r2, #2
    4378:	f104 0008 	add.w	r0, r4, #8
    437c:	f00e fca6 	bl	12ccc <memcpy>
	memcpy(&pkt[10], src_extended_addr, 8);/* Source extended address */ 
    4380:	2208      	movs	r2, #8
    4382:	18b9      	adds	r1, r7, r2
    4384:	f104 000a 	add.w	r0, r4, #10
    4388:	f00e fca0 	bl	12ccc <memcpy>
	pkt[18] = 0x47; /* Payload is "G12"*/
    438c:	2347      	movs	r3, #71	; 0x47
    438e:	74a3      	strb	r3, [r4, #18]
	pkt[19] = 0x31; /* */
    4390:	2331      	movs	r3, #49	; 0x31
    4392:	74e3      	strb	r3, [r4, #19]
	pkt[20] = 0x32; /* */
    4394:	2332      	movs	r3, #50	; 0x32
	
	init_button(&button1, &button1_cb_data, button1_pressed);
    4396:	4a0a      	ldr	r2, [pc, #40]	; (43c0 <main+0xc8>)
    4398:	490a      	ldr	r1, [pc, #40]	; (43c4 <main+0xcc>)
    439a:	480b      	ldr	r0, [pc, #44]	; (43c8 <main+0xd0>)
	pkt[20] = 0x32; /* */
    439c:	7523      	strb	r3, [r4, #20]
	init_button(&button1, &button1_cb_data, button1_pressed);
    439e:	f7ff fecf 	bl	4140 <init_button>
	
	return 0;
}
    43a2:	4628      	mov	r0, r5
    43a4:	3710      	adds	r7, #16
    43a6:	46bd      	mov	sp, r7
    43a8:	bdb0      	pop	{r4, r5, r7, pc}
    43aa:	bf00      	nop
    43ac:	00014a0c 	.word	0x00014a0c
    43b0:	00014a25 	.word	0x00014a25
    43b4:	00014420 	.word	0x00014420
    43b8:	00014a1c 	.word	0x00014a1c
    43bc:	20002e1a 	.word	0x20002e1a
    43c0:	00004111 	.word	0x00004111
    43c4:	200017c8 	.word	0x200017c8
    43c8:	00014488 	.word	0x00014488

000043cc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    43cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43d0:	b095      	sub	sp, #84	; 0x54
    43d2:	af00      	add	r7, sp, #0
    43d4:	4604      	mov	r4, r0
    43d6:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    43da:	61bb      	str	r3, [r7, #24]
    43dc:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    43e0:	627a      	str	r2, [r7, #36]	; 0x24
    43e2:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    43e4:	6239      	str	r1, [r7, #32]
    43e6:	b951      	cbnz	r1, 43fe <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    43e8:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    43ea:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    43ec:	7880      	ldrb	r0, [r0, #2]
    43ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    43f2:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    43f4:	460d      	mov	r5, r1
    43f6:	42ae      	cmp	r6, r5
    43f8:	d81a      	bhi.n	4430 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    43fa:	1b03      	subs	r3, r0, r4
    43fc:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    43fe:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    4402:	78e3      	ldrb	r3, [r4, #3]
    4404:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    4406:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
    4408:	f1b9 0f00 	cmp.w	r9, #0
    440c:	d002      	beq.n	4414 <cbprintf_package_convert+0x48>
    440e:	f01b 0f01 	tst.w	fp, #1
    4412:	d116      	bne.n	4442 <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
    4414:	697b      	ldr	r3, [r7, #20]
    4416:	bb53      	cbnz	r3, 446e <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    4418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    441a:	b11b      	cbz	r3, 4424 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    441c:	69ba      	ldr	r2, [r7, #24]
    441e:	6a39      	ldr	r1, [r7, #32]
    4420:	4620      	mov	r0, r4
    4422:	4798      	blx	r3
		}

		return in_len;
    4424:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    4426:	4628      	mov	r0, r5
    4428:	3754      	adds	r7, #84	; 0x54
    442a:	46bd      	mov	sp, r7
    442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    4430:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    4434:	4640      	mov	r0, r8
    4436:	f00e fc12 	bl	12c5e <strlen>
    443a:	3001      	adds	r0, #1
    443c:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    443e:	3501      	adds	r5, #1
    4440:	e7d9      	b.n	43f6 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
    4442:	f894 a000 	ldrb.w	sl, [r4]
    4446:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    4448:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    444c:	ea4f 028a 	mov.w	r2, sl, lsl #2
    4450:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    4452:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    4456:	2b00      	cmp	r3, #0
    4458:	f040 8101 	bne.w	465e <cbprintf_package_convert+0x292>
		out_len = (int)in_len;
    445c:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    445e:	46d0      	mov	r8, sl
    4460:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
    4464:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
    4466:	4543      	cmp	r3, r8
    4468:	d14e      	bne.n	4508 <cbprintf_package_convert+0x13c>
    446a:	44ca      	add	sl, r9
    446c:	e013      	b.n	4496 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
    446e:	f01b 0f02 	tst.w	fp, #2
    4472:	d0d1      	beq.n	4418 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    4474:	f894 a000 	ldrb.w	sl, [r4]
    4478:	ea4f 038a 	mov.w	r3, sl, lsl #2
    447c:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    447e:	6863      	ldr	r3, [r4, #4]
    4480:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    4482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    4484:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
    4488:	2b00      	cmp	r3, #0
    448a:	d178      	bne.n	457e <cbprintf_package_convert+0x1b2>
		out_len = (int)in_len;
    448c:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    448e:	f1b9 0f00 	cmp.w	r9, #0
    4492:	d14e      	bne.n	4532 <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
    4494:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
    4496:	f01b 0f05 	tst.w	fp, #5
    449a:	bf0c      	ite	eq
    449c:	2302      	moveq	r3, #2
    449e:	2301      	movne	r3, #1
    44a0:	627b      	str	r3, [r7, #36]	; 0x24
    44a2:	697b      	ldr	r3, [r7, #20]
    44a4:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    44a8:	f00b 0302 	and.w	r3, fp, #2
    44ac:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
    44ae:	45ca      	cmp	sl, r9
    44b0:	d0b9      	beq.n	4426 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    44b2:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
    44b6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    44ba:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    44be:	4bad      	ldr	r3, [pc, #692]	; (4774 <cbprintf_package_convert+0x3a8>)
    44c0:	4598      	cmp	r8, r3
    44c2:	d302      	bcc.n	44ca <cbprintf_package_convert+0xfe>
    44c4:	4bac      	ldr	r3, [pc, #688]	; (4778 <cbprintf_package_convert+0x3ac>)
    44c6:	4598      	cmp	r8, r3
    44c8:	d339      	bcc.n	453e <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    44ca:	693b      	ldr	r3, [r7, #16]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d043      	beq.n	4558 <cbprintf_package_convert+0x18c>
    44d0:	69f8      	ldr	r0, [r7, #28]
    44d2:	f00d ff09 	bl	122e8 <is_ptr>
    44d6:	2800      	cmp	r0, #0
    44d8:	d03e      	beq.n	4558 <cbprintf_package_convert+0x18c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    44da:	46e8      	mov	r8, sp
    44dc:	b08a      	sub	sp, #40	; 0x28
    44de:	466a      	mov	r2, sp
    44e0:	4ba6      	ldr	r3, [pc, #664]	; (477c <cbprintf_package_convert+0x3b0>)
    44e2:	6153      	str	r3, [r2, #20]
    44e4:	69fb      	ldr	r3, [r7, #28]
    44e6:	e9c2 3106 	strd	r3, r1, [r2, #24]
    44ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    44ee:	8413      	strh	r3, [r2, #32]
    44f0:	4ba3      	ldr	r3, [pc, #652]	; (4780 <cbprintf_package_convert+0x3b4>)
    44f2:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    44f6:	48a3      	ldr	r0, [pc, #652]	; (4784 <cbprintf_package_convert+0x3b8>)
    44f8:	2300      	movs	r3, #0
    44fa:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    44fe:	f001 f8db 	bl	56b8 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    4502:	3d02      	subs	r5, #2
    4504:	46c5      	mov	sp, r8
				continue;
    4506:	e7d2      	b.n	44ae <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
    4508:	f818 2b01 	ldrb.w	r2, [r8], #1
    450c:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    450e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    4512:	f00e fba4 	bl	12c5e <strlen>
				if (strl && strl_cnt < strl_len) {
    4516:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    4518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    451a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    451c:	b13a      	cbz	r2, 452e <cbprintf_package_convert+0x162>
    451e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    4522:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    4524:	bf3e      	ittt	cc
    4526:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    4528:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    452c:	3601      	addcc	r6, #1
				out_len += len;
    452e:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    4530:	e799      	b.n	4466 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    4532:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    4536:	bf1c      	itt	ne
    4538:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    453a:	44ca      	addne	sl, r9
    453c:	e7ab      	b.n	4496 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    453e:	693b      	ldr	r3, [r7, #16]
    4540:	b123      	cbz	r3, 454c <cbprintf_package_convert+0x180>
    4542:	69f8      	ldr	r0, [r7, #28]
    4544:	f00d fed0 	bl	122e8 <is_ptr>
    4548:	2800      	cmp	r0, #0
    454a:	d1c6      	bne.n	44da <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    454c:	f01b 0f01 	tst.w	fp, #1
    4550:	d105      	bne.n	455e <cbprintf_package_convert+0x192>
					out_len -= drop_ro_str_pos ? 2 : 1;
    4552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4554:	1aed      	subs	r5, r5, r3
    4556:	e7aa      	b.n	44ae <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    4558:	6a3b      	ldr	r3, [r7, #32]
    455a:	2b00      	cmp	r3, #0
    455c:	d0a7      	beq.n	44ae <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
    455e:	4640      	mov	r0, r8
    4560:	f00e fb7d 	bl	12c5e <strlen>
				if (strl && strl_cnt < strl_len) {
    4564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4566:	b143      	cbz	r3, 457a <cbprintf_package_convert+0x1ae>
    4568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    456c:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    456e:	bf3f      	itttt	cc
    4570:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    4572:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    4574:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    4578:	3601      	addcc	r6, #1
				out_len += (len - 1);
    457a:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    457c:	e797      	b.n	44ae <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    457e:	f1b9 0f00 	cmp.w	r9, #0
    4582:	d071      	beq.n	4668 <cbprintf_package_convert+0x29c>
    4584:	f01b 0604 	ands.w	r6, fp, #4
    4588:	d071      	beq.n	466e <cbprintf_package_convert+0x2a2>
		keep_cnt = ros_nbr;
    458a:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    458c:	2600      	movs	r6, #0
		dst = keep_str_pos;
    458e:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    4592:	464a      	mov	r2, r9
    4594:	4651      	mov	r1, sl
    4596:	f00e fb99 	bl	12ccc <memcpy>
	str_pos += ros_nbr;
    459a:	697b      	ldr	r3, [r7, #20]
    459c:	005b      	lsls	r3, r3, #1
    459e:	60bb      	str	r3, [r7, #8]
    45a0:	697b      	ldr	r3, [r7, #20]
    45a2:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    45a4:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    45a8:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    45aa:	f00b 0302 	and.w	r3, fp, #2
    45ae:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    45b0:	697b      	ldr	r3, [r7, #20]
    45b2:	459a      	cmp	sl, r3
    45b4:	d15d      	bne.n	4672 <cbprintf_package_convert+0x2a6>
	out_desc.len = in_desc->len;
    45b6:	7823      	ldrb	r3, [r4, #0]
    45b8:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    45ba:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    45bc:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    45c0:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    45c4:	bf0c      	ite	eq
    45c6:	ea4f 0158 	moveq.w	r1, r8, lsr #1
    45ca:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    45cc:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    45d0:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    45d2:	f040 809d 	bne.w	4710 <cbprintf_package_convert+0x344>
    45d6:	f01b 0f04 	tst.w	fp, #4
    45da:	bf14      	ite	ne
    45dc:	4640      	movne	r0, r8
    45de:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    45e0:	f894 b002 	ldrb.w	fp, [r4, #2]
    45e4:	f894 a003 	ldrb.w	sl, [r4, #3]
    45e8:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    45ea:	7062      	strb	r2, [r4, #1]
    45ec:	70a0      	strb	r0, [r4, #2]
    45ee:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    45f0:	69ba      	ldr	r2, [r7, #24]
    45f2:	68f9      	ldr	r1, [r7, #12]
    45f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45f6:	4620      	mov	r0, r4
    45f8:	4798      	blx	r3
	if (rv < 0) {
    45fa:	1e05      	subs	r5, r0, #0
    45fc:	f6ff af13 	blt.w	4426 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    4600:	69fb      	ldr	r3, [r7, #28]
    4602:	7023      	strb	r3, [r4, #0]
    4604:	693b      	ldr	r3, [r7, #16]
    4606:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    4608:	4641      	mov	r1, r8
    460a:	69ba      	ldr	r2, [r7, #24]
    460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    460e:	f884 b002 	strb.w	fp, [r4, #2]
    4612:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    4616:	f107 0040 	add.w	r0, r7, #64	; 0x40
    461a:	4798      	blx	r3
	if (rv < 0) {
    461c:	f1b0 0800 	subs.w	r8, r0, #0
    4620:	f2c0 80a3 	blt.w	476a <cbprintf_package_convert+0x39e>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    4624:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    4626:	69ba      	ldr	r2, [r7, #24]
    4628:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    462a:	eba3 0109 	sub.w	r1, r3, r9
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    4632:	68bb      	ldr	r3, [r7, #8]
    4634:	1ac9      	subs	r1, r1, r3
    4636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4638:	4798      	blx	r3
	if (rv < 0) {
    463a:	2800      	cmp	r0, #0
    463c:	f2c0 8097 	blt.w	476e <cbprintf_package_convert+0x3a2>
	out_len += rv;
    4640:	44a8      	add	r8, r5
	out_len += rv;
    4642:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
    4646:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    464a:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    464e:	45b3      	cmp	fp, r6
    4650:	db60      	blt.n	4714 <cbprintf_package_convert+0x348>
	(void)cb(NULL, 0, ctx);
    4652:	2100      	movs	r1, #0
    4654:	69ba      	ldr	r2, [r7, #24]
    4656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4658:	4608      	mov	r0, r1
    465a:	4798      	blx	r3
	return out_len;
    465c:	e6e3      	b.n	4426 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    465e:	f04f 0800 	mov.w	r8, #0
    4662:	f107 0030 	add.w	r0, r7, #48	; 0x30
    4666:	e794      	b.n	4592 <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
    4668:	464e      	mov	r6, r9
		keep_cnt = 0;
    466a:	46c8      	mov	r8, r9
    466c:	e795      	b.n	459a <cbprintf_package_convert+0x1ce>
    466e:	46b0      	mov	r8, r6
    4670:	e793      	b.n	459a <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
    4672:	f81a 1b02 	ldrb.w	r1, [sl], #2
    4676:	4a3f      	ldr	r2, [pc, #252]	; (4774 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    4678:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    467c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    4680:	4293      	cmp	r3, r2
    4682:	d302      	bcc.n	468a <cbprintf_package_convert+0x2be>
    4684:	4a3c      	ldr	r2, [pc, #240]	; (4778 <cbprintf_package_convert+0x3ac>)
    4686:	4293      	cmp	r3, r2
    4688:	d31c      	bcc.n	46c4 <cbprintf_package_convert+0x2f8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    468a:	693b      	ldr	r3, [r7, #16]
    468c:	b123      	cbz	r3, 4698 <cbprintf_package_convert+0x2cc>
    468e:	69f8      	ldr	r0, [r7, #28]
    4690:	f00d fe2a 	bl	122e8 <is_ptr>
    4694:	2800      	cmp	r0, #0
    4696:	d18b      	bne.n	45b0 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	b9f3      	cbnz	r3, 46da <cbprintf_package_convert+0x30e>
				keep_str_pos[keep_cnt++] = arg_idx;
    469c:	f108 0228 	add.w	r2, r8, #40	; 0x28
    46a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
    46a4:	4402      	add	r2, r0
    46a6:	f108 0301 	add.w	r3, r8, #1
    46aa:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    46ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
    46b2:	fa52 f383 	uxtab	r3, r2, r3
    46b6:	f108 0802 	add.w	r8, r8, #2
    46ba:	fa5f f888 	uxtb.w	r8, r8
    46be:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    46c2:	e775      	b.n	45b0 <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    46c4:	693b      	ldr	r3, [r7, #16]
    46c6:	b12b      	cbz	r3, 46d4 <cbprintf_package_convert+0x308>
    46c8:	69f8      	ldr	r0, [r7, #28]
    46ca:	f00d fe0d 	bl	122e8 <is_ptr>
    46ce:	2800      	cmp	r0, #0
    46d0:	f47f af6e 	bne.w	45b0 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    46d4:	f01b 0f01 	tst.w	fp, #1
    46d8:	d009      	beq.n	46ee <cbprintf_package_convert+0x322>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    46da:	f106 0228 	add.w	r2, r6, #40	; 0x28
    46de:	f107 0128 	add.w	r1, r7, #40	; 0x28
    46e2:	1c73      	adds	r3, r6, #1
    46e4:	1856      	adds	r6, r2, r1
    46e6:	f806 5c20 	strb.w	r5, [r6, #-32]
    46ea:	b2de      	uxtb	r6, r3
    46ec:	e760      	b.n	45b0 <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    46ee:	f01b 0f04 	tst.w	fp, #4
    46f2:	f43f af5d 	beq.w	45b0 <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
    46f6:	f108 0228 	add.w	r2, r8, #40	; 0x28
    46fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
    46fe:	f108 0301 	add.w	r3, r8, #1
    4702:	eb02 0801 	add.w	r8, r2, r1
    4706:	f808 5c10 	strb.w	r5, [r8, #-16]
    470a:	fa5f f883 	uxtb.w	r8, r3
    470e:	e74f      	b.n	45b0 <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    4710:	2000      	movs	r0, #0
    4712:	e765      	b.n	45e0 <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
    4714:	f81b 300a 	ldrb.w	r3, [fp, sl]
    4718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    471c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    4720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4722:	b1fb      	cbz	r3, 4764 <cbprintf_package_convert+0x398>
    4724:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    4728:	69ba      	ldr	r2, [r7, #24]
    472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    472c:	2101      	movs	r1, #1
    472e:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    4732:	4798      	blx	r3
		if (rv < 0) {
    4734:	2800      	cmp	r0, #0
    4736:	db1a      	blt.n	476e <cbprintf_package_convert+0x3a2>
		out_len += rv;
    4738:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    473a:	f1b8 0f00 	cmp.w	r8, #0
    473e:	d106      	bne.n	474e <cbprintf_package_convert+0x382>
    4740:	4648      	mov	r0, r9
    4742:	f00e fa8c 	bl	12c5e <strlen>
    4746:	f100 0801 	add.w	r8, r0, #1
    474a:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    474e:	69ba      	ldr	r2, [r7, #24]
    4750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4752:	4641      	mov	r1, r8
    4754:	4648      	mov	r0, r9
    4756:	4798      	blx	r3
		if (rv < 0) {
    4758:	2800      	cmp	r0, #0
    475a:	db08      	blt.n	476e <cbprintf_package_convert+0x3a2>
		out_len += rv;
    475c:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    475e:	f10b 0b01 	add.w	fp, fp, #1
    4762:	e774      	b.n	464e <cbprintf_package_convert+0x282>
		uint16_t str_len = strl ? strl[i] : 0;
    4764:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    4768:	e7de      	b.n	4728 <cbprintf_package_convert+0x35c>
    476a:	4645      	mov	r5, r8
    476c:	e65b      	b.n	4426 <cbprintf_package_convert+0x5a>
    476e:	4605      	mov	r5, r0
    4770:	e659      	b.n	4426 <cbprintf_package_convert+0x5a>
    4772:	bf00      	nop
    4774:	00014228 	.word	0x00014228
    4778:	00015300 	.word	0x00015300
    477c:	00014a50 	.word	0x00014a50
    4780:	01000004 	.word	0x01000004
    4784:	000143c8 	.word	0x000143c8

00004788 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    4788:	4b01      	ldr	r3, [pc, #4]	; (4790 <char_out+0x8>)
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	4718      	bx	r3
    478e:	bf00      	nop
    4790:	20000084 	.word	0x20000084

00004794 <__printk_hook_install>:
	_char_out = fn;
    4794:	4b01      	ldr	r3, [pc, #4]	; (479c <__printk_hook_install+0x8>)
    4796:	6018      	str	r0, [r3, #0]
}
    4798:	4770      	bx	lr
    479a:	bf00      	nop
    479c:	20000084 	.word	0x20000084

000047a0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    47a0:	b507      	push	{r0, r1, r2, lr}
    47a2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    47a4:	2100      	movs	r1, #0
    47a6:	4602      	mov	r2, r0
    47a8:	9100      	str	r1, [sp, #0]
    47aa:	4803      	ldr	r0, [pc, #12]	; (47b8 <vprintk+0x18>)
    47ac:	f000 f92a 	bl	4a04 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    47b0:	b003      	add	sp, #12
    47b2:	f85d fb04 	ldr.w	pc, [sp], #4
    47b6:	bf00      	nop
    47b8:	00004789 	.word	0x00004789

000047bc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    47bc:	b530      	push	{r4, r5, lr}
    47be:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    47c0:	2500      	movs	r5, #0
    47c2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    47c6:	4604      	mov	r4, r0
    47c8:	9500      	str	r5, [sp, #0]
    47ca:	a903      	add	r1, sp, #12
    47cc:	4805      	ldr	r0, [pc, #20]	; (47e4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    47ce:	9505      	str	r5, [sp, #20]
    47d0:	f000 f918 	bl	4a04 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    47d4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    47d8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    47da:	bfb8      	it	lt
    47dc:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    47de:	b007      	add	sp, #28
    47e0:	bd30      	pop	{r4, r5, pc}
    47e2:	bf00      	nop
    47e4:	00012337 	.word	0x00012337

000047e8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    47e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    47ec:	8b05      	ldrh	r5, [r0, #24]
{
    47ee:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    47f0:	0728      	lsls	r0, r5, #28
{
    47f2:	4690      	mov	r8, r2
	if (processing) {
    47f4:	d411      	bmi.n	481a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    47f6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    47f8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    47fc:	f040 80cd 	bne.w	499a <process_event+0x1b2>
			evt = process_recheck(mgr);
    4800:	4620      	mov	r0, r4
    4802:	f00d fdea 	bl	123da <process_recheck>
		}

		if (evt == EVT_NOP) {
    4806:	b178      	cbz	r0, 4828 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    4808:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    480a:	8b21      	ldrh	r1, [r4, #24]
    480c:	2804      	cmp	r0, #4
    480e:	d811      	bhi.n	4834 <process_event+0x4c>
    4810:	e8df f000 	tbb	[pc, r0]
    4814:	856d10c3 	.word	0x856d10c3
    4818:	95          	.byte	0x95
    4819:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    481a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    481c:	bf0c      	ite	eq
    481e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4822:	f045 0520 	orrne.w	r5, r5, #32
    4826:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4828:	f388 8811 	msr	BASEPRI, r8
    482c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4834:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4838:	45aa      	cmp	sl, r5
    483a:	f000 80a6 	beq.w	498a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    483e:	2700      	movs	r7, #0
    4840:	46b9      	mov	r9, r7
    4842:	463e      	mov	r6, r7
    4844:	68a3      	ldr	r3, [r4, #8]
    4846:	2b00      	cmp	r3, #0
    4848:	f000 80bd 	beq.w	49c6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    484c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4850:	8321      	strh	r1, [r4, #24]
    4852:	f388 8811 	msr	BASEPRI, r8
    4856:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    485a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    485c:	2900      	cmp	r1, #0
    485e:	f000 80bb 	beq.w	49d8 <process_event+0x1f0>
	return node->next;
    4862:	680d      	ldr	r5, [r1, #0]
    4864:	2900      	cmp	r1, #0
    4866:	f000 80b7 	beq.w	49d8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    486a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    486e:	4633      	mov	r3, r6
    4870:	4652      	mov	r2, sl
    4872:	4620      	mov	r0, r4
    4874:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4876:	2d00      	cmp	r5, #0
    4878:	d076      	beq.n	4968 <process_event+0x180>
    487a:	682b      	ldr	r3, [r5, #0]
    487c:	4629      	mov	r1, r5
    487e:	461d      	mov	r5, r3
    4880:	e7f0      	b.n	4864 <process_event+0x7c>
    4882:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4886:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4888:	2a01      	cmp	r2, #1
    488a:	d81b      	bhi.n	48c4 <process_event+0xdc>
	list->head = NULL;
    488c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    488e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4892:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4894:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4896:	b289      	uxth	r1, r1
	list->tail = NULL;
    4898:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    489c:	d109      	bne.n	48b2 <process_event+0xca>
    489e:	463b      	mov	r3, r7
    48a0:	e003      	b.n	48aa <process_event+0xc2>
				mgr->refs += 1U;
    48a2:	8b62      	ldrh	r2, [r4, #26]
    48a4:	3201      	adds	r2, #1
    48a6:	8362      	strh	r2, [r4, #26]
	return node->next;
    48a8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    48aa:	2b00      	cmp	r3, #0
    48ac:	d1f9      	bne.n	48a2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    48ae:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    48b2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    48b4:	4620      	mov	r0, r4
    48b6:	f00d fd90 	bl	123da <process_recheck>
    48ba:	2800      	cmp	r0, #0
    48bc:	d07b      	beq.n	49b6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    48be:	f041 0120 	orr.w	r1, r1, #32
    48c2:	e077      	b.n	49b4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    48c4:	2b04      	cmp	r3, #4
    48c6:	d10a      	bne.n	48de <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    48c8:	f021 0107 	bic.w	r1, r1, #7
    48cc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    48ce:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    48d0:	4620      	mov	r0, r4
    48d2:	f00d fd82 	bl	123da <process_recheck>
    48d6:	b110      	cbz	r0, 48de <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    48d8:	f041 0120 	orr.w	r1, r1, #32
    48dc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    48de:	8b21      	ldrh	r1, [r4, #24]
    48e0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    48e4:	45aa      	cmp	sl, r5
    48e6:	d050      	beq.n	498a <process_event+0x1a2>
    48e8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    48ea:	46b9      	mov	r9, r7
    48ec:	e7aa      	b.n	4844 <process_event+0x5c>
			transit = mgr->transitions->start;
    48ee:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    48f0:	f021 0107 	bic.w	r1, r1, #7
    48f4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    48f8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    48fa:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    48fe:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    4900:	d12d      	bne.n	495e <process_event+0x176>
		    || (transit != NULL)) {
    4902:	f1b9 0f00 	cmp.w	r9, #0
    4906:	d040      	beq.n	498a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4908:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    490c:	8321      	strh	r1, [r4, #24]
    490e:	f388 8811 	msr	BASEPRI, r8
    4912:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    4916:	493a      	ldr	r1, [pc, #232]	; (4a00 <process_event+0x218>)
    4918:	4620      	mov	r0, r4
    491a:	47c8      	blx	r9
    491c:	e029      	b.n	4972 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    491e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    4922:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4924:	f041 0104 	orr.w	r1, r1, #4
    4928:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    492a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    492c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    4930:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    4932:	d0e6      	beq.n	4902 <process_event+0x11a>
    4934:	2700      	movs	r7, #0
		res = 0;
    4936:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4938:	f04f 0a04 	mov.w	sl, #4
    493c:	e782      	b.n	4844 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    493e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    4942:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4944:	f041 0105 	orr.w	r1, r1, #5
    4948:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    494a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    494c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    4950:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    4952:	d0d6      	beq.n	4902 <process_event+0x11a>
    4954:	2700      	movs	r7, #0
		res = 0;
    4956:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4958:	f04f 0a05 	mov.w	sl, #5
    495c:	e772      	b.n	4844 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    495e:	2700      	movs	r7, #0
		res = 0;
    4960:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4962:	f04f 0a06 	mov.w	sl, #6
    4966:	e76d      	b.n	4844 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4968:	462b      	mov	r3, r5
    496a:	e787      	b.n	487c <process_event+0x94>
			if (transit != NULL) {
    496c:	f1b9 0f00 	cmp.w	r9, #0
    4970:	d1d1      	bne.n	4916 <process_event+0x12e>
	__asm__ volatile(
    4972:	f04f 0340 	mov.w	r3, #64	; 0x40
    4976:	f3ef 8811 	mrs	r8, BASEPRI
    497a:	f383 8812 	msr	BASEPRI_MAX, r3
    497e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4982:	8b23      	ldrh	r3, [r4, #24]
    4984:	f023 0308 	bic.w	r3, r3, #8
    4988:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    498a:	8b25      	ldrh	r5, [r4, #24]
    498c:	06ea      	lsls	r2, r5, #27
    498e:	d52e      	bpl.n	49ee <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4990:	f025 0310 	bic.w	r3, r5, #16
    4994:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    4996:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    499a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    499c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    499e:	2e00      	cmp	r6, #0
    49a0:	f6bf af6f 	bge.w	4882 <process_event+0x9a>
	list->head = NULL;
    49a4:	2300      	movs	r3, #0
		*clients = mgr->clients;
    49a6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    49a8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    49ac:	f021 0107 	bic.w	r1, r1, #7
    49b0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    49b4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    49b6:	8b21      	ldrh	r1, [r4, #24]
    49b8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    49bc:	45aa      	cmp	sl, r5
    49be:	f04f 0900 	mov.w	r9, #0
    49c2:	f47f af3f 	bne.w	4844 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    49c6:	2f00      	cmp	r7, #0
    49c8:	d09b      	beq.n	4902 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    49ca:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    49ce:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    49d0:	f388 8811 	msr	BASEPRI, r8
    49d4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    49d8:	2f00      	cmp	r7, #0
    49da:	d0c7      	beq.n	496c <process_event+0x184>
	return node->next;
    49dc:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    49de:	4639      	mov	r1, r7
    49e0:	4633      	mov	r3, r6
    49e2:	4652      	mov	r2, sl
    49e4:	4620      	mov	r0, r4
    49e6:	f00d fd24 	bl	12432 <notify_one>
	list->head = node;
    49ea:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    49ec:	e7f4      	b.n	49d8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    49ee:	06ab      	lsls	r3, r5, #26
    49f0:	f57f af1a 	bpl.w	4828 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    49f4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    49f8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    49fa:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    49fe:	e6ff      	b.n	4800 <process_event+0x18>
    4a00:	0001245f 	.word	0x0001245f

00004a04 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    4a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a08:	4681      	mov	r9, r0
    4a0a:	b095      	sub	sp, #84	; 0x54
    4a0c:	468b      	mov	fp, r1
    4a0e:	4617      	mov	r7, r2
    4a10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4a12:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4a14:	7838      	ldrb	r0, [r7, #0]
    4a16:	b908      	cbnz	r0, 4a1c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4a18:	4628      	mov	r0, r5
    4a1a:	e358      	b.n	50ce <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    4a1c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    4a1e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    4a20:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    4a22:	d006      	beq.n	4a32 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    4a24:	4659      	mov	r1, fp
    4a26:	47c8      	blx	r9
    4a28:	2800      	cmp	r0, #0
    4a2a:	f2c0 8350 	blt.w	50ce <z_cbvprintf_impl+0x6ca>
    4a2e:	3501      	adds	r5, #1
		if (bps == NULL) {
    4a30:	e1fb      	b.n	4e2a <z_cbvprintf_impl+0x426>
		} state = {
    4a32:	2218      	movs	r2, #24
    4a34:	2100      	movs	r1, #0
    4a36:	a80e      	add	r0, sp, #56	; 0x38
    4a38:	f00e f953 	bl	12ce2 <memset>
	if (*sp == '%') {
    4a3c:	787b      	ldrb	r3, [r7, #1]
    4a3e:	2b25      	cmp	r3, #37	; 0x25
    4a40:	d07d      	beq.n	4b3e <z_cbvprintf_impl+0x13a>
    4a42:	2300      	movs	r3, #0
    4a44:	1c78      	adds	r0, r7, #1
    4a46:	4698      	mov	r8, r3
    4a48:	469e      	mov	lr, r3
    4a4a:	469c      	mov	ip, r3
    4a4c:	461e      	mov	r6, r3
    4a4e:	4601      	mov	r1, r0
		switch (*sp) {
    4a50:	f810 2b01 	ldrb.w	r2, [r0], #1
    4a54:	2a2b      	cmp	r2, #43	; 0x2b
    4a56:	f000 80a1 	beq.w	4b9c <z_cbvprintf_impl+0x198>
    4a5a:	f200 8098 	bhi.w	4b8e <z_cbvprintf_impl+0x18a>
    4a5e:	2a20      	cmp	r2, #32
    4a60:	f000 809f 	beq.w	4ba2 <z_cbvprintf_impl+0x19e>
    4a64:	2a23      	cmp	r2, #35	; 0x23
    4a66:	f000 809f 	beq.w	4ba8 <z_cbvprintf_impl+0x1a4>
    4a6a:	b12b      	cbz	r3, 4a78 <z_cbvprintf_impl+0x74>
    4a6c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4a74:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    4a78:	f1b8 0f00 	cmp.w	r8, #0
    4a7c:	d005      	beq.n	4a8a <z_cbvprintf_impl+0x86>
    4a7e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4a82:	f043 0320 	orr.w	r3, r3, #32
    4a86:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    4a8a:	f1be 0f00 	cmp.w	lr, #0
    4a8e:	d005      	beq.n	4a9c <z_cbvprintf_impl+0x98>
    4a90:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4a94:	f043 0310 	orr.w	r3, r3, #16
    4a98:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    4a9c:	f1bc 0f00 	cmp.w	ip, #0
    4aa0:	d005      	beq.n	4aae <z_cbvprintf_impl+0xaa>
    4aa2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4aa6:	f043 0308 	orr.w	r3, r3, #8
    4aaa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    4aae:	b12e      	cbz	r6, 4abc <z_cbvprintf_impl+0xb8>
    4ab0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4ab4:	f043 0304 	orr.w	r3, r3, #4
    4ab8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    4abc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4ac0:	f003 0044 	and.w	r0, r3, #68	; 0x44
    4ac4:	2844      	cmp	r0, #68	; 0x44
    4ac6:	d103      	bne.n	4ad0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    4ac8:	f36f 1386 	bfc	r3, #6, #1
    4acc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    4ad0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    4ad4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    4ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ada:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    4ade:	d17f      	bne.n	4be0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    4ae0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4ae4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    4ae8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    4aea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    4aee:	781a      	ldrb	r2, [r3, #0]
    4af0:	2a2e      	cmp	r2, #46	; 0x2e
    4af2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4af6:	bf0c      	ite	eq
    4af8:	2101      	moveq	r1, #1
    4afa:	2100      	movne	r1, #0
    4afc:	f361 0241 	bfi	r2, r1, #1, #1
    4b00:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    4b04:	d178      	bne.n	4bf8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    4b06:	785a      	ldrb	r2, [r3, #1]
    4b08:	2a2a      	cmp	r2, #42	; 0x2a
    4b0a:	d06e      	beq.n	4bea <z_cbvprintf_impl+0x1e6>
	++sp;
    4b0c:	3301      	adds	r3, #1
	size_t val = 0;
    4b0e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    4b10:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4b14:	4619      	mov	r1, r3
    4b16:	f811 0b01 	ldrb.w	r0, [r1], #1
    4b1a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4b1e:	2e09      	cmp	r6, #9
    4b20:	f240 8095 	bls.w	4c4e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    4b24:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    4b28:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    4b2a:	f3c1 0040 	ubfx	r0, r1, #1, #1
    4b2e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    4b32:	460a      	mov	r2, r1
    4b34:	f360 0241 	bfi	r2, r0, #1, #1
    4b38:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    4b3c:	e05c      	b.n	4bf8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    4b3e:	1cba      	adds	r2, r7, #2
    4b40:	9203      	str	r2, [sp, #12]
    4b42:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    4b46:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    4b4a:	07da      	lsls	r2, r3, #31
    4b4c:	f140 812e 	bpl.w	4dac <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    4b50:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    4b54:	f1b8 0f00 	cmp.w	r8, #0
    4b58:	da07      	bge.n	4b6a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    4b5a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    4b5e:	f042 0204 	orr.w	r2, r2, #4
    4b62:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    4b66:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    4b6a:	075e      	lsls	r6, r3, #29
    4b6c:	f140 8127 	bpl.w	4dbe <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    4b70:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    4b74:	f1ba 0f00 	cmp.w	sl, #0
    4b78:	f280 8126 	bge.w	4dc8 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    4b7c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    4b80:	f36f 0341 	bfc	r3, #1, #1
    4b84:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    4b88:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    4b8c:	e11c      	b.n	4dc8 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    4b8e:	2a2d      	cmp	r2, #45	; 0x2d
    4b90:	d00d      	beq.n	4bae <z_cbvprintf_impl+0x1aa>
    4b92:	2a30      	cmp	r2, #48	; 0x30
    4b94:	f47f af69 	bne.w	4a6a <z_cbvprintf_impl+0x66>
    4b98:	2301      	movs	r3, #1
	} while (loop);
    4b9a:	e758      	b.n	4a4e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    4b9c:	f04f 0c01 	mov.w	ip, #1
    4ba0:	e755      	b.n	4a4e <z_cbvprintf_impl+0x4a>
    4ba2:	f04f 0e01 	mov.w	lr, #1
    4ba6:	e752      	b.n	4a4e <z_cbvprintf_impl+0x4a>
    4ba8:	f04f 0801 	mov.w	r8, #1
    4bac:	e74f      	b.n	4a4e <z_cbvprintf_impl+0x4a>
    4bae:	2601      	movs	r6, #1
    4bb0:	e74d      	b.n	4a4e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    4bb2:	fb0e 6202 	mla	r2, lr, r2, r6
    4bb6:	3a30      	subs	r2, #48	; 0x30
    4bb8:	4603      	mov	r3, r0
    4bba:	4618      	mov	r0, r3
    4bbc:	f810 6b01 	ldrb.w	r6, [r0], #1
    4bc0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4bc4:	f1bc 0f09 	cmp.w	ip, #9
    4bc8:	d9f3      	bls.n	4bb2 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    4bca:	4299      	cmp	r1, r3
    4bcc:	d08f      	beq.n	4aee <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    4bce:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    4bd2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    4bd4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    4bd6:	f362 0141 	bfi	r1, r2, #1, #1
    4bda:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    4bde:	e786      	b.n	4aee <z_cbvprintf_impl+0xea>
    4be0:	460b      	mov	r3, r1
	size_t val = 0;
    4be2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    4be4:	f04f 0e0a 	mov.w	lr, #10
    4be8:	e7e7      	b.n	4bba <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    4bea:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4bee:	f042 0204 	orr.w	r2, r2, #4
    4bf2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    4bf6:	3302      	adds	r3, #2
	switch (*sp) {
    4bf8:	781a      	ldrb	r2, [r3, #0]
    4bfa:	2a6c      	cmp	r2, #108	; 0x6c
    4bfc:	d047      	beq.n	4c8e <z_cbvprintf_impl+0x28a>
    4bfe:	d82b      	bhi.n	4c58 <z_cbvprintf_impl+0x254>
    4c00:	2a68      	cmp	r2, #104	; 0x68
    4c02:	d031      	beq.n	4c68 <z_cbvprintf_impl+0x264>
    4c04:	2a6a      	cmp	r2, #106	; 0x6a
    4c06:	d04b      	beq.n	4ca0 <z_cbvprintf_impl+0x29c>
    4c08:	2a4c      	cmp	r2, #76	; 0x4c
    4c0a:	d051      	beq.n	4cb0 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    4c0c:	461a      	mov	r2, r3
    4c0e:	f812 3b01 	ldrb.w	r3, [r2], #1
    4c12:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    4c14:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    4c16:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    4c1a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    4c1e:	f200 80be 	bhi.w	4d9e <z_cbvprintf_impl+0x39a>
    4c22:	2b6d      	cmp	r3, #109	; 0x6d
    4c24:	d851      	bhi.n	4cca <z_cbvprintf_impl+0x2c6>
    4c26:	2b69      	cmp	r3, #105	; 0x69
    4c28:	f200 80b9 	bhi.w	4d9e <z_cbvprintf_impl+0x39a>
    4c2c:	2b57      	cmp	r3, #87	; 0x57
    4c2e:	d867      	bhi.n	4d00 <z_cbvprintf_impl+0x2fc>
    4c30:	2b41      	cmp	r3, #65	; 0x41
    4c32:	d003      	beq.n	4c3c <z_cbvprintf_impl+0x238>
    4c34:	3b45      	subs	r3, #69	; 0x45
    4c36:	2b02      	cmp	r3, #2
    4c38:	f200 80b1 	bhi.w	4d9e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    4c3c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    4c40:	2204      	movs	r2, #4
    4c42:	f362 0302 	bfi	r3, r2, #0, #3
    4c46:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    4c4a:	2301      	movs	r3, #1
			break;
    4c4c:	e073      	b.n	4d36 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    4c4e:	fb0c 0202 	mla	r2, ip, r2, r0
    4c52:	3a30      	subs	r2, #48	; 0x30
    4c54:	460b      	mov	r3, r1
    4c56:	e75d      	b.n	4b14 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    4c58:	2a74      	cmp	r2, #116	; 0x74
    4c5a:	d025      	beq.n	4ca8 <z_cbvprintf_impl+0x2a4>
    4c5c:	2a7a      	cmp	r2, #122	; 0x7a
    4c5e:	d1d5      	bne.n	4c0c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    4c60:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4c64:	2106      	movs	r1, #6
    4c66:	e00c      	b.n	4c82 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    4c68:	785a      	ldrb	r2, [r3, #1]
    4c6a:	2a68      	cmp	r2, #104	; 0x68
    4c6c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4c70:	d106      	bne.n	4c80 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    4c72:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    4c74:	f361 02c6 	bfi	r2, r1, #3, #4
    4c78:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    4c7c:	3302      	adds	r3, #2
    4c7e:	e7c5      	b.n	4c0c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    4c80:	2102      	movs	r1, #2
    4c82:	f361 02c6 	bfi	r2, r1, #3, #4
    4c86:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    4c8a:	3301      	adds	r3, #1
    4c8c:	e7be      	b.n	4c0c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    4c8e:	785a      	ldrb	r2, [r3, #1]
    4c90:	2a6c      	cmp	r2, #108	; 0x6c
    4c92:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4c96:	d101      	bne.n	4c9c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    4c98:	2104      	movs	r1, #4
    4c9a:	e7eb      	b.n	4c74 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    4c9c:	2103      	movs	r1, #3
    4c9e:	e7f0      	b.n	4c82 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    4ca0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4ca4:	2105      	movs	r1, #5
    4ca6:	e7ec      	b.n	4c82 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    4ca8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    4cac:	2107      	movs	r1, #7
    4cae:	e7e8      	b.n	4c82 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    4cb0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    4cb4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    4cb8:	f022 0202 	bic.w	r2, r2, #2
    4cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    4cc0:	f042 0202 	orr.w	r2, r2, #2
    4cc4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    4cc8:	e7df      	b.n	4c8a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    4cca:	3b6e      	subs	r3, #110	; 0x6e
    4ccc:	b2d9      	uxtb	r1, r3
    4cce:	2301      	movs	r3, #1
    4cd0:	408b      	lsls	r3, r1
    4cd2:	f240 4182 	movw	r1, #1154	; 0x482
    4cd6:	420b      	tst	r3, r1
    4cd8:	d137      	bne.n	4d4a <z_cbvprintf_impl+0x346>
    4cda:	f013 0f24 	tst.w	r3, #36	; 0x24
    4cde:	d151      	bne.n	4d84 <z_cbvprintf_impl+0x380>
    4ce0:	07d8      	lsls	r0, r3, #31
    4ce2:	d55c      	bpl.n	4d9e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    4ce4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    4ce8:	2103      	movs	r1, #3
    4cea:	f361 0302 	bfi	r3, r1, #0, #3
    4cee:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    4cf2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    4cf6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    4cfa:	424b      	negs	r3, r1
    4cfc:	414b      	adcs	r3, r1
    4cfe:	e01a      	b.n	4d36 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    4d00:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    4d04:	b2c9      	uxtb	r1, r1
    4d06:	2001      	movs	r0, #1
    4d08:	fa00 f101 	lsl.w	r1, r0, r1
    4d0c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    4d10:	d194      	bne.n	4c3c <z_cbvprintf_impl+0x238>
    4d12:	f640 0601 	movw	r6, #2049	; 0x801
    4d16:	4231      	tst	r1, r6
    4d18:	d11d      	bne.n	4d56 <z_cbvprintf_impl+0x352>
    4d1a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    4d1e:	d03e      	beq.n	4d9e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    4d20:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    4d24:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    4d28:	f002 0278 	and.w	r2, r2, #120	; 0x78
    4d2c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    4d2e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    4d32:	d034      	beq.n	4d9e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    4d34:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    4d36:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    4d3a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    4d3e:	430b      	orrs	r3, r1
    4d40:	f363 0241 	bfi	r2, r3, #1, #1
    4d44:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    4d48:	e6fd      	b.n	4b46 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    4d4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    4d4e:	2102      	movs	r1, #2
    4d50:	f361 0302 	bfi	r3, r1, #0, #3
    4d54:	e7e8      	b.n	4d28 <z_cbvprintf_impl+0x324>
    4d56:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    4d5a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    4d5c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    4d60:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    4d64:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    4d66:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    4d6a:	bf02      	ittt	eq
    4d6c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    4d70:	f041 0101 	orreq.w	r1, r1, #1
    4d74:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    4d78:	2b63      	cmp	r3, #99	; 0x63
    4d7a:	d1db      	bne.n	4d34 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    4d7c:	1e13      	subs	r3, r2, #0
    4d7e:	bf18      	it	ne
    4d80:	2301      	movne	r3, #1
    4d82:	e7d8      	b.n	4d36 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    4d84:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    4d88:	2103      	movs	r1, #3
    4d8a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    4d8e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    4d92:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    4d96:	bf14      	ite	ne
    4d98:	2301      	movne	r3, #1
    4d9a:	2300      	moveq	r3, #0
    4d9c:	e7cb      	b.n	4d36 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    4d9e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4da2:	f043 0301 	orr.w	r3, r3, #1
    4da6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    4daa:	e7c3      	b.n	4d34 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    4dac:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    4db0:	2a00      	cmp	r2, #0
			width = conv->width_value;
    4db2:	bfb4      	ite	lt
    4db4:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    4db8:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    4dbc:	e6d5      	b.n	4b6a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    4dbe:	0798      	lsls	r0, r3, #30
    4dc0:	f57f aee2 	bpl.w	4b88 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    4dc4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    4dc8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    4dcc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    4dce:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    4dd2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    4dd6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    4dda:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    4ddc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4de0:	d133      	bne.n	4e4a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    4de2:	1ecb      	subs	r3, r1, #3
    4de4:	2b04      	cmp	r3, #4
    4de6:	d804      	bhi.n	4df2 <z_cbvprintf_impl+0x3ee>
    4de8:	e8df f003 	tbb	[pc, r3]
    4dec:	21464621 	.word	0x21464621
    4df0:	21          	.byte	0x21
    4df1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    4df2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    4df4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    4df6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    4dfa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    4dfe:	d11c      	bne.n	4e3a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    4e00:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    4e04:	17da      	asrs	r2, r3, #31
    4e06:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    4e0a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    4e0c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    4e10:	f013 0603 	ands.w	r6, r3, #3
    4e14:	d050      	beq.n	4eb8 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    4e16:	9b03      	ldr	r3, [sp, #12]
    4e18:	463a      	mov	r2, r7
    4e1a:	4659      	mov	r1, fp
    4e1c:	4648      	mov	r0, r9
    4e1e:	f00d fc3c 	bl	1269a <outs>
    4e22:	2800      	cmp	r0, #0
    4e24:	f2c0 8153 	blt.w	50ce <z_cbvprintf_impl+0x6ca>
    4e28:	4405      	add	r5, r0
			continue;
    4e2a:	9f03      	ldr	r7, [sp, #12]
    4e2c:	e5f2      	b.n	4a14 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4e2e:	f854 3b04 	ldr.w	r3, [r4], #4
    4e32:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    4e34:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    4e38:	e7e8      	b.n	4e0c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    4e3a:	2902      	cmp	r1, #2
    4e3c:	d1e5      	bne.n	4e0a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    4e3e:	b21a      	sxth	r2, r3
    4e40:	f343 33c0 	sbfx	r3, r3, #15, #1
    4e44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    4e48:	e7df      	b.n	4e0a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4e4a:	2b02      	cmp	r3, #2
    4e4c:	d124      	bne.n	4e98 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    4e4e:	1ecb      	subs	r3, r1, #3
    4e50:	2b04      	cmp	r3, #4
    4e52:	d804      	bhi.n	4e5e <z_cbvprintf_impl+0x45a>
    4e54:	e8df f003 	tbb	[pc, r3]
    4e58:	18101018 	.word	0x18101018
    4e5c:	18          	.byte	0x18
    4e5d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    4e5e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    4e60:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    4e64:	f04f 0200 	mov.w	r2, #0
    4e68:	d014      	beq.n	4e94 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    4e6a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    4e6c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    4e70:	d1cc      	bne.n	4e0c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    4e72:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    4e74:	930e      	str	r3, [sp, #56]	; 0x38
    4e76:	e7c9      	b.n	4e0c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    4e78:	3407      	adds	r4, #7
    4e7a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    4e7e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    4e82:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    4e86:	e7c1      	b.n	4e0c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    4e88:	f854 3b04 	ldr.w	r3, [r4], #4
    4e8c:	930e      	str	r3, [sp, #56]	; 0x38
    4e8e:	2300      	movs	r3, #0
    4e90:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    4e92:	e7bb      	b.n	4e0c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    4e94:	b2db      	uxtb	r3, r3
    4e96:	e7cd      	b.n	4e34 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    4e98:	2b04      	cmp	r3, #4
    4e9a:	d108      	bne.n	4eae <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    4e9c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    4e9e:	f024 0407 	bic.w	r4, r4, #7
    4ea2:	e9d4 2300 	ldrd	r2, r3, [r4]
    4ea6:	3408      	adds	r4, #8
    4ea8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    4eac:	e7ae      	b.n	4e0c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4eae:	2b03      	cmp	r3, #3
    4eb0:	d1ac      	bne.n	4e0c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    4eb2:	f854 3b04 	ldr.w	r3, [r4], #4
    4eb6:	e7dd      	b.n	4e74 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    4eb8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    4ebc:	2878      	cmp	r0, #120	; 0x78
    4ebe:	d8b4      	bhi.n	4e2a <z_cbvprintf_impl+0x426>
    4ec0:	2862      	cmp	r0, #98	; 0x62
    4ec2:	d81c      	bhi.n	4efe <z_cbvprintf_impl+0x4fa>
    4ec4:	2825      	cmp	r0, #37	; 0x25
    4ec6:	f43f adad 	beq.w	4a24 <z_cbvprintf_impl+0x20>
    4eca:	2858      	cmp	r0, #88	; 0x58
    4ecc:	d1ad      	bne.n	4e2a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    4ece:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    4ed2:	9300      	str	r3, [sp, #0]
    4ed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    4ed8:	ab08      	add	r3, sp, #32
    4eda:	aa10      	add	r2, sp, #64	; 0x40
    4edc:	f00d fb97 	bl	1260e <encode_uint>
			if (precision >= 0) {
    4ee0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    4ee4:	4607      	mov	r7, r0
			if (precision >= 0) {
    4ee6:	f280 809a 	bge.w	501e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    4eea:	2f00      	cmp	r7, #0
    4eec:	d09d      	beq.n	4e2a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    4eee:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    4ef2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    4ef4:	2e00      	cmp	r6, #0
    4ef6:	f000 80c1 	beq.w	507c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    4efa:	3001      	adds	r0, #1
    4efc:	e0be      	b.n	507c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    4efe:	3863      	subs	r0, #99	; 0x63
    4f00:	2815      	cmp	r0, #21
    4f02:	d892      	bhi.n	4e2a <z_cbvprintf_impl+0x426>
    4f04:	a201      	add	r2, pc, #4	; (adr r2, 4f0c <z_cbvprintf_impl+0x508>)
    4f06:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    4f0a:	bf00      	nop
    4f0c:	00004fe1 	.word	0x00004fe1
    4f10:	00004ff3 	.word	0x00004ff3
    4f14:	00004e2b 	.word	0x00004e2b
    4f18:	00004e2b 	.word	0x00004e2b
    4f1c:	00004e2b 	.word	0x00004e2b
    4f20:	00004e2b 	.word	0x00004e2b
    4f24:	00004ff3 	.word	0x00004ff3
    4f28:	00004e2b 	.word	0x00004e2b
    4f2c:	00004e2b 	.word	0x00004e2b
    4f30:	00004e2b 	.word	0x00004e2b
    4f34:	00004e2b 	.word	0x00004e2b
    4f38:	00005081 	.word	0x00005081
    4f3c:	00005019 	.word	0x00005019
    4f40:	0000503f 	.word	0x0000503f
    4f44:	00004e2b 	.word	0x00004e2b
    4f48:	00004e2b 	.word	0x00004e2b
    4f4c:	00004f65 	.word	0x00004f65
    4f50:	00004e2b 	.word	0x00004e2b
    4f54:	00005019 	.word	0x00005019
    4f58:	00004e2b 	.word	0x00004e2b
    4f5c:	00004e2b 	.word	0x00004e2b
    4f60:	00005019 	.word	0x00005019
			if (precision >= 0) {
    4f64:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    4f68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    4f6a:	db35      	blt.n	4fd8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    4f6c:	4651      	mov	r1, sl
    4f6e:	4638      	mov	r0, r7
    4f70:	f00d fe7c 	bl	12c6c <strnlen>
			bpe = bps + len;
    4f74:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    4f78:	2f00      	cmp	r7, #0
    4f7a:	f43f af56 	beq.w	4e2a <z_cbvprintf_impl+0x426>
		char sign = 0;
    4f7e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    4f80:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    4f84:	f013 0210 	ands.w	r2, r3, #16
    4f88:	9205      	str	r2, [sp, #20]
    4f8a:	f000 8093 	beq.w	50b4 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    4f8e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    4f90:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    4f92:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    4f94:	bf48      	it	mi
    4f96:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    4f98:	9204      	str	r2, [sp, #16]
    4f9a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    4f9c:	bf48      	it	mi
    4f9e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    4fa0:	f1b8 0f00 	cmp.w	r8, #0
    4fa4:	f340 80a0 	ble.w	50e8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    4fa8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    4fac:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    4fb0:	f3c2 0380 	ubfx	r3, r2, #2, #1
    4fb4:	0750      	lsls	r0, r2, #29
    4fb6:	9306      	str	r3, [sp, #24]
    4fb8:	f100 8096 	bmi.w	50e8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    4fbc:	0651      	lsls	r1, r2, #25
    4fbe:	f140 8089 	bpl.w	50d4 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    4fc2:	b13e      	cbz	r6, 4fd4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    4fc4:	4659      	mov	r1, fp
    4fc6:	4630      	mov	r0, r6
    4fc8:	47c8      	blx	r9
    4fca:	2800      	cmp	r0, #0
    4fcc:	db7f      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    4fce:	9b06      	ldr	r3, [sp, #24]
    4fd0:	3501      	adds	r5, #1
    4fd2:	461e      	mov	r6, r3
					pad = '0';
    4fd4:	2230      	movs	r2, #48	; 0x30
    4fd6:	e07e      	b.n	50d6 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    4fd8:	4638      	mov	r0, r7
    4fda:	f00d fe40 	bl	12c5e <strlen>
    4fde:	e7c9      	b.n	4f74 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4fe2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    4fe6:	2600      	movs	r6, #0
			bps = buf;
    4fe8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    4fea:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    4fee:	2001      	movs	r0, #1
    4ff0:	e7c6      	b.n	4f80 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    4ff2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    4ff4:	bf5c      	itt	pl
    4ff6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    4ffa:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    4ffc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    5000:	bf48      	it	mi
    5002:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    5004:	2b00      	cmp	r3, #0
    5006:	f6bf af62 	bge.w	4ece <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    500a:	4252      	negs	r2, r2
    500c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5010:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    5014:	262d      	movs	r6, #45	; 0x2d
    5016:	e75a      	b.n	4ece <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    5018:	2600      	movs	r6, #0
    501a:	e758      	b.n	4ece <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    501c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    501e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    5022:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    5026:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    5028:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    502c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    502e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    5032:	f67f af5a 	bls.w	4eea <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    5036:	ebaa 0303 	sub.w	r3, sl, r3
    503a:	9311      	str	r3, [sp, #68]	; 0x44
    503c:	e755      	b.n	4eea <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    503e:	980e      	ldr	r0, [sp, #56]	; 0x38
    5040:	b390      	cbz	r0, 50a8 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5042:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    5046:	9300      	str	r3, [sp, #0]
    5048:	aa10      	add	r2, sp, #64	; 0x40
    504a:	ab08      	add	r3, sp, #32
    504c:	2100      	movs	r1, #0
    504e:	f00d fade 	bl	1260e <encode_uint>
				conv->altform_0c = true;
    5052:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    5056:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    505a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    505e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    5062:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5066:	4607      	mov	r7, r0
				conv->altform_0c = true;
    5068:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    506c:	dad6      	bge.n	501c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    506e:	2800      	cmp	r0, #0
    5070:	f43f aedb 	beq.w	4e2a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    5074:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    5078:	1a18      	subs	r0, r3, r0
		char sign = 0;
    507a:	2600      	movs	r6, #0
    507c:	469a      	mov	sl, r3
    507e:	e77f      	b.n	4f80 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    5080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    5082:	2907      	cmp	r1, #7
    5084:	f63f aed1 	bhi.w	4e2a <z_cbvprintf_impl+0x426>
    5088:	e8df f001 	tbb	[pc, r1]
    508c:	0c06040c 	.word	0x0c06040c
    5090:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    5094:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    5096:	e6c8      	b.n	4e2a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    5098:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    509a:	e6c6      	b.n	4e2a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    509c:	17ea      	asrs	r2, r5, #31
    509e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    50a2:	e6c2      	b.n	4e2a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    50a4:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    50a6:	e6c0      	b.n	4e2a <z_cbvprintf_impl+0x426>
    50a8:	4f2e      	ldr	r7, [pc, #184]	; (5164 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    50aa:	4606      	mov	r6, r0
			bpe = bps + 5;
    50ac:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    50b0:	2005      	movs	r0, #5
    50b2:	e765      	b.n	4f80 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    50b4:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    50b6:	bf48      	it	mi
    50b8:	3001      	addmi	r0, #1
    50ba:	e769      	b.n	4f90 <z_cbvprintf_impl+0x58c>
    50bc:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    50be:	4610      	mov	r0, r2
    50c0:	9206      	str	r2, [sp, #24]
    50c2:	4659      	mov	r1, fp
    50c4:	47c8      	blx	r9
    50c6:	2800      	cmp	r0, #0
    50c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    50cc:	da04      	bge.n	50d8 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    50ce:	b015      	add	sp, #84	; 0x54
    50d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    50d4:	2220      	movs	r2, #32
					pad = '0';
    50d6:	4643      	mov	r3, r8
				while (width-- > 0) {
    50d8:	4619      	mov	r1, r3
    50da:	2900      	cmp	r1, #0
    50dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    50e0:	dcec      	bgt.n	50bc <z_cbvprintf_impl+0x6b8>
    50e2:	4445      	add	r5, r8
    50e4:	1a6d      	subs	r5, r5, r1
    50e6:	4698      	mov	r8, r3
		if (sign != 0) {
    50e8:	b12e      	cbz	r6, 50f6 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    50ea:	4659      	mov	r1, fp
    50ec:	4630      	mov	r0, r6
    50ee:	47c8      	blx	r9
    50f0:	2800      	cmp	r0, #0
    50f2:	dbec      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    50f4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    50f6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    50fa:	06da      	lsls	r2, r3, #27
    50fc:	d401      	bmi.n	5102 <z_cbvprintf_impl+0x6fe>
    50fe:	071b      	lsls	r3, r3, #28
    5100:	d505      	bpl.n	510e <z_cbvprintf_impl+0x70a>
				OUTC('0');
    5102:	4659      	mov	r1, fp
    5104:	2030      	movs	r0, #48	; 0x30
    5106:	47c8      	blx	r9
    5108:	2800      	cmp	r0, #0
    510a:	dbe0      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    510c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    510e:	9b05      	ldr	r3, [sp, #20]
    5110:	b133      	cbz	r3, 5120 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    5112:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    5116:	4659      	mov	r1, fp
    5118:	47c8      	blx	r9
    511a:	2800      	cmp	r0, #0
    511c:	dbd7      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    511e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    5120:	9e04      	ldr	r6, [sp, #16]
    5122:	442e      	add	r6, r5
    5124:	e005      	b.n	5132 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    5126:	4659      	mov	r1, fp
    5128:	2030      	movs	r0, #48	; 0x30
    512a:	47c8      	blx	r9
    512c:	2800      	cmp	r0, #0
    512e:	dbce      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    5130:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    5132:	1b73      	subs	r3, r6, r5
    5134:	2b00      	cmp	r3, #0
    5136:	dcf6      	bgt.n	5126 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    5138:	4653      	mov	r3, sl
    513a:	463a      	mov	r2, r7
    513c:	4659      	mov	r1, fp
    513e:	4648      	mov	r0, r9
    5140:	f00d faab 	bl	1269a <outs>
    5144:	2800      	cmp	r0, #0
    5146:	dbc2      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    5148:	4405      	add	r5, r0
		while (width > 0) {
    514a:	44a8      	add	r8, r5
    514c:	eba8 0305 	sub.w	r3, r8, r5
    5150:	2b00      	cmp	r3, #0
    5152:	f77f ae6a 	ble.w	4e2a <z_cbvprintf_impl+0x426>
			OUTC(' ');
    5156:	4659      	mov	r1, fp
    5158:	2020      	movs	r0, #32
    515a:	47c8      	blx	r9
    515c:	2800      	cmp	r0, #0
    515e:	dbb6      	blt.n	50ce <z_cbvprintf_impl+0x6ca>
    5160:	3501      	adds	r5, #1
			--width;
    5162:	e7f3      	b.n	514c <z_cbvprintf_impl+0x748>
    5164:	00014b04 	.word	0x00014b04

00005168 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    5168:	b508      	push	{r3, lr}
	__asm__ volatile(
    516a:	f04f 0240 	mov.w	r2, #64	; 0x40
    516e:	f3ef 8311 	mrs	r3, BASEPRI
    5172:	f382 8812 	msr	BASEPRI_MAX, r2
    5176:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    517a:	f001 fe27 	bl	6dcc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    517e:	4803      	ldr	r0, [pc, #12]	; (518c <sys_reboot+0x24>)
    5180:	f00d f8ec 	bl	1235c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    5184:	f000 ffc8 	bl	6118 <arch_cpu_idle>
    5188:	e7fc      	b.n	5184 <sys_reboot+0x1c>
    518a:	bf00      	nop
    518c:	00014b0a 	.word	0x00014b0a

00005190 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5190:	f007 bcfa 	b.w	cb88 <SystemInit>

00005194 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    5194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    5198:	f8df 8058 	ldr.w	r8, [pc, #88]	; 51f4 <activate_foreach_backend+0x60>
{
    519c:	4604      	mov	r4, r0
	while (mask_cpy) {
    519e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    51a0:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    51a4:	b914      	cbnz	r4, 51ac <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    51a6:	4638      	mov	r0, r7
    51a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    51ac:	fa94 f5a4 	rbit	r5, r4
    51b0:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    51b4:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    51b8:	012e      	lsls	r6, r5, #4
    51ba:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    51be:	ea6f 0a03 	mvn.w	sl, r3
    51c2:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    51c6:	7b2b      	ldrb	r3, [r5, #12]
    51c8:	2b00      	cmp	r3, #0
    51ca:	d0eb      	beq.n	51a4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    51cc:	f858 3006 	ldr.w	r3, [r8, r6]
    51d0:	691b      	ldr	r3, [r3, #16]
    51d2:	b94b      	cbnz	r3, 51e8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    51d4:	4446      	add	r6, r8
			log_backend_enable(backend,
    51d6:	2204      	movs	r2, #4
    51d8:	6873      	ldr	r3, [r6, #4]
    51da:	4628      	mov	r0, r5
    51dc:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    51de:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    51e2:	f000 fa55 	bl	5690 <log_backend_enable>
    51e6:	e7dd      	b.n	51a4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    51e8:	4628      	mov	r0, r5
    51ea:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    51ec:	2800      	cmp	r0, #0
    51ee:	d1d9      	bne.n	51a4 <activate_foreach_backend+0x10>
    51f0:	e7f0      	b.n	51d4 <activate_foreach_backend+0x40>
    51f2:	bf00      	nop
    51f4:	00014440 	.word	0x00014440

000051f8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    51f8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    51fa:	4910      	ldr	r1, [pc, #64]	; (523c <enable_logger+0x44>)
    51fc:	4810      	ldr	r0, [pc, #64]	; (5240 <enable_logger+0x48>)
{
    51fe:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    5200:	2200      	movs	r2, #0
    5202:	f00e fe3e 	bl	13e82 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5206:	4d0f      	ldr	r5, [pc, #60]	; (5244 <enable_logger+0x4c>)
    5208:	490f      	ldr	r1, [pc, #60]	; (5248 <enable_logger+0x50>)
    520a:	2200      	movs	r2, #0
    520c:	2300      	movs	r3, #0
    520e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5212:	2400      	movs	r4, #0
    5214:	230e      	movs	r3, #14
    5216:	e9cd 3403 	strd	r3, r4, [sp, #12]
    521a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    521e:	4b0b      	ldr	r3, [pc, #44]	; (524c <enable_logger+0x54>)
    5220:	9400      	str	r4, [sp, #0]
    5222:	f44f 7240 	mov.w	r2, #768	; 0x300
    5226:	4628      	mov	r0, r5
    5228:	f008 fc02 	bl	da30 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    522c:	4908      	ldr	r1, [pc, #32]	; (5250 <enable_logger+0x58>)
    522e:	4628      	mov	r0, r5
    5230:	f00e fc51 	bl	13ad6 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    5234:	4620      	mov	r0, r4
    5236:	b009      	add	sp, #36	; 0x24
    5238:	bd30      	pop	{r4, r5, pc}
    523a:	bf00      	nop
    523c:	00005255 	.word	0x00005255
    5240:	20000d60 	.word	0x20000d60
    5244:	200008d8 	.word	0x200008d8
    5248:	20003c40 	.word	0x20003c40
    524c:	0000553d 	.word	0x0000553d
    5250:	00014b33 	.word	0x00014b33

00005254 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5254:	4801      	ldr	r0, [pc, #4]	; (525c <log_process_thread_timer_expiry_fn+0x8>)
    5256:	f008 bd45 	b.w	dce4 <z_impl_k_sem_give>
    525a:	bf00      	nop
    525c:	20000434 	.word	0x20000434

00005260 <z_log_init>:
{
    5260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5264:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    5266:	481f      	ldr	r0, [pc, #124]	; (52e4 <z_log_init+0x84>)
{
    5268:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    526a:	f00d fc3d 	bl	12ae8 <atomic_inc>
    526e:	4606      	mov	r6, r0
    5270:	2800      	cmp	r0, #0
    5272:	d030      	beq.n	52d6 <z_log_init+0x76>
	uint32_t mask = 0;
    5274:	2500      	movs	r5, #0
}
    5276:	4628      	mov	r0, r5
    5278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    527c:	7b23      	ldrb	r3, [r4, #12]
    527e:	b173      	cbz	r3, 529e <z_log_init+0x3e>
	if (backend->api->init) {
    5280:	6823      	ldr	r3, [r4, #0]
    5282:	68db      	ldr	r3, [r3, #12]
    5284:	b10b      	cbz	r3, 528a <z_log_init+0x2a>
		backend->api->init(backend);
    5286:	4620      	mov	r0, r4
    5288:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    528a:	6823      	ldr	r3, [r4, #0]
    528c:	691b      	ldr	r3, [r3, #16]
    528e:	b9d3      	cbnz	r3, 52c6 <z_log_init+0x66>
				log_backend_enable(backend,
    5290:	6863      	ldr	r3, [r4, #4]
    5292:	2204      	movs	r2, #4
    5294:	6819      	ldr	r1, [r3, #0]
    5296:	4620      	mov	r0, r4
    5298:	f000 f9fa 	bl	5690 <log_backend_enable>
			i++;
    529c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    529e:	3410      	adds	r4, #16
    52a0:	454c      	cmp	r4, r9
    52a2:	d3eb      	bcc.n	527c <z_log_init+0x1c>
	if (blocking) {
    52a4:	f1b8 0f00 	cmp.w	r8, #0
    52a8:	d0e5      	beq.n	5276 <z_log_init+0x16>
		while (mask) {
    52aa:	2d00      	cmp	r5, #0
    52ac:	d0e2      	beq.n	5274 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    52ae:	4628      	mov	r0, r5
    52b0:	f7ff ff70 	bl	5194 <activate_foreach_backend>
    52b4:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    52b6:	2f00      	cmp	r7, #0
    52b8:	d0f7      	beq.n	52aa <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    52ba:	2100      	movs	r1, #0
    52bc:	f44f 70a4 	mov.w	r0, #328	; 0x148
    52c0:	f009 f9b2 	bl	e628 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    52c4:	e7f1      	b.n	52aa <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    52c6:	4620      	mov	r0, r4
    52c8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    52ca:	2800      	cmp	r0, #0
    52cc:	d0e0      	beq.n	5290 <z_log_init+0x30>
				mask |= BIT(i);
    52ce:	fa0a f306 	lsl.w	r3, sl, r6
    52d2:	431d      	orrs	r5, r3
    52d4:	e7e2      	b.n	529c <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    52d6:	4c04      	ldr	r4, [pc, #16]	; (52e8 <z_log_init+0x88>)
    52d8:	f8df 9010 	ldr.w	r9, [pc, #16]	; 52ec <z_log_init+0x8c>
	uint32_t mask = 0;
    52dc:	4605      	mov	r5, r0
				mask |= BIT(i);
    52de:	f04f 0a01 	mov.w	sl, #1
    52e2:	e7dd      	b.n	52a0 <z_log_init+0x40>
    52e4:	200017e4 	.word	0x200017e4
    52e8:	00014440 	.word	0x00014440
    52ec:	00014460 	.word	0x00014460

000052f0 <log_format_func_t_get>:
}
    52f0:	4b01      	ldr	r3, [pc, #4]	; (52f8 <log_format_func_t_get+0x8>)
    52f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    52f6:	4770      	bx	lr
    52f8:	000144a4 	.word	0x000144a4

000052fc <log_set_timestamp_func>:
{
    52fc:	b508      	push	{r3, lr}
    52fe:	4603      	mov	r3, r0
    5300:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    5302:	b12b      	cbz	r3, 5310 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    5304:	4a04      	ldr	r2, [pc, #16]	; (5318 <log_set_timestamp_func+0x1c>)
    5306:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    5308:	f000 fbfe 	bl	5b08 <log_output_timestamp_freq_set>
	return 0;
    530c:	2000      	movs	r0, #0
}
    530e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    5310:	f06f 0015 	mvn.w	r0, #21
    5314:	e7fb      	b.n	530e <log_set_timestamp_func+0x12>
    5316:	bf00      	nop
    5318:	20000088 	.word	0x20000088

0000531c <z_log_notify_backend_enabled>:
{
    531c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    531e:	4c04      	ldr	r4, [pc, #16]	; (5330 <z_log_notify_backend_enabled+0x14>)
    5320:	7823      	ldrb	r3, [r4, #0]
    5322:	b913      	cbnz	r3, 532a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    5324:	4803      	ldr	r0, [pc, #12]	; (5334 <z_log_notify_backend_enabled+0x18>)
    5326:	f008 fcdd 	bl	dce4 <z_impl_k_sem_give>
	backend_attached = true;
    532a:	2301      	movs	r3, #1
    532c:	7023      	strb	r3, [r4, #0]
}
    532e:	bd10      	pop	{r4, pc}
    5330:	20002e99 	.word	0x20002e99
    5334:	20000434 	.word	0x20000434

00005338 <z_log_dropped>:
{
    5338:	b510      	push	{r4, lr}
    533a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    533c:	4808      	ldr	r0, [pc, #32]	; (5360 <z_log_dropped+0x28>)
    533e:	f00d fbd3 	bl	12ae8 <atomic_inc>
	if (buffered) {
    5342:	b15c      	cbz	r4, 535c <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5344:	f3bf 8f5b 	dmb	ish
    5348:	4b06      	ldr	r3, [pc, #24]	; (5364 <z_log_dropped+0x2c>)
    534a:	e853 1f00 	ldrex	r1, [r3]
    534e:	3901      	subs	r1, #1
    5350:	e843 1200 	strex	r2, r1, [r3]
    5354:	2a00      	cmp	r2, #0
    5356:	d1f8      	bne.n	534a <z_log_dropped+0x12>
    5358:	f3bf 8f5b 	dmb	ish
}
    535c:	bd10      	pop	{r4, pc}
    535e:	bf00      	nop
    5360:	200017dc 	.word	0x200017dc
    5364:	200017e0 	.word	0x200017e0

00005368 <z_log_dropped_read_and_clear>:
}
    5368:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    536a:	4b06      	ldr	r3, [pc, #24]	; (5384 <z_log_dropped_read_and_clear+0x1c>)
    536c:	f3bf 8f5b 	dmb	ish
    5370:	4601      	mov	r1, r0
    5372:	e853 0f00 	ldrex	r0, [r3]
    5376:	e843 1200 	strex	r2, r1, [r3]
    537a:	2a00      	cmp	r2, #0
    537c:	d1f9      	bne.n	5372 <z_log_dropped_read_and_clear+0xa>
    537e:	f3bf 8f5b 	dmb	ish
    5382:	4770      	bx	lr
    5384:	200017dc 	.word	0x200017dc

00005388 <dropped_notify>:
{
    5388:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    538a:	f7ff ffed 	bl	5368 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    538e:	4c08      	ldr	r4, [pc, #32]	; (53b0 <dropped_notify+0x28>)
    5390:	4e08      	ldr	r6, [pc, #32]	; (53b4 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    5392:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    5394:	42b4      	cmp	r4, r6
    5396:	d300      	bcc.n	539a <dropped_notify+0x12>
}
    5398:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    539a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    539c:	795b      	ldrb	r3, [r3, #5]
    539e:	b12b      	cbz	r3, 53ac <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    53a0:	6823      	ldr	r3, [r4, #0]
    53a2:	685b      	ldr	r3, [r3, #4]
    53a4:	b113      	cbz	r3, 53ac <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    53a6:	4629      	mov	r1, r5
    53a8:	4620      	mov	r0, r4
    53aa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    53ac:	3410      	adds	r4, #16
    53ae:	e7f1      	b.n	5394 <dropped_notify+0xc>
    53b0:	00014440 	.word	0x00014440
    53b4:	00014460 	.word	0x00014460

000053b8 <z_log_msg_init>:
{
    53b8:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    53ba:	4c04      	ldr	r4, [pc, #16]	; (53cc <z_log_msg_init+0x14>)
    53bc:	4904      	ldr	r1, [pc, #16]	; (53d0 <z_log_msg_init+0x18>)
    53be:	4620      	mov	r0, r4
    53c0:	f00d fa2f 	bl	12822 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    53c4:	4b03      	ldr	r3, [pc, #12]	; (53d4 <z_log_msg_init+0x1c>)
    53c6:	601c      	str	r4, [r3, #0]
}
    53c8:	bd10      	pop	{r4, pc}
    53ca:	bf00      	nop
    53cc:	20000380 	.word	0x20000380
    53d0:	00014490 	.word	0x00014490
    53d4:	200017d4 	.word	0x200017d4

000053d8 <log_core_init>:
{
    53d8:	b508      	push	{r3, lr}
	panic_mode = false;
    53da:	4a07      	ldr	r2, [pc, #28]	; (53f8 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    53dc:	4807      	ldr	r0, [pc, #28]	; (53fc <log_core_init+0x24>)
	panic_mode = false;
    53de:	2300      	movs	r3, #0
    53e0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    53e2:	4a07      	ldr	r2, [pc, #28]	; (5400 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    53e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
    53e8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    53ea:	f7ff ff87 	bl	52fc <log_set_timestamp_func>
}
    53ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    53f2:	f7ff bfe1 	b.w	53b8 <z_log_msg_init>
    53f6:	bf00      	nop
    53f8:	20002e9a 	.word	0x20002e9a
    53fc:	00012ae5 	.word	0x00012ae5
    5400:	200017dc 	.word	0x200017dc

00005404 <z_log_msg_alloc>:
{
    5404:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    5406:	2200      	movs	r2, #0
    5408:	4801      	ldr	r0, [pc, #4]	; (5410 <z_log_msg_alloc+0xc>)
    540a:	2300      	movs	r3, #0
    540c:	f00d ba2a 	b.w	12864 <mpsc_pbuf_alloc>
    5410:	20000380 	.word	0x20000380

00005414 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    5414:	4801      	ldr	r0, [pc, #4]	; (541c <z_log_msg_local_claim+0x8>)
    5416:	f00d bac3 	b.w	129a0 <mpsc_pbuf_claim>
    541a:	bf00      	nop
    541c:	20000380 	.word	0x20000380

00005420 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    5420:	4b02      	ldr	r3, [pc, #8]	; (542c <z_log_msg_free+0xc>)
{
    5422:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    5424:	6818      	ldr	r0, [r3, #0]
    5426:	f00d bb0b 	b.w	12a40 <mpsc_pbuf_free>
    542a:	bf00      	nop
    542c:	200017d4 	.word	0x200017d4

00005430 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    5430:	4801      	ldr	r0, [pc, #4]	; (5438 <z_log_msg_pending+0x8>)
    5432:	f00d bb39 	b.w	12aa8 <mpsc_pbuf_is_pending>
    5436:	bf00      	nop
    5438:	20000380 	.word	0x20000380

0000543c <z_impl_log_process>:
{
    543c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    543e:	4b28      	ldr	r3, [pc, #160]	; (54e0 <z_impl_log_process+0xa4>)
    5440:	7818      	ldrb	r0, [r3, #0]
    5442:	2800      	cmp	r0, #0
    5444:	d04b      	beq.n	54de <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    5446:	f7ff ffe5 	bl	5414 <z_log_msg_local_claim>
	if (msg) {
    544a:	4605      	mov	r5, r0
    544c:	b190      	cbz	r0, 5474 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    544e:	f3bf 8f5b 	dmb	ish
    5452:	4b24      	ldr	r3, [pc, #144]	; (54e4 <z_impl_log_process+0xa8>)
    5454:	e853 1f00 	ldrex	r1, [r3]
    5458:	3901      	subs	r1, #1
    545a:	e843 1200 	strex	r2, r1, [r3]
    545e:	2a00      	cmp	r2, #0
    5460:	d1f8      	bne.n	5454 <z_impl_log_process+0x18>
    5462:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    5466:	4c20      	ldr	r4, [pc, #128]	; (54e8 <z_impl_log_process+0xac>)
    5468:	4e20      	ldr	r6, [pc, #128]	; (54ec <z_impl_log_process+0xb0>)
    546a:	42b4      	cmp	r4, r6
    546c:	d32d      	bcc.n	54ca <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    546e:	4628      	mov	r0, r5
    5470:	f7ff ffd6 	bl	5420 <z_log_msg_free>
	return dropped_cnt > 0;
    5474:	4b1e      	ldr	r3, [pc, #120]	; (54f0 <z_impl_log_process+0xb4>)
    5476:	4c1f      	ldr	r4, [pc, #124]	; (54f4 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	2b00      	cmp	r3, #0
    547c:	dd19      	ble.n	54b2 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    547e:	f00e fcfa 	bl	13e76 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5486:	fba0 0302 	umull	r0, r3, r0, r2
    548a:	fb02 3101 	mla	r1, r2, r1, r3
    548e:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    5490:	e9d4 2000 	ldrd	r2, r0, [r4]
    5494:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    5498:	1a9b      	subs	r3, r3, r2
    549a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    549e:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    54a2:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    54a6:	4293      	cmp	r3, r2
    54a8:	f171 0100 	sbcs.w	r1, r1, #0
    54ac:	d301      	bcc.n	54b2 <z_impl_log_process+0x76>
				dropped_notify();
    54ae:	f7ff ff6b 	bl	5388 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    54b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    54b6:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    54ba:	f142 0200 	adc.w	r2, r2, #0
    54be:	e9c4 3200 	strd	r3, r2, [r4]
}
    54c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    54c6:	f7ff bfb3 	b.w	5430 <z_log_msg_pending>
	return backend->cb->active;
    54ca:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    54cc:	795b      	ldrb	r3, [r3, #5]
    54ce:	b123      	cbz	r3, 54da <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    54d0:	6823      	ldr	r3, [r4, #0]
    54d2:	4629      	mov	r1, r5
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	4620      	mov	r0, r4
    54d8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    54da:	3410      	adds	r4, #16
    54dc:	e7c5      	b.n	546a <z_impl_log_process+0x2e>
}
    54de:	bd70      	pop	{r4, r5, r6, pc}
    54e0:	20002e99 	.word	0x20002e99
    54e4:	200017e0 	.word	0x200017e0
    54e8:	00014440 	.word	0x00014440
    54ec:	00014460 	.word	0x00014460
    54f0:	200017dc 	.word	0x200017dc
    54f4:	20000d58 	.word	0x20000d58

000054f8 <z_impl_log_panic>:
{
    54f8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    54fa:	4d0d      	ldr	r5, [pc, #52]	; (5530 <z_impl_log_panic+0x38>)
    54fc:	7829      	ldrb	r1, [r5, #0]
    54fe:	b961      	cbnz	r1, 551a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    5500:	2001      	movs	r0, #1
    5502:	f7ff fead 	bl	5260 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    5506:	4c0b      	ldr	r4, [pc, #44]	; (5534 <z_impl_log_panic+0x3c>)
    5508:	4e0b      	ldr	r6, [pc, #44]	; (5538 <z_impl_log_panic+0x40>)
    550a:	42b4      	cmp	r4, r6
    550c:	d306      	bcc.n	551c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    550e:	f7ff ff95 	bl	543c <z_impl_log_process>
		while (log_process() == true) {
    5512:	2800      	cmp	r0, #0
    5514:	d1fb      	bne.n	550e <z_impl_log_panic+0x16>
	panic_mode = true;
    5516:	2301      	movs	r3, #1
    5518:	702b      	strb	r3, [r5, #0]
}
    551a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    551c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    551e:	795b      	ldrb	r3, [r3, #5]
    5520:	b11b      	cbz	r3, 552a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    5522:	6823      	ldr	r3, [r4, #0]
    5524:	4620      	mov	r0, r4
    5526:	689b      	ldr	r3, [r3, #8]
    5528:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    552a:	3410      	adds	r4, #16
    552c:	e7ed      	b.n	550a <z_impl_log_panic+0x12>
    552e:	bf00      	nop
    5530:	20002e9a 	.word	0x20002e9a
    5534:	00014440 	.word	0x00014440
    5538:	00014460 	.word	0x00014460

0000553c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    553c:	2100      	movs	r1, #0
{
    553e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    5542:	4608      	mov	r0, r1
    5544:	f7ff fe8c 	bl	5260 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    5548:	4604      	mov	r4, r0
    554a:	b348      	cbz	r0, 55a0 <log_process_thread_func+0x64>
    554c:	f240 6867 	movw	r8, #1639	; 0x667
    5550:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    5554:	f009 f882 	bl	e65c <z_impl_z_current_get>
	proc_tid = process_tid;
    5558:	4b1a      	ldr	r3, [pc, #104]	; (55c4 <log_process_thread_func+0x88>)
    555a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    555c:	b130      	cbz	r0, 556c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    555e:	4b1a      	ldr	r3, [pc, #104]	; (55c8 <log_process_thread_func+0x8c>)
	    process_tid &&
    5560:	681b      	ldr	r3, [r3, #0]
    5562:	2b09      	cmp	r3, #9
    5564:	dd02      	ble.n	556c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    5566:	4819      	ldr	r0, [pc, #100]	; (55cc <log_process_thread_func+0x90>)
    5568:	f008 fbbc 	bl	dce4 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    556c:	4f18      	ldr	r7, [pc, #96]	; (55d0 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    556e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 55cc <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    5572:	2500      	movs	r5, #0
		if (activate_mask) {
    5574:	b144      	cbz	r4, 5588 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    5576:	4620      	mov	r0, r4
    5578:	f7ff fe0c 	bl	5194 <activate_foreach_backend>
			if (!activate_mask) {
    557c:	4604      	mov	r4, r0
    557e:	b918      	cbnz	r0, 5588 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    5580:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5584:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    5588:	f7ff ff58 	bl	543c <z_impl_log_process>
		if (log_process() == false) {
    558c:	4606      	mov	r6, r0
    558e:	b928      	cbnz	r0, 559c <log_process_thread_func+0x60>
			if (processed_any) {
    5590:	b9b5      	cbnz	r5, 55c0 <log_process_thread_func+0x84>
    5592:	4642      	mov	r2, r8
    5594:	464b      	mov	r3, r9
    5596:	4650      	mov	r0, sl
    5598:	f008 fbc4 	bl	dd24 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    559c:	4635      	mov	r5, r6
    559e:	e7e9      	b.n	5574 <log_process_thread_func+0x38>
    55a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    55a4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    55a8:	e7d4      	b.n	5554 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    55aa:	682b      	ldr	r3, [r5, #0]
    55ac:	699b      	ldr	r3, [r3, #24]
    55ae:	b11b      	cbz	r3, 55b8 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    55b0:	2200      	movs	r2, #0
    55b2:	4611      	mov	r1, r2
    55b4:	4628      	mov	r0, r5
    55b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    55b8:	3510      	adds	r5, #16
    55ba:	42bd      	cmp	r5, r7
    55bc:	d3f5      	bcc.n	55aa <log_process_thread_func+0x6e>
    55be:	e7e8      	b.n	5592 <log_process_thread_func+0x56>
    55c0:	4d04      	ldr	r5, [pc, #16]	; (55d4 <log_process_thread_func+0x98>)
    55c2:	e7fa      	b.n	55ba <log_process_thread_func+0x7e>
    55c4:	200017d8 	.word	0x200017d8
    55c8:	200017e0 	.word	0x200017e0
    55cc:	20000434 	.word	0x20000434
    55d0:	00014460 	.word	0x00014460
    55d4:	00014440 	.word	0x00014440

000055d8 <z_log_msg_post_finalize>:
{
    55d8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    55da:	4818      	ldr	r0, [pc, #96]	; (563c <z_log_msg_post_finalize+0x64>)
    55dc:	f00d fa84 	bl	12ae8 <atomic_inc>
	if (panic_mode) {
    55e0:	4b17      	ldr	r3, [pc, #92]	; (5640 <z_log_msg_post_finalize+0x68>)
    55e2:	781b      	ldrb	r3, [r3, #0]
    55e4:	b17b      	cbz	r3, 5606 <z_log_msg_post_finalize+0x2e>
    55e6:	f04f 0340 	mov.w	r3, #64	; 0x40
    55ea:	f3ef 8411 	mrs	r4, BASEPRI
    55ee:	f383 8812 	msr	BASEPRI_MAX, r3
    55f2:	f3bf 8f6f 	isb	sy
    55f6:	f7ff ff21 	bl	543c <z_impl_log_process>
	__asm__ volatile(
    55fa:	f384 8811 	msr	BASEPRI, r4
    55fe:	f3bf 8f6f 	isb	sy
}
    5602:	b002      	add	sp, #8
    5604:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    5606:	4b0f      	ldr	r3, [pc, #60]	; (5644 <z_log_msg_post_finalize+0x6c>)
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	2b00      	cmp	r3, #0
    560c:	d0f9      	beq.n	5602 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    560e:	b950      	cbnz	r0, 5626 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    5610:	2200      	movs	r2, #0
    5612:	2300      	movs	r3, #0
    5614:	e9cd 2300 	strd	r2, r3, [sp]
    5618:	480b      	ldr	r0, [pc, #44]	; (5648 <z_log_msg_post_finalize+0x70>)
    561a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    561e:	2300      	movs	r3, #0
    5620:	f009 fa58 	bl	ead4 <z_impl_k_timer_start>
    5624:	e7ed      	b.n	5602 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5626:	280a      	cmp	r0, #10
    5628:	d1eb      	bne.n	5602 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    562a:	4807      	ldr	r0, [pc, #28]	; (5648 <z_log_msg_post_finalize+0x70>)
    562c:	f00e fc35 	bl	13e9a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5630:	4806      	ldr	r0, [pc, #24]	; (564c <z_log_msg_post_finalize+0x74>)
}
    5632:	b002      	add	sp, #8
    5634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5638:	f008 bb54 	b.w	dce4 <z_impl_k_sem_give>
    563c:	200017e0 	.word	0x200017e0
    5640:	20002e9a 	.word	0x20002e9a
    5644:	200017d8 	.word	0x200017d8
    5648:	20000d60 	.word	0x20000d60
    564c:	20000434 	.word	0x20000434

00005650 <z_log_msg_commit>:
{
    5650:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    5652:	4b06      	ldr	r3, [pc, #24]	; (566c <z_log_msg_commit+0x1c>)
    5654:	681b      	ldr	r3, [r3, #0]
{
    5656:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5658:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    565a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    565c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    565e:	4804      	ldr	r0, [pc, #16]	; (5670 <z_log_msg_commit+0x20>)
    5660:	f00d f97e 	bl	12960 <mpsc_pbuf_commit>
}
    5664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    5668:	f7ff bfb6 	b.w	55d8 <z_log_msg_post_finalize>
    566c:	20000088 	.word	0x20000088
    5670:	20000380 	.word	0x20000380

00005674 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    5674:	4a04      	ldr	r2, [pc, #16]	; (5688 <log_source_name_get+0x14>)
    5676:	4b05      	ldr	r3, [pc, #20]	; (568c <log_source_name_get+0x18>)
    5678:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    567a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    567e:	bf34      	ite	cc
    5680:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    5684:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    5686:	4770      	bx	lr
    5688:	000143c8 	.word	0x000143c8
    568c:	00014440 	.word	0x00014440

00005690 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    5690:	4b08      	ldr	r3, [pc, #32]	; (56b4 <log_backend_enable+0x24>)
    5692:	1ac3      	subs	r3, r0, r3
{
    5694:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    5696:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    5698:	6844      	ldr	r4, [r0, #4]
    569a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    569c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    569e:	6843      	ldr	r3, [r0, #4]
    56a0:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    56a2:	6843      	ldr	r3, [r0, #4]
    56a4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    56a6:	6843      	ldr	r3, [r0, #4]
    56a8:	2201      	movs	r2, #1
    56aa:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    56ac:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    56ae:	f7ff be35 	b.w	531c <z_log_notify_backend_enabled>
    56b2:	bf00      	nop
    56b4:	00014440 	.word	0x00014440

000056b8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    56b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56bc:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    56be:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    56c2:	f3c1 2649 	ubfx	r6, r1, #9, #10
    56c6:	9005      	str	r0, [sp, #20]
    56c8:	460d      	mov	r5, r1
    56ca:	4690      	mov	r8, r2
    56cc:	4699      	mov	r9, r3
    56ce:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    56d0:	2e00      	cmp	r6, #0
    56d2:	d03c      	beq.n	574e <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    56d4:	f04f 0b04 	mov.w	fp, #4
    56d8:	af09      	add	r7, sp, #36	; 0x24
    56da:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    56de:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    56e0:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
    56e2:	ab0b      	add	r3, sp, #44	; 0x2c
    56e4:	f8cd b008 	str.w	fp, [sp, #8]
    56e8:	9701      	str	r7, [sp, #4]
    56ea:	f8cd a000 	str.w	sl, [sp]
    56ee:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
    56f0:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    56f4:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    56f6:	9607      	str	r6, [sp, #28]
    56f8:	f7fe fe68 	bl	43cc <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    56fc:	f3c0 0309 	ubfx	r3, r0, #0, #10
    5700:	1918      	adds	r0, r3, r4
    5702:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    5706:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    5708:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    570a:	f363 2552 	bfi	r5, r3, #9, #10
    570e:	9306      	str	r3, [sp, #24]
    5710:	f7ff fe78 	bl	5404 <z_log_msg_alloc>
		if (msg) {
    5714:	4604      	mov	r4, r0
    5716:	b178      	cbz	r0, 5738 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    5718:	9b06      	ldr	r3, [sp, #24]
    571a:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    571c:	3010      	adds	r0, #16
    571e:	2200      	movs	r2, #0
    5720:	900b      	str	r0, [sp, #44]	; 0x2c
    5722:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    5724:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    5728:	4a0c      	ldr	r2, [pc, #48]	; (575c <z_impl_z_log_msg_static_create+0xa4>)
    572a:	9907      	ldr	r1, [sp, #28]
    572c:	f8cd a000 	str.w	sl, [sp]
    5730:	ab0b      	add	r3, sp, #44	; 0x2c
    5732:	4640      	mov	r0, r8
    5734:	f7fe fe4a 	bl	43cc <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    5738:	f366 2552 	bfi	r5, r6, #9, #10
    573c:	9905      	ldr	r1, [sp, #20]
    573e:	464b      	mov	r3, r9
    5740:	462a      	mov	r2, r5
    5742:	4620      	mov	r0, r4
}
    5744:	b00f      	add	sp, #60	; 0x3c
    5746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    574a:	f00d b9f5 	b.w	12b38 <z_log_msg_finalize>
    574e:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    5752:	0880      	lsrs	r0, r0, #2
    5754:	f7ff fe56 	bl	5404 <z_log_msg_alloc>
    5758:	4604      	mov	r4, r0
    575a:	e7ed      	b.n	5738 <z_impl_z_log_msg_static_create+0x80>
    575c:	00012b0d 	.word	0x00012b0d

00005760 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5760:	b40e      	push	{r1, r2, r3}
    5762:	b503      	push	{r0, r1, lr}
    5764:	ab03      	add	r3, sp, #12
    5766:	4601      	mov	r1, r0
    5768:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    576c:	4804      	ldr	r0, [pc, #16]	; (5780 <print_formatted+0x20>)
	va_start(args, fmt);
    576e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5770:	f00d fa09 	bl	12b86 <cbvprintf>
	va_end(args);

	return length;
}
    5774:	b002      	add	sp, #8
    5776:	f85d eb04 	ldr.w	lr, [sp], #4
    577a:	b003      	add	sp, #12
    577c:	4770      	bx	lr
    577e:	bf00      	nop
    5780:	00012baf 	.word	0x00012baf

00005784 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5784:	06ca      	lsls	r2, r1, #27
    5786:	d405      	bmi.n	5794 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5788:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    578a:	bf4c      	ite	mi
    578c:	4902      	ldrmi	r1, [pc, #8]	; (5798 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    578e:	4903      	ldrpl	r1, [pc, #12]	; (579c <newline_print+0x18>)
    5790:	f7ff bfe6 	b.w	5760 <print_formatted>
	}
}
    5794:	4770      	bx	lr
    5796:	bf00      	nop
    5798:	00014b49 	.word	0x00014b49
    579c:	00014b48 	.word	0x00014b48

000057a0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    57a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57a4:	b089      	sub	sp, #36	; 0x24
    57a6:	469b      	mov	fp, r3
    57a8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    57ac:	9304      	str	r3, [sp, #16]
    57ae:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    57b2:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    57b4:	9b04      	ldr	r3, [sp, #16]
{
    57b6:	9206      	str	r2, [sp, #24]
    57b8:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    57bc:	4604      	mov	r4, r0
    57be:	460d      	mov	r5, r1
	if (!raw_string) {
    57c0:	2b00      	cmp	r3, #0
    57c2:	f000 8087 	beq.w	58d4 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    57c6:	f006 0308 	and.w	r3, r6, #8
    57ca:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    57cc:	f00d f99c 	bl	12b08 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    57d0:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    57d4:	4602      	mov	r2, r0
    57d6:	2800      	cmp	r0, #0
    57d8:	d04b      	beq.n	5872 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    57da:	4986      	ldr	r1, [pc, #536]	; (59f4 <log_output_process+0x254>)
    57dc:	4620      	mov	r0, r4
    57de:	f7ff ffbf 	bl	5760 <print_formatted>
    57e2:	4680      	mov	r8, r0
	if (stamp) {
    57e4:	f1ba 0f00 	cmp.w	sl, #0
    57e8:	d008      	beq.n	57fc <log_output_process+0x5c>
	if (!format) {
    57ea:	f016 0f44 	tst.w	r6, #68	; 0x44
    57ee:	d142      	bne.n	5876 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    57f0:	4981      	ldr	r1, [pc, #516]	; (59f8 <log_output_process+0x258>)
    57f2:	462a      	mov	r2, r5
    57f4:	4620      	mov	r0, r4
    57f6:	f7ff ffb3 	bl	5760 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    57fa:	4480      	add	r8, r0
	if (color) {
    57fc:	f006 0301 	and.w	r3, r6, #1
    5800:	b15b      	cbz	r3, 581a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    5802:	4b7e      	ldr	r3, [pc, #504]	; (59fc <log_output_process+0x25c>)
    5804:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    5806:	497e      	ldr	r1, [pc, #504]	; (5a00 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    5808:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    580c:	4b7d      	ldr	r3, [pc, #500]	; (5a04 <log_output_process+0x264>)
    580e:	4620      	mov	r0, r4
    5810:	2a00      	cmp	r2, #0
    5812:	bf08      	it	eq
    5814:	461a      	moveq	r2, r3
    5816:	f7ff ffa3 	bl	5760 <print_formatted>
	if (level_on) {
    581a:	f006 0308 	and.w	r3, r6, #8
    581e:	2b00      	cmp	r3, #0
    5820:	d055      	beq.n	58ce <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    5822:	4b79      	ldr	r3, [pc, #484]	; (5a08 <log_output_process+0x268>)
    5824:	9a04      	ldr	r2, [sp, #16]
    5826:	4979      	ldr	r1, [pc, #484]	; (5a0c <log_output_process+0x26c>)
    5828:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    582c:	4620      	mov	r0, r4
    582e:	f7ff ff97 	bl	5760 <print_formatted>
    5832:	4605      	mov	r5, r0
	if (domain) {
    5834:	9b06      	ldr	r3, [sp, #24]
    5836:	b12b      	cbz	r3, 5844 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    5838:	4975      	ldr	r1, [pc, #468]	; (5a10 <log_output_process+0x270>)
    583a:	461a      	mov	r2, r3
    583c:	4620      	mov	r0, r4
    583e:	f7ff ff8f 	bl	5760 <print_formatted>
    5842:	4405      	add	r5, r0
	if (source) {
    5844:	f1bb 0f00 	cmp.w	fp, #0
    5848:	d005      	beq.n	5856 <log_output_process+0xb6>
		total += print_formatted(output,
    584a:	4972      	ldr	r1, [pc, #456]	; (5a14 <log_output_process+0x274>)
    584c:	465a      	mov	r2, fp
    584e:	4620      	mov	r0, r4
    5850:	f7ff ff86 	bl	5760 <print_formatted>
    5854:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    5856:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    5858:	f1b9 0f00 	cmp.w	r9, #0
    585c:	d149      	bne.n	58f2 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    585e:	2f00      	cmp	r7, #0
    5860:	d14f      	bne.n	5902 <log_output_process+0x162>
	if (color) {
    5862:	07f3      	lsls	r3, r6, #31
    5864:	f100 80c0 	bmi.w	59e8 <log_output_process+0x248>
	newline_print(output, flags);
    5868:	4631      	mov	r1, r6
    586a:	4620      	mov	r0, r4
    586c:	f7ff ff8a 	bl	5784 <newline_print>
}
    5870:	e0b4      	b.n	59dc <log_output_process+0x23c>
	uint32_t length = 0U;
    5872:	4680      	mov	r8, r0
    5874:	e7b6      	b.n	57e4 <log_output_process+0x44>
	} else if (freq != 0U) {
    5876:	4b68      	ldr	r3, [pc, #416]	; (5a18 <log_output_process+0x278>)
    5878:	6818      	ldr	r0, [r3, #0]
    587a:	2800      	cmp	r0, #0
    587c:	d0bd      	beq.n	57fa <log_output_process+0x5a>
		timestamp /= timestamp_div;
    587e:	4b67      	ldr	r3, [pc, #412]	; (5a1c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    5880:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    588a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    588e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    5892:	fb00 5513 	mls	r5, r0, r3, r5
    5896:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    589a:	fb0e f505 	mul.w	r5, lr, r5
    589e:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    58a2:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    58a4:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    58a8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    58ac:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    58b0:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    58b4:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    58b8:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    58ba:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    58be:	4958      	ldr	r1, [pc, #352]	; (5a20 <log_output_process+0x280>)
    58c0:	e9cd c501 	strd	ip, r5, [sp, #4]
    58c4:	4652      	mov	r2, sl
    58c6:	4620      	mov	r0, r4
    58c8:	f7ff ff4a 	bl	5760 <print_formatted>
    58cc:	e795      	b.n	57fa <log_output_process+0x5a>
	int total = 0;
    58ce:	f006 0508 	and.w	r5, r6, #8
    58d2:	e7af      	b.n	5834 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    58d4:	f1bb 0f01 	cmp.w	fp, #1
    58d8:	d106      	bne.n	58e8 <log_output_process+0x148>
	if (package) {
    58da:	f1b9 0f00 	cmp.w	r9, #0
    58de:	d164      	bne.n	59aa <log_output_process+0x20a>
	if (data_len) {
    58e0:	2f00      	cmp	r7, #0
    58e2:	d07b      	beq.n	59dc <log_output_process+0x23c>
		prefix_offset = 0;
    58e4:	2500      	movs	r5, #0
    58e6:	e00c      	b.n	5902 <log_output_process+0x162>
	if (package) {
    58e8:	f1b9 0f00 	cmp.w	r9, #0
    58ec:	d0f8      	beq.n	58e0 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    58ee:	484d      	ldr	r0, [pc, #308]	; (5a24 <log_output_process+0x284>)
    58f0:	e05c      	b.n	59ac <log_output_process+0x20c>
		cb = out_func;
    58f2:	484d      	ldr	r0, [pc, #308]	; (5a28 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    58f4:	494d      	ldr	r1, [pc, #308]	; (5a2c <log_output_process+0x28c>)
    58f6:	464b      	mov	r3, r9
    58f8:	4622      	mov	r2, r4
    58fa:	f00c fcc4 	bl	12286 <cbpprintf_external>
	if (data_len) {
    58fe:	2f00      	cmp	r7, #0
    5900:	d068      	beq.n	59d4 <log_output_process+0x234>
		print_formatted(output, " ");
    5902:	f8df 912c 	ldr.w	r9, [pc, #300]	; 5a30 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    5906:	f8df a12c 	ldr.w	sl, [pc, #300]	; 5a34 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    590a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    590c:	4631      	mov	r1, r6
    590e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    5910:	46b8      	mov	r8, r7
    5912:	bf28      	it	cs
    5914:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    5918:	f7ff ff34 	bl	5784 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    591c:	f04f 0b00 	mov.w	fp, #0
    5920:	455d      	cmp	r5, fp
    5922:	dc45      	bgt.n	59b0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    5924:	9b05      	ldr	r3, [sp, #20]
    5926:	4651      	mov	r1, sl
    5928:	781a      	ldrb	r2, [r3, #0]
    592a:	4620      	mov	r0, r4
    592c:	f7ff ff18 	bl	5760 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5930:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    5934:	f01b 0f07 	tst.w	fp, #7
    5938:	d103      	bne.n	5942 <log_output_process+0x1a2>
			print_formatted(output, " ");
    593a:	4649      	mov	r1, r9
    593c:	4620      	mov	r0, r4
    593e:	f7ff ff0f 	bl	5760 <print_formatted>
		if (i < length) {
    5942:	45d8      	cmp	r8, fp
    5944:	d93b      	bls.n	59be <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    5946:	9b05      	ldr	r3, [sp, #20]
    5948:	4651      	mov	r1, sl
    594a:	f813 200b 	ldrb.w	r2, [r3, fp]
    594e:	4620      	mov	r0, r4
    5950:	f7ff ff06 	bl	5760 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5954:	f10b 0b01 	add.w	fp, fp, #1
    5958:	f1bb 0f10 	cmp.w	fp, #16
    595c:	d1ea      	bne.n	5934 <log_output_process+0x194>
	print_formatted(output, "|");
    595e:	4936      	ldr	r1, [pc, #216]	; (5a38 <log_output_process+0x298>)
    5960:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5962:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    5966:	f7ff fefb 	bl	5760 <print_formatted>
		if (i < length) {
    596a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    596c:	9b05      	ldr	r3, [sp, #20]
    596e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    5970:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    5974:	295f      	cmp	r1, #95	; 0x5f
    5976:	bf28      	it	cs
    5978:	222e      	movcs	r2, #46	; 0x2e
    597a:	4930      	ldr	r1, [pc, #192]	; (5a3c <log_output_process+0x29c>)
    597c:	4620      	mov	r0, r4
    597e:	f7ff feef 	bl	5760 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5982:	f10b 0b01 	add.w	fp, fp, #1
    5986:	f1bb 0f10 	cmp.w	fp, #16
    598a:	d01d      	beq.n	59c8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    598c:	f01b 0f07 	tst.w	fp, #7
    5990:	d103      	bne.n	599a <log_output_process+0x1fa>
			print_formatted(output, " ");
    5992:	4649      	mov	r1, r9
    5994:	4620      	mov	r0, r4
    5996:	f7ff fee3 	bl	5760 <print_formatted>
		if (i < length) {
    599a:	45d8      	cmp	r8, fp
    599c:	465a      	mov	r2, fp
    599e:	d8e5      	bhi.n	596c <log_output_process+0x1cc>
			print_formatted(output, " ");
    59a0:	4649      	mov	r1, r9
    59a2:	4620      	mov	r0, r4
    59a4:	f7ff fedc 	bl	5760 <print_formatted>
    59a8:	e7eb      	b.n	5982 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    59aa:	481f      	ldr	r0, [pc, #124]	; (5a28 <log_output_process+0x288>)
		prefix_offset = 0;
    59ac:	9d04      	ldr	r5, [sp, #16]
    59ae:	e7a1      	b.n	58f4 <log_output_process+0x154>
		print_formatted(output, " ");
    59b0:	4649      	mov	r1, r9
    59b2:	4620      	mov	r0, r4
    59b4:	f7ff fed4 	bl	5760 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    59b8:	f10b 0b01 	add.w	fp, fp, #1
    59bc:	e7b0      	b.n	5920 <log_output_process+0x180>
			print_formatted(output, "   ");
    59be:	4920      	ldr	r1, [pc, #128]	; (5a40 <log_output_process+0x2a0>)
    59c0:	4620      	mov	r0, r4
    59c2:	f7ff fecd 	bl	5760 <print_formatted>
    59c6:	e7c5      	b.n	5954 <log_output_process+0x1b4>
		data += length;
    59c8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    59ca:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    59ce:	4443      	add	r3, r8
    59d0:	9305      	str	r3, [sp, #20]
	} while (len);
    59d2:	d19a      	bne.n	590a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    59d4:	9b04      	ldr	r3, [sp, #16]
    59d6:	2b00      	cmp	r3, #0
    59d8:	f47f af43 	bne.w	5862 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    59dc:	4620      	mov	r0, r4
}
    59de:	b009      	add	sp, #36	; 0x24
    59e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    59e4:	f00d b8d6 	b.w	12b94 <log_output_flush>
		print_formatted(output, "%s", log_color);
    59e8:	4a06      	ldr	r2, [pc, #24]	; (5a04 <log_output_process+0x264>)
    59ea:	4905      	ldr	r1, [pc, #20]	; (5a00 <log_output_process+0x260>)
    59ec:	4620      	mov	r0, r4
    59ee:	f7ff feb7 	bl	5760 <print_formatted>
}
    59f2:	e739      	b.n	5868 <log_output_process+0xc8>
    59f4:	00014b50 	.word	0x00014b50
    59f8:	00014b54 	.word	0x00014b54
    59fc:	000144b4 	.word	0x000144b4
    5a00:	00014b79 	.word	0x00014b79
    5a04:	00014b4b 	.word	0x00014b4b
    5a08:	000144c8 	.word	0x000144c8
    5a0c:	00014b7c 	.word	0x00014b7c
    5a10:	00014b82 	.word	0x00014b82
    5a14:	00014b86 	.word	0x00014b86
    5a18:	200017ec 	.word	0x200017ec
    5a1c:	200017e8 	.word	0x200017e8
    5a20:	00014b5d 	.word	0x00014b5d
    5a24:	00012be5 	.word	0x00012be5
    5a28:	00012baf 	.word	0x00012baf
    5a2c:	00012b87 	.word	0x00012b87
    5a30:	00014b93 	.word	0x00014b93
    5a34:	00014b8b 	.word	0x00014b8b
    5a38:	00014b95 	.word	0x00014b95
    5a3c:	00014b97 	.word	0x00014b97
    5a40:	00014b91 	.word	0x00014b91

00005a44 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    5a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    5a48:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    5a4a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    5a4c:	688e      	ldr	r6, [r1, #8]
    5a4e:	b086      	sub	sp, #24
    5a50:	4605      	mov	r5, r0
    5a52:	460c      	mov	r4, r1
    5a54:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    5a56:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    5a5a:	b15b      	cbz	r3, 5a74 <log_output_msg_process+0x30>
    5a5c:	4a13      	ldr	r2, [pc, #76]	; (5aac <log_output_msg_process+0x68>)
    5a5e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    5a60:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    5a64:	2900      	cmp	r1, #0
    5a66:	db1f      	blt.n	5aa8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    5a68:	7820      	ldrb	r0, [r4, #0]
    5a6a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    5a6e:	f7ff fe01 	bl	5674 <log_source_name_get>
    5a72:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    5a74:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    5a76:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    5a78:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    5a7c:	9700      	str	r7, [sp, #0]
    5a7e:	f3c2 2249 	ubfx	r2, r2, #9, #10
    5a82:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    5a84:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    5a88:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    5a8c:	bf08      	it	eq
    5a8e:	2100      	moveq	r1, #0
    5a90:	e9cd 0803 	strd	r0, r8, [sp, #12]
    5a94:	e9cd 1401 	strd	r1, r4, [sp, #4]
    5a98:	2200      	movs	r2, #0
    5a9a:	4631      	mov	r1, r6
    5a9c:	4628      	mov	r0, r5
    5a9e:	f7ff fe7f 	bl	57a0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    5aa2:	b006      	add	sp, #24
    5aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    5aa8:	2300      	movs	r3, #0
    5aaa:	e7e3      	b.n	5a74 <log_output_msg_process+0x30>
    5aac:	000143c8 	.word	0x000143c8

00005ab0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    5ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ab2:	f242 730f 	movw	r3, #9999	; 0x270f
    5ab6:	428b      	cmp	r3, r1
    5ab8:	bf28      	it	cs
    5aba:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    5abc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5abe:	4a0f      	ldr	r2, [pc, #60]	; (5afc <log_output_dropped_process+0x4c>)
{
    5ac0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ac2:	2105      	movs	r1, #5
    5ac4:	4668      	mov	r0, sp
    5ac6:	f00c fc56 	bl	12376 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5aca:	6863      	ldr	r3, [r4, #4]
    5acc:	490c      	ldr	r1, [pc, #48]	; (5b00 <log_output_dropped_process+0x50>)
    5ace:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5ad0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5ad2:	220b      	movs	r2, #11
    5ad4:	4628      	mov	r0, r5
    5ad6:	f00d f849 	bl	12b6c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    5ada:	6863      	ldr	r3, [r4, #4]
    5adc:	4632      	mov	r2, r6
    5ade:	4669      	mov	r1, sp
    5ae0:	4628      	mov	r0, r5
    5ae2:	685b      	ldr	r3, [r3, #4]
    5ae4:	f00d f842 	bl	12b6c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5ae8:	6863      	ldr	r3, [r4, #4]
    5aea:	4906      	ldr	r1, [pc, #24]	; (5b04 <log_output_dropped_process+0x54>)
    5aec:	685b      	ldr	r3, [r3, #4]
    5aee:	221b      	movs	r2, #27
    5af0:	4628      	mov	r0, r5
    5af2:	f00d f83b 	bl	12b6c <buffer_write>
		     output->control_block->ctx);
}
    5af6:	b002      	add	sp, #8
    5af8:	bd70      	pop	{r4, r5, r6, pc}
    5afa:	bf00      	nop
    5afc:	0001517f 	.word	0x0001517f
    5b00:	00014bb6 	.word	0x00014bb6
    5b04:	00014b9a 	.word	0x00014b9a

00005b08 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5b08:	4a07      	ldr	r2, [pc, #28]	; (5b28 <log_output_timestamp_freq_set+0x20>)
    5b0a:	2100      	movs	r1, #0
    5b0c:	2301      	movs	r3, #1
    5b0e:	4290      	cmp	r0, r2
    5b10:	d806      	bhi.n	5b20 <log_output_timestamp_freq_set+0x18>
    5b12:	4a06      	ldr	r2, [pc, #24]	; (5b2c <log_output_timestamp_freq_set+0x24>)
    5b14:	b901      	cbnz	r1, 5b18 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    5b16:	2301      	movs	r3, #1
    5b18:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5b1a:	4b05      	ldr	r3, [pc, #20]	; (5b30 <log_output_timestamp_freq_set+0x28>)
    5b1c:	6018      	str	r0, [r3, #0]
}
    5b1e:	4770      	bx	lr
		frequency /= 2U;
    5b20:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5b22:	005b      	lsls	r3, r3, #1
    5b24:	2101      	movs	r1, #1
    5b26:	e7f2      	b.n	5b0e <log_output_timestamp_freq_set+0x6>
    5b28:	000f4240 	.word	0x000f4240
    5b2c:	200017e8 	.word	0x200017e8
    5b30:	200017ec 	.word	0x200017ec

00005b34 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5b34:	4b01      	ldr	r3, [pc, #4]	; (5b3c <log_backend_rtt_init+0x8>)
    5b36:	2201      	movs	r2, #1
    5b38:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5b3a:	4770      	bx	lr
    5b3c:	20002e9b 	.word	0x20002e9b

00005b40 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5b40:	4b01      	ldr	r3, [pc, #4]	; (5b48 <format_set+0x8>)
	return 0;
}
    5b42:	2000      	movs	r0, #0
	log_format_current = log_type;
    5b44:	6019      	str	r1, [r3, #0]
}
    5b46:	4770      	bx	lr
    5b48:	20001804 	.word	0x20001804

00005b4c <panic>:
	panic_mode = true;
    5b4c:	4b02      	ldr	r3, [pc, #8]	; (5b58 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5b4e:	4803      	ldr	r0, [pc, #12]	; (5b5c <panic+0x10>)
    5b50:	2201      	movs	r2, #1
    5b52:	701a      	strb	r2, [r3, #0]
    5b54:	f00d b81e 	b.w	12b94 <log_output_flush>
    5b58:	20002e9c 	.word	0x20002e9c
    5b5c:	000144f8 	.word	0x000144f8

00005b60 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    5b60:	4801      	ldr	r0, [pc, #4]	; (5b68 <dropped+0x8>)
    5b62:	f7ff bfa5 	b.w	5ab0 <log_output_dropped_process>
    5b66:	bf00      	nop
    5b68:	000144f8 	.word	0x000144f8

00005b6c <process>:
{
    5b6c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5b6e:	4b06      	ldr	r3, [pc, #24]	; (5b88 <process+0x1c>)
    5b70:	6818      	ldr	r0, [r3, #0]
{
    5b72:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5b74:	f7ff fbbc 	bl	52f0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    5b78:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5b7a:	4603      	mov	r3, r0
}
    5b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    5b80:	4802      	ldr	r0, [pc, #8]	; (5b8c <process+0x20>)
    5b82:	220f      	movs	r2, #15
    5b84:	4718      	bx	r3
    5b86:	bf00      	nop
    5b88:	20001804 	.word	0x20001804
    5b8c:	000144f8 	.word	0x000144f8

00005b90 <on_failed_write>:
	if (retry_cnt == 0) {
    5b90:	b910      	cbnz	r0, 5b98 <on_failed_write+0x8>
		host_present = false;
    5b92:	4b07      	ldr	r3, [pc, #28]	; (5bb0 <on_failed_write+0x20>)
    5b94:	7018      	strb	r0, [r3, #0]
}
    5b96:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    5b98:	4b06      	ldr	r3, [pc, #24]	; (5bb4 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	b11b      	cbz	r3, 5ba6 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    5b9e:	f241 3088 	movw	r0, #5000	; 0x1388
    5ba2:	f00e b96a 	b.w	13e7a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5ba6:	20a4      	movs	r0, #164	; 0xa4
    5ba8:	2100      	movs	r1, #0
    5baa:	f008 bd3d 	b.w	e628 <z_impl_k_sleep>
    5bae:	bf00      	nop
    5bb0:	20002e9b 	.word	0x20002e9b
    5bb4:	20002e9c 	.word	0x20002e9c

00005bb8 <data_out_block_mode>:
{
    5bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    5bbc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 5c34 <data_out_block_mode+0x7c>
    5bc0:	4f1d      	ldr	r7, [pc, #116]	; (5c38 <data_out_block_mode+0x80>)
{
    5bc2:	4680      	mov	r8, r0
    5bc4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5bc6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    5bc8:	f899 5000 	ldrb.w	r5, [r9]
    5bcc:	b995      	cbnz	r5, 5bf4 <data_out_block_mode+0x3c>
			RTT_LOCK();
    5bce:	f007 fd3f 	bl	d650 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5bd2:	4628      	mov	r0, r5
    5bd4:	4632      	mov	r2, r6
    5bd6:	4641      	mov	r1, r8
    5bd8:	f007 fce8 	bl	d5ac <SEGGER_RTT_WriteSkipNoLock>
    5bdc:	4605      	mov	r5, r0
			RTT_UNLOCK();
    5bde:	f007 fd41 	bl	d664 <zephyr_rtt_mutex_unlock>
		if (ret) {
    5be2:	b1e5      	cbz	r5, 5c1e <data_out_block_mode+0x66>
	host_present = true;
    5be4:	2301      	movs	r3, #1
    5be6:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    5be8:	f899 3000 	ldrb.w	r3, [r9]
    5bec:	b973      	cbnz	r3, 5c0c <data_out_block_mode+0x54>
}
    5bee:	4630      	mov	r0, r6
    5bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5bf4:	4632      	mov	r2, r6
    5bf6:	4641      	mov	r1, r8
    5bf8:	2000      	movs	r0, #0
    5bfa:	f007 fcd7 	bl	d5ac <SEGGER_RTT_WriteSkipNoLock>
    5bfe:	4605      	mov	r5, r0
    5c00:	e7ef      	b.n	5be2 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    5c02:	4620      	mov	r0, r4
    5c04:	f7ff ffc4 	bl	5b90 <on_failed_write>
    5c08:	1e65      	subs	r5, r4, #1
    5c0a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5c0c:	2000      	movs	r0, #0
    5c0e:	f007 fd15 	bl	d63c <SEGGER_RTT_HasDataUp>
    5c12:	2800      	cmp	r0, #0
    5c14:	d0eb      	beq.n	5bee <data_out_block_mode+0x36>
    5c16:	783b      	ldrb	r3, [r7, #0]
    5c18:	2b00      	cmp	r3, #0
    5c1a:	d1f2      	bne.n	5c02 <data_out_block_mode+0x4a>
    5c1c:	e7e7      	b.n	5bee <data_out_block_mode+0x36>
		} else if (host_present) {
    5c1e:	783b      	ldrb	r3, [r7, #0]
    5c20:	2b00      	cmp	r3, #0
    5c22:	d0e4      	beq.n	5bee <data_out_block_mode+0x36>
			retry_cnt--;
    5c24:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    5c26:	4620      	mov	r0, r4
    5c28:	f7ff ffb2 	bl	5b90 <on_failed_write>
	} while ((ret == 0) && host_present);
    5c2c:	783b      	ldrb	r3, [r7, #0]
    5c2e:	2b00      	cmp	r3, #0
    5c30:	d1ca      	bne.n	5bc8 <data_out_block_mode+0x10>
    5c32:	e7dc      	b.n	5bee <data_out_block_mode+0x36>
    5c34:	20002e9c 	.word	0x20002e9c
    5c38:	20002e9b 	.word	0x20002e9b

00005c3c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5c3c:	4b01      	ldr	r3, [pc, #4]	; (5c44 <format_set+0x8>)
	return 0;
}
    5c3e:	2000      	movs	r0, #0
	log_format_current = log_type;
    5c40:	6019      	str	r1, [r3, #0]
}
    5c42:	4770      	bx	lr
    5c44:	2000181c 	.word	0x2000181c

00005c48 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    5c48:	4b02      	ldr	r3, [pc, #8]	; (5c54 <panic+0xc>)
	log_output_flush(output);
    5c4a:	4803      	ldr	r0, [pc, #12]	; (5c58 <panic+0x10>)
    5c4c:	2201      	movs	r2, #1
    5c4e:	701a      	strb	r2, [r3, #0]
    5c50:	f00c bfa0 	b.w	12b94 <log_output_flush>
    5c54:	20002eae 	.word	0x20002eae
    5c58:	00014524 	.word	0x00014524

00005c5c <dropped>:
	log_output_dropped_process(output, cnt);
    5c5c:	4801      	ldr	r0, [pc, #4]	; (5c64 <dropped+0x8>)
    5c5e:	f7ff bf27 	b.w	5ab0 <log_output_dropped_process>
    5c62:	bf00      	nop
    5c64:	00014524 	.word	0x00014524

00005c68 <process>:
{
    5c68:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5c6a:	4b06      	ldr	r3, [pc, #24]	; (5c84 <process+0x1c>)
    5c6c:	6818      	ldr	r0, [r3, #0]
{
    5c6e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5c70:	f7ff fb3e 	bl	52f0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    5c74:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5c76:	4603      	mov	r3, r0
}
    5c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    5c7c:	4802      	ldr	r0, [pc, #8]	; (5c88 <process+0x20>)
    5c7e:	220f      	movs	r2, #15
    5c80:	4718      	bx	r3
    5c82:	bf00      	nop
    5c84:	2000181c 	.word	0x2000181c
    5c88:	00014524 	.word	0x00014524

00005c8c <char_out>:
{
    5c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5c8e:	4f07      	ldr	r7, [pc, #28]	; (5cac <char_out+0x20>)
    5c90:	460d      	mov	r5, r1
    5c92:	4604      	mov	r4, r0
    5c94:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    5c96:	42b4      	cmp	r4, r6
    5c98:	d101      	bne.n	5c9e <char_out+0x12>
}
    5c9a:	4628      	mov	r0, r5
    5c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    5c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
    5ca2:	68bb      	ldr	r3, [r7, #8]
    5ca4:	4801      	ldr	r0, [pc, #4]	; (5cac <char_out+0x20>)
    5ca6:	685b      	ldr	r3, [r3, #4]
    5ca8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    5caa:	e7f4      	b.n	5c96 <char_out+0xa>
    5cac:	00014368 	.word	0x00014368

00005cb0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    5cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5cb4:	4605      	mov	r5, r0
	__asm__ volatile(
    5cb6:	f04f 0340 	mov.w	r3, #64	; 0x40
    5cba:	f3ef 8611 	mrs	r6, BASEPRI
    5cbe:	f383 8812 	msr	BASEPRI_MAX, r3
    5cc2:	f3bf 8f6f 	isb	sy
	return list->head;
    5cc6:	4b0e      	ldr	r3, [pc, #56]	; (5d00 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5cc8:	4f0e      	ldr	r7, [pc, #56]	; (5d04 <pm_state_notify+0x54>)
    5cca:	681c      	ldr	r4, [r3, #0]
    5ccc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5d08 <pm_state_notify+0x58>
    5cd0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5cd4:	b92c      	cbnz	r4, 5ce2 <pm_state_notify+0x32>
	__asm__ volatile(
    5cd6:	f386 8811 	msr	BASEPRI, r6
    5cda:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    5ce2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    5ce6:	2d00      	cmp	r5, #0
    5ce8:	bf18      	it	ne
    5cea:	4613      	movne	r3, r2
		if (callback) {
    5cec:	b12b      	cbz	r3, 5cfa <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5cee:	f898 2014 	ldrb.w	r2, [r8, #20]
    5cf2:	fb09 f202 	mul.w	r2, r9, r2
    5cf6:	5cb8      	ldrb	r0, [r7, r2]
    5cf8:	4798      	blx	r3
	return node->next;
    5cfa:	6824      	ldr	r4, [r4, #0]
    5cfc:	e7ea      	b.n	5cd4 <pm_state_notify+0x24>
    5cfe:	bf00      	nop
    5d00:	20001838 	.word	0x20001838
    5d04:	2000182c 	.word	0x2000182c
    5d08:	200022b8 	.word	0x200022b8

00005d0c <pm_system_resume>:

void pm_system_resume(void)
{
    5d0c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    5d0e:	4b19      	ldr	r3, [pc, #100]	; (5d74 <pm_system_resume+0x68>)
    5d10:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5d12:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5d16:	f004 031f 	and.w	r3, r4, #31
    5d1a:	2201      	movs	r2, #1
    5d1c:	409a      	lsls	r2, r3
    5d1e:	4b16      	ldr	r3, [pc, #88]	; (5d78 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5d20:	0961      	lsrs	r1, r4, #5
    5d22:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5d26:	43d0      	mvns	r0, r2
    5d28:	e853 1f00 	ldrex	r1, [r3]
    5d2c:	ea01 0500 	and.w	r5, r1, r0
    5d30:	e843 5600 	strex	r6, r5, [r3]
    5d34:	2e00      	cmp	r6, #0
    5d36:	d1f7      	bne.n	5d28 <pm_system_resume+0x1c>
    5d38:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5d3c:	420a      	tst	r2, r1
    5d3e:	d013      	beq.n	5d68 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    5d40:	4b0e      	ldr	r3, [pc, #56]	; (5d7c <pm_system_resume+0x70>)
    5d42:	4d0f      	ldr	r5, [pc, #60]	; (5d80 <pm_system_resume+0x74>)
    5d44:	b18b      	cbz	r3, 5d6a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    5d46:	230c      	movs	r3, #12
    5d48:	4363      	muls	r3, r4
    5d4a:	18ea      	adds	r2, r5, r3
    5d4c:	5ce8      	ldrb	r0, [r5, r3]
    5d4e:	7851      	ldrb	r1, [r2, #1]
    5d50:	f00c ffdf 	bl	12d12 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    5d54:	2000      	movs	r0, #0
    5d56:	f7ff ffab 	bl	5cb0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5d5a:	230c      	movs	r3, #12
    5d5c:	435c      	muls	r4, r3
    5d5e:	192a      	adds	r2, r5, r4
    5d60:	2300      	movs	r3, #0
    5d62:	512b      	str	r3, [r5, r4]
    5d64:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    5d68:	bd70      	pop	{r4, r5, r6, pc}
    5d6a:	f383 8811 	msr	BASEPRI, r3
    5d6e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5d72:	e7ef      	b.n	5d54 <pm_system_resume+0x48>
    5d74:	200022b8 	.word	0x200022b8
    5d78:	20001840 	.word	0x20001840
    5d7c:	00012d13 	.word	0x00012d13
    5d80:	2000182c 	.word	0x2000182c

00005d84 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    5d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    5d88:	4b35      	ldr	r3, [pc, #212]	; (5e60 <pm_system_suspend+0xdc>)
{
    5d8a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    5d8c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    5d8e:	f04f 0340 	mov.w	r3, #64	; 0x40
    5d92:	f3ef 8811 	mrs	r8, BASEPRI
    5d96:	f383 8812 	msr	BASEPRI_MAX, r3
    5d9a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    5d9e:	240c      	movs	r4, #12
    5da0:	4b30      	ldr	r3, [pc, #192]	; (5e64 <pm_system_suspend+0xe0>)
    5da2:	4e31      	ldr	r6, [pc, #196]	; (5e68 <pm_system_suspend+0xe4>)
    5da4:	436c      	muls	r4, r5
    5da6:	191a      	adds	r2, r3, r4
    5da8:	5d19      	ldrb	r1, [r3, r4]
    5daa:	2900      	cmp	r1, #0
    5dac:	d04c      	beq.n	5e48 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    5dae:	ca07      	ldmia	r2, {r0, r1, r2}
    5db0:	eb06 0c04 	add.w	ip, r6, r4
    5db4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    5db8:	2200      	movs	r2, #0
    5dba:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    5dbc:	f388 8811 	msr	BASEPRI, r8
    5dc0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    5dc4:	230c      	movs	r3, #12
    5dc6:	436b      	muls	r3, r5
    5dc8:	18f2      	adds	r2, r6, r3
    5dca:	5cf0      	ldrb	r0, [r6, r3]
    5dcc:	2800      	cmp	r0, #0
    5dce:	d039      	beq.n	5e44 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    5dd0:	1c7b      	adds	r3, r7, #1
    5dd2:	d010      	beq.n	5df6 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    5dd4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5dd8:	4c24      	ldr	r4, [pc, #144]	; (5e6c <pm_system_suspend+0xe8>)
    5dda:	4a25      	ldr	r2, [pc, #148]	; (5e70 <pm_system_suspend+0xec>)
    5ddc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5de0:	2100      	movs	r1, #0
    5de2:	fbec 4100 	umlal	r4, r1, ip, r0
    5de6:	2300      	movs	r3, #0
    5de8:	4620      	mov	r0, r4
    5dea:	f7fa f9d9 	bl	1a0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    5dee:	2101      	movs	r1, #1
    5df0:	1a38      	subs	r0, r7, r0
    5df2:	f00e f820 	bl	13e36 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    5df6:	f008 fb59 	bl	e4ac <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    5dfa:	2001      	movs	r0, #1
    5dfc:	f7ff ff58 	bl	5cb0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e00:	f3bf 8f5b 	dmb	ish
    5e04:	4b1b      	ldr	r3, [pc, #108]	; (5e74 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5e06:	096a      	lsrs	r2, r5, #5
    5e08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    5e0c:	f005 011f 	and.w	r1, r5, #31
    5e10:	2201      	movs	r2, #1
    5e12:	408a      	lsls	r2, r1
    5e14:	e853 0f00 	ldrex	r0, [r3]
    5e18:	4310      	orrs	r0, r2
    5e1a:	e843 0100 	strex	r1, r0, [r3]
    5e1e:	2900      	cmp	r1, #0
    5e20:	d1f8      	bne.n	5e14 <pm_system_suspend+0x90>
    5e22:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    5e26:	4b14      	ldr	r3, [pc, #80]	; (5e78 <pm_system_suspend+0xf4>)
    5e28:	b13b      	cbz	r3, 5e3a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    5e2a:	230c      	movs	r3, #12
    5e2c:	fb03 f005 	mul.w	r0, r3, r5
    5e30:	1833      	adds	r3, r6, r0
    5e32:	5c30      	ldrb	r0, [r6, r0]
    5e34:	7859      	ldrb	r1, [r3, #1]
    5e36:	f00c ff60 	bl	12cfa <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    5e3a:	f7ff ff67 	bl	5d0c <pm_system_resume>
	k_sched_unlock();
    5e3e:	f008 fb49 	bl	e4d4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    5e42:	2001      	movs	r0, #1
}
    5e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    5e48:	4601      	mov	r1, r0
    5e4a:	4628      	mov	r0, r5
    5e4c:	f000 f816 	bl	5e7c <pm_policy_next_state>
		if (info != NULL) {
    5e50:	2800      	cmp	r0, #0
    5e52:	d0b3      	beq.n	5dbc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    5e54:	c807      	ldmia	r0, {r0, r1, r2}
    5e56:	4434      	add	r4, r6
    5e58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    5e5c:	e7ae      	b.n	5dbc <pm_system_suspend+0x38>
    5e5e:	bf00      	nop
    5e60:	200022b8 	.word	0x200022b8
    5e64:	20001820 	.word	0x20001820
    5e68:	2000182c 	.word	0x2000182c
    5e6c:	000f423f 	.word	0x000f423f
    5e70:	000f4240 	.word	0x000f4240
    5e74:	20001840 	.word	0x20001840
    5e78:	00012cfb 	.word	0x00012cfb

00005e7c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    5e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e80:	b085      	sub	sp, #20
    5e82:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5e84:	a903      	add	r1, sp, #12
    5e86:	f000 f843 	bl	5f10 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5e8a:	4b1e      	ldr	r3, [pc, #120]	; (5f04 <pm_policy_next_state+0x88>)
    5e8c:	9d03      	ldr	r5, [sp, #12]
    5e8e:	f8d3 a000 	ldr.w	sl, [r3]
    5e92:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5f08 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5e96:	1e43      	subs	r3, r0, #1
    5e98:	b21b      	sxth	r3, r3
    5e9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5e9e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5ea0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5ea4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5ea8:	f04f 0b00 	mov.w	fp, #0
    5eac:	b924      	cbnz	r4, 5eb8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    5eae:	46a1      	mov	r9, r4
}
    5eb0:	4648      	mov	r0, r9
    5eb2:	b005      	add	sp, #20
    5eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eb8:	6868      	ldr	r0, [r5, #4]
    5eba:	4a14      	ldr	r2, [pc, #80]	; (5f0c <pm_policy_next_state+0x90>)
    5ebc:	46c4      	mov	ip, r8
    5ebe:	4659      	mov	r1, fp
    5ec0:	fbe0 c107 	umlal	ip, r1, r0, r7
    5ec4:	2300      	movs	r3, #0
    5ec6:	4660      	mov	r0, ip
    5ec8:	f7fa f96a 	bl	1a0 <__aeabi_uldivmod>
    5ecc:	9001      	str	r0, [sp, #4]
    5ece:	68a8      	ldr	r0, [r5, #8]
    5ed0:	4a0e      	ldr	r2, [pc, #56]	; (5f0c <pm_policy_next_state+0x90>)
    5ed2:	46c4      	mov	ip, r8
    5ed4:	4659      	mov	r1, fp
    5ed6:	fbe0 c107 	umlal	ip, r1, r0, r7
    5eda:	2300      	movs	r3, #0
    5edc:	4660      	mov	r0, ip
    5ede:	f7fa f95f 	bl	1a0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5ee2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    5ee6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5ee8:	d001      	beq.n	5eee <pm_policy_next_state+0x72>
    5eea:	4582      	cmp	sl, r0
    5eec:	d905      	bls.n	5efa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    5eee:	1c73      	adds	r3, r6, #1
    5ef0:	d0de      	beq.n	5eb0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    5ef6:	42b0      	cmp	r0, r6
    5ef8:	d9da      	bls.n	5eb0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5efa:	3c01      	subs	r4, #1
    5efc:	b2a4      	uxth	r4, r4
    5efe:	3d0c      	subs	r5, #12
    5f00:	e7d4      	b.n	5eac <pm_policy_next_state+0x30>
    5f02:	bf00      	nop
    5f04:	2000008c 	.word	0x2000008c
    5f08:	000f423f 	.word	0x000f423f
    5f0c:	000f4240 	.word	0x000f4240

00005f10 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5f10:	b908      	cbnz	r0, 5f16 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    5f12:	4b02      	ldr	r3, [pc, #8]	; (5f1c <pm_state_cpu_get_all+0xc>)
    5f14:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5f16:	2000      	movs	r0, #0
    5f18:	4770      	bx	lr
    5f1a:	bf00      	nop
    5f1c:	00014534 	.word	0x00014534

00005f20 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    5f20:	4801      	ldr	r0, [pc, #4]	; (5f28 <nrf_cc3xx_platform_abort_init+0x8>)
    5f22:	f009 bd27 	b.w	f974 <nrf_cc3xx_platform_set_abort>
    5f26:	bf00      	nop
    5f28:	00014534 	.word	0x00014534

00005f2c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5f2c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    5f2e:	4604      	mov	r4, r0
    5f30:	b918      	cbnz	r0, 5f3a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    5f32:	4b0f      	ldr	r3, [pc, #60]	; (5f70 <mutex_free_platform+0x44>)
    5f34:	480f      	ldr	r0, [pc, #60]	; (5f74 <mutex_free_platform+0x48>)
    5f36:	685b      	ldr	r3, [r3, #4]
    5f38:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5f3a:	6861      	ldr	r1, [r4, #4]
    5f3c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    5f40:	d00f      	beq.n	5f62 <mutex_free_platform+0x36>
    5f42:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    5f46:	d00c      	beq.n	5f62 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5f48:	4d0b      	ldr	r5, [pc, #44]	; (5f78 <mutex_free_platform+0x4c>)
    5f4a:	42a9      	cmp	r1, r5
    5f4c:	d009      	beq.n	5f62 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5f4e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    5f52:	d007      	beq.n	5f64 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5f54:	4809      	ldr	r0, [pc, #36]	; (5f7c <mutex_free_platform+0x50>)
    5f56:	4621      	mov	r1, r4
    5f58:	f00d fd8e 	bl	13a78 <k_mem_slab_free>
        mutex->mutex = NULL;
    5f5c:	2300      	movs	r3, #0
    5f5e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5f60:	6065      	str	r5, [r4, #4]
}
    5f62:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5f64:	6820      	ldr	r0, [r4, #0]
    5f66:	2214      	movs	r2, #20
    5f68:	f00c febb 	bl	12ce2 <memset>
    5f6c:	e7f8      	b.n	5f60 <mutex_free_platform+0x34>
    5f6e:	bf00      	nop
    5f70:	2000017c 	.word	0x2000017c
    5f74:	00014c0f 	.word	0x00014c0f
    5f78:	a95c5f2c 	.word	0xa95c5f2c
    5f7c:	20001d44 	.word	0x20001d44

00005f80 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5f80:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5f82:	b320      	cbz	r0, 5fce <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    5f84:	6843      	ldr	r3, [r0, #4]
    5f86:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    5f8a:	d110      	bne.n	5fae <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5f8c:	2201      	movs	r2, #1
    5f8e:	6803      	ldr	r3, [r0, #0]
    5f90:	f3bf 8f5b 	dmb	ish
    5f94:	e853 1f00 	ldrex	r1, [r3]
    5f98:	2900      	cmp	r1, #0
    5f9a:	d103      	bne.n	5fa4 <mutex_lock_platform+0x24>
    5f9c:	e843 2000 	strex	r0, r2, [r3]
    5fa0:	2800      	cmp	r0, #0
    5fa2:	d1f7      	bne.n	5f94 <mutex_lock_platform+0x14>
    5fa4:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5fa8:	d10d      	bne.n	5fc6 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    5faa:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    5fac:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5fae:	4a09      	ldr	r2, [pc, #36]	; (5fd4 <mutex_lock_platform+0x54>)
    5fb0:	4293      	cmp	r3, r2
    5fb2:	d00a      	beq.n	5fca <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    5fb4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fbe:	f007 fddb 	bl	db78 <z_impl_k_mutex_lock>
        if (ret == 0) {
    5fc2:	2800      	cmp	r0, #0
    5fc4:	d0f1      	beq.n	5faa <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5fc6:	4804      	ldr	r0, [pc, #16]	; (5fd8 <mutex_lock_platform+0x58>)
    5fc8:	e7f0      	b.n	5fac <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5fca:	4804      	ldr	r0, [pc, #16]	; (5fdc <mutex_lock_platform+0x5c>)
    5fcc:	e7ee      	b.n	5fac <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5fce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5fd2:	e7eb      	b.n	5fac <mutex_lock_platform+0x2c>
    5fd4:	a95c5f2c 	.word	0xa95c5f2c
    5fd8:	ffff8fe9 	.word	0xffff8fe9
    5fdc:	ffff8fea 	.word	0xffff8fea

00005fe0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5fe0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5fe2:	b1d8      	cbz	r0, 601c <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5fe4:	6843      	ldr	r3, [r0, #4]
    5fe6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    5fea:	d110      	bne.n	600e <mutex_unlock_platform+0x2e>
    5fec:	2200      	movs	r2, #0
    5fee:	6803      	ldr	r3, [r0, #0]
    5ff0:	f3bf 8f5b 	dmb	ish
    5ff4:	e853 1f00 	ldrex	r1, [r3]
    5ff8:	2901      	cmp	r1, #1
    5ffa:	d103      	bne.n	6004 <mutex_unlock_platform+0x24>
    5ffc:	e843 2000 	strex	r0, r2, [r3]
    6000:	2800      	cmp	r0, #0
    6002:	d1f7      	bne.n	5ff4 <mutex_unlock_platform+0x14>
    6004:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6008:	d10b      	bne.n	6022 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    600a:	2000      	movs	r0, #0
    }
}
    600c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    600e:	4a07      	ldr	r2, [pc, #28]	; (602c <mutex_unlock_platform+0x4c>)
    6010:	4293      	cmp	r3, r2
    6012:	d008      	beq.n	6026 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    6014:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    6016:	f007 fe29 	bl	dc6c <z_impl_k_mutex_unlock>
    601a:	e7f6      	b.n	600a <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    601c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6020:	e7f4      	b.n	600c <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6022:	4803      	ldr	r0, [pc, #12]	; (6030 <mutex_unlock_platform+0x50>)
    6024:	e7f2      	b.n	600c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    6026:	4803      	ldr	r0, [pc, #12]	; (6034 <mutex_unlock_platform+0x54>)
    6028:	e7f0      	b.n	600c <mutex_unlock_platform+0x2c>
    602a:	bf00      	nop
    602c:	a95c5f2c 	.word	0xa95c5f2c
    6030:	ffff8fe9 	.word	0xffff8fe9
    6034:	ffff8fea 	.word	0xffff8fea

00006038 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6038:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    603a:	4604      	mov	r4, r0
    603c:	b918      	cbnz	r0, 6046 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    603e:	4b1d      	ldr	r3, [pc, #116]	; (60b4 <mutex_init_platform+0x7c>)
    6040:	481d      	ldr	r0, [pc, #116]	; (60b8 <mutex_init_platform+0x80>)
    6042:	685b      	ldr	r3, [r3, #4]
    6044:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    6046:	6863      	ldr	r3, [r4, #4]
    6048:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    604c:	d02f      	beq.n	60ae <mutex_init_platform+0x76>
    604e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    6052:	d02c      	beq.n	60ae <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    6054:	4a19      	ldr	r2, [pc, #100]	; (60bc <mutex_init_platform+0x84>)
    6056:	4293      	cmp	r3, r2
    6058:	d119      	bne.n	608e <mutex_init_platform+0x56>
    605a:	6823      	ldr	r3, [r4, #0]
    605c:	bb03      	cbnz	r3, 60a0 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    605e:	4818      	ldr	r0, [pc, #96]	; (60c0 <mutex_init_platform+0x88>)
    6060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6068:	4621      	mov	r1, r4
    606a:	f007 fc81 	bl	d970 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    606e:	b908      	cbnz	r0, 6074 <mutex_init_platform+0x3c>
    6070:	6823      	ldr	r3, [r4, #0]
    6072:	b91b      	cbnz	r3, 607c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    6074:	4b0f      	ldr	r3, [pc, #60]	; (60b4 <mutex_init_platform+0x7c>)
    6076:	4813      	ldr	r0, [pc, #76]	; (60c4 <mutex_init_platform+0x8c>)
    6078:	685b      	ldr	r3, [r3, #4]
    607a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    607c:	6820      	ldr	r0, [r4, #0]
    607e:	2214      	movs	r2, #20
    6080:	2100      	movs	r1, #0
    6082:	f00c fe2e 	bl	12ce2 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    6086:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    608a:	6063      	str	r3, [r4, #4]
    608c:	e008      	b.n	60a0 <mutex_init_platform+0x68>
    switch(flags){
    608e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    6092:	d80d      	bhi.n	60b0 <mutex_init_platform+0x78>
    6094:	2b3a      	cmp	r3, #58	; 0x3a
    6096:	d003      	beq.n	60a0 <mutex_init_platform+0x68>
    6098:	f640 62ba 	movw	r2, #3770	; 0xeba
    609c:	4293      	cmp	r3, r2
    609e:	d1de      	bne.n	605e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    60a0:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    60a2:	f00d fd2e 	bl	13b02 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    60a6:	6863      	ldr	r3, [r4, #4]
    60a8:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    60ac:	6063      	str	r3, [r4, #4]
}
    60ae:	bd10      	pop	{r4, pc}
    switch(flags){
    60b0:	4a05      	ldr	r2, [pc, #20]	; (60c8 <mutex_init_platform+0x90>)
    60b2:	e7f3      	b.n	609c <mutex_init_platform+0x64>
    60b4:	2000017c 	.word	0x2000017c
    60b8:	00014c0f 	.word	0x00014c0f
    60bc:	a95c5f2c 	.word	0xa95c5f2c
    60c0:	20001d44 	.word	0x20001d44
    60c4:	00014c35 	.word	0x00014c35
    60c8:	3a00003a 	.word	0x3a00003a

000060cc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    60cc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    60ce:	4906      	ldr	r1, [pc, #24]	; (60e8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    60d0:	4806      	ldr	r0, [pc, #24]	; (60ec <nrf_cc3xx_platform_mutex_init+0x20>)
    60d2:	2340      	movs	r3, #64	; 0x40
    60d4:	2214      	movs	r2, #20
    60d6:	f00d fcc1 	bl	13a5c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    60da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    60de:	4904      	ldr	r1, [pc, #16]	; (60f0 <nrf_cc3xx_platform_mutex_init+0x24>)
    60e0:	4804      	ldr	r0, [pc, #16]	; (60f4 <nrf_cc3xx_platform_mutex_init+0x28>)
    60e2:	f009 bd0d 	b.w	fb00 <nrf_cc3xx_platform_set_mutexes>
    60e6:	bf00      	nop
    60e8:	20001844 	.word	0x20001844
    60ec:	20001d44 	.word	0x20001d44
    60f0:	0001453c 	.word	0x0001453c
    60f4:	00014550 	.word	0x00014550

000060f8 <z_isr_install>:
#endif /* CONFIG_MULTI_LEVEL_INTERRUPTS */

	/* If dynamic IRQs are enabled, then the _sw_isr_table is in RAM and
	 * can be modified
	 */
	_sw_isr_table[table_idx].arg = param;
    60f8:	4b03      	ldr	r3, [pc, #12]	; (6108 <z_isr_install+0x10>)
    60fa:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	_sw_isr_table[table_idx].isr = routine;
    60fe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6102:	6059      	str	r1, [r3, #4]
}
    6104:	4770      	bx	lr
    6106:	bf00      	nop
    6108:	200001f0 	.word	0x200001f0

0000610c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    610c:	4901      	ldr	r1, [pc, #4]	; (6114 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    610e:	2210      	movs	r2, #16
	str	r2, [r1]
    6110:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    6112:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6114:	e000ed10 	.word	0xe000ed10

00006118 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6118:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    611a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    611c:	f380 8811 	msr	BASEPRI, r0
	isb
    6120:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    6124:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6128:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    612a:	b662      	cpsie	i
	isb
    612c:	f3bf 8f6f 	isb	sy

	bx	lr
    6130:	4770      	bx	lr
    6132:	bf00      	nop

00006134 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    6134:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    6136:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6138:	f381 8811 	msr	BASEPRI, r1

	wfe
    613c:	bf20      	wfe

	msr	BASEPRI, r0
    613e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    6142:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6144:	4770      	bx	lr
    6146:	bf00      	nop

00006148 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    614c:	4681      	mov	r9, r0
    614e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    6150:	460c      	mov	r4, r1
    6152:	2900      	cmp	r1, #0
    6154:	d04c      	beq.n	61f0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6156:	466e      	mov	r6, sp
    6158:	b08a      	sub	sp, #40	; 0x28
    615a:	e9d1 1200 	ldrd	r1, r2, [r1]
    615e:	68a3      	ldr	r3, [r4, #8]
    6160:	466d      	mov	r5, sp
    6162:	4827      	ldr	r0, [pc, #156]	; (6200 <z_arm_fatal_error+0xb8>)
    6164:	46a8      	mov	r8, r5
    6166:	f04f 0a05 	mov.w	sl, #5
    616a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    616e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    6172:	f848 af10 	str.w	sl, [r8, #16]!
    6176:	4823      	ldr	r0, [pc, #140]	; (6204 <z_arm_fatal_error+0xbc>)
    6178:	4642      	mov	r2, r8
    617a:	2300      	movs	r3, #0
    617c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    6180:	f7ff fa9a 	bl	56b8 <z_impl_z_log_msg_static_create>
    6184:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6186:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    618a:	6963      	ldr	r3, [r4, #20]
    618c:	46ad      	mov	sp, r5
    618e:	481e      	ldr	r0, [pc, #120]	; (6208 <z_arm_fatal_error+0xc0>)
    6190:	f8c5 a010 	str.w	sl, [r5, #16]
    6194:	e9c5 0105 	strd	r0, r1, [r5, #20]
    6198:	e9c5 2307 	strd	r2, r3, [r5, #28]
    619c:	4819      	ldr	r0, [pc, #100]	; (6204 <z_arm_fatal_error+0xbc>)
    619e:	2300      	movs	r3, #0
    61a0:	4642      	mov	r2, r8
    61a2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    61a6:	f7ff fa87 	bl	56b8 <z_impl_z_log_msg_static_create>
    61aa:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    61ac:	b088      	sub	sp, #32
    61ae:	69e3      	ldr	r3, [r4, #28]
    61b0:	466d      	mov	r5, sp
    61b2:	4a16      	ldr	r2, [pc, #88]	; (620c <z_arm_fatal_error+0xc4>)
    61b4:	46a8      	mov	r8, r5
    61b6:	f04f 0a03 	mov.w	sl, #3
    61ba:	e9c5 2305 	strd	r2, r3, [r5, #20]
    61be:	f848 af10 	str.w	sl, [r8, #16]!
    61c2:	4810      	ldr	r0, [pc, #64]	; (6204 <z_arm_fatal_error+0xbc>)
    61c4:	2300      	movs	r3, #0
    61c6:	4642      	mov	r2, r8
    61c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    61cc:	f7ff fa74 	bl	56b8 <z_impl_z_log_msg_static_create>
    61d0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    61d2:	69a3      	ldr	r3, [r4, #24]
    61d4:	46ad      	mov	sp, r5
    61d6:	4a0e      	ldr	r2, [pc, #56]	; (6210 <z_arm_fatal_error+0xc8>)
    61d8:	f8c5 a010 	str.w	sl, [r5, #16]
    61dc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    61e0:	4808      	ldr	r0, [pc, #32]	; (6204 <z_arm_fatal_error+0xbc>)
    61e2:	2300      	movs	r3, #0
    61e4:	4642      	mov	r2, r8
    61e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    61ea:	f7ff fa65 	bl	56b8 <z_impl_z_log_msg_static_create>
    61ee:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    61f0:	4621      	mov	r1, r4
    61f2:	4648      	mov	r0, r9
    61f4:	f007 fa3c 	bl	d670 <z_fatal_error>
}
    61f8:	46bd      	mov	sp, r7
    61fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61fe:	bf00      	nop
    6200:	00014c62 	.word	0x00014c62
    6204:	00014410 	.word	0x00014410
    6208:	00014c91 	.word	0x00014c91
    620c:	00014cc0 	.word	0x00014cc0
    6210:	00014ccf 	.word	0x00014ccf

00006214 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6214:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6216:	2800      	cmp	r0, #0
    6218:	db07      	blt.n	622a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    621a:	4a04      	ldr	r2, [pc, #16]	; (622c <arch_irq_enable+0x18>)
    621c:	0941      	lsrs	r1, r0, #5
    621e:	2301      	movs	r3, #1
    6220:	f000 001f 	and.w	r0, r0, #31
    6224:	4083      	lsls	r3, r0
    6226:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    622a:	4770      	bx	lr
    622c:	e000e100 	.word	0xe000e100

00006230 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6230:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6232:	2800      	cmp	r0, #0
    6234:	db0c      	blt.n	6250 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6236:	0943      	lsrs	r3, r0, #5
    6238:	4906      	ldr	r1, [pc, #24]	; (6254 <arch_irq_disable+0x24>)
    623a:	f000 001f 	and.w	r0, r0, #31
    623e:	3320      	adds	r3, #32
    6240:	2201      	movs	r2, #1
    6242:	4082      	lsls	r2, r0
    6244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6248:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    624c:	f3bf 8f6f 	isb	sy
}
    6250:	4770      	bx	lr
    6252:	bf00      	nop
    6254:	e000e100 	.word	0xe000e100

00006258 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6258:	4b05      	ldr	r3, [pc, #20]	; (6270 <arch_irq_is_enabled+0x18>)
    625a:	0942      	lsrs	r2, r0, #5
    625c:	f000 001f 	and.w	r0, r0, #31
    6260:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6264:	2301      	movs	r3, #1
    6266:	fa03 f000 	lsl.w	r0, r3, r0
}
    626a:	4010      	ands	r0, r2
    626c:	4770      	bx	lr
    626e:	bf00      	nop
    6270:	e000e100 	.word	0xe000e100

00006274 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6274:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    6276:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    6278:	bf54      	ite	pl
    627a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    627c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    627e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6280:	bfac      	ite	ge
    6282:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6286:	4a07      	ldrlt	r2, [pc, #28]	; (62a4 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6288:	ea4f 1341 	mov.w	r3, r1, lsl #5
    628c:	bfac      	ite	ge
    628e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6292:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6296:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6298:	bfb4      	ite	lt
    629a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    629c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    62a0:	4770      	bx	lr
    62a2:	bf00      	nop
    62a4:	e000ed14 	.word	0xe000ed14

000062a8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    62a8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    62aa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    62ac:	4b04      	ldr	r3, [pc, #16]	; (62c0 <_arch_isr_direct_pm+0x18>)
    62ae:	699a      	ldr	r2, [r3, #24]
    62b0:	b11a      	cbz	r2, 62ba <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    62b2:	2200      	movs	r2, #0
    62b4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    62b6:	f00d fc15 	bl	13ae4 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    62ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    62bc:	bd08      	pop	{r3, pc}
    62be:	bf00      	nop
    62c0:	200022b8 	.word	0x200022b8

000062c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    62c4:	bf30      	wfi
    b z_SysNmiOnReset
    62c6:	f7ff bffd 	b.w	62c4 <z_SysNmiOnReset>
    62ca:	bf00      	nop

000062cc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    62cc:	4a0b      	ldr	r2, [pc, #44]	; (62fc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    62ce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    62d0:	4b0b      	ldr	r3, [pc, #44]	; (6300 <z_arm_prep_c+0x34>)
    62d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    62d6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    62d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    62e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    62e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    62e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    62ec:	f007 fa7a 	bl	d7e4 <z_bss_zero>
	z_data_copy();
    62f0:	f008 fa2c 	bl	e74c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    62f4:	f000 fbba 	bl	6a6c <z_arm_interrupt_init>
	z_cstart();
    62f8:	f007 fab8 	bl	d86c <z_cstart>
    62fc:	00000000 	.word	0x00000000
    6300:	e000ed00 	.word	0xe000ed00

00006304 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6304:	4a09      	ldr	r2, [pc, #36]	; (632c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6306:	490a      	ldr	r1, [pc, #40]	; (6330 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6308:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    630a:	6809      	ldr	r1, [r1, #0]
    630c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    630e:	4909      	ldr	r1, [pc, #36]	; (6334 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6310:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6312:	684b      	ldr	r3, [r1, #4]
    6314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6318:	604b      	str	r3, [r1, #4]
    631a:	2300      	movs	r3, #0
    631c:	f383 8811 	msr	BASEPRI, r3
    6320:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6324:	6893      	ldr	r3, [r2, #8]
}
    6326:	6f98      	ldr	r0, [r3, #120]	; 0x78
    6328:	4770      	bx	lr
    632a:	bf00      	nop
    632c:	200022b8 	.word	0x200022b8
    6330:	00014730 	.word	0x00014730
    6334:	e000ed00 	.word	0xe000ed00

00006338 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6338:	4912      	ldr	r1, [pc, #72]	; (6384 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    633a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    633c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6340:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6342:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6346:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    634a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    634c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6350:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6354:	4f0c      	ldr	r7, [pc, #48]	; (6388 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6356:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    635a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    635c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    635e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6360:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    6362:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6364:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6366:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    636a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    636c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    636e:	f000 fc19 	bl	6ba4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    6372:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6376:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    637a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    637e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    6382:	4770      	bx	lr
    ldr r1, =_kernel
    6384:	200022b8 	.word	0x200022b8
    ldr v4, =_SCS_ICSR
    6388:	e000ed04 	.word	0xe000ed04

0000638c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    638c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6390:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6392:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6396:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    639a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    639c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    63a0:	2902      	cmp	r1, #2
    beq _oops
    63a2:	d0ff      	beq.n	63a4 <_oops>

000063a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    63a4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    63a6:	f00c fc30 	bl	12c0a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    63aa:	bd01      	pop	{r0, pc}

000063ac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    63ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    63b0:	9b00      	ldr	r3, [sp, #0]
    63b2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    63b6:	490a      	ldr	r1, [pc, #40]	; (63e0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    63b8:	9b01      	ldr	r3, [sp, #4]
    63ba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    63be:	9b02      	ldr	r3, [sp, #8]
    63c0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    63c4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    63c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    63cc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    63d0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    63d4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    63d6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    63d8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    63da:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    63dc:	4770      	bx	lr
    63de:	bf00      	nop
    63e0:	00012391 	.word	0x00012391

000063e4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    63e4:	4a09      	ldr	r2, [pc, #36]	; (640c <z_check_thread_stack_fail+0x28>)
{
    63e6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    63e8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    63ea:	b170      	cbz	r0, 640a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    63ec:	f113 0f16 	cmn.w	r3, #22
    63f0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    63f2:	d005      	beq.n	6400 <z_check_thread_stack_fail+0x1c>
    63f4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    63f8:	429a      	cmp	r2, r3
    63fa:	d805      	bhi.n	6408 <z_check_thread_stack_fail+0x24>
    63fc:	4283      	cmp	r3, r0
    63fe:	d203      	bcs.n	6408 <z_check_thread_stack_fail+0x24>
		return 0;
    6400:	4281      	cmp	r1, r0
    6402:	bf28      	it	cs
    6404:	2000      	movcs	r0, #0
    6406:	4770      	bx	lr
    6408:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    640a:	4770      	bx	lr
    640c:	200022b8 	.word	0x200022b8

00006410 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6410:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6412:	4b09      	ldr	r3, [pc, #36]	; (6438 <arch_switch_to_main_thread+0x28>)
    6414:	6098      	str	r0, [r3, #8]
{
    6416:	460d      	mov	r5, r1
    6418:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    641a:	f000 fbc3 	bl	6ba4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    641e:	4620      	mov	r0, r4
    6420:	f385 8809 	msr	PSP, r5
    6424:	2100      	movs	r1, #0
    6426:	b663      	cpsie	if
    6428:	f381 8811 	msr	BASEPRI, r1
    642c:	f3bf 8f6f 	isb	sy
    6430:	2200      	movs	r2, #0
    6432:	2300      	movs	r3, #0
    6434:	f00b ffac 	bl	12390 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6438:	200022b8 	.word	0x200022b8

0000643c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    643c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    643e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6440:	4a0b      	ldr	r2, [pc, #44]	; (6470 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6442:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    6444:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6446:	bf1e      	ittt	ne
	movne	r1, #0
    6448:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    644a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    644c:	f00d fb4a 	blne	13ae4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6450:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6452:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6456:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    645a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    645e:	4905      	ldr	r1, [pc, #20]	; (6474 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6460:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6462:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6464:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6466:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    646a:	4903      	ldr	r1, [pc, #12]	; (6478 <_isr_wrapper+0x3c>)
	bx r1
    646c:	4708      	bx	r1
    646e:	0000      	.short	0x0000
	ldr r2, =_kernel
    6470:	200022b8 	.word	0x200022b8
	ldr r1, =_sw_isr_table
    6474:	200001f0 	.word	0x200001f0
	ldr r1, =z_arm_int_exit
    6478:	0000647d 	.word	0x0000647d

0000647c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    647c:	4b04      	ldr	r3, [pc, #16]	; (6490 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    647e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6480:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    6482:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6484:	d003      	beq.n	648e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6486:	4903      	ldr	r1, [pc, #12]	; (6494 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    648c:	600a      	str	r2, [r1, #0]

0000648e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    648e:	4770      	bx	lr
	ldr r3, =_kernel
    6490:	200022b8 	.word	0x200022b8
	ldr r1, =_SCS_ICSR
    6494:	e000ed04 	.word	0xe000ed04

00006498 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    649c:	b086      	sub	sp, #24
    649e:	4606      	mov	r6, r0
    64a0:	af00      	add	r7, sp, #0
    64a2:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    64a4:	4b3e      	ldr	r3, [pc, #248]	; (65a0 <bus_fault.constprop.0+0x108>)
    64a6:	617b      	str	r3, [r7, #20]
    64a8:	2402      	movs	r4, #2
    64aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64ae:	483d      	ldr	r0, [pc, #244]	; (65a4 <bus_fault.constprop.0+0x10c>)
    64b0:	613c      	str	r4, [r7, #16]
    64b2:	f107 0210 	add.w	r2, r7, #16
    64b6:	f00c fbc5 	bl	12c44 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    64ba:	4b3b      	ldr	r3, [pc, #236]	; (65a8 <bus_fault.constprop.0+0x110>)
    64bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64be:	04d9      	lsls	r1, r3, #19
    64c0:	d509      	bpl.n	64d6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    64c2:	4b3a      	ldr	r3, [pc, #232]	; (65ac <bus_fault.constprop.0+0x114>)
    64c4:	4837      	ldr	r0, [pc, #220]	; (65a4 <bus_fault.constprop.0+0x10c>)
    64c6:	e9c7 4304 	strd	r4, r3, [r7, #16]
    64ca:	f107 0210 	add.w	r2, r7, #16
    64ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64d2:	f00c fbb7 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    64d6:	4b34      	ldr	r3, [pc, #208]	; (65a8 <bus_fault.constprop.0+0x110>)
    64d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64da:	051a      	lsls	r2, r3, #20
    64dc:	d50a      	bpl.n	64f4 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    64de:	4b34      	ldr	r3, [pc, #208]	; (65b0 <bus_fault.constprop.0+0x118>)
    64e0:	617b      	str	r3, [r7, #20]
    64e2:	2302      	movs	r3, #2
    64e4:	482f      	ldr	r0, [pc, #188]	; (65a4 <bus_fault.constprop.0+0x10c>)
    64e6:	613b      	str	r3, [r7, #16]
    64e8:	f107 0210 	add.w	r2, r7, #16
    64ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64f0:	f00c fba8 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    64f4:	4c2c      	ldr	r4, [pc, #176]	; (65a8 <bus_fault.constprop.0+0x110>)
    64f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64f8:	059b      	lsls	r3, r3, #22
    64fa:	d522      	bpl.n	6542 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    64fc:	46e8      	mov	r8, sp
    64fe:	4b2d      	ldr	r3, [pc, #180]	; (65b4 <bus_fault.constprop.0+0x11c>)
    6500:	617b      	str	r3, [r7, #20]
    6502:	2302      	movs	r3, #2
    6504:	4827      	ldr	r0, [pc, #156]	; (65a4 <bus_fault.constprop.0+0x10c>)
    6506:	613b      	str	r3, [r7, #16]
    6508:	f107 0210 	add.w	r2, r7, #16
    650c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6510:	f00c fb98 	bl	12c44 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6514:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6516:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6518:	0410      	lsls	r0, r2, #16
    651a:	d512      	bpl.n	6542 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    651c:	b088      	sub	sp, #32
    651e:	466a      	mov	r2, sp
    6520:	4925      	ldr	r1, [pc, #148]	; (65b8 <bus_fault.constprop.0+0x120>)
    6522:	4820      	ldr	r0, [pc, #128]	; (65a4 <bus_fault.constprop.0+0x10c>)
    6524:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6528:	2303      	movs	r3, #3
    652a:	f842 3f10 	str.w	r3, [r2, #16]!
    652e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6532:	f00c fb87 	bl	12c44 <z_log_msg_static_create.constprop.0>
    6536:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    6538:	b11e      	cbz	r6, 6542 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    653a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    653c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6540:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6542:	4b19      	ldr	r3, [pc, #100]	; (65a8 <bus_fault.constprop.0+0x110>)
    6544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6546:	0559      	lsls	r1, r3, #21
    6548:	d50a      	bpl.n	6560 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    654a:	4b1c      	ldr	r3, [pc, #112]	; (65bc <bus_fault.constprop.0+0x124>)
    654c:	617b      	str	r3, [r7, #20]
    654e:	2302      	movs	r3, #2
    6550:	4814      	ldr	r0, [pc, #80]	; (65a4 <bus_fault.constprop.0+0x10c>)
    6552:	613b      	str	r3, [r7, #16]
    6554:	f107 0210 	add.w	r2, r7, #16
    6558:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    655c:	f00c fb72 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6560:	4b11      	ldr	r3, [pc, #68]	; (65a8 <bus_fault.constprop.0+0x110>)
    6562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6564:	05d2      	lsls	r2, r2, #23
    6566:	d515      	bpl.n	6594 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    6568:	4b15      	ldr	r3, [pc, #84]	; (65c0 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    656a:	617b      	str	r3, [r7, #20]
    656c:	2302      	movs	r3, #2
    656e:	480d      	ldr	r0, [pc, #52]	; (65a4 <bus_fault.constprop.0+0x10c>)
    6570:	613b      	str	r3, [r7, #16]
    6572:	f107 0210 	add.w	r2, r7, #16
    6576:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    657a:	f00c fb63 	bl	12c44 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    657e:	4a0a      	ldr	r2, [pc, #40]	; (65a8 <bus_fault.constprop.0+0x110>)
    6580:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    6582:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6584:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    6588:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    658a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    658c:	7028      	strb	r0, [r5, #0]
}
    658e:	46bd      	mov	sp, r7
    6590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6596:	049b      	lsls	r3, r3, #18
    6598:	d5f1      	bpl.n	657e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    659a:	4b0a      	ldr	r3, [pc, #40]	; (65c4 <bus_fault.constprop.0+0x12c>)
    659c:	e7e5      	b.n	656a <bus_fault.constprop.0+0xd2>
    659e:	bf00      	nop
    65a0:	00014cfd 	.word	0x00014cfd
    65a4:	00014410 	.word	0x00014410
    65a8:	e000ed00 	.word	0xe000ed00
    65ac:	00014d13 	.word	0x00014d13
    65b0:	00014d24 	.word	0x00014d24
    65b4:	00014d37 	.word	0x00014d37
    65b8:	00014d50 	.word	0x00014d50
    65bc:	00014d65 	.word	0x00014d65
    65c0:	00014d80 	.word	0x00014d80
    65c4:	00014d98 	.word	0x00014d98

000065c8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    65c8:	b510      	push	{r4, lr}
    65ca:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    65cc:	4b33      	ldr	r3, [pc, #204]	; (669c <usage_fault.constprop.0+0xd4>)
    65ce:	4834      	ldr	r0, [pc, #208]	; (66a0 <usage_fault.constprop.0+0xd8>)
    65d0:	9305      	str	r3, [sp, #20]
    65d2:	2402      	movs	r4, #2
    65d4:	aa04      	add	r2, sp, #16
    65d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65da:	9404      	str	r4, [sp, #16]
    65dc:	f00c fb32 	bl	12c44 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    65e0:	4b30      	ldr	r3, [pc, #192]	; (66a4 <usage_fault.constprop.0+0xdc>)
    65e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65e4:	019b      	lsls	r3, r3, #6
    65e6:	d508      	bpl.n	65fa <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    65e8:	4b2f      	ldr	r3, [pc, #188]	; (66a8 <usage_fault.constprop.0+0xe0>)
    65ea:	482d      	ldr	r0, [pc, #180]	; (66a0 <usage_fault.constprop.0+0xd8>)
    65ec:	aa04      	add	r2, sp, #16
    65ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65f2:	e9cd 4304 	strd	r4, r3, [sp, #16]
    65f6:	f00c fb25 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    65fa:	4b2a      	ldr	r3, [pc, #168]	; (66a4 <usage_fault.constprop.0+0xdc>)
    65fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65fe:	01dc      	lsls	r4, r3, #7
    6600:	d509      	bpl.n	6616 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    6602:	4b2a      	ldr	r3, [pc, #168]	; (66ac <usage_fault.constprop.0+0xe4>)
    6604:	9305      	str	r3, [sp, #20]
    6606:	4826      	ldr	r0, [pc, #152]	; (66a0 <usage_fault.constprop.0+0xd8>)
    6608:	2302      	movs	r3, #2
    660a:	aa04      	add	r2, sp, #16
    660c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6610:	9304      	str	r3, [sp, #16]
    6612:	f00c fb17 	bl	12c44 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6616:	4b23      	ldr	r3, [pc, #140]	; (66a4 <usage_fault.constprop.0+0xdc>)
    6618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    661a:	0318      	lsls	r0, r3, #12
    661c:	d509      	bpl.n	6632 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    661e:	4b24      	ldr	r3, [pc, #144]	; (66b0 <usage_fault.constprop.0+0xe8>)
    6620:	9305      	str	r3, [sp, #20]
    6622:	481f      	ldr	r0, [pc, #124]	; (66a0 <usage_fault.constprop.0+0xd8>)
    6624:	2302      	movs	r3, #2
    6626:	aa04      	add	r2, sp, #16
    6628:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    662c:	9304      	str	r3, [sp, #16]
    662e:	f00c fb09 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6632:	4b1c      	ldr	r3, [pc, #112]	; (66a4 <usage_fault.constprop.0+0xdc>)
    6634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6636:	0359      	lsls	r1, r3, #13
    6638:	d509      	bpl.n	664e <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    663a:	4b1e      	ldr	r3, [pc, #120]	; (66b4 <usage_fault.constprop.0+0xec>)
    663c:	9305      	str	r3, [sp, #20]
    663e:	4818      	ldr	r0, [pc, #96]	; (66a0 <usage_fault.constprop.0+0xd8>)
    6640:	2302      	movs	r3, #2
    6642:	aa04      	add	r2, sp, #16
    6644:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6648:	9304      	str	r3, [sp, #16]
    664a:	f00c fafb 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    664e:	4b15      	ldr	r3, [pc, #84]	; (66a4 <usage_fault.constprop.0+0xdc>)
    6650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6652:	039a      	lsls	r2, r3, #14
    6654:	d509      	bpl.n	666a <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6656:	4b18      	ldr	r3, [pc, #96]	; (66b8 <usage_fault.constprop.0+0xf0>)
    6658:	9305      	str	r3, [sp, #20]
    665a:	4811      	ldr	r0, [pc, #68]	; (66a0 <usage_fault.constprop.0+0xd8>)
    665c:	2302      	movs	r3, #2
    665e:	aa04      	add	r2, sp, #16
    6660:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6664:	9304      	str	r3, [sp, #16]
    6666:	f00c faed 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    666a:	4b0e      	ldr	r3, [pc, #56]	; (66a4 <usage_fault.constprop.0+0xdc>)
    666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    666e:	03db      	lsls	r3, r3, #15
    6670:	d509      	bpl.n	6686 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6672:	4b12      	ldr	r3, [pc, #72]	; (66bc <usage_fault.constprop.0+0xf4>)
    6674:	9305      	str	r3, [sp, #20]
    6676:	480a      	ldr	r0, [pc, #40]	; (66a0 <usage_fault.constprop.0+0xd8>)
    6678:	2302      	movs	r3, #2
    667a:	aa04      	add	r2, sp, #16
    667c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6680:	9304      	str	r3, [sp, #16]
    6682:	f00c fadf 	bl	12c44 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6686:	4a07      	ldr	r2, [pc, #28]	; (66a4 <usage_fault.constprop.0+0xdc>)
    6688:	6a93      	ldr	r3, [r2, #40]	; 0x28
    668a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    668e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    6692:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6694:	6293      	str	r3, [r2, #40]	; 0x28
}
    6696:	b006      	add	sp, #24
    6698:	bd10      	pop	{r4, pc}
    669a:	bf00      	nop
    669c:	00014dc7 	.word	0x00014dc7
    66a0:	00014410 	.word	0x00014410
    66a4:	e000ed00 	.word	0xe000ed00
    66a8:	00014ddf 	.word	0x00014ddf
    66ac:	00014df2 	.word	0x00014df2
    66b0:	00014e0c 	.word	0x00014e0c
    66b4:	00014e2a 	.word	0x00014e2a
    66b8:	00014e4f 	.word	0x00014e4f
    66bc:	00014e69 	.word	0x00014e69

000066c0 <mem_manage_fault>:
{
    66c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66c4:	b086      	sub	sp, #24
    66c6:	4680      	mov	r8, r0
    66c8:	af00      	add	r7, sp, #0
    66ca:	460c      	mov	r4, r1
    66cc:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    66ce:	4b4f      	ldr	r3, [pc, #316]	; (680c <mem_manage_fault+0x14c>)
    66d0:	617b      	str	r3, [r7, #20]
    66d2:	2602      	movs	r6, #2
    66d4:	484e      	ldr	r0, [pc, #312]	; (6810 <mem_manage_fault+0x150>)
    66d6:	613e      	str	r6, [r7, #16]
    66d8:	f107 0210 	add.w	r2, r7, #16
    66dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    66e0:	f00c fab0 	bl	12c44 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    66e4:	4b4b      	ldr	r3, [pc, #300]	; (6814 <mem_manage_fault+0x154>)
    66e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66e8:	06db      	lsls	r3, r3, #27
    66ea:	d509      	bpl.n	6700 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    66ec:	4b4a      	ldr	r3, [pc, #296]	; (6818 <mem_manage_fault+0x158>)
    66ee:	4848      	ldr	r0, [pc, #288]	; (6810 <mem_manage_fault+0x150>)
    66f0:	e9c7 6304 	strd	r6, r3, [r7, #16]
    66f4:	f107 0210 	add.w	r2, r7, #16
    66f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    66fc:	f00c faa2 	bl	12c44 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6700:	4b44      	ldr	r3, [pc, #272]	; (6814 <mem_manage_fault+0x154>)
    6702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6704:	0718      	lsls	r0, r3, #28
    6706:	d50a      	bpl.n	671e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    6708:	4b44      	ldr	r3, [pc, #272]	; (681c <mem_manage_fault+0x15c>)
    670a:	617b      	str	r3, [r7, #20]
    670c:	2302      	movs	r3, #2
    670e:	4840      	ldr	r0, [pc, #256]	; (6810 <mem_manage_fault+0x150>)
    6710:	613b      	str	r3, [r7, #16]
    6712:	f107 0210 	add.w	r2, r7, #16
    6716:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    671a:	f00c fa93 	bl	12c44 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    671e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 6814 <mem_manage_fault+0x154>
    6722:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    6726:	0799      	lsls	r1, r3, #30
    6728:	d439      	bmi.n	679e <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
    672a:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    672e:	4b39      	ldr	r3, [pc, #228]	; (6814 <mem_manage_fault+0x154>)
    6730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6732:	07db      	lsls	r3, r3, #31
    6734:	d50a      	bpl.n	674c <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    6736:	4b3a      	ldr	r3, [pc, #232]	; (6820 <mem_manage_fault+0x160>)
    6738:	617b      	str	r3, [r7, #20]
    673a:	2302      	movs	r3, #2
    673c:	4834      	ldr	r0, [pc, #208]	; (6810 <mem_manage_fault+0x150>)
    673e:	613b      	str	r3, [r7, #16]
    6740:	f107 0210 	add.w	r2, r7, #16
    6744:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6748:	f00c fa7c 	bl	12c44 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    674c:	4b31      	ldr	r3, [pc, #196]	; (6814 <mem_manage_fault+0x154>)
    674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6750:	069c      	lsls	r4, r3, #26
    6752:	d50a      	bpl.n	676a <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    6754:	4b33      	ldr	r3, [pc, #204]	; (6824 <mem_manage_fault+0x164>)
    6756:	617b      	str	r3, [r7, #20]
    6758:	2302      	movs	r3, #2
    675a:	482d      	ldr	r0, [pc, #180]	; (6810 <mem_manage_fault+0x150>)
    675c:	613b      	str	r3, [r7, #16]
    675e:	f107 0210 	add.w	r2, r7, #16
    6762:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6766:	f00c fa6d 	bl	12c44 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    676a:	4c2a      	ldr	r4, [pc, #168]	; (6814 <mem_manage_fault+0x154>)
    676c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    676e:	06d8      	lsls	r0, r3, #27
    6770:	d43e      	bmi.n	67f0 <mem_manage_fault+0x130>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6774:	0799      	lsls	r1, r3, #30
    6776:	d43b      	bmi.n	67f0 <mem_manage_fault+0x130>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6778:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    677a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    677c:	4a25      	ldr	r2, [pc, #148]	; (6814 <mem_manage_fault+0x154>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    677e:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    6780:	bf42      	ittt	mi
    6782:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    6784:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    6788:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    678a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    678c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6790:	6293      	str	r3, [r2, #40]	; 0x28
}
    6792:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    6794:	2300      	movs	r3, #0
    6796:	702b      	strb	r3, [r5, #0]
}
    6798:	46bd      	mov	sp, r7
    679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    679e:	46e9      	mov	r9, sp
    67a0:	4b21      	ldr	r3, [pc, #132]	; (6828 <mem_manage_fault+0x168>)
    67a2:	617b      	str	r3, [r7, #20]
    67a4:	2302      	movs	r3, #2
    67a6:	613b      	str	r3, [r7, #16]
    67a8:	f107 0210 	add.w	r2, r7, #16
    67ac:	4818      	ldr	r0, [pc, #96]	; (6810 <mem_manage_fault+0x150>)
    67ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67b2:	f00c fa47 	bl	12c44 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    67b6:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    67ba:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    67be:	061a      	lsls	r2, r3, #24
    67c0:	d5b3      	bpl.n	672a <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    67c2:	b088      	sub	sp, #32
    67c4:	466a      	mov	r2, sp
    67c6:	4b19      	ldr	r3, [pc, #100]	; (682c <mem_manage_fault+0x16c>)
    67c8:	4811      	ldr	r0, [pc, #68]	; (6810 <mem_manage_fault+0x150>)
    67ca:	e9c2 3605 	strd	r3, r6, [r2, #20]
    67ce:	2303      	movs	r3, #3
    67d0:	f842 3f10 	str.w	r3, [r2, #16]!
    67d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    67d8:	f00c fa34 	bl	12c44 <z_log_msg_static_create.constprop.0>
    67dc:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    67de:	2c00      	cmp	r4, #0
    67e0:	d0a5      	beq.n	672e <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    67e2:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    67e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    67ea:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    67ee:	e79e      	b.n	672e <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    67f0:	6863      	ldr	r3, [r4, #4]
    67f2:	051a      	lsls	r2, r3, #20
    67f4:	d5c0      	bpl.n	6778 <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    67f6:	4641      	mov	r1, r8
    67f8:	4630      	mov	r0, r6
    67fa:	f7ff fdf3 	bl	63e4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    67fe:	2800      	cmp	r0, #0
    6800:	d0ba      	beq.n	6778 <mem_manage_fault+0xb8>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6802:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6806:	2002      	movs	r0, #2
    6808:	e7b7      	b.n	677a <mem_manage_fault+0xba>
    680a:	bf00      	nop
    680c:	00014e94 	.word	0x00014e94
    6810:	00014410 	.word	0x00014410
    6814:	e000ed00 	.word	0xe000ed00
    6818:	00014eaa 	.word	0x00014eaa
    681c:	00014d24 	.word	0x00014d24
    6820:	00014f0b 	.word	0x00014f0b
    6824:	00014d98 	.word	0x00014d98
    6828:	00014edd 	.word	0x00014edd
    682c:	00014ef5 	.word	0x00014ef5

00006830 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6834:	4b77      	ldr	r3, [pc, #476]	; (6a14 <z_arm_fault+0x1e4>)
{
    6836:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6838:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    683c:	af00      	add	r7, sp, #0
    683e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6840:	f3c8 0408 	ubfx	r4, r8, #0, #9
    6844:	2600      	movs	r6, #0
    6846:	f386 8811 	msr	BASEPRI, r6
    684a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    684e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6852:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6856:	d10e      	bne.n	6876 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6858:	f002 030c 	and.w	r3, r2, #12
    685c:	2b08      	cmp	r3, #8
    685e:	d119      	bne.n	6894 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6860:	4b6d      	ldr	r3, [pc, #436]	; (6a18 <z_arm_fault+0x1e8>)
    6862:	61fb      	str	r3, [r7, #28]
    6864:	2302      	movs	r3, #2
    6866:	486d      	ldr	r0, [pc, #436]	; (6a1c <z_arm_fault+0x1ec>)
    6868:	61bb      	str	r3, [r7, #24]
    686a:	f107 0218 	add.w	r2, r7, #24
    686e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6872:	f00c f9e7 	bl	12c44 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    6876:	2600      	movs	r6, #0
		return NULL;
    6878:	4635      	mov	r5, r6
	*recoverable = false;
    687a:	2300      	movs	r3, #0
    687c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    687e:	1ee3      	subs	r3, r4, #3
    6880:	2b09      	cmp	r3, #9
    6882:	f200 80a6 	bhi.w	69d2 <z_arm_fault+0x1a2>
    6886:	e8df f003 	tbb	[pc, r3]
    688a:	990a      	.short	0x990a
    688c:	a4a4959c 	.word	0xa4a4959c
    6890:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6894:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    6896:	bf4c      	ite	mi
    6898:	460d      	movmi	r5, r1
			*nested_exc = true;
    689a:	2601      	movpl	r6, #1
    689c:	e7ed      	b.n	687a <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    689e:	46e9      	mov	r9, sp
    68a0:	4b5f      	ldr	r3, [pc, #380]	; (6a20 <z_arm_fault+0x1f0>)
    68a2:	61fb      	str	r3, [r7, #28]
    68a4:	f04f 0802 	mov.w	r8, #2
    68a8:	f107 0218 	add.w	r2, r7, #24
    68ac:	485b      	ldr	r0, [pc, #364]	; (6a1c <z_arm_fault+0x1ec>)
    68ae:	f8c7 8018 	str.w	r8, [r7, #24]
    68b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68b6:	f00c f9c5 	bl	12c44 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    68ba:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    68bc:	4c55      	ldr	r4, [pc, #340]	; (6a14 <z_arm_fault+0x1e4>)
	*recoverable = false;
    68be:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    68c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    68c2:	079a      	lsls	r2, r3, #30
    68c4:	d50b      	bpl.n	68de <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    68c6:	4b57      	ldr	r3, [pc, #348]	; (6a24 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    68c8:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    68cc:	4853      	ldr	r0, [pc, #332]	; (6a1c <z_arm_fault+0x1ec>)
    68ce:	f107 0218 	add.w	r2, r7, #24
    68d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68d6:	f00c f9b5 	bl	12c44 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    68da:	2400      	movs	r4, #0
    68dc:	e041      	b.n	6962 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    68de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    68e0:	2b00      	cmp	r3, #0
    68e2:	da01      	bge.n	68e8 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    68e4:	4b50      	ldr	r3, [pc, #320]	; (6a28 <z_arm_fault+0x1f8>)
    68e6:	e7ef      	b.n	68c8 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    68e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    68ea:	005b      	lsls	r3, r3, #1
    68ec:	d5f5      	bpl.n	68da <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    68ee:	4b4f      	ldr	r3, [pc, #316]	; (6a2c <z_arm_fault+0x1fc>)
    68f0:	484a      	ldr	r0, [pc, #296]	; (6a1c <z_arm_fault+0x1ec>)
    68f2:	e9c7 8306 	strd	r8, r3, [r7, #24]
    68f6:	f107 0218 	add.w	r2, r7, #24
    68fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    68fe:	f00c f9a1 	bl	12c44 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    6902:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6904:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    6906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    690a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    690c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6910:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    6914:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    6916:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    691a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    691e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    6920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6924:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    6928:	f64d 7302 	movw	r3, #57090	; 0xdf02
    692c:	429a      	cmp	r2, r3
    692e:	d008      	beq.n	6942 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    6930:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6932:	b2db      	uxtb	r3, r3
    6934:	b38b      	cbz	r3, 699a <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    6936:	1dfa      	adds	r2, r7, #7
    6938:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    693a:	4628      	mov	r0, r5
    693c:	f7ff fec0 	bl	66c0 <mem_manage_fault>
    6940:	e03a      	b.n	69b8 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6942:	b088      	sub	sp, #32
    6944:	682b      	ldr	r3, [r5, #0]
    6946:	466a      	mov	r2, sp
    6948:	4939      	ldr	r1, [pc, #228]	; (6a30 <z_arm_fault+0x200>)
    694a:	4834      	ldr	r0, [pc, #208]	; (6a1c <z_arm_fault+0x1ec>)
    694c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6950:	2303      	movs	r3, #3
    6952:	f842 3f10 	str.w	r3, [r2, #16]!
    6956:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    695a:	f00c f973 	bl	12c44 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    695e:	682c      	ldr	r4, [r5, #0]
    6960:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6962:	79fb      	ldrb	r3, [r7, #7]
    6964:	b9ab      	cbnz	r3, 6992 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6966:	2220      	movs	r2, #32
    6968:	4629      	mov	r1, r5
    696a:	f107 0008 	add.w	r0, r7, #8
    696e:	f00c f9ad 	bl	12ccc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6974:	2e00      	cmp	r6, #0
    6976:	d047      	beq.n	6a08 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6978:	f3c3 0208 	ubfx	r2, r3, #0, #9
    697c:	b922      	cbnz	r2, 6988 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    697e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6982:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6986:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6988:	f107 0108 	add.w	r1, r7, #8
    698c:	4620      	mov	r0, r4
    698e:	f7ff fbdb 	bl	6148 <z_arm_fatal_error>
}
    6992:	372c      	adds	r7, #44	; 0x2c
    6994:	46bd      	mov	sp, r7
    6996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    699a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    699c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    69a0:	d004      	beq.n	69ac <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    69a2:	1df9      	adds	r1, r7, #7
    69a4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    69a6:	f7ff fd77 	bl	6498 <bus_fault.constprop.0>
    69aa:	e005      	b.n	69b8 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    69ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    69ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    69b2:	d392      	bcc.n	68da <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    69b4:	f7ff fe08 	bl	65c8 <usage_fault.constprop.0>
    69b8:	4604      	mov	r4, r0
    69ba:	e7d2      	b.n	6962 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    69bc:	1dfa      	adds	r2, r7, #7
    69be:	2100      	movs	r1, #0
    69c0:	e7bb      	b.n	693a <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    69c2:	1df9      	adds	r1, r7, #7
    69c4:	2000      	movs	r0, #0
    69c6:	e7ee      	b.n	69a6 <z_arm_fault+0x176>
	PR_FAULT_INFO(
    69c8:	4b1a      	ldr	r3, [pc, #104]	; (6a34 <z_arm_fault+0x204>)
    69ca:	61fb      	str	r3, [r7, #28]
    69cc:	2302      	movs	r3, #2
    69ce:	61bb      	str	r3, [r7, #24]
    69d0:	e77c      	b.n	68cc <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    69d2:	4a19      	ldr	r2, [pc, #100]	; (6a38 <z_arm_fault+0x208>)
    69d4:	4b19      	ldr	r3, [pc, #100]	; (6a3c <z_arm_fault+0x20c>)
    69d6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    69da:	46e8      	mov	r8, sp
    69dc:	b08a      	sub	sp, #40	; 0x28
    69de:	bf18      	it	ne
    69e0:	4613      	movne	r3, r2
    69e2:	466a      	mov	r2, sp
    69e4:	4916      	ldr	r1, [pc, #88]	; (6a40 <z_arm_fault+0x210>)
    69e6:	480d      	ldr	r0, [pc, #52]	; (6a1c <z_arm_fault+0x1ec>)
    69e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    69ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    69f0:	8413      	strh	r3, [r2, #32]
    69f2:	3c10      	subs	r4, #16
    69f4:	4b13      	ldr	r3, [pc, #76]	; (6a44 <z_arm_fault+0x214>)
    69f6:	61d4      	str	r4, [r2, #28]
    69f8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    69fc:	f842 3f10 	str.w	r3, [r2, #16]!
    6a00:	f00c f920 	bl	12c44 <z_log_msg_static_create.constprop.0>
    6a04:	46c5      	mov	sp, r8
}
    6a06:	e768      	b.n	68da <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6a08:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6a0c:	f023 0301 	bic.w	r3, r3, #1
    6a10:	e7b9      	b.n	6986 <z_arm_fault+0x156>
    6a12:	bf00      	nop
    6a14:	e000ed00 	.word	0xe000ed00
    6a18:	00014f58 	.word	0x00014f58
    6a1c:	00014410 	.word	0x00014410
    6a20:	00014f83 	.word	0x00014f83
    6a24:	00014f9a 	.word	0x00014f9a
    6a28:	00014fbb 	.word	0x00014fbb
    6a2c:	00014fc9 	.word	0x00014fc9
    6a30:	00014fe8 	.word	0x00014fe8
    6a34:	00015004 	.word	0x00015004
    6a38:	00014f3f 	.word	0x00014f3f
    6a3c:	00014f2a 	.word	0x00014f2a
    6a40:	00015028 	.word	0x00015028
    6a44:	01000004 	.word	0x01000004

00006a48 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6a48:	4a02      	ldr	r2, [pc, #8]	; (6a54 <z_arm_fault_init+0xc>)
    6a4a:	6953      	ldr	r3, [r2, #20]
    6a4c:	f043 0310 	orr.w	r3, r3, #16
    6a50:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    6a52:	4770      	bx	lr
    6a54:	e000ed00 	.word	0xe000ed00

00006a58 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6a58:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6a5c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6a60:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6a62:	4672      	mov	r2, lr
	bl z_arm_fault
    6a64:	f7ff fee4 	bl	6830 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6a68:	bd01      	pop	{r0, pc}
    6a6a:	bf00      	nop

00006a6c <z_arm_interrupt_init>:
    6a6c:	4804      	ldr	r0, [pc, #16]	; (6a80 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6a6e:	2300      	movs	r3, #0
    6a70:	2140      	movs	r1, #64	; 0x40
    6a72:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6a74:	3301      	adds	r3, #1
    6a76:	2b30      	cmp	r3, #48	; 0x30
    6a78:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6a7c:	d1f9      	bne.n	6a72 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6a7e:	4770      	bx	lr
    6a80:	e000e100 	.word	0xe000e100

00006a84 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    6a84:	2000      	movs	r0, #0
    msr CONTROL, r0
    6a86:	f380 8814 	msr	CONTROL, r0
    isb
    6a8a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    6a8e:	f7fe fb7f 	bl	5190 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6a92:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6a94:	490d      	ldr	r1, [pc, #52]	; (6acc <__start+0x48>)
    str r0, [r1]
    6a96:	6008      	str	r0, [r1, #0]
    dsb
    6a98:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6a9c:	480c      	ldr	r0, [pc, #48]	; (6ad0 <__start+0x4c>)
    msr msp, r0
    6a9e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6aa2:	f000 f82b 	bl	6afc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6aa6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    6aa8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6aac:	4809      	ldr	r0, [pc, #36]	; (6ad4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6aae:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    6ab2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6ab4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6ab8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6abc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6abe:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6ac0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6ac4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6ac8:	f7ff fc00 	bl	62cc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6acc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6ad0:	20005580 	.word	0x20005580
    ldr r0, =z_interrupt_stacks
    6ad4:	200043c0 	.word	0x200043c0

00006ad8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6ad8:	4907      	ldr	r1, [pc, #28]	; (6af8 <z_arm_clear_arm_mpu_config+0x20>)
    6ada:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    6ade:	2300      	movs	r3, #0
	int num_regions =
    6ae0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    6ae4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    6ae6:	4293      	cmp	r3, r2
    6ae8:	db00      	blt.n	6aec <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    6aea:	4770      	bx	lr
  MPU->RNR = rnr;
    6aec:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    6af0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    6af4:	3301      	adds	r3, #1
    6af6:	e7f6      	b.n	6ae6 <z_arm_clear_arm_mpu_config+0xe>
    6af8:	e000ed00 	.word	0xe000ed00

00006afc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6afc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6afe:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6b00:	2300      	movs	r3, #0
    6b02:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6b06:	f7ff ffe7 	bl	6ad8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    6b0a:	4b14      	ldr	r3, [pc, #80]	; (6b5c <z_arm_init_arch_hw_at_boot+0x60>)
    6b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    6b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    6b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    6b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    6b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    6b24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    6b28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    6b2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6b30:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6b34:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    6b38:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    6b3c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    6b40:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    6b44:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    6b48:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    6b4c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    6b50:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    6b52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b56:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6b5a:	bd08      	pop	{r3, pc}
    6b5c:	e000e100 	.word	0xe000e100

00006b60 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6b60:	4b08      	ldr	r3, [pc, #32]	; (6b84 <z_impl_k_thread_abort+0x24>)
    6b62:	689b      	ldr	r3, [r3, #8]
    6b64:	4283      	cmp	r3, r0
    6b66:	d10b      	bne.n	6b80 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6b68:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6b6c:	b143      	cbz	r3, 6b80 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6b6e:	4b06      	ldr	r3, [pc, #24]	; (6b88 <z_impl_k_thread_abort+0x28>)
    6b70:	685a      	ldr	r2, [r3, #4]
    6b72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6b76:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    6b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    6b7e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    6b80:	f007 bd72 	b.w	e668 <z_thread_abort>
    6b84:	200022b8 	.word	0x200022b8
    6b88:	e000ed00 	.word	0xe000ed00

00006b8c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6b8c:	4b02      	ldr	r3, [pc, #8]	; (6b98 <z_arm_configure_static_mpu_regions+0xc>)
    6b8e:	4a03      	ldr	r2, [pc, #12]	; (6b9c <z_arm_configure_static_mpu_regions+0x10>)
    6b90:	4803      	ldr	r0, [pc, #12]	; (6ba0 <z_arm_configure_static_mpu_regions+0x14>)
    6b92:	2101      	movs	r1, #1
    6b94:	f000 b892 	b.w	6cbc <arm_core_mpu_configure_static_mpu_regions>
    6b98:	20040000 	.word	0x20040000
    6b9c:	20000000 	.word	0x20000000
    6ba0:	00014560 	.word	0x00014560

00006ba4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6ba4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    6ba8:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    6baa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6bac:	4a04      	ldr	r2, [pc, #16]	; (6bc0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6bae:	2140      	movs	r1, #64	; 0x40
    6bb0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6bb4:	4618      	mov	r0, r3
    6bb6:	2101      	movs	r1, #1
    6bb8:	f000 b88a 	b.w	6cd0 <arm_core_mpu_configure_dynamic_mpu_regions>
    6bbc:	20001d60 	.word	0x20001d60
    6bc0:	150b0000 	.word	0x150b0000

00006bc4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6bc8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 6c80 <mpu_configure_regions+0xbc>
    6bcc:	469c      	mov	ip, r3
    6bce:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    6bd0:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    6bd2:	2300      	movs	r3, #0
    6bd4:	428b      	cmp	r3, r1
    6bd6:	da1a      	bge.n	6c0e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    6bd8:	6844      	ldr	r4, [r0, #4]
    6bda:	2c00      	cmp	r4, #0
    6bdc:	d04d      	beq.n	6c7a <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6bde:	f1bc 0f00 	cmp.w	ip, #0
    6be2:	d01d      	beq.n	6c20 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6be4:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6be6:	4234      	tst	r4, r6
    6be8:	d015      	beq.n	6c16 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6bea:	466c      	mov	r4, sp
    6bec:	b088      	sub	sp, #32
    6bee:	466a      	mov	r2, sp
    6bf0:	4924      	ldr	r1, [pc, #144]	; (6c84 <mpu_configure_regions+0xc0>)
    6bf2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6bf6:	2303      	movs	r3, #3
    6bf8:	f842 3f10 	str.w	r3, [r2, #16]!
    6bfc:	4822      	ldr	r0, [pc, #136]	; (6c88 <mpu_configure_regions+0xc4>)
    6bfe:	2300      	movs	r3, #0
    6c00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6c04:	f7fe fd58 	bl	56b8 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    6c08:	f06f 0515 	mvn.w	r5, #21
    6c0c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6c0e:	4628      	mov	r0, r5
    6c10:	46bd      	mov	sp, r7
    6c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    6c16:	2c1f      	cmp	r4, #31
    6c18:	d9e7      	bls.n	6bea <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    6c1a:	6802      	ldr	r2, [r0, #0]
		&&
    6c1c:	4216      	tst	r6, r2
    6c1e:	d1e4      	bne.n	6bea <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6c20:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    6c22:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6c24:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6c26:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    6c2a:	d914      	bls.n	6c56 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    6c2c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6c30:	d813      	bhi.n	6c5a <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6c32:	3c01      	subs	r4, #1
    6c34:	fab4 f484 	clz	r4, r4
    6c38:	f1c4 041f 	rsb	r4, r4, #31
    6c3c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6c3e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6c42:	ea46 0604 	orr.w	r6, r6, r4
    6c46:	d90a      	bls.n	6c5e <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6c48:	466c      	mov	r4, sp
    6c4a:	b088      	sub	sp, #32
    6c4c:	466a      	mov	r2, sp
    6c4e:	4b0f      	ldr	r3, [pc, #60]	; (6c8c <mpu_configure_regions+0xc8>)
    6c50:	e9c2 3505 	strd	r3, r5, [r2, #20]
    6c54:	e7cf      	b.n	6bf6 <mpu_configure_regions+0x32>
		return REGION_32B;
    6c56:	2408      	movs	r4, #8
    6c58:	e7f1      	b.n	6c3e <mpu_configure_regions+0x7a>
		return REGION_4G;
    6c5a:	243e      	movs	r4, #62	; 0x3e
    6c5c:	e7ef      	b.n	6c3e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6c5e:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6c62:	432a      	orrs	r2, r5
    6c64:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6c68:	f046 0601 	orr.w	r6, r6, #1
    6c6c:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6c70:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    6c74:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6c76:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    6c7a:	3301      	adds	r3, #1
    6c7c:	300c      	adds	r0, #12
    6c7e:	e7a9      	b.n	6bd4 <mpu_configure_regions+0x10>
    6c80:	e000ed00 	.word	0xe000ed00
    6c84:	0001503f 	.word	0x0001503f
    6c88:	00014400 	.word	0x00014400
    6c8c:	00015062 	.word	0x00015062

00006c90 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6c90:	4b04      	ldr	r3, [pc, #16]	; (6ca4 <arm_core_mpu_enable+0x14>)
    6c92:	2205      	movs	r2, #5
    6c94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c9c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6ca0:	4770      	bx	lr
    6ca2:	bf00      	nop
    6ca4:	e000ed00 	.word	0xe000ed00

00006ca8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6ca8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6cac:	4b02      	ldr	r3, [pc, #8]	; (6cb8 <arm_core_mpu_disable+0x10>)
    6cae:	2200      	movs	r2, #0
    6cb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6cb4:	4770      	bx	lr
    6cb6:	bf00      	nop
    6cb8:	e000ed00 	.word	0xe000ed00

00006cbc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6cbc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6cbe:	4c03      	ldr	r4, [pc, #12]	; (6ccc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6cc0:	2301      	movs	r3, #1
    6cc2:	7822      	ldrb	r2, [r4, #0]
    6cc4:	f7ff ff7e 	bl	6bc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6cc8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6cca:	bd10      	pop	{r4, pc}
    6ccc:	20002eaf 	.word	0x20002eaf

00006cd0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    6cd0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6cd2:	4a09      	ldr	r2, [pc, #36]	; (6cf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    6cd4:	2300      	movs	r3, #0
    6cd6:	7812      	ldrb	r2, [r2, #0]
    6cd8:	f7ff ff74 	bl	6bc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6cdc:	f110 0f16 	cmn.w	r0, #22
    6ce0:	d003      	beq.n	6cea <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    6ce2:	4b06      	ldr	r3, [pc, #24]	; (6cfc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    6ce4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6ce6:	2807      	cmp	r0, #7
    6ce8:	dd00      	ble.n	6cec <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6cea:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    6cec:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    6cf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    6cf4:	3001      	adds	r0, #1
    6cf6:	e7f6      	b.n	6ce6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    6cf8:	20002eaf 	.word	0x20002eaf
    6cfc:	e000ed00 	.word	0xe000ed00

00006d00 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6d00:	4914      	ldr	r1, [pc, #80]	; (6d54 <z_arm_mpu_init+0x54>)
    6d02:	6808      	ldr	r0, [r1, #0]
    6d04:	2808      	cmp	r0, #8
{
    6d06:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6d08:	d821      	bhi.n	6d4e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6d0a:	f7ff ffcd 	bl	6ca8 <arm_core_mpu_disable>
    6d0e:	4c12      	ldr	r4, [pc, #72]	; (6d58 <z_arm_mpu_init+0x58>)
    6d10:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6d12:	2200      	movs	r2, #0
    6d14:	4290      	cmp	r0, r2
    6d16:	f101 010c 	add.w	r1, r1, #12
    6d1a:	d105      	bne.n	6d28 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6d1c:	4b0f      	ldr	r3, [pc, #60]	; (6d5c <z_arm_mpu_init+0x5c>)
    6d1e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6d20:	f7ff ffb6 	bl	6c90 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6d24:	2000      	movs	r0, #0
}
    6d26:	bd10      	pop	{r4, pc}
    6d28:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d2c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6d30:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6d34:	4313      	orrs	r3, r2
    6d36:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d3a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6d42:	f043 0301 	orr.w	r3, r3, #1
    6d46:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6d4a:	3201      	adds	r2, #1
    6d4c:	e7e2      	b.n	6d14 <z_arm_mpu_init+0x14>
		return -1;
    6d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d52:	e7e8      	b.n	6d26 <z_arm_mpu_init+0x26>
    6d54:	0001456c 	.word	0x0001456c
    6d58:	e000ed00 	.word	0xe000ed00
    6d5c:	20002eaf 	.word	0x20002eaf

00006d60 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    6d60:	4b01      	ldr	r3, [pc, #4]	; (6d68 <__stdout_hook_install+0x8>)
    6d62:	6018      	str	r0, [r3, #0]
}
    6d64:	4770      	bx	lr
    6d66:	bf00      	nop
    6d68:	200000b0 	.word	0x200000b0

00006d6c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    6d6c:	b510      	push	{r4, lr}
	__asm__ volatile(
    6d6e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6d72:	f3ef 8011 	mrs	r0, BASEPRI
    6d76:	f383 8812 	msr	BASEPRI_MAX, r3
    6d7a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6d7e:	4a11      	ldr	r2, [pc, #68]	; (6dc4 <nordicsemi_nrf52_init+0x58>)
    6d80:	2301      	movs	r3, #1
    6d82:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6d8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    6d8e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6d92:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    6d96:	2c08      	cmp	r4, #8
    6d98:	d108      	bne.n	6dac <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6d9a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    6d9e:	2905      	cmp	r1, #5
    6da0:	d804      	bhi.n	6dac <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    6da2:	4c09      	ldr	r4, [pc, #36]	; (6dc8 <nordicsemi_nrf52_init+0x5c>)
    6da4:	5c61      	ldrb	r1, [r4, r1]
    6da6:	b109      	cbz	r1, 6dac <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6da8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6db0:	2201      	movs	r2, #1
    6db2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    6db6:	f380 8811 	msr	BASEPRI, r0
    6dba:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6dbe:	2000      	movs	r0, #0
    6dc0:	bd10      	pop	{r4, pc}
    6dc2:	bf00      	nop
    6dc4:	4001e000 	.word	0x4001e000
    6dc8:	00015097 	.word	0x00015097

00006dcc <sys_arch_reboot>:
    *p_gpregret = val;
    6dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dd0:	b2c0      	uxtb	r0, r0
    6dd2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6dd6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6dda:	4905      	ldr	r1, [pc, #20]	; (6df0 <sys_arch_reboot+0x24>)
    6ddc:	4b05      	ldr	r3, [pc, #20]	; (6df4 <sys_arch_reboot+0x28>)
    6dde:	68ca      	ldr	r2, [r1, #12]
    6de0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6de4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6de6:	60cb      	str	r3, [r1, #12]
    6de8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6dec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6dee:	e7fd      	b.n	6dec <sys_arch_reboot+0x20>
    6df0:	e000ed00 	.word	0xe000ed00
    6df4:	05fa0004 	.word	0x05fa0004

00006df8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6df8:	b120      	cbz	r0, 6e04 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6dfa:	4b03      	ldr	r3, [pc, #12]	; (6e08 <arch_busy_wait+0x10>)
    6dfc:	0180      	lsls	r0, r0, #6
    6dfe:	f043 0301 	orr.w	r3, r3, #1
    6e02:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6e04:	4770      	bx	lr
    6e06:	bf00      	nop
    6e08:	00014470 	.word	0x00014470

00006e0c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6e0c:	4b08      	ldr	r3, [pc, #32]	; (6e30 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6e0e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6e10:	1ac3      	subs	r3, r0, r3
{
    6e12:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6e14:	4907      	ldr	r1, [pc, #28]	; (6e34 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    6e16:	109b      	asrs	r3, r3, #2
{
    6e18:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6e1a:	4359      	muls	r1, r3
    6e1c:	4806      	ldr	r0, [pc, #24]	; (6e38 <onoff_stop+0x2c>)
    6e1e:	2240      	movs	r2, #64	; 0x40
    6e20:	f00b ff99 	bl	12d56 <stop>
	notify(mgr, res);
    6e24:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6e26:	4601      	mov	r1, r0
	notify(mgr, res);
    6e28:	4620      	mov	r0, r4
}
    6e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6e2e:	4718      	bx	r3
    6e30:	20001d80 	.word	0x20001d80
    6e34:	b6db6db7 	.word	0xb6db6db7
    6e38:	000142d8 	.word	0x000142d8

00006e3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6e3e:	4c0c      	ldr	r4, [pc, #48]	; (6e70 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e40:	4a0c      	ldr	r2, [pc, #48]	; (6e74 <onoff_start+0x38>)
    6e42:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6e44:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e46:	9300      	str	r3, [sp, #0]
{
    6e48:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e4a:	460b      	mov	r3, r1
    6e4c:	490a      	ldr	r1, [pc, #40]	; (6e78 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    6e4e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e50:	4361      	muls	r1, r4
{
    6e52:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e54:	4809      	ldr	r0, [pc, #36]	; (6e7c <onoff_start+0x40>)
    6e56:	f00b ffaa 	bl	12dae <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6e5a:	1e01      	subs	r1, r0, #0
    6e5c:	da05      	bge.n	6e6a <onoff_start+0x2e>
		notify(mgr, err);
    6e5e:	4630      	mov	r0, r6
    6e60:	462b      	mov	r3, r5
	}
}
    6e62:	b002      	add	sp, #8
    6e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6e68:	4718      	bx	r3
}
    6e6a:	b002      	add	sp, #8
    6e6c:	bd70      	pop	{r4, r5, r6, pc}
    6e6e:	bf00      	nop
    6e70:	20001d80 	.word	0x20001d80
    6e74:	00012e19 	.word	0x00012e19
    6e78:	b6db6db7 	.word	0xb6db6db7
    6e7c:	000142d8 	.word	0x000142d8

00006e80 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e80:	2200      	movs	r2, #0
{
    6e82:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e84:	2101      	movs	r1, #1
{
    6e86:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e88:	4610      	mov	r0, r2
    6e8a:	f7ff f9f3 	bl	6274 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6e8e:	480f      	ldr	r0, [pc, #60]	; (6ecc <clk_init+0x4c>)
    6e90:	f001 f9a6 	bl	81e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6e94:	4b0e      	ldr	r3, [pc, #56]	; (6ed0 <clk_init+0x50>)
    6e96:	4298      	cmp	r0, r3
    6e98:	d115      	bne.n	6ec6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6e9a:	f00c f94a 	bl	13132 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    6e9e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6ea0:	490c      	ldr	r1, [pc, #48]	; (6ed4 <clk_init+0x54>)
    6ea2:	4630      	mov	r0, r6
    6ea4:	f00b fae9 	bl	1247a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6ea8:	2800      	cmp	r0, #0
    6eaa:	db0b      	blt.n	6ec4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6eac:	2501      	movs	r5, #1
    6eae:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    6eb0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6eb2:	4908      	ldr	r1, [pc, #32]	; (6ed4 <clk_init+0x54>)
    6eb4:	f104 001c 	add.w	r0, r4, #28
    6eb8:	f00b fadf 	bl	1247a <onoff_manager_init>
		if (err < 0) {
    6ebc:	2800      	cmp	r0, #0
    6ebe:	db01      	blt.n	6ec4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6ec0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6ec2:	2000      	movs	r0, #0
}
    6ec4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6ec6:	f06f 0004 	mvn.w	r0, #4
    6eca:	e7fb      	b.n	6ec4 <clk_init+0x44>
    6ecc:	00006f0d 	.word	0x00006f0d
    6ed0:	0bad0000 	.word	0x0bad0000
    6ed4:	0001458c 	.word	0x0001458c

00006ed8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6ed8:	b570      	push	{r4, r5, r6, lr}
    6eda:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6edc:	230c      	movs	r3, #12
    6ede:	4809      	ldr	r0, [pc, #36]	; (6f04 <clkstarted_handle.constprop.0+0x2c>)
    6ee0:	434b      	muls	r3, r1
    6ee2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6ee4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    6ee8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6eea:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6eec:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6eee:	4418      	add	r0, r3
    6ef0:	f00b ff1e 	bl	12d30 <set_on_state>
	if (callback) {
    6ef4:	b12d      	cbz	r5, 6f02 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6ef6:	4632      	mov	r2, r6
    6ef8:	462b      	mov	r3, r5
    6efa:	4803      	ldr	r0, [pc, #12]	; (6f08 <clkstarted_handle.constprop.0+0x30>)
}
    6efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6f00:	4718      	bx	r3
}
    6f02:	bd70      	pop	{r4, r5, r6, pc}
    6f04:	20001d80 	.word	0x20001d80
    6f08:	000142d8 	.word	0x000142d8

00006f0c <clock_event_handler>:
	switch (event) {
    6f0c:	b110      	cbz	r0, 6f14 <clock_event_handler+0x8>
    6f0e:	2801      	cmp	r0, #1
    6f10:	d004      	beq.n	6f1c <clock_event_handler+0x10>
    6f12:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6f14:	4b03      	ldr	r3, [pc, #12]	; (6f24 <clock_event_handler+0x18>)
    6f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6f18:	075b      	lsls	r3, r3, #29
    6f1a:	d101      	bne.n	6f20 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6f1c:	f7ff bfdc 	b.w	6ed8 <clkstarted_handle.constprop.0>
}
    6f20:	4770      	bx	lr
    6f22:	bf00      	nop
    6f24:	20001d80 	.word	0x20001d80

00006f28 <generic_hfclk_start>:
{
    6f28:	b508      	push	{r3, lr}
	__asm__ volatile(
    6f2a:	f04f 0340 	mov.w	r3, #64	; 0x40
    6f2e:	f3ef 8111 	mrs	r1, BASEPRI
    6f32:	f383 8812 	msr	BASEPRI_MAX, r3
    6f36:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6f3a:	4a12      	ldr	r2, [pc, #72]	; (6f84 <generic_hfclk_start+0x5c>)
    6f3c:	6813      	ldr	r3, [r2, #0]
    6f3e:	f043 0002 	orr.w	r0, r3, #2
    6f42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6f44:	07da      	lsls	r2, r3, #31
    6f46:	d408      	bmi.n	6f5a <generic_hfclk_start+0x32>
	__asm__ volatile(
    6f48:	f381 8811 	msr	BASEPRI, r1
    6f4c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6f50:	2001      	movs	r0, #1
}
    6f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6f56:	f001 b933 	b.w	81c0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f5e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6f62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6f66:	07d3      	lsls	r3, r2, #31
    6f68:	d5ee      	bpl.n	6f48 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    6f6a:	4807      	ldr	r0, [pc, #28]	; (6f88 <generic_hfclk_start+0x60>)
    6f6c:	f00b fee0 	bl	12d30 <set_on_state>
    6f70:	f381 8811 	msr	BASEPRI, r1
    6f74:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    6f78:	2000      	movs	r0, #0
}
    6f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    6f7e:	f7ff bfab 	b.w	6ed8 <clkstarted_handle.constprop.0>
    6f82:	bf00      	nop
    6f84:	20001dd0 	.word	0x20001dd0
    6f88:	20001dc0 	.word	0x20001dc0

00006f8c <api_blocking_start>:
{
    6f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f8e:	2200      	movs	r2, #0
    6f90:	2301      	movs	r3, #1
    6f92:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6f96:	4a09      	ldr	r2, [pc, #36]	; (6fbc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f98:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6f9c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f9e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6fa2:	f00b ff32 	bl	12e0a <api_start>
	if (err < 0) {
    6fa6:	2800      	cmp	r0, #0
    6fa8:	db05      	blt.n	6fb6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    6faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6fae:	2300      	movs	r3, #0
    6fb0:	4668      	mov	r0, sp
    6fb2:	f006 feb7 	bl	dd24 <z_impl_k_sem_take>
}
    6fb6:	b005      	add	sp, #20
    6fb8:	f85d fb04 	ldr.w	pc, [sp], #4
    6fbc:	00012e37 	.word	0x00012e37

00006fc0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6fc0:	4b09      	ldr	r3, [pc, #36]	; (6fe8 <generic_hfclk_stop+0x28>)
    6fc2:	f3bf 8f5b 	dmb	ish
    6fc6:	e853 2f00 	ldrex	r2, [r3]
    6fca:	f022 0102 	bic.w	r1, r2, #2
    6fce:	e843 1000 	strex	r0, r1, [r3]
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d1f7      	bne.n	6fc6 <generic_hfclk_stop+0x6>
    6fd6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6fda:	07d3      	lsls	r3, r2, #31
    6fdc:	d402      	bmi.n	6fe4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6fde:	2001      	movs	r0, #1
    6fe0:	f00c b8a2 	b.w	13128 <nrfx_clock_stop>
}
    6fe4:	4770      	bx	lr
    6fe6:	bf00      	nop
    6fe8:	20001dd0 	.word	0x20001dd0

00006fec <z_nrf_clock_control_get_onoff>:
}
    6fec:	4a02      	ldr	r2, [pc, #8]	; (6ff8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    6fee:	b2c3      	uxtb	r3, r0
}
    6ff0:	201c      	movs	r0, #28
    6ff2:	fb03 2000 	mla	r0, r3, r0, r2
    6ff6:	4770      	bx	lr
    6ff8:	20001d80 	.word	0x20001d80

00006ffc <z_nrf_clock_control_lf_on>:
{
    6ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7000:	4938      	ldr	r1, [pc, #224]	; (70e4 <z_nrf_clock_control_lf_on+0xe8>)
    7002:	f3bf 8f5b 	dmb	ish
    7006:	4607      	mov	r7, r0
    7008:	2201      	movs	r2, #1
    700a:	e851 3f00 	ldrex	r3, [r1]
    700e:	e841 2000 	strex	r0, r2, [r1]
    7012:	2800      	cmp	r0, #0
    7014:	d1f9      	bne.n	700a <z_nrf_clock_control_lf_on+0xe>
    7016:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    701a:	b933      	cbnz	r3, 702a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    701c:	4932      	ldr	r1, [pc, #200]	; (70e8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    701e:	4833      	ldr	r0, [pc, #204]	; (70ec <z_nrf_clock_control_lf_on+0xf0>)
    7020:	604b      	str	r3, [r1, #4]
    7022:	60cb      	str	r3, [r1, #12]
    7024:	608a      	str	r2, [r1, #8]
    7026:	f00b fa3b 	bl	124a0 <onoff_request>
	switch (start_mode) {
    702a:	1e7b      	subs	r3, r7, #1
    702c:	2b01      	cmp	r3, #1
    702e:	d82b      	bhi.n	7088 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7030:	2f01      	cmp	r7, #1
    7032:	d107      	bne.n	7044 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7038:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    703c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7040:	2b01      	cmp	r3, #1
    7042:	d021      	beq.n	7088 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7044:	f00c fd41 	bl	13aca <k_is_in_isr>
    7048:	4605      	mov	r5, r0
    704a:	b9f8      	cbnz	r0, 708c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    704c:	4b28      	ldr	r3, [pc, #160]	; (70f0 <z_nrf_clock_control_lf_on+0xf4>)
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	b1e3      	cbz	r3, 708c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    7052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7056:	2202      	movs	r2, #2
    7058:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    705c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    705e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 70f4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7062:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7066:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    706a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    706e:	03d2      	lsls	r2, r2, #15
    7070:	d516      	bpl.n	70a0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7072:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7076:	2b01      	cmp	r3, #1
    7078:	d001      	beq.n	707e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    707a:	2f01      	cmp	r7, #1
    707c:	d110      	bne.n	70a0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    707e:	b35d      	cbz	r5, 70d8 <z_nrf_clock_control_lf_on+0xdc>
    7080:	f386 8811 	msr	BASEPRI, r6
    7084:	f3bf 8f6f 	isb	sy
}
    7088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    708c:	f04f 0340 	mov.w	r3, #64	; 0x40
    7090:	f3ef 8611 	mrs	r6, BASEPRI
    7094:	f383 8812 	msr	BASEPRI_MAX, r3
    7098:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    709c:	2501      	movs	r5, #1
    709e:	e7de      	b.n	705e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    70a0:	b1ad      	cbz	r5, 70ce <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    70a2:	4630      	mov	r0, r6
    70a4:	f7ff f846 	bl	6134 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    70a8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    70ac:	2b00      	cmp	r3, #0
    70ae:	d1da      	bne.n	7066 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70b0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    70b4:	2a00      	cmp	r2, #0
    70b6:	d0d6      	beq.n	7066 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70b8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    70bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    70c0:	2301      	movs	r3, #1
    70c2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    70c6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70ca:	60a3      	str	r3, [r4, #8]
}
    70cc:	e7cb      	b.n	7066 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    70ce:	2100      	movs	r1, #0
    70d0:	2021      	movs	r0, #33	; 0x21
    70d2:	f007 faa9 	bl	e628 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    70d6:	e7e7      	b.n	70a8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    70d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70dc:	2202      	movs	r2, #2
    70de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    70e2:	e7d1      	b.n	7088 <z_nrf_clock_control_lf_on+0x8c>
    70e4:	20001d7c 	.word	0x20001d7c
    70e8:	20001d6c 	.word	0x20001d6c
    70ec:	20001d9c 	.word	0x20001d9c
    70f0:	20003c28 	.word	0x20003c28
    70f4:	e000e100 	.word	0xe000e100

000070f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    70f8:	b508      	push	{r3, lr}
    70fa:	4807      	ldr	r0, [pc, #28]	; (7118 <uart_console_init+0x20>)
    70fc:	f00c fc89 	bl	13a12 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    7100:	b138      	cbz	r0, 7112 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    7102:	4806      	ldr	r0, [pc, #24]	; (711c <uart_console_init+0x24>)
    7104:	f7ff fe2c 	bl	6d60 <__stdout_hook_install>
	__printk_hook_install(console_out);
    7108:	4804      	ldr	r0, [pc, #16]	; (711c <uart_console_init+0x24>)
    710a:	f7fd fb43 	bl	4794 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    710e:	2000      	movs	r0, #0
}
    7110:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7112:	f06f 0012 	mvn.w	r0, #18
    7116:	e7fb      	b.n	7110 <uart_console_init+0x18>
    7118:	00014368 	.word	0x00014368
    711c:	00007121 	.word	0x00007121

00007120 <console_out>:
	if ('\n' == c) {
    7120:	280a      	cmp	r0, #10
{
    7122:	b538      	push	{r3, r4, r5, lr}
    7124:	4d07      	ldr	r5, [pc, #28]	; (7144 <console_out+0x24>)
    7126:	4604      	mov	r4, r0
	if ('\n' == c) {
    7128:	d104      	bne.n	7134 <console_out+0x14>
    712a:	68ab      	ldr	r3, [r5, #8]
    712c:	210d      	movs	r1, #13
    712e:	685b      	ldr	r3, [r3, #4]
    7130:	4628      	mov	r0, r5
    7132:	4798      	blx	r3
    7134:	68ab      	ldr	r3, [r5, #8]
    7136:	4803      	ldr	r0, [pc, #12]	; (7144 <console_out+0x24>)
    7138:	685b      	ldr	r3, [r3, #4]
    713a:	b2e1      	uxtb	r1, r4
    713c:	4798      	blx	r3
}
    713e:	4620      	mov	r0, r4
    7140:	bd38      	pop	{r3, r4, r5, pc}
    7142:	bf00      	nop
    7144:	00014368 	.word	0x00014368

00007148 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    7148:	b530      	push	{r4, r5, lr}
	return port->config;
    714a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    714c:	7b05      	ldrb	r5, [r0, #12]
    714e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    7152:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    7156:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7158:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    715c:	d105      	bne.n	716a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    715e:	4620      	mov	r0, r4
    7160:	f006 f874 	bl	d24c <nrfx_gpiote_trigger_disable>

		return 0;
    7164:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    7166:	b005      	add	sp, #20
    7168:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    716a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    716c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    7170:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    7174:	d114      	bne.n	71a0 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    7176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    717a:	bf0c      	ite	eq
    717c:	2304      	moveq	r3, #4
    717e:	2305      	movne	r3, #5
    7180:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7184:	2300      	movs	r3, #0
    7186:	4619      	mov	r1, r3
    7188:	aa02      	add	r2, sp, #8
    718a:	4620      	mov	r0, r4
    718c:	f005 fe9c 	bl	cec8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7190:	4b1f      	ldr	r3, [pc, #124]	; (7210 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    7192:	4298      	cmp	r0, r3
    7194:	d139      	bne.n	720a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    7196:	2101      	movs	r1, #1
    7198:	4620      	mov	r0, r4
    719a:	f006 f80f 	bl	d1bc <nrfx_gpiote_trigger_enable>
	return 0;
    719e:	e7e1      	b.n	7164 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    71a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    71a4:	d026      	beq.n	71f4 <gpio_nrfx_pin_interrupt_configure+0xac>
    71a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    71aa:	bf14      	ite	ne
    71ac:	2301      	movne	r3, #1
    71ae:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    71b0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    71b4:	6883      	ldr	r3, [r0, #8]
    71b6:	40cb      	lsrs	r3, r1
    71b8:	07d9      	lsls	r1, r3, #31
    71ba:	d4e3      	bmi.n	7184 <gpio_nrfx_pin_interrupt_configure+0x3c>
    71bc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    71c0:	d1e0      	bne.n	7184 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    71c2:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    71c4:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    71c6:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    71ca:	4a12      	ldr	r2, [pc, #72]	; (7214 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    71cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    71d0:	bf18      	it	ne
    71d2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    71d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    71da:	07db      	lsls	r3, r3, #31
    71dc:	d4d2      	bmi.n	7184 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    71de:	f10d 0507 	add.w	r5, sp, #7
    71e2:	4629      	mov	r1, r5
    71e4:	4620      	mov	r0, r4
    71e6:	f005 ff95 	bl	d114 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    71ea:	4b0b      	ldr	r3, [pc, #44]	; (7218 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    71ec:	4298      	cmp	r0, r3
    71ee:	d003      	beq.n	71f8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    71f0:	9503      	str	r5, [sp, #12]
    71f2:	e7c7      	b.n	7184 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    71f4:	2303      	movs	r3, #3
    71f6:	e7db      	b.n	71b0 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    71f8:	4628      	mov	r0, r5
    71fa:	f005 ffd9 	bl	d1b0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    71fe:	4b04      	ldr	r3, [pc, #16]	; (7210 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    7200:	4298      	cmp	r0, r3
    7202:	d0f5      	beq.n	71f0 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    7204:	f06f 000b 	mvn.w	r0, #11
    7208:	e7ad      	b.n	7166 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    720a:	f06f 0015 	mvn.w	r0, #21
    720e:	e7aa      	b.n	7166 <gpio_nrfx_pin_interrupt_configure+0x1e>
    7210:	0bad0000 	.word	0x0bad0000
    7214:	50000300 	.word	0x50000300
    7218:	0bad0004 	.word	0x0bad0004

0000721c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    721c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    721e:	f005 ffb7 	bl	d190 <nrfx_gpiote_is_init>
    7222:	4604      	mov	r4, r0
    7224:	b968      	cbnz	r0, 7242 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    7226:	f005 ff8b 	bl	d140 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    722a:	4b08      	ldr	r3, [pc, #32]	; (724c <gpio_nrfx_init+0x30>)
    722c:	4298      	cmp	r0, r3
    722e:	d10a      	bne.n	7246 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    7230:	4807      	ldr	r0, [pc, #28]	; (7250 <gpio_nrfx_init+0x34>)
    7232:	4621      	mov	r1, r4
    7234:	f005 ff68 	bl	d108 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    7238:	4622      	mov	r2, r4
    723a:	2105      	movs	r1, #5
    723c:	2006      	movs	r0, #6
    723e:	f7ff f819 	bl	6274 <z_arm_irq_priority_set>
		return 0;
    7242:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    7244:	bd10      	pop	{r4, pc}
		return -EIO;
    7246:	f06f 0004 	mvn.w	r0, #4
    724a:	e7fb      	b.n	7244 <gpio_nrfx_init+0x28>
    724c:	0bad0000 	.word	0x0bad0000
    7250:	00007255 	.word	0x00007255

00007254 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7254:	0942      	lsrs	r2, r0, #5
{
    7256:	b570      	push	{r4, r5, r6, lr}
    7258:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    725a:	d002      	beq.n	7262 <nrfx_gpio_handler+0xe>
    725c:	2a01      	cmp	r2, #1
    725e:	d017      	beq.n	7290 <nrfx_gpio_handler+0x3c>
}
    7260:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7262:	4e0d      	ldr	r6, [pc, #52]	; (7298 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    7264:	6932      	ldr	r2, [r6, #16]
    7266:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7268:	2900      	cmp	r1, #0
    726a:	d0f9      	beq.n	7260 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    726c:	f003 031f 	and.w	r3, r3, #31
    7270:	2501      	movs	r5, #1
    7272:	680c      	ldr	r4, [r1, #0]
    7274:	409d      	lsls	r5, r3
    7276:	2900      	cmp	r1, #0
    7278:	d0f2      	beq.n	7260 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    727a:	688a      	ldr	r2, [r1, #8]
    727c:	402a      	ands	r2, r5
    727e:	d002      	beq.n	7286 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7280:	684b      	ldr	r3, [r1, #4]
    7282:	4630      	mov	r0, r6
    7284:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7286:	b12c      	cbz	r4, 7294 <nrfx_gpio_handler+0x40>
    7288:	6823      	ldr	r3, [r4, #0]
    728a:	4621      	mov	r1, r4
    728c:	461c      	mov	r4, r3
    728e:	e7f2      	b.n	7276 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7290:	4e02      	ldr	r6, [pc, #8]	; (729c <nrfx_gpio_handler+0x48>)
    7292:	e7e7      	b.n	7264 <nrfx_gpio_handler+0x10>
    7294:	4623      	mov	r3, r4
    7296:	e7f8      	b.n	728a <nrfx_gpio_handler+0x36>
    7298:	00014308 	.word	0x00014308
    729c:	000142f0 	.word	0x000142f0

000072a0 <gpio_nrfx_pin_configure>:
{
    72a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    72a4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    72a6:	7b3b      	ldrb	r3, [r7, #12]
    72a8:	f001 051f 	and.w	r5, r1, #31
    72ac:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    72b0:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    72b2:	4628      	mov	r0, r5
    72b4:	f10d 0103 	add.w	r1, sp, #3
{
    72b8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    72ba:	f005 ff2b 	bl	d114 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    72be:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    72c2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    72c4:	d10b      	bne.n	72de <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    72c6:	4628      	mov	r0, r5
    72c8:	f005 ffe8 	bl	d29c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    72cc:	4b3d      	ldr	r3, [pc, #244]	; (73c4 <gpio_nrfx_pin_configure+0x124>)
    72ce:	4598      	cmp	r8, r3
    72d0:	d103      	bne.n	72da <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    72d2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    72d6:	f005 ff65 	bl	d1a4 <nrfx_gpiote_channel_free>
		return 0;
    72da:	2000      	movs	r0, #0
    72dc:	e00c      	b.n	72f8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    72de:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    72e0:	4619      	mov	r1, r3
    72e2:	aa02      	add	r2, sp, #8
    72e4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    72e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    72ea:	f005 fded 	bl	cec8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    72ee:	4b35      	ldr	r3, [pc, #212]	; (73c4 <gpio_nrfx_pin_configure+0x124>)
    72f0:	4298      	cmp	r0, r3
    72f2:	d004      	beq.n	72fe <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    72f4:	f06f 0015 	mvn.w	r0, #21
}
    72f8:	b004      	add	sp, #16
    72fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    72fe:	4580      	cmp	r8, r0
    7300:	d103      	bne.n	730a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    7302:	f89d 0003 	ldrb.w	r0, [sp, #3]
    7306:	f005 ff4d 	bl	d1a4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    730a:	03a3      	lsls	r3, r4, #14
    730c:	d54b      	bpl.n	73a6 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    730e:	f240 3306 	movw	r3, #774	; 0x306
    7312:	4023      	ands	r3, r4
    7314:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    7318:	d019      	beq.n	734e <gpio_nrfx_pin_configure+0xae>
    731a:	d80c      	bhi.n	7336 <gpio_nrfx_pin_configure+0x96>
    731c:	2b06      	cmp	r3, #6
    731e:	d017      	beq.n	7350 <gpio_nrfx_pin_configure+0xb0>
    7320:	d804      	bhi.n	732c <gpio_nrfx_pin_configure+0x8c>
    7322:	b1ab      	cbz	r3, 7350 <gpio_nrfx_pin_configure+0xb0>
    7324:	2b02      	cmp	r3, #2
    7326:	d1e5      	bne.n	72f4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    7328:	2304      	movs	r3, #4
    732a:	e011      	b.n	7350 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    732c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    7330:	d1e0      	bne.n	72f4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    7332:	2301      	movs	r3, #1
    7334:	e00c      	b.n	7350 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    7336:	f240 2202 	movw	r2, #514	; 0x202
    733a:	4293      	cmp	r3, r2
    733c:	d027      	beq.n	738e <gpio_nrfx_pin_configure+0xee>
    733e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    7342:	d026      	beq.n	7392 <gpio_nrfx_pin_configure+0xf2>
    7344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7348:	d1d4      	bne.n	72f4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    734a:	2302      	movs	r3, #2
    734c:	e000      	b.n	7350 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    734e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    7350:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    7354:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    7358:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    735c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    735e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    7362:	bf54      	ite	pl
    7364:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    7368:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    736a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    736c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7370:	d511      	bpl.n	7396 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7372:	687a      	ldr	r2, [r7, #4]
    7374:	2301      	movs	r3, #1
    7376:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    7378:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    737c:	2200      	movs	r2, #0
    737e:	a901      	add	r1, sp, #4
    7380:	4628      	mov	r0, r5
    7382:	f005 fe4f 	bl	d024 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7386:	4b0f      	ldr	r3, [pc, #60]	; (73c4 <gpio_nrfx_pin_configure+0x124>)
    7388:	4298      	cmp	r0, r3
    738a:	d0a6      	beq.n	72da <gpio_nrfx_pin_configure+0x3a>
    738c:	e7b2      	b.n	72f4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    738e:	2305      	movs	r3, #5
    7390:	e7de      	b.n	7350 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    7392:	2303      	movs	r3, #3
    7394:	e7dc      	b.n	7350 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7396:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7398:	bf41      	itttt	mi
    739a:	2301      	movmi	r3, #1
    739c:	687a      	ldrmi	r2, [r7, #4]
    739e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    73a0:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    73a4:	e7ea      	b.n	737c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    73a6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    73a8:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    73ac:	bf54      	ite	pl
    73ae:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    73b2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    73b4:	461a      	mov	r2, r3
    73b6:	a901      	add	r1, sp, #4
    73b8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    73ba:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    73be:	f005 fd83 	bl	cec8 <nrfx_gpiote_input_configure>
    73c2:	e7e0      	b.n	7386 <gpio_nrfx_pin_configure+0xe6>
    73c4:	0bad0000 	.word	0x0bad0000

000073c8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    73c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    73ca:	794b      	ldrb	r3, [r1, #5]
    73cc:	2b01      	cmp	r3, #1
    73ce:	d026      	beq.n	741e <uarte_nrfx_configure+0x56>
    73d0:	2b03      	cmp	r3, #3
    73d2:	d121      	bne.n	7418 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    73d4:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    73d6:	798b      	ldrb	r3, [r1, #6]
    73d8:	2b03      	cmp	r3, #3
    73da:	d11d      	bne.n	7418 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    73dc:	79ce      	ldrb	r6, [r1, #7]
    73de:	b10e      	cbz	r6, 73e4 <uarte_nrfx_configure+0x1c>
    73e0:	2e01      	cmp	r6, #1
    73e2:	d119      	bne.n	7418 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    73e4:	790a      	ldrb	r2, [r1, #4]
    73e6:	b112      	cbz	r2, 73ee <uarte_nrfx_configure+0x26>
    73e8:	2a02      	cmp	r2, #2
    73ea:	d115      	bne.n	7418 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    73ec:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    73ee:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    73f0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    73f2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    73f6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    73f8:	d067      	beq.n	74ca <uarte_nrfx_configure+0x102>
    73fa:	d82d      	bhi.n	7458 <uarte_nrfx_configure+0x90>
    73fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    7400:	d066      	beq.n	74d0 <uarte_nrfx_configure+0x108>
    7402:	d816      	bhi.n	7432 <uarte_nrfx_configure+0x6a>
    7404:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7408:	d064      	beq.n	74d4 <uarte_nrfx_configure+0x10c>
    740a:	d80a      	bhi.n	7422 <uarte_nrfx_configure+0x5a>
    740c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7410:	d063      	beq.n	74da <uarte_nrfx_configure+0x112>
    7412:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    7416:	d063      	beq.n	74e0 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    7418:	f06f 0085 	mvn.w	r0, #133	; 0x85
    741c:	e054      	b.n	74c8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    741e:	2500      	movs	r5, #0
    7420:	e7d9      	b.n	73d6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    7422:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    7426:	d05e      	beq.n	74e6 <uarte_nrfx_configure+0x11e>
    7428:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    742c:	d1f4      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    742e:	4b38      	ldr	r3, [pc, #224]	; (7510 <uarte_nrfx_configure+0x148>)
    7430:	e03c      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7432:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    7436:	d059      	beq.n	74ec <uarte_nrfx_configure+0x124>
    7438:	d807      	bhi.n	744a <uarte_nrfx_configure+0x82>
    743a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    743e:	d057      	beq.n	74f0 <uarte_nrfx_configure+0x128>
    7440:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    7444:	d1e8      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7446:	4b33      	ldr	r3, [pc, #204]	; (7514 <uarte_nrfx_configure+0x14c>)
    7448:	e030      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    744a:	f647 2412 	movw	r4, #31250	; 0x7a12
    744e:	42a3      	cmp	r3, r4
    7450:	d1e2      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7452:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7456:	e029      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7458:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    745c:	d04a      	beq.n	74f4 <uarte_nrfx_configure+0x12c>
    745e:	d813      	bhi.n	7488 <uarte_nrfx_configure+0xc0>
    7460:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    7464:	d049      	beq.n	74fa <uarte_nrfx_configure+0x132>
    7466:	d809      	bhi.n	747c <uarte_nrfx_configure+0xb4>
    7468:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    746c:	42a3      	cmp	r3, r4
    746e:	d046      	beq.n	74fe <uarte_nrfx_configure+0x136>
    7470:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    7474:	d1d0      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7476:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    747a:	e017      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    747c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    7480:	d1ca      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7482:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    7486:	e011      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7488:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    748c:	d03a      	beq.n	7504 <uarte_nrfx_configure+0x13c>
    748e:	d808      	bhi.n	74a2 <uarte_nrfx_configure+0xda>
    7490:	4c21      	ldr	r4, [pc, #132]	; (7518 <uarte_nrfx_configure+0x150>)
    7492:	42a3      	cmp	r3, r4
    7494:	d039      	beq.n	750a <uarte_nrfx_configure+0x142>
    7496:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    749a:	d1bd      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    749c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    74a0:	e004      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    74a2:	4c1e      	ldr	r4, [pc, #120]	; (751c <uarte_nrfx_configure+0x154>)
    74a4:	42a3      	cmp	r3, r4
    74a6:	d1b7      	bne.n	7418 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    74a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    74ac:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    74ae:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    74b2:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    74b4:	4335      	orrs	r5, r6
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    74ba:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    74be:	c903      	ldmia	r1, {r0, r1}
    74c0:	1d23      	adds	r3, r4, #4
    74c2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    74c6:	2000      	movs	r0, #0
}
    74c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    74ca:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    74ce:	e7ed      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    74d0:	4b13      	ldr	r3, [pc, #76]	; (7520 <uarte_nrfx_configure+0x158>)
    74d2:	e7eb      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    74d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    74d8:	e7e8      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    74da:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    74de:	e7e5      	b.n	74ac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    74e0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    74e4:	e7e2      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    74e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    74ea:	e7df      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    74ec:	4b0d      	ldr	r3, [pc, #52]	; (7524 <uarte_nrfx_configure+0x15c>)
    74ee:	e7dd      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    74f0:	4b0d      	ldr	r3, [pc, #52]	; (7528 <uarte_nrfx_configure+0x160>)
    74f2:	e7db      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    74f4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    74f8:	e7d8      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    74fa:	4b0c      	ldr	r3, [pc, #48]	; (752c <uarte_nrfx_configure+0x164>)
    74fc:	e7d6      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    74fe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7502:	e7d3      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7504:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7508:	e7d0      	b.n	74ac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    750a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    750e:	e7cd      	b.n	74ac <uarte_nrfx_configure+0xe4>
    7510:	0013b000 	.word	0x0013b000
    7514:	004ea000 	.word	0x004ea000
    7518:	0003d090 	.word	0x0003d090
    751c:	000f4240 	.word	0x000f4240
    7520:	00275000 	.word	0x00275000
    7524:	0075c000 	.word	0x0075c000
    7528:	003af000 	.word	0x003af000
    752c:	013a9000 	.word	0x013a9000

00007530 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    7530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    7534:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    7536:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    7538:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    753a:	2100      	movs	r1, #0
    753c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7540:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    7542:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
    7546:	b087      	sub	sp, #28
    7548:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    754a:	466a      	mov	r2, sp
    754c:	4648      	mov	r0, r9
    754e:	f00b fd98 	bl	13082 <pinctrl_lookup_state>
	if (ret < 0) {
    7552:	1e05      	subs	r5, r0, #0
    7554:	db25      	blt.n	75a2 <uarte_instance_init.constprop.0+0x72>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    7556:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7558:	f8d9 2000 	ldr.w	r2, [r9]
    755c:	7919      	ldrb	r1, [r3, #4]
    755e:	6818      	ldr	r0, [r3, #0]
    7560:	f000 fcd0 	bl	7f04 <pinctrl_configure_pins>
	if (err < 0) {
    7564:	1e05      	subs	r5, r0, #0
    7566:	db1c      	blt.n	75a2 <uarte_instance_init.constprop.0+0x72>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    7568:	1d31      	adds	r1, r6, #4
    756a:	4640      	mov	r0, r8
    756c:	f7ff ff2c 	bl	73c8 <uarte_nrfx_configure>
	if (err) {
    7570:	4605      	mov	r5, r0
    7572:	b9b0      	cbnz	r0, 75a2 <uarte_instance_init.constprop.0+0x72>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    7574:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7576:	0799      	lsls	r1, r3, #30
    7578:	d52b      	bpl.n	75d2 <uarte_instance_init.constprop.0+0xa2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    757a:	f106 0018 	add.w	r0, r6, #24
    757e:	f005 ffdf 	bl	d540 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7582:	4b28      	ldr	r3, [pc, #160]	; (7624 <uarte_instance_init.constprop.0+0xf4>)
    7584:	4298      	cmp	r0, r3
    7586:	d010      	beq.n	75aa <uarte_instance_init.constprop.0+0x7a>
		LOG_ERR("Failed to allocate PPI Channel");
    7588:	4b27      	ldr	r3, [pc, #156]	; (7628 <uarte_instance_init.constprop.0+0xf8>)
    758a:	9305      	str	r3, [sp, #20]
    758c:	2302      	movs	r3, #2
    758e:	9304      	str	r3, [sp, #16]
    7590:	4826      	ldr	r0, [pc, #152]	; (762c <uarte_instance_init.constprop.0+0xfc>)
    7592:	462b      	mov	r3, r5
    7594:	aa04      	add	r2, sp, #16
    7596:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    759a:	f06f 0504 	mvn.w	r5, #4
    759e:	f7fe f88b 	bl	56b8 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    75a2:	4628      	mov	r0, r5
    75a4:	b007      	add	sp, #28
    75a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    75aa:	7e33      	ldrb	r3, [r6, #24]
    75ac:	00db      	lsls	r3, r3, #3
    75ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    75b2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    75b6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    75ba:	f504 7190 	add.w	r1, r4, #288	; 0x120
    75be:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    75c2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    75c6:	7e32      	ldrb	r2, [r6, #24]
    75c8:	2301      	movs	r3, #1
    75ca:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    75cc:	4a18      	ldr	r2, [pc, #96]	; (7630 <uarte_instance_init.constprop.0+0x100>)
    75ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    75d2:	2308      	movs	r3, #8
    75d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    75d8:	7a3b      	ldrb	r3, [r7, #8]
    75da:	b953      	cbnz	r3, 75f2 <uarte_instance_init.constprop.0+0xc2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75dc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    75e0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    75e4:	6973      	ldr	r3, [r6, #20]
    75e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    75ea:	2301      	movs	r3, #1
    75ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75f0:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    75f6:	bf5c      	itt	pl
    75f8:	f44f 7380 	movpl.w	r3, #256	; 0x100
    75fc:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	06db      	lsls	r3, r3, #27
    7604:	bf44      	itt	mi
    7606:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    760a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    760e:	6933      	ldr	r3, [r6, #16]
    7610:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7614:	2300      	movs	r3, #0
    7616:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    761a:	2301      	movs	r3, #1
    761c:	60a3      	str	r3, [r4, #8]
    761e:	60e3      	str	r3, [r4, #12]
	return 0;
    7620:	e7bf      	b.n	75a2 <uarte_instance_init.constprop.0+0x72>
    7622:	bf00      	nop
    7624:	0bad0000 	.word	0x0bad0000
    7628:	000150e6 	.word	0x000150e6
    762c:	00014438 	.word	0x00014438
    7630:	4001f000 	.word	0x4001f000

00007634 <uarte_nrfx_poll_out>:
{
    7634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7636:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    7638:	6907      	ldr	r7, [r0, #16]
{
    763a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    763c:	f00c fa45 	bl	13aca <k_is_in_isr>
    7640:	b9b0      	cbnz	r0, 7670 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    7642:	4b2e      	ldr	r3, [pc, #184]	; (76fc <uarte_nrfx_poll_out+0xc8>)
    7644:	781b      	ldrb	r3, [r3, #0]
    7646:	b19b      	cbz	r3, 7670 <uarte_nrfx_poll_out+0x3c>
{
    7648:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    764a:	6860      	ldr	r0, [r4, #4]
    764c:	f00b fc6e 	bl	12f2c <is_tx_ready.isra.0>
    7650:	bb00      	cbnz	r0, 7694 <uarte_nrfx_poll_out+0x60>
    7652:	2001      	movs	r0, #1
    7654:	f00c f968 	bl	13928 <nrfx_busy_wait>
    7658:	3e01      	subs	r6, #1
    765a:	d1f6      	bne.n	764a <uarte_nrfx_poll_out+0x16>
    765c:	2100      	movs	r1, #0
    765e:	2021      	movs	r0, #33	; 0x21
    7660:	f006 ffe2 	bl	e628 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7664:	e7f0      	b.n	7648 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    7666:	f386 8811 	msr	BASEPRI, r6
    766a:	f3bf 8f6f 	isb	sy
}
    766e:	e7f5      	b.n	765c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    7670:	f04f 0340 	mov.w	r3, #64	; 0x40
    7674:	f3ef 8611 	mrs	r6, BASEPRI
    7678:	f383 8812 	msr	BASEPRI_MAX, r3
    767c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7680:	6860      	ldr	r0, [r4, #4]
    7682:	4631      	mov	r1, r6
    7684:	f00b fc52 	bl	12f2c <is_tx_ready.isra.0>
    7688:	b990      	cbnz	r0, 76b0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    768a:	f386 8811 	msr	BASEPRI, r6
    768e:	f3bf 8f6f 	isb	sy
}
    7692:	e7ed      	b.n	7670 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    7694:	f04f 0340 	mov.w	r3, #64	; 0x40
    7698:	f3ef 8611 	mrs	r6, BASEPRI
    769c:	f383 8812 	msr	BASEPRI_MAX, r3
    76a0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    76a4:	6860      	ldr	r0, [r4, #4]
    76a6:	4631      	mov	r1, r6
    76a8:	f00b fc40 	bl	12f2c <is_tx_ready.isra.0>
    76ac:	2800      	cmp	r0, #0
    76ae:	d0da      	beq.n	7666 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    76b0:	693b      	ldr	r3, [r7, #16]
    76b2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    76b4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    76b6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    76b8:	6813      	ldr	r3, [r2, #0]
    76ba:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    76be:	2001      	movs	r0, #1
    76c0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76c4:	2000      	movs	r0, #0
    76c6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    76ca:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    76ce:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    76d2:	6852      	ldr	r2, [r2, #4]
    76d4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    76d8:	06d2      	lsls	r2, r2, #27
    76da:	d508      	bpl.n	76ee <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    76dc:	6862      	ldr	r2, [r4, #4]
    76de:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    76e0:	2008      	movs	r0, #8
    76e2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    76e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    76ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76ee:	2201      	movs	r2, #1
    76f0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    76f2:	f381 8811 	msr	BASEPRI, r1
    76f6:	f3bf 8f6f 	isb	sy
}
    76fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76fc:	20003c28 	.word	0x20003c28

00007700 <random_byte_get>:
	__asm__ volatile(
    7700:	f04f 0340 	mov.w	r3, #64	; 0x40
    7704:	f3ef 8211 	mrs	r2, BASEPRI
    7708:	f383 8812 	msr	BASEPRI_MAX, r3
    770c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    7710:	4b09      	ldr	r3, [pc, #36]	; (7738 <random_byte_get+0x38>)
    7712:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    7716:	b161      	cbz	r1, 7732 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    7718:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    771a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    771e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7722:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    7726:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    7728:	f382 8811 	msr	BASEPRI, r2
    772c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    7730:	4770      	bx	lr
	int retval = -EAGAIN;
    7732:	f06f 000a 	mvn.w	r0, #10
    7736:	e7f7      	b.n	7728 <random_byte_get+0x28>
    7738:	4000d000 	.word	0x4000d000

0000773c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    773c:	b5f0      	push	{r4, r5, r6, r7, lr}
    773e:	4603      	mov	r3, r0
    7740:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    7742:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    7744:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    7748:	f04f 0540 	mov.w	r5, #64	; 0x40
    774c:	f3ef 8211 	mrs	r2, BASEPRI
    7750:	f385 8812 	msr	BASEPRI_MAX, r5
    7754:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    7758:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    775a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    775e:	1be4      	subs	r4, r4, r7
    7760:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    7764:	42a0      	cmp	r0, r4
		len = available;
    7766:	bf88      	it	hi
    7768:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    776a:	183e      	adds	r6, r7, r0
    776c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    7770:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    7772:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    7774:	f382 8811 	msr	BASEPRI, r2
    7778:	f3bf 8f6f 	isb	sy
    777c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    777e:	428a      	cmp	r2, r1
    7780:	d117      	bne.n	77b2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    7782:	4577      	cmp	r7, lr
    7784:	d10d      	bne.n	77a2 <rng_pool_get+0x66>
	__asm__ volatile(
    7786:	f04f 0140 	mov.w	r1, #64	; 0x40
    778a:	f3ef 8211 	mrs	r2, BASEPRI
    778e:	f381 8812 	msr	BASEPRI_MAX, r1
    7792:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    7796:	7819      	ldrb	r1, [r3, #0]
    7798:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    779a:	f382 8811 	msr	BASEPRI, r2
    779e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    77a2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    77a4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    77a6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    77a8:	bf22      	ittt	cs
    77aa:	4b06      	ldrcs	r3, [pc, #24]	; (77c4 <rng_pool_get+0x88>)
    77ac:	2201      	movcs	r2, #1
    77ae:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    77b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    77b2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    77b4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    77b6:	7976      	ldrb	r6, [r6, #5]
    77b8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    77bc:	ea05 050c 	and.w	r5, r5, ip
    77c0:	e7dd      	b.n	777e <rng_pool_get+0x42>
    77c2:	bf00      	nop
    77c4:	4000d000 	.word	0x4000d000

000077c8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    77c8:	43db      	mvns	r3, r3
{
    77ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    77ce:	f013 0501 	ands.w	r5, r3, #1
{
    77d2:	460e      	mov	r6, r1
    77d4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    77d6:	d004      	beq.n	77e2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    77d8:	4821      	ldr	r0, [pc, #132]	; (7860 <entropy_nrf5_get_entropy_isr+0x98>)
    77da:	f7ff ffaf 	bl	773c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    77de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    77e2:	b3a2      	cbz	r2, 784e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    77e4:	f04f 0340 	mov.w	r3, #64	; 0x40
    77e8:	f3ef 8811 	mrs	r8, BASEPRI
    77ec:	f383 8812 	msr	BASEPRI_MAX, r3
    77f0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    77f4:	200d      	movs	r0, #13
    77f6:	f7fe fd2f 	bl	6258 <arch_irq_is_enabled>
    77fa:	4607      	mov	r7, r0
		irq_disable(IRQN);
    77fc:	200d      	movs	r0, #13
    77fe:	f7fe fd17 	bl	6230 <arch_irq_disable>
	__asm__ volatile(
    7802:	f388 8811 	msr	BASEPRI, r8
    7806:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    780a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7864 <entropy_nrf5_get_entropy_isr+0x9c>
    780e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 7868 <entropy_nrf5_get_entropy_isr+0xa0>
    7812:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    7816:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
    781a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    781e:	2301      	movs	r3, #1
    7820:	f8c8 3000 	str.w	r3, [r8]
    7824:	4625      	mov	r5, r4
    7826:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    782a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    782e:	b183      	cbz	r3, 7852 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    7830:	f7ff ff66 	bl	7700 <random_byte_get>
			if (byte < 0) {
    7834:	1e03      	subs	r3, r0, #0
    7836:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    783a:	dbf6      	blt.n	782a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    783c:	3d01      	subs	r5, #1
    783e:	b2ad      	uxth	r5, r5
    7840:	5573      	strb	r3, [r6, r5]
		} while (len);
    7842:	2d00      	cmp	r5, #0
    7844:	d1f1      	bne.n	782a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    7846:	b117      	cbz	r7, 784e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    7848:	200d      	movs	r0, #13
    784a:	f7fe fce3 	bl	6214 <arch_irq_enable>
	return cnt;
    784e:	4620      	mov	r0, r4
    7850:	e7c5      	b.n	77de <entropy_nrf5_get_entropy_isr+0x16>
    7852:	f3bf 8f4f 	dsb	sy
				__WFE();
    7856:	bf20      	wfe
				__SEV();
    7858:	bf40      	sev
				__WFE();
    785a:	bf20      	wfe
    785c:	e7e5      	b.n	782a <entropy_nrf5_get_entropy_isr+0x62>
    785e:	bf00      	nop
    7860:	20001e0c 	.word	0x20001e0c
    7864:	4000d000 	.word	0x4000d000
    7868:	e000e100 	.word	0xe000e100

0000786c <entropy_nrf5_get_entropy>:
{
    786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    7870:	4f12      	ldr	r7, [pc, #72]	; (78bc <entropy_nrf5_get_entropy+0x50>)
    7872:	460d      	mov	r5, r1
    7874:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    7876:	f107 0835 	add.w	r8, r7, #53	; 0x35
	while (len) {
    787a:	b914      	cbnz	r4, 7882 <entropy_nrf5_get_entropy+0x16>
}
    787c:	4620      	mov	r0, r4
    787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    788a:	4638      	mov	r0, r7
    788c:	f006 fa4a 	bl	dd24 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    7890:	4622      	mov	r2, r4
    7892:	4629      	mov	r1, r5
    7894:	4640      	mov	r0, r8
    7896:	f7ff ff51 	bl	773c <rng_pool_get>
    789a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    789c:	4638      	mov	r0, r7
    789e:	f006 fa21 	bl	dce4 <z_impl_k_sem_give>
		if (bytes == 0U) {
    78a2:	b93e      	cbnz	r6, 78b4 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    78a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    78a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78ac:	4804      	ldr	r0, [pc, #16]	; (78c0 <entropy_nrf5_get_entropy+0x54>)
    78ae:	f006 fa39 	bl	dd24 <z_impl_k_sem_take>
	while (len) {
    78b2:	e7e6      	b.n	7882 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    78b4:	1ba4      	subs	r4, r4, r6
    78b6:	b2a4      	uxth	r4, r4
		buf += bytes;
    78b8:	4435      	add	r5, r6
    78ba:	e7de      	b.n	787a <entropy_nrf5_get_entropy+0xe>
    78bc:	20001dec 	.word	0x20001dec
    78c0:	20001dfc 	.word	0x20001dfc

000078c4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    78c4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    78c6:	4c18      	ldr	r4, [pc, #96]	; (7928 <entropy_nrf5_init+0x64>)
    78c8:	2201      	movs	r2, #1
    78ca:	4611      	mov	r1, r2
    78cc:	4620      	mov	r0, r4
    78ce:	f00c f91f 	bl	13b10 <z_impl_k_sem_init>
    78d2:	2201      	movs	r2, #1
    78d4:	2100      	movs	r1, #0
    78d6:	f104 0010 	add.w	r0, r4, #16
    78da:	f00c f919 	bl	13b10 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    78de:	f240 4307 	movw	r3, #1031	; 0x407
    78e2:	8723      	strh	r3, [r4, #56]	; 0x38
	rngp->first_alloc = 0U;
    78e4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    78e8:	6223      	str	r3, [r4, #32]
	rngp->threshold	  = threshold;
    78ea:	230c      	movs	r3, #12
    78ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rngp->first_alloc = 0U;
    78f0:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    78f2:	4b0e      	ldr	r3, [pc, #56]	; (792c <entropy_nrf5_init+0x68>)
    78f4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	rngp->first_read  = 0U;
    78f8:	86e5      	strh	r5, [r4, #54]	; 0x36
    78fa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    78fe:	f022 0201 	bic.w	r2, r2, #1
    7902:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    7906:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    7908:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    790c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7910:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    7914:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    7916:	6019      	str	r1, [r3, #0]
    7918:	200d      	movs	r0, #13
    791a:	f7fe fcab 	bl	6274 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    791e:	200d      	movs	r0, #13
    7920:	f7fe fc78 	bl	6214 <arch_irq_enable>

	return 0;
}
    7924:	4628      	mov	r0, r5
    7926:	bd38      	pop	{r3, r4, r5, pc}
    7928:	20001dec 	.word	0x20001dec
    792c:	4000d000 	.word	0x4000d000

00007930 <isr>:
{
    7930:	b510      	push	{r4, lr}
	byte = random_byte_get();
    7932:	f7ff fee5 	bl	7700 <random_byte_get>
	if (byte < 0) {
    7936:	2800      	cmp	r0, #0
    7938:	db20      	blt.n	797c <isr+0x4c>
	uint8_t last  = rngp->last;
    793a:	4b17      	ldr	r3, [pc, #92]	; (7998 <isr+0x68>)
    793c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
	if (((last - first) & mask) == mask) {
    7940:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
	uint8_t mask  = rngp->mask;
    7944:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
	if (((last - first) & mask) == mask) {
    7948:	1b14      	subs	r4, r2, r4
    794a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    794e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    7950:	d10d      	bne.n	796e <isr+0x3e>
	uint8_t last  = rngp->last;
    7952:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	if (((last - first) & mask) == mask) {
    7956:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
	uint8_t mask  = rngp->mask;
    795a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
	if (((last - first) & mask) == mask) {
    795e:	1b14      	subs	r4, r2, r4
    7960:	ea31 0404 	bics.w	r4, r1, r4
    7964:	d10b      	bne.n	797e <isr+0x4e>
    7966:	4b0d      	ldr	r3, [pc, #52]	; (799c <isr+0x6c>)
    7968:	2201      	movs	r2, #1
    796a:	605a      	str	r2, [r3, #4]
}
    796c:	e00e      	b.n	798c <isr+0x5c>
	rngp->buffer[last] = byte;
    796e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    7970:	3201      	adds	r2, #1
    7972:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    7974:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
	rngp->last = (last + 1) & mask;
    7978:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
}
    797c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    797e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    7980:	3201      	adds	r2, #1
    7982:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    7984:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
	rngp->last = (last + 1) & mask;
    7988:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
	z_impl_k_sem_give(sem);
    798c:	4804      	ldr	r0, [pc, #16]	; (79a0 <isr+0x70>)
}
    798e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7992:	f006 b9a7 	b.w	dce4 <z_impl_k_sem_give>
    7996:	bf00      	nop
    7998:	20001dec 	.word	0x20001dec
    799c:	4000d000 	.word	0x4000d000
    79a0:	20001dfc 	.word	0x20001dfc

000079a4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    79a4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    79a6:	2301      	movs	r3, #1
    79a8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    79aa:	4a0e      	ldr	r2, [pc, #56]	; (79e4 <compare_int_lock+0x40>)
    79ac:	f3bf 8f5b 	dmb	ish
    79b0:	43dc      	mvns	r4, r3
    79b2:	e852 1f00 	ldrex	r1, [r2]
    79b6:	ea01 0504 	and.w	r5, r1, r4
    79ba:	e842 5600 	strex	r6, r5, [r2]
    79be:	2e00      	cmp	r6, #0
    79c0:	d1f7      	bne.n	79b2 <compare_int_lock+0xe>
    79c2:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    79c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    79ca:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    79cc:	4806      	ldr	r0, [pc, #24]	; (79e8 <compare_int_lock+0x44>)
    79ce:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    79d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    79d6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    79da:	420b      	tst	r3, r1
}
    79dc:	bf14      	ite	ne
    79de:	2001      	movne	r0, #1
    79e0:	2000      	moveq	r0, #0
    79e2:	bd70      	pop	{r4, r5, r6, pc}
    79e4:	20001e38 	.word	0x20001e38
    79e8:	40011000 	.word	0x40011000

000079ec <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    79ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    79ee:	491b      	ldr	r1, [pc, #108]	; (7a5c <sys_clock_timeout_handler+0x70>)
{
    79f0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    79f2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    79f6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    79f8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    79fc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    7a00:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    7a02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7a06:	d30f      	bcc.n	7a28 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    7a08:	f006 ff86 	bl	e918 <sys_clock_announce>
    return p_reg->CC[ch];
    7a0c:	00a3      	lsls	r3, r4, #2
    7a0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7a12:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7a16:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    7a1a:	4295      	cmp	r5, r2
    7a1c:	d11d      	bne.n	7a5a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    7a1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    7a22:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    7a26:	e012      	b.n	7a4e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    7a28:	4b0d      	ldr	r3, [pc, #52]	; (7a60 <sys_clock_timeout_handler+0x74>)
    7a2a:	681b      	ldr	r3, [r3, #0]
    7a2c:	0a1a      	lsrs	r2, r3, #8
    7a2e:	061b      	lsls	r3, r3, #24
    7a30:	195e      	adds	r6, r3, r5
    7a32:	4b0c      	ldr	r3, [pc, #48]	; (7a64 <sys_clock_timeout_handler+0x78>)
    7a34:	f142 0700 	adc.w	r7, r2, #0
    7a38:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    7a3c:	f006 ff6c 	bl	e918 <sys_clock_announce>
    return p_reg->CC[ch];
    7a40:	4a09      	ldr	r2, [pc, #36]	; (7a68 <sys_clock_timeout_handler+0x7c>)
    7a42:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    7a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    7a4a:	429d      	cmp	r5, r3
    7a4c:	d105      	bne.n	7a5a <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7a4e:	4a06      	ldr	r2, [pc, #24]	; (7a68 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7a54:	40a3      	lsls	r3, r4
    7a56:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    7a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a5c:	20000dc8 	.word	0x20000dc8
    7a60:	20001e3c 	.word	0x20001e3c
    7a64:	20000dd0 	.word	0x20000dd0
    7a68:	40011000 	.word	0x40011000

00007a6c <compare_int_unlock>:
	if (key) {
    7a6c:	b311      	cbz	r1, 7ab4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7a6e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    7a72:	2301      	movs	r3, #1
    7a74:	4a10      	ldr	r2, [pc, #64]	; (7ab8 <compare_int_unlock+0x4c>)
    7a76:	4083      	lsls	r3, r0
    7a78:	e852 cf00 	ldrex	ip, [r2]
    7a7c:	ea4c 0c03 	orr.w	ip, ip, r3
    7a80:	e842 c100 	strex	r1, ip, [r2]
    7a84:	2900      	cmp	r1, #0
    7a86:	d1f7      	bne.n	7a78 <compare_int_unlock+0xc>
    7a88:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    7a8c:	4a0b      	ldr	r2, [pc, #44]	; (7abc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7a92:	4083      	lsls	r3, r0
    7a94:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7a98:	4b09      	ldr	r3, [pc, #36]	; (7ac0 <compare_int_unlock+0x54>)
    7a9a:	f3bf 8f5b 	dmb	ish
    7a9e:	681b      	ldr	r3, [r3, #0]
    7aa0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7aa4:	40c3      	lsrs	r3, r0
    7aa6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7aa8:	bf42      	ittt	mi
    7aaa:	4b06      	ldrmi	r3, [pc, #24]	; (7ac4 <compare_int_unlock+0x58>)
    7aac:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    7ab0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    7ab4:	4770      	bx	lr
    7ab6:	bf00      	nop
    7ab8:	20001e38 	.word	0x20001e38
    7abc:	40011000 	.word	0x40011000
    7ac0:	20001e30 	.word	0x20001e30
    7ac4:	e000e100 	.word	0xe000e100

00007ac8 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    7ac8:	b2c3      	uxtb	r3, r0
}
    7aca:	4802      	ldr	r0, [pc, #8]	; (7ad4 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    7acc:	009b      	lsls	r3, r3, #2
    7ace:	4418      	add	r0, r3
    7ad0:	4770      	bx	lr
    7ad2:	bf00      	nop
    7ad4:	40011140 	.word	0x40011140

00007ad8 <z_nrf_rtc_timer_abort>:
{
    7ad8:	b5d0      	push	{r4, r6, r7, lr}
    7ada:	4604      	mov	r4, r0
	bool key = compare_int_lock(chan);
    7adc:	f7ff ff62 	bl	79a4 <compare_int_lock>
	cc_data[chan].target_time = TARGET_TIME_INVALID;
    7ae0:	4b12      	ldr	r3, [pc, #72]	; (7b2c <z_nrf_rtc_timer_abort+0x54>)
    7ae2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    7ae6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7aea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    7aee:	e9c3 6702 	strd	r6, r7, [r3, #8]
	bool key = compare_int_lock(chan);
    7af2:	4601      	mov	r1, r0
	event_clear(chan);
    7af4:	4620      	mov	r0, r4
    7af6:	f00b faae 	bl	13056 <event_clear>
    p_reg->EVTENCLR = mask;
    7afa:	4a0d      	ldr	r2, [pc, #52]	; (7b30 <z_nrf_rtc_timer_abort+0x58>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7b00:	40a3      	lsls	r3, r4
    7b02:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
	(void)atomic_and(&force_isr_mask, ~BIT(chan));
    7b06:	2301      	movs	r3, #1
    7b08:	40a3      	lsls	r3, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7b0a:	4a0a      	ldr	r2, [pc, #40]	; (7b34 <z_nrf_rtc_timer_abort+0x5c>)
    7b0c:	f3bf 8f5b 	dmb	ish
    7b10:	43db      	mvns	r3, r3
    7b12:	e852 6f00 	ldrex	r6, [r2]
    7b16:	401e      	ands	r6, r3
    7b18:	e842 6400 	strex	r4, r6, [r2]
    7b1c:	2c00      	cmp	r4, #0
    7b1e:	d1f8      	bne.n	7b12 <z_nrf_rtc_timer_abort+0x3a>
    7b20:	f3bf 8f5b 	dmb	ish
}
    7b24:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	compare_int_unlock(chan, key);
    7b28:	f7ff bfa0 	b.w	7a6c <compare_int_unlock>
    7b2c:	20000d98 	.word	0x20000d98
    7b30:	40011000 	.word	0x40011000
    7b34:	20001e30 	.word	0x20001e30

00007b38 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    7b38:	4b0d      	ldr	r3, [pc, #52]	; (7b70 <z_nrf_rtc_timer_read+0x38>)
    7b3a:	6818      	ldr	r0, [r3, #0]
    7b3c:	0a01      	lsrs	r1, r0, #8
    7b3e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7b40:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    7b44:	4b0b      	ldr	r3, [pc, #44]	; (7b74 <z_nrf_rtc_timer_read+0x3c>)
    7b46:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    7b4a:	1818      	adds	r0, r3, r0
    7b4c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7b54:	d20a      	bcs.n	7b6c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    7b56:	4b08      	ldr	r3, [pc, #32]	; (7b78 <z_nrf_rtc_timer_read+0x40>)
    7b58:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b5c:	4290      	cmp	r0, r2
    7b5e:	eb71 0303 	sbcs.w	r3, r1, r3
    7b62:	d203      	bcs.n	7b6c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    7b64:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    7b68:	f141 0100 	adc.w	r1, r1, #0
}
    7b6c:	4770      	bx	lr
    7b6e:	bf00      	nop
    7b70:	20001e3c 	.word	0x20001e3c
    7b74:	40011000 	.word	0x40011000
    7b78:	20000dd0 	.word	0x20000dd0

00007b7c <compare_set>:
{
    7b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b80:	4614      	mov	r4, r2
    7b82:	461d      	mov	r5, r3
    7b84:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    7b86:	f7ff ff0d 	bl	79a4 <compare_int_lock>
    7b8a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    7b8c:	f7ff ffd4 	bl	7b38 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7b90:	42a0      	cmp	r0, r4
    7b92:	eb71 0305 	sbcs.w	r3, r1, r5
    7b96:	d26d      	bcs.n	7c74 <compare_set+0xf8>
		if (target_time - curr_time > COUNTER_SPAN) {
    7b98:	4b3f      	ldr	r3, [pc, #252]	; (7c98 <compare_set+0x11c>)
    7b9a:	1a20      	subs	r0, r4, r0
    7b9c:	eb65 0101 	sbc.w	r1, r5, r1
    7ba0:	4298      	cmp	r0, r3
    7ba2:	f171 0100 	sbcs.w	r1, r1, #0
    7ba6:	d274      	bcs.n	7c92 <compare_set+0x116>
		if (target_time != cc_data[chan].target_time) {
    7ba8:	4b3c      	ldr	r3, [pc, #240]	; (7c9c <compare_set+0x120>)
    7baa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    7bae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    7bb2:	429d      	cmp	r5, r3
    7bb4:	bf08      	it	eq
    7bb6:	4294      	cmpeq	r4, r2
    7bb8:	d047      	beq.n	7c4a <compare_set+0xce>
    7bba:	ea4f 0b87 	mov.w	fp, r7, lsl #2
    7bbe:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
    7bc2:	f50b 3b88 	add.w	fp, fp, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7bc6:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    7bca:	f024 4a7f 	bic.w	sl, r4, #4278190080	; 0xff000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7bce:	fa09 f207 	lsl.w	r2, r9, r7
    return p_reg->CC[ch];
    7bd2:	f8db 3540 	ldr.w	r3, [fp, #1344]	; 0x540
     return p_reg->COUNTER;
    7bd6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7ca0 <compare_set+0x124>
    7bda:	9201      	str	r2, [sp, #4]
	uint32_t cc_val = abs_val & COUNTER_MAX;
    7bdc:	4656      	mov	r6, sl
    7bde:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7be2:	eba3 0309 	sub.w	r3, r3, r9
    7be6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7bea:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7bee:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    7bf0:	f8cb 0540 	str.w	r0, [fp, #1344]	; 0x540
    7bf4:	d102      	bne.n	7bfc <compare_set+0x80>
	z_impl_k_busy_wait(usec_to_wait);
    7bf6:	2013      	movs	r0, #19
    7bf8:	f00c f93f 	bl	13e7a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    7bfc:	f109 0002 	add.w	r0, r9, #2
	return (a - b) & COUNTER_MAX;
    7c00:	1a33      	subs	r3, r6, r0
    7c02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    7c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7c0a:	bf88      	it	hi
    7c0c:	4606      	movhi	r6, r0
		event_clear(chan);
    7c0e:	4638      	mov	r0, r7
    7c10:	f00b fa21 	bl	13056 <event_clear>
    p_reg->EVTENSET = mask;
    7c14:	9b01      	ldr	r3, [sp, #4]
    7c16:	f8c8 3344 	str.w	r3, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7c1a:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    7c1e:	f8cb 3540 	str.w	r3, [fp, #1344]	; 0x540
     return p_reg->COUNTER;
    7c22:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
	} while ((now2 != now) &&
    7c26:	4599      	cmp	r9, r3
    7c28:	d006      	beq.n	7c38 <compare_set+0xbc>
	return (a - b) & COUNTER_MAX;
    7c2a:	1af3      	subs	r3, r6, r3
    7c2c:	3b02      	subs	r3, #2
    7c2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    7c32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7c36:	d81b      	bhi.n	7c70 <compare_set+0xf4>
	return (a - b) & COUNTER_MAX;
    7c38:	eba6 060a 	sub.w	r6, r6, sl
    7c3c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    7c40:	1936      	adds	r6, r6, r4
    7c42:	f145 0300 	adc.w	r3, r5, #0
    7c46:	4634      	mov	r4, r6
    7c48:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    7c4a:	4914      	ldr	r1, [pc, #80]	; (7c9c <compare_set+0x120>)
	cc_data[chan].callback = handler;
    7c4c:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    7c4e:	013b      	lsls	r3, r7, #4
    7c50:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    7c54:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    7c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c58:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    7c5a:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    7c5e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    7c60:	4638      	mov	r0, r7
    7c62:	9900      	ldr	r1, [sp, #0]
    7c64:	f7ff ff02 	bl	7a6c <compare_int_unlock>
}
    7c68:	4620      	mov	r0, r4
    7c6a:	b003      	add	sp, #12
    7c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c70:	4633      	mov	r3, r6
    7c72:	e7b4      	b.n	7bde <compare_set+0x62>
		atomic_or(&force_isr_mask, BIT(chan));
    7c74:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7c76:	4a0b      	ldr	r2, [pc, #44]	; (7ca4 <compare_set+0x128>)
    7c78:	f3bf 8f5b 	dmb	ish
    7c7c:	40bb      	lsls	r3, r7
    7c7e:	e852 0f00 	ldrex	r0, [r2]
    7c82:	4318      	orrs	r0, r3
    7c84:	e842 0100 	strex	r1, r0, [r2]
    7c88:	2900      	cmp	r1, #0
    7c8a:	d1f8      	bne.n	7c7e <compare_set+0x102>
    7c8c:	f3bf 8f5b 	dmb	ish
    7c90:	e7db      	b.n	7c4a <compare_set+0xce>
			return -EINVAL;
    7c92:	f06f 0415 	mvn.w	r4, #21
    7c96:	e7e3      	b.n	7c60 <compare_set+0xe4>
    7c98:	01000001 	.word	0x01000001
    7c9c:	20000d98 	.word	0x20000d98
    7ca0:	40011000 	.word	0x40011000
    7ca4:	20001e30 	.word	0x20001e30

00007ca8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    7caa:	4b20      	ldr	r3, [pc, #128]	; (7d2c <sys_clock_driver_init+0x84>)
    p_reg->PRESCALER = val;
    7cac:	4c20      	ldr	r4, [pc, #128]	; (7d30 <sys_clock_driver_init+0x88>)
    7cae:	2500      	movs	r5, #0
    7cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENSET = mask;
    7cb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
    7cbc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    7cc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    7cc4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    7cc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7ccc:	e9c3 0106 	strd	r0, r1, [r3, #24]
    7cd0:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    7cd4:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    7cd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    7cdc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ce0:	4b14      	ldr	r3, [pc, #80]	; (7d34 <sys_clock_driver_init+0x8c>)
    7ce2:	2602      	movs	r6, #2

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7ce4:	2101      	movs	r1, #1
    7ce6:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    7cea:	2011      	movs	r0, #17
    7cec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7cf0:	462a      	mov	r2, r5
    7cf2:	f7fe fabf 	bl	6274 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7cf6:	2011      	movs	r0, #17
    7cf8:	f7fe fa8c 	bl	6214 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7cfc:	2301      	movs	r3, #1
    7cfe:	60a3      	str	r3, [r4, #8]
    7d00:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7d02:	4b0d      	ldr	r3, [pc, #52]	; (7d38 <sys_clock_driver_init+0x90>)
    7d04:	2207      	movs	r2, #7
    7d06:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    7d08:	4b0c      	ldr	r3, [pc, #48]	; (7d3c <sys_clock_driver_init+0x94>)
    7d0a:	2206      	movs	r2, #6
    7d0c:	601a      	str	r2, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7d0e:	4b0c      	ldr	r3, [pc, #48]	; (7d40 <sys_clock_driver_init+0x98>)
    7d10:	4a0c      	ldr	r2, [pc, #48]	; (7d44 <sys_clock_driver_init+0x9c>)
    7d12:	9300      	str	r3, [sp, #0]
    7d14:	9501      	str	r5, [sp, #4]
    7d16:	2300      	movs	r3, #0
    7d18:	4628      	mov	r0, r5
    7d1a:	f7ff ff2f 	bl	7b7c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7d1e:	4630      	mov	r0, r6
    7d20:	f7ff f96c 	bl	6ffc <z_nrf_clock_control_lf_on>

	return 0;
}
    7d24:	4628      	mov	r0, r5
    7d26:	b002      	add	sp, #8
    7d28:	bd70      	pop	{r4, r5, r6, pc}
    7d2a:	bf00      	nop
    7d2c:	20000d98 	.word	0x20000d98
    7d30:	40011000 	.word	0x40011000
    7d34:	e000e100 	.word	0xe000e100
    7d38:	20001e38 	.word	0x20001e38
    7d3c:	20001e34 	.word	0x20001e34
    7d40:	000079ed 	.word	0x000079ed
    7d44:	007fffff 	.word	0x007fffff

00007d48 <rtc_nrf_isr>:
{
    7d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
    7d4c:	4e39      	ldr	r6, [pc, #228]	; (7e34 <rtc_nrf_isr+0xec>)
    7d4e:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7d52:	079b      	lsls	r3, r3, #30
{
    7d54:	b085      	sub	sp, #20
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7d56:	d50b      	bpl.n	7d70 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d58:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    7d5c:	b143      	cbz	r3, 7d70 <rtc_nrf_isr+0x28>
		overflow_cnt++;
    7d5e:	4a36      	ldr	r2, [pc, #216]	; (7e38 <rtc_nrf_isr+0xf0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7d60:	2300      	movs	r3, #0
    7d62:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
    7d66:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    7d6a:	6813      	ldr	r3, [r2, #0]
    7d6c:	3301      	adds	r3, #1
    7d6e:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7d70:	4d32      	ldr	r5, [pc, #200]	; (7e3c <rtc_nrf_isr+0xf4>)
{
    7d72:	2400      	movs	r4, #0
    7d74:	46a9      	mov	r9, r5
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7d76:	f04f 0a01 	mov.w	sl, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7d7a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    7d7e:	b672      	cpsid	i
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    7d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7d84:	fa03 fb04 	lsl.w	fp, r3, r4
    return p_reg->INTENSET & mask;
    7d88:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    7d8c:	ea1b 0f03 	tst.w	fp, r3
    7d90:	d109      	bne.n	7da6 <rtc_nrf_isr+0x5e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7d92:	f381 8810 	msr	PRIMASK, r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7d96:	3401      	adds	r4, #1
    7d98:	2c03      	cmp	r4, #3
    7d9a:	f105 0510 	add.w	r5, r5, #16
    7d9e:	d1ec      	bne.n	7d7a <rtc_nrf_isr+0x32>
}
    7da0:	b005      	add	sp, #20
    7da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7da6:	fa0a f304 	lsl.w	r3, sl, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7daa:	4f25      	ldr	r7, [pc, #148]	; (7e40 <rtc_nrf_isr+0xf8>)
    7dac:	f3bf 8f5b 	dmb	ish
    7db0:	43db      	mvns	r3, r3
    7db2:	e857 2f00 	ldrex	r2, [r7]
    7db6:	ea02 0003 	and.w	r0, r2, r3
    7dba:	e847 0c00 	strex	ip, r0, [r7]
    7dbe:	f1bc 0f00 	cmp.w	ip, #0
    7dc2:	d1f6      	bne.n	7db2 <rtc_nrf_isr+0x6a>
    7dc4:	f3bf 8f5b 	dmb	ish
    7dc8:	b922      	cbnz	r2, 7dd4 <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7dca:	4b1e      	ldr	r3, [pc, #120]	; (7e44 <rtc_nrf_isr+0xfc>)
    7dcc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d0de      	beq.n	7d92 <rtc_nrf_isr+0x4a>
			event_clear(chan);
    7dd4:	4620      	mov	r0, r4
    7dd6:	f00b f93e 	bl	13056 <event_clear>
    7dda:	f381 8810 	msr	PRIMASK, r1
		curr_time = z_nrf_rtc_timer_read();
    7dde:	f7ff feab 	bl	7b38 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7de2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    7de6:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    7de8:	eb09 1204 	add.w	r2, r9, r4, lsl #4
    7dec:	e9d2 7802 	ldrd	r7, r8, [r2, #8]
    7df0:	e9cd 7802 	strd	r7, r8, [sp, #8]
		if (curr_time >= expire_time) {
    7df4:	9f02      	ldr	r7, [sp, #8]
    7df6:	42b8      	cmp	r0, r7
    7df8:	9803      	ldr	r0, [sp, #12]
    7dfa:	4181      	sbcs	r1, r0
    7dfc:	d202      	bcs.n	7e04 <rtc_nrf_isr+0xbc>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7dfe:	f383 8810 	msr	PRIMASK, r3
		if (handler) {
    7e02:	e7c8      	b.n	7d96 <rtc_nrf_isr+0x4e>
			cc_data[chan].callback = NULL;
    7e04:	f04f 0c00 	mov.w	ip, #0
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    7e08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    7e0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    7e10:	e9d5 1000 	ldrd	r1, r0, [r5]
			cc_data[chan].callback = NULL;
    7e14:	f8c5 c000 	str.w	ip, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    7e18:	e9c2 7802 	strd	r7, r8, [r2, #8]
    p_reg->EVTENCLR = mask;
    7e1c:	f8c6 b348 	str.w	fp, [r6, #840]	; 0x348
    7e20:	f383 8810 	msr	PRIMASK, r3
		if (handler) {
    7e24:	2900      	cmp	r1, #0
    7e26:	d0b6      	beq.n	7d96 <rtc_nrf_isr+0x4e>
			handler(chan, expire_time, user_context);
    7e28:	9000      	str	r0, [sp, #0]
    7e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7e2e:	4620      	mov	r0, r4
    7e30:	4788      	blx	r1
    7e32:	e7b0      	b.n	7d96 <rtc_nrf_isr+0x4e>
    7e34:	40011000 	.word	0x40011000
    7e38:	20001e3c 	.word	0x20001e3c
    7e3c:	20000d98 	.word	0x20000d98
    7e40:	20001e30 	.word	0x20001e30
    7e44:	40011140 	.word	0x40011140

00007e48 <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    7e48:	4b0f      	ldr	r3, [pc, #60]	; (7e88 <z_nrf_rtc_timer_chan_alloc+0x40>)
{
    7e4a:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    7e4c:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    7e4e:	6818      	ldr	r0, [r3, #0]
    7e50:	b1b0      	cbz	r0, 7e80 <z_nrf_rtc_timer_chan_alloc+0x38>
    7e52:	f3bf 8f5b 	dmb	ish
    7e56:	fab0 f080 	clz	r0, r0
    7e5a:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    7e5e:	fa04 f100 	lsl.w	r1, r4, r0
    7e62:	43c9      	mvns	r1, r1
    7e64:	e853 2f00 	ldrex	r2, [r3]
    7e68:	ea02 0501 	and.w	r5, r2, r1
    7e6c:	e843 5600 	strex	r6, r5, [r3]
    7e70:	2e00      	cmp	r6, #0
    7e72:	d1f7      	bne.n	7e64 <z_nrf_rtc_timer_chan_alloc+0x1c>
    7e74:	f3bf 8f5b 	dmb	ish
	} while (!(prev & BIT(chan)));
    7e78:	40c2      	lsrs	r2, r0
    7e7a:	07d2      	lsls	r2, r2, #31
    7e7c:	d5e7      	bpl.n	7e4e <z_nrf_rtc_timer_chan_alloc+0x6>
}
    7e7e:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
    7e80:	f06f 000b 	mvn.w	r0, #11
    7e84:	e7fb      	b.n	7e7e <z_nrf_rtc_timer_chan_alloc+0x36>
    7e86:	bf00      	nop
    7e88:	20001e34 	.word	0x20001e34

00007e8c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7e8c:	1c43      	adds	r3, r0, #1
{
    7e8e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7e90:	d021      	beq.n	7ed6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7e92:	2801      	cmp	r0, #1
    7e94:	dd21      	ble.n	7eda <sys_clock_set_timeout+0x4e>
    7e96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7e9a:	da20      	bge.n	7ede <sys_clock_set_timeout+0x52>
    7e9c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    7e9e:	f7ff fe4b 	bl	7b38 <z_nrf_rtc_timer_read>
    7ea2:	4b10      	ldr	r3, [pc, #64]	; (7ee4 <sys_clock_set_timeout+0x58>)
    7ea4:	e9d3 1300 	ldrd	r1, r3, [r3]
    7ea8:	1a42      	subs	r2, r0, r1
		ticks = 0;
    7eaa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    7eae:	480e      	ldr	r0, [pc, #56]	; (7ee8 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    7eb0:	bf28      	it	cs
    7eb2:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    7eb4:	3201      	adds	r2, #1
    7eb6:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    7eb8:	4282      	cmp	r2, r0
    7eba:	bf28      	it	cs
    7ebc:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    7ebe:	1852      	adds	r2, r2, r1
    7ec0:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    7ec4:	4909      	ldr	r1, [pc, #36]	; (7eec <sys_clock_set_timeout+0x60>)
    7ec6:	9001      	str	r0, [sp, #4]
    7ec8:	9100      	str	r1, [sp, #0]
    7eca:	f143 0300 	adc.w	r3, r3, #0
    7ece:	f7ff fe55 	bl	7b7c <compare_set>
}
    7ed2:	b002      	add	sp, #8
    7ed4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7ed6:	4804      	ldr	r0, [pc, #16]	; (7ee8 <sys_clock_set_timeout+0x5c>)
    7ed8:	e7e0      	b.n	7e9c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7eda:	2400      	movs	r4, #0
    7edc:	e7df      	b.n	7e9e <sys_clock_set_timeout+0x12>
    7ede:	4c02      	ldr	r4, [pc, #8]	; (7ee8 <sys_clock_set_timeout+0x5c>)
    7ee0:	e7dd      	b.n	7e9e <sys_clock_set_timeout+0x12>
    7ee2:	bf00      	nop
    7ee4:	20000dc8 	.word	0x20000dc8
    7ee8:	007fffff 	.word	0x007fffff
    7eec:	000079ed 	.word	0x000079ed

00007ef0 <sys_clock_elapsed>:
{
    7ef0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    7ef2:	f7ff fe21 	bl	7b38 <z_nrf_rtc_timer_read>
    7ef6:	4b02      	ldr	r3, [pc, #8]	; (7f00 <sys_clock_elapsed+0x10>)
    7ef8:	681b      	ldr	r3, [r3, #0]
}
    7efa:	1ac0      	subs	r0, r0, r3
    7efc:	bd08      	pop	{r3, pc}
    7efe:	bf00      	nop
    7f00:	20000dc8 	.word	0x20000dc8

00007f04 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    7f08:	4e5a      	ldr	r6, [pc, #360]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7f0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7f0e:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7f10:	4281      	cmp	r1, r0
    7f12:	d102      	bne.n	7f1a <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    7f14:	2000      	movs	r0, #0
}
    7f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7f1a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7f1c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7f20:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    7f24:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    7f26:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    7f2a:	bf08      	it	eq
    7f2c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    7f30:	2c22      	cmp	r4, #34	; 0x22
    7f32:	f200 809b 	bhi.w	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    7f36:	e8df f004 	tbb	[pc, r4]
    7f3a:	2412      	.short	0x2412
    7f3c:	402c4429 	.word	0x402c4429
    7f40:	99999944 	.word	0x99999944
    7f44:	99704799 	.word	0x99704799
    7f48:	99999999 	.word	0x99999999
    7f4c:	99999999 	.word	0x99999999
    7f50:	817e7b73 	.word	0x817e7b73
    7f54:	84999999 	.word	0x84999999
    7f58:	93908d8a 	.word	0x93908d8a
    7f5c:	96          	.byte	0x96
    7f5d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    7f5e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    7f62:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    7f66:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    7f6a:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    7f6e:	bf14      	ite	ne
    7f70:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    7f74:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7f76:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    7f7a:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    7f7e:	2401      	movs	r4, #1
    7f80:	e002      	b.n	7f88 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    7f82:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7f86:	2400      	movs	r4, #0
    7f88:	46a6      	mov	lr, r4
    7f8a:	e024      	b.n	7fd6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    7f8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    7f90:	e7e7      	b.n	7f62 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    7f92:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7f96:	2400      	movs	r4, #0
    return pin_number >> 5;
    7f98:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    7f9c:	f1be 0f01 	cmp.w	lr, #1
    7fa0:	bf14      	ite	ne
    7fa2:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    7fa6:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    7fa8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7fac:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    7fb0:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    7fb4:	f04f 0e01 	mov.w	lr, #1
    7fb8:	e00d      	b.n	7fd6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    7fba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    7fbe:	2401      	movs	r4, #1
    7fc0:	e7ea      	b.n	7f98 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    7fc2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    7fc6:	e7de      	b.n	7f86 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    7fc8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    7fcc:	2d00      	cmp	r5, #0
    7fce:	d1da      	bne.n	7f86 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7fd0:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7fd2:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    7fd4:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    7fd6:	f850 cb04 	ldr.w	ip, [r0], #4
    7fda:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7fde:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7fe2:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    7fe6:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    7fea:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    7fee:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7ff2:	bf1c      	itt	ne
    7ff4:	2401      	movne	r4, #1
    7ff6:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7ffa:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    7ffe:	2b01      	cmp	r3, #1
    8000:	bf0c      	ite	eq
    8002:	4633      	moveq	r3, r6
    8004:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8008:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    800c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8010:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    8014:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    8018:	e77a      	b.n	7f10 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    801a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    801e:	e7d5      	b.n	7fcc <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    8020:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    8024:	6804      	ldr	r4, [r0, #0]
    8026:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    802a:	2c00      	cmp	r4, #0
    802c:	d0c7      	beq.n	7fbe <pinctrl_configure_pins+0xba>
    802e:	e798      	b.n	7f62 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    8030:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    8034:	e7f6      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    8036:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    803a:	e7f3      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    803c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    8040:	e7f0      	b.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    8042:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    8046:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    8048:	f04f 0e00 	mov.w	lr, #0
    804c:	e7c3      	b.n	7fd6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    804e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    8052:	e786      	b.n	7f62 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    8054:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    8058:	e7f5      	b.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    805a:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    805e:	e7f2      	b.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    8060:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    8064:	e7ef      	b.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    8066:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    806a:	e7ec      	b.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
		switch (NRF_GET_FUN(pins[i])) {
    806c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8070:	e751      	b.n	7f16 <pinctrl_configure_pins+0x12>
    8072:	bf00      	nop
    8074:	50000300 	.word	0x50000300

00008078 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    8078:	4602      	mov	r2, r0
    807a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    807c:	4801      	ldr	r0, [pc, #4]	; (8084 <multithreading_lock_acquire+0xc>)
    807e:	f005 bd7b 	b.w	db78 <z_impl_k_mutex_lock>
    8082:	bf00      	nop
    8084:	200003d0 	.word	0x200003d0

00008088 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    8088:	4801      	ldr	r0, [pc, #4]	; (8090 <multithreading_lock_release+0x8>)
    808a:	f005 bdef 	b.w	dc6c <z_impl_k_mutex_unlock>
    808e:	bf00      	nop
    8090:	200003d0 	.word	0x200003d0

00008094 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    8094:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    8096:	f7fd fa2f 	bl	54f8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    809a:	4b07      	ldr	r3, [pc, #28]	; (80b8 <k_sys_fatal_error_handler+0x24>)
    809c:	9305      	str	r3, [sp, #20]
    809e:	2302      	movs	r3, #2
    80a0:	9304      	str	r3, [sp, #16]
    80a2:	4806      	ldr	r0, [pc, #24]	; (80bc <k_sys_fatal_error_handler+0x28>)
    80a4:	2300      	movs	r3, #0
    80a6:	aa04      	add	r2, sp, #16
    80a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    80ac:	f7fd fb04 	bl	56b8 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    80b0:	2000      	movs	r0, #0
    80b2:	f7fe fe8b 	bl	6dcc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    80b6:	bf00      	nop
    80b8:	00015151 	.word	0x00015151
    80bc:	000143d8 	.word	0x000143d8

000080c0 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    80c0:	4901      	ldr	r1, [pc, #4]	; (80c8 <mpsl_low_prio_irq_handler+0x8>)
    80c2:	4802      	ldr	r0, [pc, #8]	; (80cc <mpsl_low_prio_irq_handler+0xc>)
    80c4:	f00b bd8c 	b.w	13be0 <k_work_submit_to_queue>
    80c8:	20001e40 	.word	0x20001e40
    80cc:	20000dd8 	.word	0x20000dd8

000080d0 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
    80d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    80d2:	2332      	movs	r3, #50	; 0x32
    80d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    80d8:	4a10      	ldr	r2, [pc, #64]	; (811c <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
    80da:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
    80dc:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    80de:	2119      	movs	r1, #25
    80e0:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
    80e2:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    80e6:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
    80ea:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    80ee:	f7fa ffc5 	bl	307c <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
    80f2:	4604      	mov	r4, r0
    80f4:	b970      	cbnz	r0, 8114 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    80f6:	4601      	mov	r1, r0
    80f8:	462a      	mov	r2, r5
    80fa:	2008      	movs	r0, #8
    80fc:	f7fe f8ba 	bl	6274 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    8100:	462a      	mov	r2, r5
    8102:	4621      	mov	r1, r4
    8104:	200b      	movs	r0, #11
    8106:	f7fe f8b5 	bl	6274 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    810a:	462a      	mov	r2, r5
    810c:	4621      	mov	r1, r4
    810e:	4628      	mov	r0, r5
    8110:	f7fe f8b0 	bl	6274 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
    8114:	4620      	mov	r0, r4
    8116:	b003      	add	sp, #12
    8118:	bd30      	pop	{r4, r5, pc}
    811a:	bf00      	nop
    811c:	00008121 	.word	0x00008121

00008120 <m_assert_handler>:
{
    8120:	b598      	push	{r3, r4, r7, lr}
    8122:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
    8124:	466c      	mov	r4, sp
    8126:	b08a      	sub	sp, #40	; 0x28
    8128:	466a      	mov	r2, sp
    812a:	4b0c      	ldr	r3, [pc, #48]	; (815c <m_assert_handler+0x3c>)
    812c:	61d1      	str	r1, [r2, #28]
    812e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    8132:	f44f 7300 	mov.w	r3, #512	; 0x200
    8136:	8413      	strh	r3, [r2, #32]
    8138:	4b09      	ldr	r3, [pc, #36]	; (8160 <m_assert_handler+0x40>)
    813a:	f842 3f10 	str.w	r3, [r2, #16]!
    813e:	4809      	ldr	r0, [pc, #36]	; (8164 <m_assert_handler+0x44>)
    8140:	2300      	movs	r3, #0
    8142:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    8146:	f7fd fab7 	bl	56b8 <z_impl_z_log_msg_static_create>
    814a:	46a5      	mov	sp, r4
	k_oops();
    814c:	4040      	eors	r0, r0
    814e:	f380 8811 	msr	BASEPRI, r0
    8152:	f04f 0003 	mov.w	r0, #3
    8156:	df02      	svc	2
}
    8158:	46bd      	mov	sp, r7
    815a:	bd98      	pop	{r3, r4, r7, pc}
    815c:	0001516e 	.word	0x0001516e
    8160:	01000004 	.word	0x01000004
    8164:	000143f8 	.word	0x000143f8

00008168 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
    8168:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    816a:	4d0d      	ldr	r5, [pc, #52]	; (81a0 <mpsl_low_prio_init+0x38>)
    816c:	490d      	ldr	r1, [pc, #52]	; (81a4 <mpsl_low_prio_init+0x3c>)
    816e:	2400      	movs	r4, #0
    8170:	9400      	str	r4, [sp, #0]
    8172:	f06f 0307 	mvn.w	r3, #7
    8176:	f44f 6280 	mov.w	r2, #1024	; 0x400
    817a:	4628      	mov	r0, r5
    817c:	f005 fef0 	bl	df60 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    8180:	4909      	ldr	r1, [pc, #36]	; (81a8 <mpsl_low_prio_init+0x40>)
    8182:	4628      	mov	r0, r5
    8184:	f00b fca7 	bl	13ad6 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    8188:	4908      	ldr	r1, [pc, #32]	; (81ac <mpsl_low_prio_init+0x44>)
    818a:	4809      	ldr	r0, [pc, #36]	; (81b0 <mpsl_low_prio_init+0x48>)
    818c:	f00b fd0b 	bl	13ba6 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    8190:	4622      	mov	r2, r4
    8192:	2104      	movs	r1, #4
    8194:	2019      	movs	r0, #25
    8196:	f7fe f86d 	bl	6274 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    819a:	4620      	mov	r0, r4
    819c:	b003      	add	sp, #12
    819e:	bd30      	pop	{r4, r5, pc}
    81a0:	20000dd8 	.word	0x20000dd8
    81a4:	20003f80 	.word	0x20003f80
    81a8:	00015182 	.word	0x00015182
    81ac:	000130cd 	.word	0x000130cd
    81b0:	20001e40 	.word	0x20001e40

000081b4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    81b4:	4b01      	ldr	r3, [pc, #4]	; (81bc <mpsl_hfclk_callback+0x8>)
    81b6:	2000      	movs	r0, #0
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	4718      	bx	r3
    81bc:	20001e50 	.word	0x20001e50

000081c0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    81c0:	b120      	cbz	r0, 81cc <nrfx_clock_start+0xc>
    81c2:	2801      	cmp	r0, #1
    81c4:	d106      	bne.n	81d4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    81c6:	4804      	ldr	r0, [pc, #16]	; (81d8 <nrfx_clock_start+0x18>)
    81c8:	f7fa bdf2 	b.w	2db0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    81cc:	4b03      	ldr	r3, [pc, #12]	; (81dc <nrfx_clock_start+0x1c>)
    81ce:	2001      	movs	r0, #1
    81d0:	681b      	ldr	r3, [r3, #0]
    81d2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    81d4:	4770      	bx	lr
    81d6:	bf00      	nop
    81d8:	000081b5 	.word	0x000081b5
    81dc:	20001e50 	.word	0x20001e50

000081e0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    81e0:	4b01      	ldr	r3, [pc, #4]	; (81e8 <nrfx_clock_init+0x8>)
    81e2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    81e4:	4801      	ldr	r0, [pc, #4]	; (81ec <nrfx_clock_init+0xc>)
    81e6:	4770      	bx	lr
    81e8:	20001e50 	.word	0x20001e50
    81ec:	0bad0000 	.word	0x0bad0000

000081f0 <temp_nrf5_mpsl_channel_get>:
}

static int temp_nrf5_mpsl_channel_get(const struct device *dev,
				      enum sensor_channel chan,
				      struct sensor_value *val)
{
    81f0:	b510      	push	{r4, lr}
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
    81f2:	290c      	cmp	r1, #12
	struct temp_nrf5_mpsl_data *data = dev->data;
    81f4:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    81f6:	d112      	bne.n	821e <temp_nrf5_mpsl_channel_get+0x2e>
		return -ENOTSUP;
	}

	uval = data->sample;
    81f8:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
    81fa:	4c0a      	ldr	r4, [pc, #40]	; (8224 <temp_nrf5_mpsl_channel_get+0x34>)
	uval_abs = (uval < 0) ? (-uval) : uval;
    81fc:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
    8200:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
    8204:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
    8206:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
    820a:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
    820c:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
    8210:	bfbc      	itt	lt
    8212:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
    8214:	425b      	neglt	r3, r3
	} else {
		val->val1 = (int32_t)val1_abs;
		val->val2 = (int32_t)val2_abs;
    8216:	e9c2 1300 	strd	r1, r3, [r2]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    821a:	2000      	movs	r0, #0
}
    821c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    821e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8222:	e7fb      	b.n	821c <temp_nrf5_mpsl_channel_get+0x2c>
    8224:	0003d090 	.word	0x0003d090

00008228 <nrf_802154_random_init>:
	state = 1664525 * num + 1013904223;
	return num;
}

void nrf_802154_random_init(void)
{
    8228:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    822a:	4b06      	ldr	r3, [pc, #24]	; (8244 <nrf_802154_random_init+0x1c>)
    822c:	4c06      	ldr	r4, [pc, #24]	; (8248 <nrf_802154_random_init+0x20>)
    822e:	689d      	ldr	r5, [r3, #8]
    8230:	4905      	ldr	r1, [pc, #20]	; (8248 <nrf_802154_random_init+0x20>)
    8232:	682b      	ldr	r3, [r5, #0]
    8234:	4803      	ldr	r0, [pc, #12]	; (8244 <nrf_802154_random_init+0x1c>)
    8236:	2204      	movs	r2, #4
    8238:	4798      	blx	r3
	__ASSERT_NO_MSG(device_is_ready(dev));

	do {
		err = entropy_get_entropy(dev, (uint8_t *)&state, sizeof(state));
		__ASSERT_NO_MSG(err == 0);
	} while (state == 0);
    823a:	6823      	ldr	r3, [r4, #0]
    823c:	2b00      	cmp	r3, #0
    823e:	d0f7      	beq.n	8230 <nrf_802154_random_init+0x8>
}
    8240:	bd38      	pop	{r3, r4, r5, pc}
    8242:	bf00      	nop
    8244:	00014338 	.word	0x00014338
    8248:	20001e58 	.word	0x20001e58

0000824c <nrf_802154_random_get>:
	uint32_t num = state;
    824c:	4a03      	ldr	r2, [pc, #12]	; (825c <nrf_802154_random_get+0x10>)
	state = 1664525 * num + 1013904223;
    824e:	4904      	ldr	r1, [pc, #16]	; (8260 <nrf_802154_random_get+0x14>)
	uint32_t num = state;
    8250:	6810      	ldr	r0, [r2, #0]
	state = 1664525 * num + 1013904223;
    8252:	4b04      	ldr	r3, [pc, #16]	; (8264 <nrf_802154_random_get+0x18>)
    8254:	fb01 3300 	mla	r3, r1, r0, r3
    8258:	6013      	str	r3, [r2, #0]
}

uint32_t nrf_802154_random_get(void)
{
	return next();
}
    825a:	4770      	bx	lr
    825c:	20001e58 	.word	0x20001e58
    8260:	0019660d 	.word	0x0019660d
    8264:	3c6ef35f 	.word	0x3c6ef35f

00008268 <nrf_802154_clock_hfclk_start>:
	hfclk_is_running = true;
	nrf_802154_clock_hfclk_ready();
}

void nrf_802154_clock_hfclk_start(void)
{
    8268:	b508      	push	{r3, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    826a:	2000      	movs	r0, #0
    826c:	f7fe febe 	bl	6fec <z_nrf_clock_control_get_onoff>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    8270:	4905      	ldr	r1, [pc, #20]	; (8288 <nrf_802154_clock_hfclk_start+0x20>)
    8272:	2300      	movs	r3, #0
    8274:	60cb      	str	r3, [r1, #12]
    8276:	4b05      	ldr	r3, [pc, #20]	; (828c <nrf_802154_clock_hfclk_start+0x24>)
    8278:	604b      	str	r3, [r1, #4]
    827a:	2303      	movs	r3, #3
    827c:	608b      	str	r3, [r1, #8]

	sys_notify_init_callback(&hfclk_cli.notify, hfclk_on_callback);

	ret = onoff_request(mgr, &hfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
}
    827e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = onoff_request(mgr, &hfclk_cli);
    8282:	f00a b90d 	b.w	124a0 <onoff_request>
    8286:	bf00      	nop
    8288:	20001e5c 	.word	0x20001e5c
    828c:	000082bd 	.word	0x000082bd

00008290 <nrf_802154_clock_hfclk_stop>:

void nrf_802154_clock_hfclk_stop(void)
{
    8290:	b510      	push	{r4, lr}
	int ret;
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    8292:	2000      	movs	r0, #0
    8294:	f7fe feaa 	bl	6fec <z_nrf_clock_control_get_onoff>
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    8298:	4906      	ldr	r1, [pc, #24]	; (82b4 <nrf_802154_clock_hfclk_stop+0x24>)
    829a:	4604      	mov	r4, r0
    829c:	f00a f97d 	bl	1259a <onoff_cancel>

	if (rv == -EALREADY) {
    82a0:	3078      	adds	r0, #120	; 0x78
    82a2:	d102      	bne.n	82aa <nrf_802154_clock_hfclk_stop+0x1a>
		rv = onoff_release(mgr);
    82a4:	4620      	mov	r0, r4
    82a6:	f00a f953 	bl	12550 <onoff_release>

	__ASSERT_NO_MSG(mgr != NULL);

	ret = onoff_cancel_or_release(mgr, &hfclk_cli);
	__ASSERT_NO_MSG(ret >= 0);
	hfclk_is_running = false;
    82aa:	4b03      	ldr	r3, [pc, #12]	; (82b8 <nrf_802154_clock_hfclk_stop+0x28>)
    82ac:	2200      	movs	r2, #0
    82ae:	701a      	strb	r2, [r3, #0]
}
    82b0:	bd10      	pop	{r4, pc}
    82b2:	bf00      	nop
    82b4:	20001e5c 	.word	0x20001e5c
    82b8:	20002eb4 	.word	0x20002eb4

000082bc <hfclk_on_callback>:
{
    82bc:	b508      	push	{r3, lr}
	hfclk_is_running = true;
    82be:	4b03      	ldr	r3, [pc, #12]	; (82cc <hfclk_on_callback+0x10>)
    82c0:	2201      	movs	r2, #1
    82c2:	701a      	strb	r2, [r3, #0]
	nrf_802154_clock_hfclk_ready();
    82c4:	f007 f82e 	bl	f324 <nrf_802154_clock_hfclk_ready>
}
    82c8:	bd08      	pop	{r3, pc}
    82ca:	bf00      	nop
    82cc:	20002eb4 	.word	0x20002eb4

000082d0 <nrf_802154_irq_set_pending>:
}

void nrf_802154_irq_set_pending(uint32_t irqn)
{
	/* Zephyr does not provide abstraction layer for setting pending IRQ */
	NVIC_SetPendingIRQ(irqn);
    82d0:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    82d2:	2800      	cmp	r0, #0
    82d4:	db08      	blt.n	82e8 <nrf_802154_irq_set_pending+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82d6:	0943      	lsrs	r3, r0, #5
    82d8:	4904      	ldr	r1, [pc, #16]	; (82ec <nrf_802154_irq_set_pending+0x1c>)
    82da:	f000 001f 	and.w	r0, r0, #31
    82de:	2201      	movs	r2, #1
    82e0:	3340      	adds	r3, #64	; 0x40
    82e2:	4082      	lsls	r2, r0
    82e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    82e8:	4770      	bx	lr
    82ea:	bf00      	nop
    82ec:	e000e100 	.word	0xe000e100

000082f0 <nrf_802154_irq_clear_pending>:

void nrf_802154_irq_clear_pending(uint32_t irqn)
{
	/* Zephyr does not provide abstraction layer for clearing pending IRQ */
	NVIC_ClearPendingIRQ(irqn);
    82f0:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    82f2:	2800      	cmp	r0, #0
    82f4:	db08      	blt.n	8308 <nrf_802154_irq_clear_pending+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    82f6:	0943      	lsrs	r3, r0, #5
    82f8:	4904      	ldr	r1, [pc, #16]	; (830c <nrf_802154_irq_clear_pending+0x1c>)
    82fa:	f000 001f 	and.w	r0, r0, #31
    82fe:	2201      	movs	r2, #1
    8300:	3360      	adds	r3, #96	; 0x60
    8302:	4082      	lsls	r2, r0
    8304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8308:	4770      	bx	lr
    830a:	bf00      	nop
    830c:	e000e100 	.word	0xe000e100

00008310 <nrf_802154_irq_priority_get>:
	return irq_is_enabled(irqn);
}

uint32_t nrf_802154_irq_priority_get(uint32_t irqn)
{
	return NVIC_GetPriority(irqn);
    8310:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    8312:	2800      	cmp	r0, #0
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    8314:	bfa7      	ittee	ge
    8316:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    831a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
    831e:	f000 000f 	andlt.w	r0, r0, #15
    8322:	4b03      	ldrlt	r3, [pc, #12]	; (8330 <nrf_802154_irq_priority_get+0x20>)
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    8324:	bfac      	ite	ge
    8326:	f890 0300 	ldrbge.w	r0, [r0, #768]	; 0x300
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
    832a:	5c18      	ldrblt	r0, [r3, r0]
    832c:	0940      	lsrs	r0, r0, #5
}
    832e:	4770      	bx	lr
    8330:	e000ed14 	.word	0xe000ed14

00008334 <temperature_update_init>:

	k_work_reschedule(&dwork, K_MSEC(CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD));
}

static int temperature_update_init(const struct device *dev)
{
    8334:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	__ASSERT_NO_MSG(device_is_ready(device));

	k_work_init_delayable(&dwork, work_handler);
    8336:	4c06      	ldr	r4, [pc, #24]	; (8350 <temperature_update_init+0x1c>)
    8338:	4906      	ldr	r1, [pc, #24]	; (8354 <temperature_update_init+0x20>)
    833a:	4620      	mov	r0, r4
    833c:	f00b fc61 	bl	13c02 <k_work_init_delayable>
	k_work_schedule(&dwork, K_NO_WAIT);
    8340:	2200      	movs	r2, #0
    8342:	2300      	movs	r3, #0
    8344:	4620      	mov	r0, r4
    8346:	f005 fe6d 	bl	e024 <k_work_schedule>

	return 0;
}
    834a:	2000      	movs	r0, #0
    834c:	bd10      	pop	{r4, pc}
    834e:	bf00      	nop
    8350:	20000e78 	.word	0x20000e78
    8354:	00008359 	.word	0x00008359

00008358 <work_handler>:
{
    8358:	b537      	push	{r0, r1, r2, r4, r5, lr}
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    835a:	4c0f      	ldr	r4, [pc, #60]	; (8398 <work_handler+0x40>)
    835c:	68a5      	ldr	r5, [r4, #8]
    835e:	2139      	movs	r1, #57	; 0x39
    8360:	68eb      	ldr	r3, [r5, #12]
    8362:	4620      	mov	r0, r4
    8364:	4798      	blx	r3
	if (!err) {
    8366:	b970      	cbnz	r0, 8386 <work_handler+0x2e>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    8368:	210c      	movs	r1, #12
    836a:	692b      	ldr	r3, [r5, #16]
    836c:	466a      	mov	r2, sp
    836e:	4620      	mov	r0, r4
    8370:	4798      	blx	r3
	if (!err && (value != val.val1)) {
    8372:	b940      	cbnz	r0, 8386 <work_handler+0x2e>
    8374:	4b09      	ldr	r3, [pc, #36]	; (839c <work_handler+0x44>)
    8376:	9a00      	ldr	r2, [sp, #0]
    8378:	f993 1000 	ldrsb.w	r1, [r3]
    837c:	4291      	cmp	r1, r2
    837e:	d002      	beq.n	8386 <work_handler+0x2e>
		value = val.val1;
    8380:	701a      	strb	r2, [r3, #0]
		nrf_802154_temperature_changed();
    8382:	f00a ff49 	bl	13218 <nrf_802154_temperature_changed>
	k_work_reschedule(&dwork, K_MSEC(CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD));
    8386:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    838a:	2300      	movs	r3, #0
    838c:	4804      	ldr	r0, [pc, #16]	; (83a0 <work_handler+0x48>)
    838e:	f005 fe7d 	bl	e08c <k_work_reschedule>
}
    8392:	b003      	add	sp, #12
    8394:	bd30      	pop	{r4, r5, pc}
    8396:	bf00      	nop
    8398:	00014380 	.word	0x00014380
    839c:	200001ec 	.word	0x200001ec
    83a0:	20000e78 	.word	0x20000e78

000083a4 <nrf_802154_temperature_get>:
}

int8_t nrf_802154_temperature_get(void)
{
	return value;
}
    83a4:	4b01      	ldr	r3, [pc, #4]	; (83ac <nrf_802154_temperature_get+0x8>)
    83a6:	f993 0000 	ldrsb.w	r0, [r3]
    83aa:	4770      	bx	lr
    83ac:	200001ec 	.word	0x200001ec

000083b0 <nrf_802154_hp_timer_init>:
}

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    83b0:	4b08      	ldr	r3, [pc, #32]	; (83d4 <nrf_802154_hp_timer_init+0x24>)
    83b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    83b6:	f042 0203 	orr.w	r2, r2, #3
    83ba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_timer_prescaler_set(NRF_TIMER_Type * p_reg, uint32_t prescaler_factor)
{
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
    p_reg->PRESCALER = prescaler_factor;
    83be:	2204      	movs	r2, #4
    83c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    83c4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    83c8:	f022 0203 	bic.w	r2, r2, #3
    83cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
void nrf_802154_hp_timer_init(void)
{
	nrf_timer_bit_width_set(TIMER, NRF_TIMER_BIT_WIDTH_32);
	nrf_timer_prescaler_set(TIMER, NRF_TIMER_FREQ_1MHz);
	nrf_timer_mode_set(TIMER, NRF_TIMER_MODE_TIMER);
}
    83d0:	4770      	bx	lr
    83d2:	bf00      	nop
    83d4:	40009000 	.word	0x40009000

000083d8 <nrf_802154_hp_timer_start>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83d8:	4b01      	ldr	r3, [pc, #4]	; (83e0 <nrf_802154_hp_timer_start+0x8>)
    83da:	2201      	movs	r2, #1
    83dc:	601a      	str	r2, [r3, #0]
}

void nrf_802154_hp_timer_start(void)
{
	nrf_timer_task_trigger(TIMER, NRF_TIMER_TASK_START);
}
    83de:	4770      	bx	lr
    83e0:	40009000 	.word	0x40009000

000083e4 <nrf_802154_hp_timer_stop>:

void nrf_802154_hp_timer_stop(void)
    83e4:	4b01      	ldr	r3, [pc, #4]	; (83ec <nrf_802154_hp_timer_stop+0x8>)
    83e6:	2201      	movs	r2, #1
    83e8:	611a      	str	r2, [r3, #16]
    83ea:	4770      	bx	lr
    83ec:	40009000 	.word	0x40009000

000083f0 <nrf_802154_hp_timer_sync_task_get>:
}

uint32_t nrf_802154_hp_timer_sync_task_get(void)
{
	return nrf_timer_task_address_get(TIMER, TIMER_CC_SYNC_TASK);
}
    83f0:	4800      	ldr	r0, [pc, #0]	; (83f4 <nrf_802154_hp_timer_sync_task_get+0x4>)
    83f2:	4770      	bx	lr
    83f4:	40009048 	.word	0x40009048

000083f8 <nrf_802154_hp_timer_sync_prepare>:
    83f8:	4a05      	ldr	r2, [pc, #20]	; (8410 <nrf_802154_hp_timer_sync_prepare+0x18>)

void nrf_802154_hp_timer_sync_prepare(void)
{
	uint32_t past_time = timer_time_get() - 1;

	m_unexpected_sync = past_time;
    83fa:	4906      	ldr	r1, [pc, #24]	; (8414 <nrf_802154_hp_timer_sync_prepare+0x1c>)
    83fc:	2301      	movs	r3, #1
    83fe:	6453      	str	r3, [r2, #68]	; 0x44
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
    8400:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
	uint32_t past_time = timer_time_get() - 1;
    8404:	3b01      	subs	r3, #1
	m_unexpected_sync = past_time;
    8406:	600b      	str	r3, [r1, #0]
    p_reg->CC[cc_channel] = cc_value;
    8408:	f8c2 3548 	str.w	r3, [r2, #1352]	; 0x548
	nrf_timer_cc_set(TIMER, TIMER_CC_SYNC, past_time);
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	40009000 	.word	0x40009000
    8414:	20001e6c 	.word	0x20001e6c

00008418 <nrf_802154_hp_timer_sync_time_get>:
    return (uint32_t)p_reg->CC[cc_channel];
    8418:	4b05      	ldr	r3, [pc, #20]	; (8430 <nrf_802154_hp_timer_sync_time_get+0x18>)
	bool result = false;
	uint32_t sync_time = nrf_timer_cc_get(TIMER, TIMER_CC_SYNC);

	assert(p_timestamp != NULL);

	if (sync_time != m_unexpected_sync) {
    841a:	4a06      	ldr	r2, [pc, #24]	; (8434 <nrf_802154_hp_timer_sync_time_get+0x1c>)
    841c:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
    8420:	6812      	ldr	r2, [r2, #0]
    8422:	429a      	cmp	r2, r3
		*p_timestamp = sync_time;
    8424:	bf1a      	itte	ne
    8426:	6003      	strne	r3, [r0, #0]
		result = true;
    8428:	2001      	movne	r0, #1
	bool result = false;
    842a:	2000      	moveq	r0, #0
	}

	return result;
}
    842c:	4770      	bx	lr
    842e:	bf00      	nop
    8430:	40009000 	.word	0x40009000
    8434:	20001e6c 	.word	0x20001e6c

00008438 <nrf_802154_hp_timer_timestamp_task_get>:

uint32_t nrf_802154_hp_timer_timestamp_task_get(void)
{
	return nrf_timer_task_address_get(TIMER, TIMER_CC_EVT_TASK);
}
    8438:	4800      	ldr	r0, [pc, #0]	; (843c <nrf_802154_hp_timer_timestamp_task_get+0x4>)
    843a:	4770      	bx	lr
    843c:	4000904c 	.word	0x4000904c

00008440 <nrf_802154_hp_timer_timestamp_get>:
    8440:	4b01      	ldr	r3, [pc, #4]	; (8448 <nrf_802154_hp_timer_timestamp_get+0x8>)
    8442:	f8d3 054c 	ldr.w	r0, [r3, #1356]	; 0x54c

uint32_t nrf_802154_hp_timer_timestamp_get(void)
{
	return nrf_timer_cc_get(TIMER, TIMER_CC_EVT);
}
    8446:	4770      	bx	lr
    8448:	40009000 	.word	0x40009000

0000844c <nrf_802154_hp_timer_current_time_get>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    844c:	4b02      	ldr	r3, [pc, #8]	; (8458 <nrf_802154_hp_timer_current_time_get+0xc>)
    844e:	2201      	movs	r2, #1
    8450:	645a      	str	r2, [r3, #68]	; 0x44
    return (uint32_t)p_reg->CC[cc_channel];
    8452:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544

uint32_t nrf_802154_hp_timer_current_time_get(void)
{
	return timer_time_get();
}
    8456:	4770      	bx	lr
    8458:	40009000 	.word	0x40009000

0000845c <sync_timer_handler>:

/**
 * @brief RTC IRQ handler for synchronization timer channel.
 */
void sync_timer_handler(int32_t id, uint64_t expire_time, void *user_data)
{
    845c:	4619      	mov	r1, r3
	/**
	 * Expire time might have been different than the desired target
	 * time. Update it so that a more accurate value can be returned
	 * by nrf_802154_lp_timer_sync_time_get.
	 */
	m_sync_timer.target_time = expire_time;
    845e:	4b03      	ldr	r3, [pc, #12]	; (846c <sync_timer_handler+0x10>)
{
    8460:	4610      	mov	r0, r2
	m_sync_timer.target_time = expire_time;
    8462:	e9c3 0102 	strd	r0, r1, [r3, #8]

	nrf_802154_sl_timestamper_synchronized();
    8466:	f007 b933 	b.w	f6d0 <nrf_802154_sl_timestamper_synchronized>
    846a:	bf00      	nop
    846c:	20000ea8 	.word	0x20000ea8

00008470 <nrf_802154_platform_sl_lp_timer_init>:

	nrf_802154_sl_mcu_critical_exit(state);
}

void nrf_802154_platform_sl_lp_timer_init(void)
{
    8470:	b538      	push	{r3, r4, r5, lr}
	m_in_critical_section = false;
    8472:	4b09      	ldr	r3, [pc, #36]	; (8498 <nrf_802154_platform_sl_lp_timer_init+0x28>)
	m_timer.handler = timer_handler;
    8474:	4d09      	ldr	r5, [pc, #36]	; (849c <nrf_802154_platform_sl_lp_timer_init+0x2c>)
	m_sync_timer.handler = sync_timer_handler;
    8476:	4c0a      	ldr	r4, [pc, #40]	; (84a0 <nrf_802154_platform_sl_lp_timer_init+0x30>)
	m_in_critical_section = false;
    8478:	2200      	movs	r2, #0
    847a:	701a      	strb	r2, [r3, #0]
	m_timer.handler = timer_handler;
    847c:	4b09      	ldr	r3, [pc, #36]	; (84a4 <nrf_802154_platform_sl_lp_timer_init+0x34>)
    847e:	602b      	str	r3, [r5, #0]
	m_sync_timer.handler = sync_timer_handler;
    8480:	4b09      	ldr	r3, [pc, #36]	; (84a8 <nrf_802154_platform_sl_lp_timer_init+0x38>)
    8482:	6023      	str	r3, [r4, #0]

	m_timer.chan = z_nrf_rtc_timer_chan_alloc();
    8484:	f7ff fce0 	bl	7e48 <z_nrf_rtc_timer_chan_alloc>
	if (m_timer.chan < 0) {
    8488:	2800      	cmp	r0, #0
	m_timer.chan = z_nrf_rtc_timer_chan_alloc();
    848a:	6128      	str	r0, [r5, #16]
	if (m_timer.chan < 0) {
    848c:	db02      	blt.n	8494 <nrf_802154_platform_sl_lp_timer_init+0x24>
		assert(false);
		return;
	}

	m_sync_timer.chan = z_nrf_rtc_timer_chan_alloc();
    848e:	f7ff fcdb 	bl	7e48 <z_nrf_rtc_timer_chan_alloc>
    8492:	6120      	str	r0, [r4, #16]
	if (m_sync_timer.chan < 0) {
		assert(false);
		return;
	}
}
    8494:	bd38      	pop	{r3, r4, r5, pc}
    8496:	bf00      	nop
    8498:	20002eb5 	.word	0x20002eb5
    849c:	20000ec0 	.word	0x20000ec0
    84a0:	20000ea8 	.word	0x20000ea8
    84a4:	00013193 	.word	0x00013193
    84a8:	0000845d 	.word	0x0000845d

000084ac <nrf_802154_platform_sl_lptimer_schedule_at>:
	 */
	return NRF_802154_SL_RTC_TICKS_TO_US(lpticks);
}

void nrf_802154_platform_sl_lptimer_schedule_at(uint64_t fire_lpticks)
{
    84ac:	4602      	mov	r2, r0
    84ae:	460b      	mov	r3, r1
	/* This function is not required to be reentrant, hence no critical section. */
	timer_start_at(&m_timer, fire_lpticks);
    84b0:	4801      	ldr	r0, [pc, #4]	; (84b8 <nrf_802154_platform_sl_lptimer_schedule_at+0xc>)
    84b2:	f00a be75 	b.w	131a0 <timer_start_at>
    84b6:	bf00      	nop
    84b8:	20000ec0 	.word	0x20000ec0

000084bc <nrf_802154_platform_sl_lptimer_disable>:
}

void nrf_802154_platform_sl_lptimer_disable(void)
{
	z_nrf_rtc_timer_abort(m_timer.chan);
    84bc:	4b01      	ldr	r3, [pc, #4]	; (84c4 <nrf_802154_platform_sl_lptimer_disable+0x8>)
    84be:	6918      	ldr	r0, [r3, #16]
    84c0:	f7ff bb0a 	b.w	7ad8 <z_nrf_rtc_timer_abort>
    84c4:	20000ec0 	.word	0x20000ec0

000084c8 <nrf_802154_platform_sl_lptimer_critical_section_enter>:
}

void nrf_802154_platform_sl_lptimer_critical_section_enter(void)
{
    84c8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    84ca:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    84ce:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	if (!m_in_critical_section) {
    84d0:	4c08      	ldr	r4, [pc, #32]	; (84f4 <nrf_802154_platform_sl_lptimer_critical_section_enter+0x2c>)
    84d2:	7823      	ldrb	r3, [r4, #0]
    84d4:	b95b      	cbnz	r3, 84ee <nrf_802154_platform_sl_lptimer_critical_section_enter+0x26>
		m_timer.int_lock_key = z_nrf_rtc_timer_compare_int_lock(m_timer.chan);
    84d6:	4d08      	ldr	r5, [pc, #32]	; (84f8 <nrf_802154_platform_sl_lptimer_critical_section_enter+0x30>)
    84d8:	6928      	ldr	r0, [r5, #16]
    84da:	f00a fdc8 	bl	1306e <z_nrf_rtc_timer_compare_int_lock>
    84de:	6168      	str	r0, [r5, #20]
		m_sync_timer.int_lock_key = z_nrf_rtc_timer_compare_int_lock(m_sync_timer.chan);
    84e0:	4d06      	ldr	r5, [pc, #24]	; (84fc <nrf_802154_platform_sl_lptimer_critical_section_enter+0x34>)
    84e2:	6928      	ldr	r0, [r5, #16]
    84e4:	f00a fdc3 	bl	1306e <z_nrf_rtc_timer_compare_int_lock>
		m_in_critical_section = true;
    84e8:	2301      	movs	r3, #1
		m_sync_timer.int_lock_key = z_nrf_rtc_timer_compare_int_lock(m_sync_timer.chan);
    84ea:	6168      	str	r0, [r5, #20]
		m_in_critical_section = true;
    84ec:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    84ee:	f386 8810 	msr	PRIMASK, r6
	}

	nrf_802154_sl_mcu_critical_exit(state);
}
    84f2:	bd70      	pop	{r4, r5, r6, pc}
    84f4:	20002eb5 	.word	0x20002eb5
    84f8:	20000ec0 	.word	0x20000ec0
    84fc:	20000ea8 	.word	0x20000ea8

00008500 <nrf_802154_platform_sl_lptimer_critical_section_exit>:

void nrf_802154_platform_sl_lptimer_critical_section_exit(void)
{
    8500:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8502:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    8506:	b672      	cpsid	i
	nrf_802154_sl_mcu_critical_state_t state;

	nrf_802154_sl_mcu_critical_enter(state);

	m_in_critical_section = false;
    8508:	4b0a      	ldr	r3, [pc, #40]	; (8534 <nrf_802154_platform_sl_lptimer_critical_section_exit+0x34>)
    850a:	2200      	movs	r2, #0
    850c:	701a      	strb	r2, [r3, #0]

	z_nrf_rtc_timer_compare_int_unlock(m_timer.chan, m_timer.int_lock_key);
    850e:	4b0a      	ldr	r3, [pc, #40]	; (8538 <nrf_802154_platform_sl_lptimer_critical_section_exit+0x38>)
    8510:	6959      	ldr	r1, [r3, #20]
    8512:	6918      	ldr	r0, [r3, #16]
    8514:	1a89      	subs	r1, r1, r2
    8516:	bf18      	it	ne
    8518:	2101      	movne	r1, #1
    851a:	f00a fdaa 	bl	13072 <z_nrf_rtc_timer_compare_int_unlock>
	z_nrf_rtc_timer_compare_int_unlock(m_sync_timer.chan, m_sync_timer.int_lock_key);
    851e:	4b07      	ldr	r3, [pc, #28]	; (853c <nrf_802154_platform_sl_lptimer_critical_section_exit+0x3c>)
    8520:	6959      	ldr	r1, [r3, #20]
    8522:	6918      	ldr	r0, [r3, #16]
    8524:	3900      	subs	r1, #0
    8526:	bf18      	it	ne
    8528:	2101      	movne	r1, #1
    852a:	f00a fda2 	bl	13072 <z_nrf_rtc_timer_compare_int_unlock>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    852e:	f384 8810 	msr	PRIMASK, r4

	nrf_802154_sl_mcu_critical_exit(state);
}
    8532:	bd10      	pop	{r4, pc}
    8534:	20002eb5 	.word	0x20002eb5
    8538:	20000ec0 	.word	0x20000ec0
    853c:	20000ea8 	.word	0x20000ea8

00008540 <nrf_802154_platform_sl_lptimer_sync_schedule_now>:
{
	return NRF_802154_SL_US_PER_TICK;
}

void nrf_802154_platform_sl_lptimer_sync_schedule_now(void)
{
    8540:	b510      	push	{r4, lr}
	uint64_t now = z_nrf_rtc_timer_read();
    8542:	f7ff faf9 	bl	7b38 <z_nrf_rtc_timer_read>

	/**
	 * Despite this function's name, synchronization is not expected to be
	 * scheduled for the current tick. Add a safe 3-tick margin
	 */
	timer_start_at(&m_sync_timer, now + 3);
    8546:	1cc2      	adds	r2, r0, #3
}
    8548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	timer_start_at(&m_sync_timer, now + 3);
    854c:	4802      	ldr	r0, [pc, #8]	; (8558 <nrf_802154_platform_sl_lptimer_sync_schedule_now+0x18>)
    854e:	f141 0300 	adc.w	r3, r1, #0
    8552:	f00a be25 	b.w	131a0 <timer_start_at>
    8556:	bf00      	nop
    8558:	20000ea8 	.word	0x20000ea8

0000855c <nrf_802154_platform_sl_lptimer_sync_schedule_at>:

void nrf_802154_platform_sl_lptimer_sync_schedule_at(uint64_t fire_lpticks)
{
    855c:	4602      	mov	r2, r0
    855e:	460b      	mov	r3, r1
	timer_start_at(&m_sync_timer, fire_lpticks);
    8560:	4801      	ldr	r0, [pc, #4]	; (8568 <nrf_802154_platform_sl_lptimer_sync_schedule_at+0xc>)
    8562:	f00a be1d 	b.w	131a0 <timer_start_at>
    8566:	bf00      	nop
    8568:	20000ea8 	.word	0x20000ea8

0000856c <nrf_802154_platform_sl_lptimer_sync_abort>:
}

void nrf_802154_platform_sl_lptimer_sync_abort(void)
{
	z_nrf_rtc_timer_abort(m_sync_timer.chan);
    856c:	4b01      	ldr	r3, [pc, #4]	; (8574 <nrf_802154_platform_sl_lptimer_sync_abort+0x8>)
    856e:	6918      	ldr	r0, [r3, #16]
    8570:	f7ff bab2 	b.w	7ad8 <z_nrf_rtc_timer_abort>
    8574:	20000ea8 	.word	0x20000ea8

00008578 <nrf_802154_platform_sl_lptimer_sync_event_get>:
}

uint32_t nrf_802154_platform_sl_lptimer_sync_event_get(void)
{
	return z_nrf_rtc_timer_compare_evt_address_get(m_sync_timer.chan);
    8578:	4b01      	ldr	r3, [pc, #4]	; (8580 <nrf_802154_platform_sl_lptimer_sync_event_get+0x8>)
    857a:	6918      	ldr	r0, [r3, #16]
    857c:	f7ff baa4 	b.w	7ac8 <z_nrf_rtc_timer_compare_evt_address_get>
    8580:	20000ea8 	.word	0x20000ea8

00008584 <nrf_802154_platform_sl_lptimer_sync_lpticks_get>:
}

uint64_t nrf_802154_platform_sl_lptimer_sync_lpticks_get(void)
{
	return m_sync_timer.target_time;
}
    8584:	4b01      	ldr	r3, [pc, #4]	; (858c <nrf_802154_platform_sl_lptimer_sync_lpticks_get+0x8>)
    8586:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    858a:	4770      	bx	lr
    858c:	20000ea8 	.word	0x20000ea8

00008590 <nrf_802154_init>:
{
    return end_timestamp - (psdu_length * PHY_SYMBOLS_PER_OCTET * PHY_US_PER_SYMBOL);
}

void nrf_802154_init(void)
{
    8590:	b508      	push	{r3, lr}
    {
        .enter = nrf_802154_critical_section_enter,
        .exit  = nrf_802154_critical_section_exit
    };

    nrf_802154_ack_data_init();
    8592:	f003 fd8b 	bl	c0ac <nrf_802154_ack_data_init>
    nrf_802154_core_init();
    8596:	f001 f899 	bl	96cc <nrf_802154_core_init>
    nrf_802154_clock_init();
    859a:	f00a fde8 	bl	1316e <nrf_802154_clock_init>
    nrf_802154_critical_section_init();
    859e:	f001 fabb 	bl	9b18 <nrf_802154_critical_section_init>
    nrf_802154_sl_crit_sect_init(&crit_sect_int);
    85a2:	4811      	ldr	r0, [pc, #68]	; (85e8 <nrf_802154_init+0x58>)
    85a4:	f006 fcce 	bl	ef44 <nrf_802154_sl_crit_sect_init>
    nrf_802154_debug_init();
    85a8:	f00a ff0c 	bl	133c4 <nrf_802154_debug_init>
    nrf_802154_notification_init();
    85ac:	f004 f98e 	bl	c8cc <nrf_802154_notification_init>
    nrf_802154_pib_init();
    85b0:	f001 fb30 	bl	9c14 <nrf_802154_pib_init>
    nrf_802154_security_pib_init();
    85b4:	f003 fc44 	bl	be40 <nrf_802154_security_pib_init>
    nrf_802154_sl_timer_module_init();
    85b8:	f006 ff38 	bl	f42c <nrf_802154_sl_timer_module_init>
    nrf_802154_random_init();
    85bc:	f7ff fe34 	bl	8228 <nrf_802154_random_init>
    nrf_802154_request_init();
    85c0:	f004 fa1a 	bl	c9f8 <nrf_802154_request_init>
    nrf_802154_rsch_crit_sect_init();
    85c4:	f006 fed2 	bl	f36c <nrf_802154_rsch_crit_sect_init>
    nrf_802154_rsch_init();
    85c8:	f006 fd48 	bl	f05c <nrf_802154_rsch_init>
    nrf_802154_rx_buffer_init();
    85cc:	f001 fbca 	bl	9d64 <nrf_802154_rx_buffer_init>
    nrf_802154_temperature_init();
    85d0:	f00a fdde 	bl	13190 <nrf_802154_temperature_init>
    nrf_802154_timer_coord_init();
    85d4:	f006 ffba 	bl	f54c <nrf_802154_timer_coord_init>
#if NRF_802154_ACK_TIMEOUT_ENABLED
    nrf_802154_ack_timeout_init();
    85d8:	f003 fcc2 	bl	bf60 <nrf_802154_ack_timeout_init>
#endif
#if NRF_802154_DELAYED_TRX_ENABLED
    nrf_802154_delayed_trx_init();
    85dc:	f002 ffd0 	bl	b580 <nrf_802154_delayed_trx_init>
#endif
#if NRF_802154_IFS_ENABLED
    nrf_802154_ifs_init();
#endif
}
    85e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_ifs_init();
    85e4:	f003 bb0c 	b.w	bc00 <nrf_802154_ifs_init>
    85e8:	000146a8 	.word	0x000146a8

000085ec <nrf_802154_transmit_raw>:
}

#if NRF_802154_USE_RAW_API
bool nrf_802154_transmit_raw(uint8_t                              * p_data,
                             const nrf_802154_transmit_metadata_t * p_metadata)
{
    85ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
            .frame_props = NRF_802154_TRANSMITTED_FRAME_PROPS_DEFAULT_INIT,
            .cca         = true,
            .tx_power    = {.use_metadata_value = false}
        };

        p_metadata = &metadata_default;
    85ee:	4b15      	ldr	r3, [pc, #84]	; (8644 <nrf_802154_transmit_raw+0x58>)
    85f0:	2900      	cmp	r1, #0
    85f2:	bf14      	ite	ne
    85f4:	460c      	movne	r4, r1
    85f6:	461c      	moveq	r4, r3
    }

    nrf_802154_transmit_params_t params =
    85f8:	2600      	movs	r6, #0
    85fa:	8823      	ldrh	r3, [r4, #0]
    85fc:	f8ad 3008 	strh.w	r3, [sp, #8]
    8600:	78a3      	ldrb	r3, [r4, #2]
    8602:	f8cd 600a 	str.w	r6, [sp, #10]
{
    8606:	4605      	mov	r5, r0
    nrf_802154_transmit_params_t params =
    8608:	f88d 300d 	strb.w	r3, [sp, #13]
    860c:	f88d 600e 	strb.w	r6, [sp, #14]
        .tx_power    = {0},
        .cca         = p_metadata->cca,
        .immediate   = false
    };

    (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(nrf_802154_pib_channel_get(),
    8610:	f001 fb42 	bl	9c98 <nrf_802154_pib_channel_get>
    8614:	78e3      	ldrb	r3, [r4, #3]
    8616:	7921      	ldrb	r1, [r4, #4]
    8618:	f10d 020a 	add.w	r2, sp, #10
    861c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    8620:	f00a ff71 	bl	13506 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>
                                                                 p_metadata->tx_power,
                                                                 &params.tx_power);

    result = are_frame_properties_valid(&params.frame_props);
    8624:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return p_props->dynamic_data_is_set || !(p_props->is_secured);
    8628:	f89d 3008 	ldrb.w	r3, [sp, #8]
    862c:	b900      	cbnz	r0, 8630 <nrf_802154_transmit_raw+0x44>
    862e:	b933      	cbnz	r3, 863e <nrf_802154_transmit_raw+0x52>
    if (result)
    {
        result = nrf_802154_request_transmit(NRF_802154_TERM_NONE,
    8630:	2100      	movs	r1, #0
    8632:	9600      	str	r6, [sp, #0]
    8634:	ab02      	add	r3, sp, #8
    8636:	462a      	mov	r2, r5
    8638:	4608      	mov	r0, r1
    863a:	f00b f8f6 	bl	1382a <nrf_802154_request_transmit>
                                             NULL);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
    863e:	b004      	add	sp, #16
    8640:	bd70      	pop	{r4, r5, r6, pc}
    8642:	bf00      	nop
    8644:	000151ca 	.word	0x000151ca

00008648 <nrf_802154_received_raw>:
    (void)p_data;
}

#if NRF_802154_USE_RAW_API
__WEAK void nrf_802154_received_raw(uint8_t * p_data, int8_t power, uint8_t lqi)
{
    8648:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    864a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    864e:	b672      	cpsid	i
    uint64_t timestamp;

    nrf_802154_stat_timestamp_read(&timestamp, last_rx_end_timestamp);
    8650:	4c05      	ldr	r4, [pc, #20]	; (8668 <nrf_802154_received_raw+0x20>)
    8652:	e9d4 4512 	ldrd	r4, r5, [r4, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    8656:	f383 8810 	msr	PRIMASK, r3

    nrf_802154_received_timestamp_raw(p_data,
    865a:	e9cd 4500 	strd	r4, r5, [sp]
    865e:	f00a fde3 	bl	13228 <nrf_802154_received_timestamp_raw>
                                      power,
                                      lqi,
                                      timestamp);
}
    8662:	b003      	add	sp, #12
    8664:	bd30      	pop	{r4, r5, pc}
    8666:	bf00      	nop
    8668:	20000f18 	.word	0x20000f18

0000866c <rx_buffer_is_available>:
 * @retval true   There is available rx buffer.
 * @retval false  Currently there is no available rx buffer.
 */
static bool rx_buffer_is_available(void)
{
    return (mp_current_rx_buffer != NULL) && (mp_current_rx_buffer->free);
    866c:	4b03      	ldr	r3, [pc, #12]	; (867c <rx_buffer_is_available+0x10>)
    866e:	6818      	ldr	r0, [r3, #0]
    8670:	b108      	cbz	r0, 8676 <rx_buffer_is_available+0xa>
    8672:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
}
    8676:	f000 0001 	and.w	r0, r0, #1
    867a:	4770      	bx	lr
    867c:	20001e9c 	.word	0x20001e9c

00008680 <rx_buffer_get>:
/** Get pointer to available rx buffer.
 *
 * @returns Pointer to available rx buffer or NULL if rx buffer is not available.
 */
static uint8_t * rx_buffer_get(void)
{
    8680:	b508      	push	{r3, lr}
    return rx_buffer_is_available() ? mp_current_rx_buffer->data : NULL;
    8682:	f7ff fff3 	bl	866c <rx_buffer_is_available>
    8686:	b108      	cbz	r0, 868c <rx_buffer_get+0xc>
    8688:	4b01      	ldr	r3, [pc, #4]	; (8690 <rx_buffer_get+0x10>)
    868a:	6818      	ldr	r0, [r3, #0]
}
    868c:	bd08      	pop	{r3, pc}
    868e:	bf00      	nop
    8690:	20001e9c 	.word	0x20001e9c

00008694 <min_required_rsch_prio>:
 * @section FSM transition request sub-procedures
 **************************************************************************************************/

static rsch_prio_t min_required_rsch_prio(radio_state_t state)
{
    switch (state)
    8694:	1e43      	subs	r3, r0, #1
    8696:	2b09      	cmp	r3, #9
    8698:	d806      	bhi.n	86a8 <min_required_rsch_prio+0x14>
    869a:	e8df f003 	tbb	[pc, r3]
    869e:	0707      	.short	0x0707
    86a0:	12100910 	.word	0x12100910
    86a4:	10101212 	.word	0x10101212
    {
        case RADIO_STATE_SLEEP:
            return RSCH_PRIO_IDLE;
    86a8:	2000      	movs	r0, #0
    86aa:	4770      	bx	lr

        case RADIO_STATE_FALLING_ASLEEP:
        case RADIO_STATE_RX:
            return RSCH_PRIO_IDLE_LISTENING;
    86ac:	2001      	movs	r0, #1
    86ae:	4770      	bx	lr
        case RADIO_STATE_MODULATED_CARRIER:
#endif // NRF_802154_CARRIER_FUNCTIONS_ENABLED
            return RSCH_PRIO_TX;

        case RADIO_STATE_CCA_TX:
            if (m_flags.tx_diminished_prio)
    86b0:	4b05      	ldr	r3, [pc, #20]	; (86c8 <min_required_rsch_prio+0x34>)
    86b2:	781b      	ldrb	r3, [r3, #0]
            return RSCH_PRIO_IDLE_LISTENING;
    86b4:	f013 0f10 	tst.w	r3, #16
    86b8:	bf18      	it	ne
    86ba:	2001      	movne	r0, #1
    86bc:	4770      	bx	lr
            return RSCH_PRIO_TX;
    86be:	2004      	movs	r0, #4
    86c0:	4770      	bx	lr
    switch (state)
    86c2:	2002      	movs	r0, #2

        default:
            assert(false);
            return RSCH_PRIO_IDLE;
    }
}
    86c4:	4770      	bx	lr
    86c6:	bf00      	nop
    86c8:	20002ebc 	.word	0x20002ebc

000086cc <are_preconditions_met>:
{
    return (min_required_rsch_prio(state) <= prio);
}

static bool are_preconditions_met(void)
{
    86cc:	b508      	push	{r3, lr}
    rsch_prio_t   current_prio;
    radio_state_t current_state;

    current_prio  = m_rsch_priority;
    86ce:	4b06      	ldr	r3, [pc, #24]	; (86e8 <are_preconditions_met+0x1c>)
    86d0:	7819      	ldrb	r1, [r3, #0]
    current_state = m_state;
    86d2:	4b06      	ldr	r3, [pc, #24]	; (86ec <are_preconditions_met+0x20>)
    86d4:	7818      	ldrb	r0, [r3, #0]
    return (min_required_rsch_prio(state) <= prio);
    86d6:	f7ff ffdd 	bl	8694 <min_required_rsch_prio>
    current_prio  = m_rsch_priority;
    86da:	b2c9      	uxtb	r1, r1

    return is_state_allowed_for_prio(current_prio, current_state);
}
    86dc:	4281      	cmp	r1, r0
    86de:	bf34      	ite	cc
    86e0:	2000      	movcc	r0, #0
    86e2:	2001      	movcs	r0, #1
    86e4:	bd08      	pop	{r3, pc}
    86e6:	bf00      	nop
    86e8:	20002eba 	.word	0x20002eba
    86ec:	20002ebd 	.word	0x20002ebd

000086f0 <update_total_times_on_receive_end>:
{
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));

    if (phr)
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
    86f0:	0152      	lsls	r2, r2, #5
{
    uint32_t t_listening;
    uint32_t t_frame;

    t_frame     = nrf_802154_frame_duration_get(phr, true, true);
    t_listening = receive_end_hp_timestamp - listening_start_hp_timestamp;
    86f2:	1a09      	subs	r1, r1, r0
    t_frame     = nrf_802154_frame_duration_get(phr, true, true);
    86f4:	32c0      	adds	r2, #192	; 0xc0
    86f6:	428a      	cmp	r2, r1
{
    86f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86fa:	bf28      	it	cs
    86fc:	460a      	movcs	r2, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    86fe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    8702:	b672      	cpsid	i
        t_frame = t_listening;
    }

    t_listening -= t_frame;

    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
    8704:	4b0b      	ldr	r3, [pc, #44]	; (8734 <update_total_times_on_receive_end+0x44>)
    8706:	e9d3 6700 	ldrd	r6, r7, [r3]
    t_listening -= t_frame;
    870a:	1a89      	subs	r1, r1, r2
    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
    870c:	198c      	adds	r4, r1, r6
    870e:	f147 0500 	adc.w	r5, r7, #0
    8712:	e9c3 4500 	strd	r4, r5, [r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    8716:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    871a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    871e:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_receive_time, t_frame);
    8720:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    8724:	1910      	adds	r0, r2, r4
    8726:	f145 0100 	adc.w	r1, r5, #0
    872a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    872e:	f386 8810 	msr	PRIMASK, r6
}
    8732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8734:	20000f00 	.word	0x20000f00

00008738 <sleep_init>:
    return m_rsch_timeslot_is_granted;
    8738:	4b02      	ldr	r3, [pc, #8]	; (8744 <sleep_init+0xc>)
    873a:	781b      	ldrb	r3, [r3, #0]
    if (timeslot_is_granted())
    873c:	b10b      	cbz	r3, 8742 <sleep_init+0xa>
        nrf_802154_timer_coord_stop();
    873e:	f006 bf41 	b.w	f5c4 <nrf_802154_timer_coord_stop>
}
    8742:	4770      	bx	lr
    8744:	20002ebb 	.word	0x20002ebb

00008748 <receive_failed_notify>:
{
    8748:	b510      	push	{r4, lr}
    874a:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
    874c:	f001 fa56 	bl	9bfc <nrf_802154_critical_section_nesting_allow>
    (void)nrf_802154_notify_receive_failed(error, m_rx_window_id, true);
    8750:	4b04      	ldr	r3, [pc, #16]	; (8764 <receive_failed_notify+0x1c>)
    8752:	4620      	mov	r0, r4
    8754:	6819      	ldr	r1, [r3, #0]
    8756:	2201      	movs	r2, #1
    8758:	f00b f817 	bl	1378a <nrf_802154_notify_receive_failed>
}
    875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
    8760:	f001 ba08 	b.w	9b74 <nrf_802154_critical_section_nesting_deny>
    8764:	20001e74 	.word	0x20001e74

00008768 <received_frame_notify_and_nesting_allow>:
{
    8768:	b510      	push	{r4, lr}
    876a:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
    876c:	f001 fa46 	bl	9bfc <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_received(p_data, m_last_rssi, m_last_lqi);
    8770:	4b05      	ldr	r3, [pc, #20]	; (8788 <received_frame_notify_and_nesting_allow+0x20>)
    8772:	781a      	ldrb	r2, [r3, #0]
    8774:	4b05      	ldr	r3, [pc, #20]	; (878c <received_frame_notify_and_nesting_allow+0x24>)
    8776:	4620      	mov	r0, r4
    8778:	f993 1000 	ldrsb.w	r1, [r3]
    877c:	f00b f803 	bl	13786 <nrf_802154_notify_received>
}
    8780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
    8784:	f001 b9f6 	b.w	9b74 <nrf_802154_critical_section_nesting_deny>
    8788:	20002ec2 	.word	0x20002ec2
    878c:	20002ebe 	.word	0x20002ebe

00008790 <state_set>:
    m_state = state;
    8790:	4a01      	ldr	r2, [pc, #4]	; (8798 <state_set+0x8>)
    8792:	7010      	strb	r0, [r2, #0]
    request_preconditions_for_state(state);
    8794:	f00a bd4f 	b.w	13236 <request_preconditions_for_state>
    8798:	20002ebd 	.word	0x20002ebd

0000879c <transmit_failed_notify_and_nesting_allow>:
{
    879c:	b538      	push	{r3, r4, r5, lr}
    879e:	4604      	mov	r4, r0
    87a0:	460d      	mov	r5, r1
    nrf_802154_critical_section_nesting_allow();
    87a2:	f001 fa2b 	bl	9bfc <nrf_802154_critical_section_nesting_allow>
    transmit_failed_notify(mp_tx_data, error, p_meta);
    87a6:	4b05      	ldr	r3, [pc, #20]	; (87bc <transmit_failed_notify_and_nesting_allow+0x20>)
    87a8:	462a      	mov	r2, r5
    87aa:	6818      	ldr	r0, [r3, #0]
    87ac:	4621      	mov	r1, r4
    87ae:	f00a fd49 	bl	13244 <transmit_failed_notify>
}
    87b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    nrf_802154_critical_section_nesting_deny();
    87b6:	f001 b9dd 	b.w	9b74 <nrf_802154_critical_section_nesting_deny>
    87ba:	bf00      	nop
    87bc:	20001e94 	.word	0x20001e94

000087c0 <rx_data_clear>:
    (void)nrf_802154_frame_parser_data_init(mp_current_rx_buffer->data,
    87c0:	4803      	ldr	r0, [pc, #12]	; (87d0 <rx_data_clear+0x10>)
    87c2:	4b04      	ldr	r3, [pc, #16]	; (87d4 <rx_data_clear+0x14>)
    87c4:	6800      	ldr	r0, [r0, #0]
    87c6:	2200      	movs	r2, #0
    87c8:	4611      	mov	r1, r2
    87ca:	f00a bf51 	b.w	13670 <nrf_802154_frame_parser_data_init>
    87ce:	bf00      	nop
    87d0:	20001e9c 	.word	0x20001e9c
    87d4:	20001e78 	.word	0x20001e78

000087d8 <tx_init>:
{
    87d8:	b570      	push	{r4, r5, r6, lr}
    return m_rsch_timeslot_is_granted;
    87da:	4b1b      	ldr	r3, [pc, #108]	; (8848 <tx_init+0x70>)
    87dc:	781b      	ldrb	r3, [r3, #0]
{
    87de:	4606      	mov	r6, r0
    87e0:	460d      	mov	r5, r1
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(
    87e2:	b913      	cbnz	r3, 87ea <tx_init+0x12>
        return false;
    87e4:	2400      	movs	r4, #0
}
    87e6:	4620      	mov	r0, r4
    87e8:	bd70      	pop	{r4, r5, r6, pc}
            nrf_802154_tx_duration_get(p_data[0], cca, ack_is_requested(p_data))))
    87ea:	7804      	ldrb	r4, [r0, #0]
    87ec:	f00a fd39 	bl	13262 <ack_is_requested>
    87f0:	1c63      	adds	r3, r4, #1
    87f2:	015b      	lsls	r3, r3, #5
    uint16_t us_time = MAX_RAMP_DOWN_TIME + TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(
        psdu_length,
        true,
        true);

    if (ack_requested)
    87f4:	bb08      	cbnz	r0, 883a <tx_init+0x62>
    uint16_t us_time = MAX_RAMP_DOWN_TIME + TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(
    87f6:	f103 00ce 	add.w	r0, r3, #206	; 0xce
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(MAC_IMM_ACK_WAIT_SYMBOLS);
    }

    if (cca)
    87fa:	b10d      	cbz	r5, 8800 <tx_init+0x28>
    {
        us_time += RX_RAMP_UP_TIME + RX_RAMP_DOWN_TIME + PHY_US_TIME_FROM_SYMBOLS(
    87fc:	30a8      	adds	r0, #168	; 0xa8
    87fe:	b280      	uxth	r0, r0
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(
    8800:	f00b fc19 	bl	14036 <nrf_802154_rsch_timeslot_request>
    8804:	2800      	cmp	r0, #0
    8806:	d0ed      	beq.n	87e4 <tx_init+0xc>
    if (!are_preconditions_met())
    8808:	f7ff ff60 	bl	86cc <are_preconditions_met>
    880c:	4604      	mov	r4, r0
    880e:	2800      	cmp	r0, #0
    8810:	d0e8      	beq.n	87e4 <tx_init+0xc>
    if (cca)
    8812:	b1ad      	cbz	r5, 8840 <tx_init+0x68>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_ready_event_handle_get());
    8814:	f002 fae0 	bl	add8 <nrf_802154_trx_radio_ready_event_handle_get>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_phyend_event_handle_get());
    8818:	f006 fef0 	bl	f5fc <nrf_802154_timer_coord_timestamp_prepare>
    m_flags.tx_with_cca = cca;
    881c:	4b0b      	ldr	r3, [pc, #44]	; (884c <tx_init+0x74>)
    881e:	781a      	ldrb	r2, [r3, #0]
    nrf_802154_trx_transmit_frame(nrf_802154_tx_work_buffer_get(p_data),
    8820:	4630      	mov	r0, r6
    m_flags.tx_with_cca = cca;
    8822:	f365 02c3 	bfi	r2, r5, #3, #1
    8826:	701a      	strb	r2, [r3, #0]
    nrf_802154_trx_transmit_frame(nrf_802154_tx_work_buffer_get(p_data),
    8828:	f002 fbe2 	bl	aff0 <nrf_802154_tx_work_buffer_get>
    882c:	4b08      	ldr	r3, [pc, #32]	; (8850 <tx_init+0x78>)
    882e:	4a09      	ldr	r2, [pc, #36]	; (8854 <tx_init+0x7c>)
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	4629      	mov	r1, r5
    8834:	f001 fea6 	bl	a584 <nrf_802154_trx_transmit_frame>
    return true;
    8838:	e7d5      	b.n	87e6 <tx_init+0xe>
        us_time += PHY_US_TIME_FROM_SYMBOLS(MAC_IMM_ACK_WAIT_SYMBOLS);
    883a:	f203 402e 	addw	r0, r3, #1070	; 0x42e
    883e:	e7dc      	b.n	87fa <tx_init+0x22>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_phyend_event_handle_get());
    8840:	f002 face 	bl	ade0 <nrf_802154_trx_radio_phyend_event_handle_get>
    8844:	e7e8      	b.n	8818 <tx_init+0x40>
    8846:	bf00      	nop
    8848:	20002ebb 	.word	0x20002ebb
    884c:	20002ebc 	.word	0x20002ebc
    8850:	20002eb8 	.word	0x20002eb8
    8854:	20002ebf 	.word	0x20002ebf

00008858 <critical_section_can_be_processed_now>:
{
    8858:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
    885a:	4b06      	ldr	r3, [pc, #24]	; (8874 <critical_section_can_be_processed_now+0x1c>)
    885c:	781b      	ldrb	r3, [r3, #0]
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
    885e:	b133      	cbz	r3, 886e <critical_section_can_be_processed_now+0x16>
    return nrf_802154_rsch_timeslot_us_left_get() >= MAX_CRIT_SECT_TIME;
    8860:	f00b fc14 	bl	1408c <nrf_802154_rsch_timeslot_us_left_get>
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
    8864:	283b      	cmp	r0, #59	; 0x3b
    8866:	bf94      	ite	ls
    8868:	2000      	movls	r0, #0
    886a:	2001      	movhi	r0, #1
}
    886c:	bd08      	pop	{r3, pc}
    return !timeslot_is_granted() || remaining_timeslot_time_is_enough_for_crit_sect();
    886e:	2001      	movs	r0, #1
    8870:	e7fc      	b.n	886c <critical_section_can_be_processed_now+0x14>
    8872:	bf00      	nop
    8874:	20002ebb 	.word	0x20002ebb

00008878 <on_rx_prestarted_timeout>:
{
    8878:	b510      	push	{r4, lr}
        if (m_rx_prestarted_trig_count > 1)
    887a:	4c11      	ldr	r4, [pc, #68]	; (88c0 <on_rx_prestarted_timeout+0x48>)
    nrf_802154_critical_section_forcefully_enter();
    887c:	f00a fd9f 	bl	133be <nrf_802154_critical_section_forcefully_enter>
    nrf_802154_sl_ant_div_rx_preamble_timeout_notify();
    8880:	f006 faca 	bl	ee18 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify>
        if (m_rx_prestarted_trig_count > 1)
    8884:	7823      	ldrb	r3, [r4, #0]
    8886:	2b01      	cmp	r3, #1
    8888:	d917      	bls.n	88ba <on_rx_prestarted_timeout+0x42>
            uint64_t now = nrf_802154_sl_timer_current_time_get();
    888a:	f00b fc22 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
            if (nrf_802154_sl_time64_is_in_future(now, m_rx_prestarted_timer.trigger_time))
    888e:	4b0d      	ldr	r3, [pc, #52]	; (88c4 <on_rx_prestarted_timeout+0x4c>)
    8890:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    8894:	4290      	cmp	r0, r2
    8896:	4199      	sbcs	r1, r3
    8898:	d20f      	bcs.n	88ba <on_rx_prestarted_timeout+0x42>
                m_rx_prestarted_trig_count = 1;
    889a:	2301      	movs	r3, #1
    889c:	7023      	strb	r3, [r4, #0]
                nrf_802154_sl_ant_div_rx_preamble_detected_notify();
    889e:	f006 fa6b 	bl	ed78 <nrf_802154_sl_ant_div_rx_preamble_detected_notify>
    if (nrf_802154_pib_coex_rx_request_mode_get() ==
    88a2:	f001 fa2f 	bl	9d04 <nrf_802154_pib_coex_rx_request_mode_get>
    88a6:	2801      	cmp	r0, #1
    88a8:	d103      	bne.n	88b2 <on_rx_prestarted_timeout+0x3a>
        request_preconditions_for_state(m_state);
    88aa:	4b07      	ldr	r3, [pc, #28]	; (88c8 <on_rx_prestarted_timeout+0x50>)
    88ac:	7818      	ldrb	r0, [r3, #0]
    88ae:	f00a fcc2 	bl	13236 <request_preconditions_for_state>
}
    88b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_exit();
    88b6:	f001 b93b 	b.w	9b30 <nrf_802154_critical_section_exit>
        m_rx_prestarted_trig_count = 0;
    88ba:	2300      	movs	r3, #0
    88bc:	7023      	strb	r3, [r4, #0]
    88be:	e7f0      	b.n	88a2 <on_rx_prestarted_timeout+0x2a>
    88c0:	20002eb7 	.word	0x20002eb7
    88c4:	20000ed8 	.word	0x20000ed8
    88c8:	20002ebd 	.word	0x20002ebd

000088cc <transmitted_frame_notify>:
{
    88cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t                           * p_frame  = mp_tx_data;
    88ce:	4b14      	ldr	r3, [pc, #80]	; (8920 <transmitted_frame_notify+0x54>)
{
    88d0:	b087      	sub	sp, #28
    88d2:	4604      	mov	r4, r0
    88d4:	460e      	mov	r6, r1
    88d6:	4615      	mov	r5, r2
    nrf_802154_transmit_done_metadata_t metadata = {0};
    88d8:	2100      	movs	r1, #0
    88da:	2218      	movs	r2, #24
    88dc:	4668      	mov	r0, sp
    uint8_t                           * p_frame  = mp_tx_data;
    88de:	681f      	ldr	r7, [r3, #0]
    nrf_802154_transmit_done_metadata_t metadata = {0};
    88e0:	f00a f9ff 	bl	12ce2 <memset>
    metadata.data.transmitted.p_ack = p_ack;
    88e4:	9402      	str	r4, [sp, #8]
    metadata.data.transmitted.power = power;
    88e6:	f88d 600d 	strb.w	r6, [sp, #13]
    metadata.data.transmitted.lqi   = lqi;
    88ea:	f88d 500e 	strb.w	r5, [sp, #14]
    if (p_ack == NULL)
    88ee:	b14c      	cbz	r4, 8904 <transmitted_frame_notify+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    88f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    88f4:	b672      	cpsid	i
        nrf_802154_stat_timestamp_read(&metadata.data.transmitted.time, last_ack_end_timestamp);
    88f6:	4a0b      	ldr	r2, [pc, #44]	; (8924 <transmitted_frame_notify+0x58>)
    88f8:	e9d2 0110 	ldrd	r0, r1, [r2, #64]	; 0x40
    88fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    8900:	f383 8810 	msr	PRIMASK, r3
    nrf_802154_critical_section_nesting_allow();
    8904:	f001 f97a 	bl	9bfc <nrf_802154_critical_section_nesting_allow>
    nrf_802154_core_hooks_transmitted(p_frame);
    8908:	4638      	mov	r0, r7
    890a:	f00a fd46 	bl	1339a <nrf_802154_core_hooks_transmitted>
    nrf_802154_notify_transmitted(p_frame, &metadata);
    890e:	4669      	mov	r1, sp
    8910:	4638      	mov	r0, r7
    8912:	f00a ff3c 	bl	1378e <nrf_802154_notify_transmitted>
    nrf_802154_critical_section_nesting_deny();
    8916:	f001 f92d 	bl	9b74 <nrf_802154_critical_section_nesting_deny>
}
    891a:	b007      	add	sp, #28
    891c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    891e:	bf00      	nop
    8920:	20001e94 	.word	0x20001e94
    8924:	20000f18 	.word	0x20000f18

00008928 <operation_terminated_update_total_times>:
    switch (trx_state)
    8928:	2803      	cmp	r0, #3
{
    892a:	b570      	push	{r4, r5, r6, lr}
    switch (trx_state)
    892c:	d001      	beq.n	8932 <operation_terminated_update_total_times+0xa>
    892e:	2805      	cmp	r0, #5
    8930:	d10f      	bne.n	8952 <operation_terminated_update_total_times+0x2a>
            t = timestamp - m_listening_start_hp_timestamp;
    8932:	4b08      	ldr	r3, [pc, #32]	; (8954 <operation_terminated_update_total_times+0x2c>)
    8934:	681b      	ldr	r3, [r3, #0]
    8936:	1ac9      	subs	r1, r1, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8938:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    893c:	b672      	cpsid	i
            nrf_802154_stat_totals_increment(total_listening_time, t);
    893e:	4806      	ldr	r0, [pc, #24]	; (8958 <operation_terminated_update_total_times+0x30>)
    8940:	e9d0 4500 	ldrd	r4, r5, [r0]
    8944:	190a      	adds	r2, r1, r4
    8946:	f145 0300 	adc.w	r3, r5, #0
    894a:	e9c0 2300 	strd	r2, r3, [r0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    894e:	f386 8810 	msr	PRIMASK, r6
}
    8952:	bd70      	pop	{r4, r5, r6, pc}
    8954:	20001e70 	.word	0x20001e70
    8958:	20000f00 	.word	0x20000f00

0000895c <rx_init>:
{
    895c:	b513      	push	{r0, r1, r4, lr}
    return m_rsch_timeslot_is_granted;
    895e:	4b1c      	ldr	r3, [pc, #112]	; (89d0 <rx_init+0x74>)
    8960:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
    8962:	b393      	cbz	r3, 89ca <rx_init+0x6e>
    if (!are_preconditions_met())
    8964:	f7ff feb2 	bl	86cc <are_preconditions_met>
    8968:	b378      	cbz	r0, 89ca <rx_init+0x6e>
    m_flags.frame_filtered        = false;
    896a:	4a1a      	ldr	r2, [pc, #104]	; (89d4 <rx_init+0x78>)
    896c:	7813      	ldrb	r3, [r2, #0]
    896e:	f023 0307 	bic.w	r3, r3, #7
    8972:	7013      	strb	r3, [r2, #0]
    free_buffer = rx_buffer_is_available();
    8974:	f7ff fe7a 	bl	866c <rx_buffer_is_available>
    8978:	4604      	mov	r4, r0
    nrf_802154_trx_receive_buffer_set(rx_buffer_get());
    897a:	f7ff fe81 	bl	8680 <rx_buffer_get>
    897e:	f001 fcc7 	bl	a310 <nrf_802154_trx_receive_buffer_set>
    nrf_802154_fal_tx_power_split_t split_power = {0};
    8982:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    8984:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
    8986:	f8ad 3004 	strh.w	r3, [sp, #4]
    898a:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    898e:	f00a fdce 	bl	1352e <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_receive_frame(BCC_INIT / 8U,
    8992:	4b11      	ldr	r3, [pc, #68]	; (89d8 <rx_init+0x7c>)
    8994:	aa01      	add	r2, sp, #4
    8996:	7819      	ldrb	r1, [r3, #0]
    8998:	2003      	movs	r0, #3
    899a:	f001 fce7 	bl	a36c <nrf_802154_trx_receive_frame>
    m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
    899e:	f7ff fd55 	bl	844c <nrf_802154_hp_timer_current_time_get>
    89a2:	4b0e      	ldr	r3, [pc, #56]	; (89dc <rx_init+0x80>)
    89a4:	6018      	str	r0, [r3, #0]
    nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_end_event_handle_get());
    89a6:	f002 fa13 	bl	add0 <nrf_802154_trx_radio_end_event_handle_get>
    89aa:	f006 fe27 	bl	f5fc <nrf_802154_timer_coord_timestamp_prepare>
    if (!free_buffer)
    89ae:	b93c      	cbnz	r4, 89c0 <rx_init+0x64>
        rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
    89b0:	f001 f9e6 	bl	9d80 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
    89b4:	4b0a      	ldr	r3, [pc, #40]	; (89e0 <rx_init+0x84>)
    89b6:	6018      	str	r0, [r3, #0]
        nrf_802154_trx_receive_buffer_set(rx_buffer_get());
    89b8:	f7ff fe62 	bl	8680 <rx_buffer_get>
    89bc:	f001 fca8 	bl	a310 <nrf_802154_trx_receive_buffer_set>
    rx_data_clear();
    89c0:	f7ff fefe 	bl	87c0 <rx_data_clear>
    mp_ack = NULL;
    89c4:	4b07      	ldr	r3, [pc, #28]	; (89e4 <rx_init+0x88>)
    89c6:	2200      	movs	r2, #0
    89c8:	601a      	str	r2, [r3, #0]
}
    89ca:	b002      	add	sp, #8
    89cc:	bd10      	pop	{r4, pc}
    89ce:	bf00      	nop
    89d0:	20002ebb 	.word	0x20002ebb
    89d4:	20002ebc 	.word	0x20002ebc
    89d8:	20002eb9 	.word	0x20002eb9
    89dc:	20001e70 	.word	0x20001e70
    89e0:	20001e9c 	.word	0x20001e9c
    89e4:	20001e98 	.word	0x20001e98

000089e8 <on_bad_ack>:

    return ack_match_check_version_not_2(p_tx_data, p_ack_data);
}

static void on_bad_ack(void)
{
    89e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // We received either a frame with incorrect CRC or not an ACK frame or not matching ACK
    state_set(RADIO_STATE_RX);
    89ea:	2002      	movs	r0, #2
    89ec:	f7ff fed0 	bl	8790 <state_set>

    rx_init();
    89f0:	f7ff ffb4 	bl	895c <rx_init>

    nrf_802154_transmit_done_metadata_t metadata = {};
    89f4:	2218      	movs	r2, #24
    89f6:	2100      	movs	r1, #0
    89f8:	4668      	mov	r0, sp
    89fa:	f00a f972 	bl	12ce2 <memset>

    nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
    89fe:	4b06      	ldr	r3, [pc, #24]	; (8a18 <on_bad_ack+0x30>)
    8a00:	4669      	mov	r1, sp
    8a02:	6818      	ldr	r0, [r3, #0]
    8a04:	f002 fb00 	bl	b008 <nrf_802154_tx_work_buffer_original_frame_update>
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_INVALID_ACK, &metadata);
    8a08:	4669      	mov	r1, sp
    8a0a:	2002      	movs	r0, #2
    8a0c:	f7ff fec6 	bl	879c <transmit_failed_notify_and_nesting_allow>

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    8a10:	b007      	add	sp, #28
    8a12:	f85d fb04 	ldr.w	pc, [sp], #4
    8a16:	bf00      	nop
    8a18:	20001e94 	.word	0x20001e94

00008a1c <cca_init>:
{
    8a1c:	b508      	push	{r3, lr}
    return m_rsch_timeslot_is_granted;
    8a1e:	4b07      	ldr	r3, [pc, #28]	; (8a3c <cca_init+0x20>)
    8a20:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted() || !nrf_802154_rsch_timeslot_request(nrf_802154_cca_duration_get()))
    8a22:	b153      	cbz	r3, 8a3a <cca_init+0x1e>
    8a24:	20ae      	movs	r0, #174	; 0xae
    8a26:	f00b fb06 	bl	14036 <nrf_802154_rsch_timeslot_request>
    8a2a:	b130      	cbz	r0, 8a3a <cca_init+0x1e>
    if (!are_preconditions_met())
    8a2c:	f7ff fe4e 	bl	86cc <are_preconditions_met>
    8a30:	b118      	cbz	r0, 8a3a <cca_init+0x1e>
}
    8a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_standalone_cca();
    8a36:	f001 bf99 	b.w	a96c <nrf_802154_trx_standalone_cca>
}
    8a3a:	bd08      	pop	{r3, pc}
    8a3c:	20002ebb 	.word	0x20002ebb

00008a40 <continuous_carrier_init>:
{
    8a40:	b507      	push	{r0, r1, r2, lr}
    return m_rsch_timeslot_is_granted;
    8a42:	4b0a      	ldr	r3, [pc, #40]	; (8a6c <continuous_carrier_init+0x2c>)
    8a44:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
    8a46:	b16b      	cbz	r3, 8a64 <continuous_carrier_init+0x24>
    if (!are_preconditions_met())
    8a48:	f7ff fe40 	bl	86cc <are_preconditions_met>
    8a4c:	b150      	cbz	r0, 8a64 <continuous_carrier_init+0x24>
    nrf_802154_fal_tx_power_split_t split_power = {0};
    8a4e:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    8a50:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
    8a52:	f8ad 3004 	strh.w	r3, [sp, #4]
    8a56:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    8a5a:	f00a fd68 	bl	1352e <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_continuous_carrier(&split_power);
    8a5e:	a801      	add	r0, sp, #4
    8a60:	f001 ffaa 	bl	a9b8 <nrf_802154_trx_continuous_carrier>
}
    8a64:	b003      	add	sp, #12
    8a66:	f85d fb04 	ldr.w	pc, [sp], #4
    8a6a:	bf00      	nop
    8a6c:	20002ebb 	.word	0x20002ebb

00008a70 <modulated_carrier_init>:
{
    8a70:	b513      	push	{r0, r1, r4, lr}
    return m_rsch_timeslot_is_granted;
    8a72:	4b0a      	ldr	r3, [pc, #40]	; (8a9c <modulated_carrier_init+0x2c>)
    8a74:	781b      	ldrb	r3, [r3, #0]
{
    8a76:	4604      	mov	r4, r0
    if (!timeslot_is_granted())
    8a78:	b173      	cbz	r3, 8a98 <modulated_carrier_init+0x28>
    if (!are_preconditions_met())
    8a7a:	f7ff fe27 	bl	86cc <are_preconditions_met>
    8a7e:	b158      	cbz	r0, 8a98 <modulated_carrier_init+0x28>
    nrf_802154_fal_tx_power_split_t split_power = {0};
    8a80:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    8a82:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
    8a84:	f8ad 3004 	strh.w	r3, [sp, #4]
    8a88:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    8a8c:	f00a fd4f 	bl	1352e <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_modulated_carrier(p_data, &split_power);
    8a90:	a901      	add	r1, sp, #4
    8a92:	4620      	mov	r0, r4
    8a94:	f001 ffb0 	bl	a9f8 <nrf_802154_trx_modulated_carrier>
}
    8a98:	b002      	add	sp, #8
    8a9a:	bd10      	pop	{r4, pc}
    8a9c:	20002ebb 	.word	0x20002ebb

00008aa0 <ed_init>:
{
    8aa0:	b510      	push	{r4, lr}
    return m_rsch_timeslot_is_granted;
    8aa2:	4b11      	ldr	r3, [pc, #68]	; (8ae8 <ed_init+0x48>)
    8aa4:	781b      	ldrb	r3, [r3, #0]
    if (!timeslot_is_granted())
    8aa6:	b1eb      	cbz	r3, 8ae4 <ed_init+0x44>
    if (!are_preconditions_met())
    8aa8:	f7ff fe10 	bl	86cc <are_preconditions_met>
    8aac:	b1d0      	cbz	r0, 8ae4 <ed_init+0x44>
    nrf_802154_sl_ant_div_energy_detection_requested_notify(&m_ed_time_left);
    8aae:	4c0f      	ldr	r4, [pc, #60]	; (8aec <ed_init+0x4c>)
    8ab0:	4620      	mov	r0, r4
    8ab2:	f006 f9d5 	bl	ee60 <nrf_802154_sl_ant_div_energy_detection_requested_notify>
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
    8ab6:	f00b fae9 	bl	1408c <nrf_802154_rsch_timeslot_us_left_get>
    if (iters_left_in_timeslot > ED_ITERS_OVERHEAD)
    8aba:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    8abe:	d311      	bcc.n	8ae4 <ed_init+0x44>
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
    8ac0:	6822      	ldr	r2, [r4, #0]
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
    8ac2:	09c0      	lsrs	r0, r0, #7
        iters_left_in_timeslot -= ED_ITERS_OVERHEAD;
    8ac4:	1e83      	subs	r3, r0, #2
        if (requested_iters < iters_left_in_timeslot)
    8ac6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
    8aca:	ea4f 10d2 	mov.w	r0, r2, lsr #7
            *p_requested_ed_time_us = *p_requested_ed_time_us -
    8ace:	bf94      	ite	ls
    8ad0:	eba2 12c3 	subls.w	r2, r2, r3, lsl #7
            *p_requested_ed_time_us = 0U;
    8ad4:	2200      	movhi	r2, #0
    8ad6:	6022      	str	r2, [r4, #0]
}
    8ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            *p_requested_ed_time_us = *p_requested_ed_time_us -
    8adc:	bf98      	it	ls
    8ade:	4618      	movls	r0, r3
    nrf_802154_trx_energy_detection(trx_ed_count);
    8ae0:	f001 bfb2 	b.w	aa48 <nrf_802154_trx_energy_detection>
}
    8ae4:	bd10      	pop	{r4, pc}
    8ae6:	bf00      	nop
    8ae8:	20002ebb 	.word	0x20002ebb
    8aec:	20001e90 	.word	0x20001e90

00008af0 <on_preconditions_approved>:
{
    8af0:	b510      	push	{r4, lr}
    8af2:	4604      	mov	r4, r0
    trx_abort();
    8af4:	f00a fbf0 	bl	132d8 <trx_abort>
    switch (state)
    8af8:	1ea0      	subs	r0, r4, #2
    8afa:	2808      	cmp	r0, #8
    8afc:	d825      	bhi.n	8b4a <on_preconditions_approved+0x5a>
    8afe:	e8df f000 	tbb	[pc, r0]
    8b02:	2405      	.short	0x2405
    8b04:	12241009 	.word	0x12241009
    8b08:	1a16      	.short	0x1a16
    8b0a:	1e          	.byte	0x1e
    8b0b:	00          	.byte	0x00
}
    8b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rx_init();
    8b10:	f7ff bf24 	b.w	895c <rx_init>
            (void)tx_init(mp_tx_data, true);
    8b14:	2101      	movs	r1, #1
            (void)tx_init(mp_tx_data, false);
    8b16:	4b0d      	ldr	r3, [pc, #52]	; (8b4c <on_preconditions_approved+0x5c>)
}
    8b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (void)tx_init(mp_tx_data, false);
    8b1c:	6818      	ldr	r0, [r3, #0]
    8b1e:	f7ff be5b 	b.w	87d8 <tx_init>
    8b22:	2100      	movs	r1, #0
    8b24:	e7f7      	b.n	8b16 <on_preconditions_approved+0x26>
}
    8b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            ed_init();
    8b2a:	f7ff bfb9 	b.w	8aa0 <ed_init>
}
    8b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            cca_init();
    8b32:	f7ff bf73 	b.w	8a1c <cca_init>
}
    8b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            continuous_carrier_init();
    8b3a:	f7ff bf81 	b.w	8a40 <continuous_carrier_init>
            modulated_carrier_init(mp_tx_data);
    8b3e:	4b03      	ldr	r3, [pc, #12]	; (8b4c <on_preconditions_approved+0x5c>)
}
    8b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            modulated_carrier_init(mp_tx_data);
    8b44:	6818      	ldr	r0, [r3, #0]
    8b46:	f7ff bf93 	b.w	8a70 <modulated_carrier_init>
}
    8b4a:	bd10      	pop	{r4, pc}
    8b4c:	20001e94 	.word	0x20001e94

00008b50 <operation_terminated_notify>:
{
    8b50:	b510      	push	{r4, lr}
    switch (state)
    8b52:	3802      	subs	r0, #2
{
    8b54:	b086      	sub	sp, #24
    switch (state)
    8b56:	2806      	cmp	r0, #6
    8b58:	d833      	bhi.n	8bc2 <operation_terminated_notify+0x72>
    8b5a:	e8df f000 	tbb	[pc, r0]
    8b5e:	0e04      	.short	0x0e04
    8b60:	34232323 	.word	0x34232323
    8b64:	3a          	.byte	0x3a
    8b65:	00          	.byte	0x00
            if (receiving_psdu_now)
    8b66:	b361      	cbz	r1, 8bc2 <operation_terminated_notify+0x72>
                (void)nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_ABORTED,
    8b68:	4b1d      	ldr	r3, [pc, #116]	; (8be0 <operation_terminated_notify+0x90>)
    8b6a:	6819      	ldr	r1, [r3, #0]
    8b6c:	2201      	movs	r2, #1
    8b6e:	2006      	movs	r0, #6
}
    8b70:	b006      	add	sp, #24
    8b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                (void)nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_ABORTED,
    8b76:	f00a be08 	b.w	1378a <nrf_802154_notify_receive_failed>
            mp_current_rx_buffer->free = false;
    8b7a:	4c1a      	ldr	r4, [pc, #104]	; (8be4 <operation_terminated_notify+0x94>)
    8b7c:	6823      	ldr	r3, [r4, #0]
    8b7e:	2200      	movs	r2, #0
    8b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_ABORTED);
    8b84:	4b18      	ldr	r3, [pc, #96]	; (8be8 <operation_terminated_notify+0x98>)
    8b86:	2106      	movs	r1, #6
    8b88:	6818      	ldr	r0, [r3, #0]
    8b8a:	f00a fc0f 	bl	133ac <nrf_802154_core_hooks_tx_ack_failed>
    nrf_802154_notify_received(p_data, m_last_rssi, m_last_lqi);
    8b8e:	4b17      	ldr	r3, [pc, #92]	; (8bec <operation_terminated_notify+0x9c>)
    8b90:	6820      	ldr	r0, [r4, #0]
    8b92:	781a      	ldrb	r2, [r3, #0]
    8b94:	4b16      	ldr	r3, [pc, #88]	; (8bf0 <operation_terminated_notify+0xa0>)
    8b96:	f993 1000 	ldrsb.w	r1, [r3]
}
    8b9a:	b006      	add	sp, #24
    8b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_notify_received(p_data, m_last_rssi, m_last_lqi);
    8ba0:	f00a bdf1 	b.w	13786 <nrf_802154_notify_received>
            nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
    8ba4:	4c13      	ldr	r4, [pc, #76]	; (8bf4 <operation_terminated_notify+0xa4>)
            nrf_802154_transmit_done_metadata_t metadata = {};
    8ba6:	2218      	movs	r2, #24
    8ba8:	2100      	movs	r1, #0
    8baa:	4668      	mov	r0, sp
    8bac:	f00a f899 	bl	12ce2 <memset>
            nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
    8bb0:	6820      	ldr	r0, [r4, #0]
    8bb2:	4669      	mov	r1, sp
    8bb4:	f002 fa28 	bl	b008 <nrf_802154_tx_work_buffer_original_frame_update>
            transmit_failed_notify(mp_tx_data, NRF_802154_TX_ERROR_ABORTED, &metadata);
    8bb8:	6820      	ldr	r0, [r4, #0]
    8bba:	466a      	mov	r2, sp
    8bbc:	2106      	movs	r1, #6
    8bbe:	f00a fb41 	bl	13244 <transmit_failed_notify>
}
    8bc2:	b006      	add	sp, #24
    8bc4:	bd10      	pop	{r4, pc}
            nrf_802154_notify_energy_detection_failed(NRF_802154_ED_ERROR_ABORTED);
    8bc6:	2001      	movs	r0, #1
}
    8bc8:	b006      	add	sp, #24
    8bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_notify_energy_detection_failed(NRF_802154_ED_ERROR_ABORTED);
    8bce:	f00a bded 	b.w	137ac <nrf_802154_notify_energy_detection_failed>
            nrf_802154_notify_cca_failed(NRF_802154_CCA_ERROR_ABORTED);
    8bd2:	2001      	movs	r0, #1
}
    8bd4:	b006      	add	sp, #24
    8bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            nrf_802154_notify_cca_failed(NRF_802154_CCA_ERROR_ABORTED);
    8bda:	f00a bdeb 	b.w	137b4 <nrf_802154_notify_cca_failed>
    8bde:	bf00      	nop
    8be0:	20001e74 	.word	0x20001e74
    8be4:	20001e9c 	.word	0x20001e9c
    8be8:	20001e98 	.word	0x20001e98
    8bec:	20002ec2 	.word	0x20002ec2
    8bf0:	20002ebe 	.word	0x20002ebe
    8bf4:	20001e94 	.word	0x20001e94

00008bf8 <current_operation_terminate>:
{
    8bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bfc:	4607      	mov	r7, r0
    8bfe:	4690      	mov	r8, r2
    bool result = nrf_802154_core_hooks_terminate(term_lvl, req_orig);
    8c00:	f000 ff50 	bl	9aa4 <nrf_802154_core_hooks_terminate>
    if (result)
    8c04:	4605      	mov	r5, r0
    8c06:	2800      	cmp	r0, #0
    8c08:	d034      	beq.n	8c74 <current_operation_terminate+0x7c>
        if (m_state == RADIO_STATE_RX)
    8c0a:	4c1c      	ldr	r4, [pc, #112]	; (8c7c <current_operation_terminate+0x84>)
    8c0c:	7823      	ldrb	r3, [r4, #0]
    8c0e:	2b02      	cmp	r3, #2
    8c10:	d10d      	bne.n	8c2e <current_operation_terminate+0x36>
            receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
    8c12:	f001 fb67 	bl	a2e4 <nrf_802154_trx_psdu_is_being_received>
    8c16:	4606      	mov	r6, r0
        result = can_terminate_current_operation(m_state, term_lvl, receiving_psdu_now);
    8c18:	7823      	ldrb	r3, [r4, #0]
    switch (state)
    8c1a:	2b0a      	cmp	r3, #10
    8c1c:	d82a      	bhi.n	8c74 <current_operation_terminate+0x7c>
    8c1e:	e8df f003 	tbb	[pc, r3]
    8c22:	0a0a      	.short	0x0a0a
    8c24:	27272708 	.word	0x27272708
    8c28:	0a272727 	.word	0x0a272727
    8c2c:	0a          	.byte	0x0a
    8c2d:	00          	.byte	0x00
        bool receiving_psdu_now = false;
    8c2e:	2600      	movs	r6, #0
    8c30:	e7f2      	b.n	8c18 <current_operation_terminate+0x20>
            result = (term_lvl >= NRF_802154_TERM_802154) || !receiving_psdu_now;
    8c32:	b907      	cbnz	r7, 8c36 <current_operation_terminate+0x3e>
    8c34:	b9f6      	cbnz	r6, 8c74 <current_operation_terminate+0x7c>
            trx_abort();
    8c36:	f00a fb4f 	bl	132d8 <trx_abort>
            if (m_state == RADIO_STATE_RX)
    8c3a:	7823      	ldrb	r3, [r4, #0]
    8c3c:	2b02      	cmp	r3, #2
    8c3e:	d10a      	bne.n	8c56 <current_operation_terminate+0x5e>
                m_rx_prestarted_trig_count = 0;
    8c40:	4b0f      	ldr	r3, [pc, #60]	; (8c80 <current_operation_terminate+0x88>)
                (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8c42:	4810      	ldr	r0, [pc, #64]	; (8c84 <current_operation_terminate+0x8c>)
                m_rx_prestarted_trig_count = 0;
    8c44:	2200      	movs	r2, #0
    8c46:	701a      	strb	r2, [r3, #0]
                (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8c48:	f006 fc20 	bl	f48c <nrf_802154_sl_timer_remove>
                nrf_802154_sl_ant_div_rx_aborted_notify();
    8c4c:	f006 f872 	bl	ed34 <nrf_802154_sl_ant_div_rx_aborted_notify>
                request_preconditions_for_state(m_state);
    8c50:	7820      	ldrb	r0, [r4, #0]
    8c52:	f00a faf0 	bl	13236 <request_preconditions_for_state>
            if (m_state == RADIO_STATE_ED)
    8c56:	7823      	ldrb	r3, [r4, #0]
    8c58:	2b07      	cmp	r3, #7
    8c5a:	d101      	bne.n	8c60 <current_operation_terminate+0x68>
                nrf_802154_sl_ant_div_energy_detection_aborted_notify();
    8c5c:	f006 f934 	bl	eec8 <nrf_802154_sl_ant_div_energy_detection_aborted_notify>
            if (notify)
    8c60:	f1b8 0f00 	cmp.w	r8, #0
    8c64:	d007      	beq.n	8c76 <current_operation_terminate+0x7e>
                operation_terminated_notify(m_state, receiving_psdu_now);
    8c66:	7820      	ldrb	r0, [r4, #0]
    8c68:	4631      	mov	r1, r6
    8c6a:	f7ff ff71 	bl	8b50 <operation_terminated_notify>
    8c6e:	e002      	b.n	8c76 <current_operation_terminate+0x7e>
        if (result)
    8c70:	2f00      	cmp	r7, #0
    8c72:	d1e0      	bne.n	8c36 <current_operation_terminate+0x3e>
        bool receiving_psdu_now = false;
    8c74:	2500      	movs	r5, #0
}
    8c76:	4628      	mov	r0, r5
    8c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c7c:	20002ebd 	.word	0x20002ebd
    8c80:	20002eb7 	.word	0x20002eb7
    8c84:	20000ed8 	.word	0x20000ed8

00008c88 <nrf_802154_rsch_crit_sect_prio_changed>:
{
    8c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    rsch_prio_t old_prio = m_rsch_priority;
    8c8a:	4a6d      	ldr	r2, [pc, #436]	; (8e40 <nrf_802154_rsch_crit_sect_prio_changed+0x1b8>)
    8c8c:	7813      	ldrb	r3, [r2, #0]
    m_rsch_priority = prio;
    8c8e:	7010      	strb	r0, [r2, #0]
{
    8c90:	b087      	sub	sp, #28
    8c92:	4604      	mov	r4, r0
    if ((old_prio == RSCH_PRIO_IDLE) && (prio != RSCH_PRIO_IDLE))
    8c94:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    8c98:	b98b      	cbnz	r3, 8cbe <nrf_802154_rsch_crit_sect_prio_changed+0x36>
    8c9a:	4d6a      	ldr	r5, [pc, #424]	; (8e44 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d072      	beq.n	8d86 <nrf_802154_rsch_crit_sect_prio_changed+0xfe>
    nrf_802154_trx_enable();
    8ca0:	f001 f9f4 	bl	a08c <nrf_802154_trx_enable>
    m_rsch_timeslot_is_granted = true;
    8ca4:	4b68      	ldr	r3, [pc, #416]	; (8e48 <nrf_802154_rsch_crit_sect_prio_changed+0x1c0>)
    8ca6:	2201      	movs	r2, #1
    8ca8:	701a      	strb	r2, [r3, #0]
    nrf_802154_timer_coord_start();
    8caa:	f006 fc69 	bl	f580 <nrf_802154_timer_coord_start>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
    8cae:	7828      	ldrb	r0, [r5, #0]
    return (min_required_rsch_prio(state) <= prio);
    8cb0:	f7ff fcf0 	bl	8694 <min_required_rsch_prio>
    if (old_prio_allows && !new_prio_allows)
    8cb4:	2800      	cmp	r0, #0
    8cb6:	f040 8095 	bne.w	8de4 <nrf_802154_rsch_crit_sect_prio_changed+0x15c>
}
    8cba:	b007      	add	sp, #28
    8cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if ((old_prio != RSCH_PRIO_IDLE) && (prio == RSCH_PRIO_IDLE))
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d165      	bne.n	8d8e <nrf_802154_rsch_crit_sect_prio_changed+0x106>
    return m_rsch_timeslot_is_granted;
    8cc2:	4b61      	ldr	r3, [pc, #388]	; (8e48 <nrf_802154_rsch_crit_sect_prio_changed+0x1c0>)
    8cc4:	781a      	ldrb	r2, [r3, #0]
    if (timeslot_is_granted())
    8cc6:	2a00      	cmp	r2, #0
    8cc8:	d0f7      	beq.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
        if (m_state == RADIO_STATE_RX)
    8cca:	4e5e      	ldr	r6, [pc, #376]	; (8e44 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
        m_rsch_timeslot_is_granted = false;
    8ccc:	7018      	strb	r0, [r3, #0]
        if (m_state == RADIO_STATE_RX)
    8cce:	7833      	ldrb	r3, [r6, #0]
    8cd0:	2b02      	cmp	r3, #2
    8cd2:	d102      	bne.n	8cda <nrf_802154_rsch_crit_sect_prio_changed+0x52>
            receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
    8cd4:	f001 fb06 	bl	a2e4 <nrf_802154_trx_psdu_is_being_received>
    8cd8:	4604      	mov	r4, r0
    trx_state_t trx_state       = nrf_802154_trx_state_get();
    8cda:	f001 fe1d 	bl	a918 <nrf_802154_trx_state_get>
    switch (trx_state)
    8cde:	2803      	cmp	r0, #3
    trx_state_t trx_state       = nrf_802154_trx_state_get();
    8ce0:	4605      	mov	r5, r0
    switch (trx_state)
    8ce2:	d001      	beq.n	8ce8 <nrf_802154_rsch_crit_sect_prio_changed+0x60>
    8ce4:	2805      	cmp	r0, #5
    8ce6:	d118      	bne.n	8d1a <nrf_802154_rsch_crit_sect_prio_changed+0x92>
    nrf_802154_trx_disable();
    8ce8:	f001 fa5e 	bl	a1a8 <nrf_802154_trx_disable>
        uint32_t timestamp = nrf_802154_hp_timer_current_time_get();
    8cec:	f7ff fbae 	bl	844c <nrf_802154_hp_timer_current_time_get>
    8cf0:	4601      	mov	r1, r0
        operation_terminated_update_total_times(trx_state, timestamp);
    8cf2:	4628      	mov	r0, r5
    8cf4:	f7ff fe18 	bl	8928 <operation_terminated_update_total_times>
        nrf_802154_timer_coord_stop();
    8cf8:	f006 fc64 	bl	f5c4 <nrf_802154_timer_coord_stop>
        nrf_802154_rsch_continuous_ended();
    8cfc:	f006 fa06 	bl	f10c <nrf_802154_rsch_continuous_ended>
        result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_RSCH);
    8d00:	2102      	movs	r1, #2
    8d02:	2001      	movs	r0, #1
    8d04:	f000 fece 	bl	9aa4 <nrf_802154_core_hooks_terminate>
        switch (m_state)
    8d08:	7833      	ldrb	r3, [r6, #0]
    8d0a:	3b01      	subs	r3, #1
    8d0c:	2b05      	cmp	r3, #5
    8d0e:	d8d4      	bhi.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    8d10:	e8df f003 	tbb	[pc, r3]
    8d14:	27140c06 	.word	0x27140c06
    8d18:	2727      	.short	0x2727
    nrf_802154_trx_disable();
    8d1a:	f001 fa45 	bl	a1a8 <nrf_802154_trx_disable>
    if (update_required)
    8d1e:	e7eb      	b.n	8cf8 <nrf_802154_rsch_crit_sect_prio_changed+0x70>
                state_set(RADIO_STATE_SLEEP);
    8d20:	2000      	movs	r0, #0
}
    8d22:	b007      	add	sp, #28
    8d24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                state_set(RADIO_STATE_SLEEP);
    8d28:	f7ff bd32 	b.w	8790 <state_set>
                if (receiving_psdu_now)
    8d2c:	2c00      	cmp	r4, #0
    8d2e:	d0c4      	beq.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
                    receive_failed_notify(NRF_802154_RX_ERROR_TIMESLOT_ENDED);
    8d30:	2005      	movs	r0, #5
}
    8d32:	b007      	add	sp, #28
    8d34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                    receive_failed_notify(NRF_802154_RX_ERROR_TIMESLOT_ENDED);
    8d38:	f7ff bd06 	b.w	8748 <receive_failed_notify>
                mp_current_rx_buffer->free = false;
    8d3c:	4c43      	ldr	r4, [pc, #268]	; (8e4c <nrf_802154_rsch_crit_sect_prio_changed+0x1c4>)
                state_set(RADIO_STATE_RX);
    8d3e:	2002      	movs	r0, #2
    8d40:	f7ff fd26 	bl	8790 <state_set>
                mp_current_rx_buffer->free = false;
    8d44:	6823      	ldr	r3, [r4, #0]
    8d46:	2200      	movs	r2, #0
    8d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                nrf_802154_core_hooks_tx_ack_failed(mp_ack, NRF_802154_TX_ERROR_TIMESLOT_ENDED);
    8d4c:	4b40      	ldr	r3, [pc, #256]	; (8e50 <nrf_802154_rsch_crit_sect_prio_changed+0x1c8>)
    8d4e:	2104      	movs	r1, #4
    8d50:	6818      	ldr	r0, [r3, #0]
    8d52:	f00a fb2b 	bl	133ac <nrf_802154_core_hooks_tx_ack_failed>
                received_frame_notify_and_nesting_allow(mp_current_rx_buffer->data);
    8d56:	6820      	ldr	r0, [r4, #0]
}
    8d58:	b007      	add	sp, #28
    8d5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                received_frame_notify_and_nesting_allow(mp_current_rx_buffer->data);
    8d5e:	f7ff bd03 	b.w	8768 <received_frame_notify_and_nesting_allow>
                state_set(RADIO_STATE_RX);
    8d62:	2002      	movs	r0, #2
    8d64:	f7ff fd14 	bl	8790 <state_set>
                nrf_802154_transmit_done_metadata_t metadata = {};
    8d68:	2218      	movs	r2, #24
    8d6a:	2100      	movs	r1, #0
    8d6c:	4668      	mov	r0, sp
    8d6e:	f009 ffb8 	bl	12ce2 <memset>
                nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
    8d72:	4b38      	ldr	r3, [pc, #224]	; (8e54 <nrf_802154_rsch_crit_sect_prio_changed+0x1cc>)
    8d74:	4669      	mov	r1, sp
    8d76:	6818      	ldr	r0, [r3, #0]
    8d78:	f002 f946 	bl	b008 <nrf_802154_tx_work_buffer_original_frame_update>
                transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_TIMESLOT_ENDED,
    8d7c:	4669      	mov	r1, sp
    8d7e:	2004      	movs	r0, #4
    8d80:	f7ff fd0c 	bl	879c <transmit_failed_notify_and_nesting_allow>
            break;
    8d84:	e799      	b.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
        nrf_802154_rsch_continuous_ended();
    8d86:	f006 f9c1 	bl	f10c <nrf_802154_rsch_continuous_ended>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
    8d8a:	782b      	ldrb	r3, [r5, #0]
    if (old_prio_allows && !new_prio_allows)
    8d8c:	e795      	b.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    int_fast8_t transition = action_needed(old_prio, prio, m_state);
    8d8e:	4f2d      	ldr	r7, [pc, #180]	; (8e44 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
    8d90:	7838      	ldrb	r0, [r7, #0]
    return (min_required_rsch_prio(state) <= prio);
    8d92:	f7ff fc7f 	bl	8694 <min_required_rsch_prio>
    if (old_prio_allows && !new_prio_allows)
    8d96:	4281      	cmp	r1, r0
    8d98:	d32b      	bcc.n	8df2 <nrf_802154_rsch_crit_sect_prio_changed+0x16a>
    8d9a:	4284      	cmp	r4, r0
    8d9c:	d28d      	bcs.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
        on_preconditions_denied(m_state);
    8d9e:	783d      	ldrb	r5, [r7, #0]
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
    8da0:	2101      	movs	r1, #1
        on_preconditions_denied(m_state);
    8da2:	b2ed      	uxtb	r5, r5
    result = nrf_802154_core_hooks_terminate(NRF_802154_TERM_802154, REQ_ORIG_CORE);
    8da4:	4608      	mov	r0, r1
    8da6:	f000 fe7d 	bl	9aa4 <nrf_802154_core_hooks_terminate>
    if (state == RADIO_STATE_RX)
    8daa:	2d02      	cmp	r5, #2
    8dac:	d131      	bne.n	8e12 <nrf_802154_rsch_crit_sect_prio_changed+0x18a>
        receiving_psdu_now = nrf_802154_trx_psdu_is_being_received();
    8dae:	f001 fa99 	bl	a2e4 <nrf_802154_trx_psdu_is_being_received>
    8db2:	4606      	mov	r6, r0
    trx_abort();
    8db4:	f00a fa90 	bl	132d8 <trx_abort>
            if (receiving_psdu_now)
    8db8:	b396      	cbz	r6, 8e20 <nrf_802154_rsch_crit_sect_prio_changed+0x198>
                receive_failed_notify(NRF_802154_RX_ERROR_ABORTED);
    8dba:	2006      	movs	r0, #6
    8dbc:	f7ff fcc4 	bl	8748 <receive_failed_notify>
    operation_terminated_notify(state, receiving_psdu_now);
    8dc0:	4631      	mov	r1, r6
    8dc2:	4628      	mov	r0, r5
    8dc4:	f7ff fec4 	bl	8b50 <operation_terminated_notify>
        radio_state_t new_state = m_state;
    8dc8:	7839      	ldrb	r1, [r7, #0]
    8dca:	b2c9      	uxtb	r1, r1
    return (min_required_rsch_prio(state) <= prio);
    8dcc:	4608      	mov	r0, r1
    8dce:	f7ff fc61 	bl	8694 <min_required_rsch_prio>
        if (is_state_allowed_for_prio(prio, new_state))
    8dd2:	4284      	cmp	r4, r0
    8dd4:	f4ff af71 	bcc.w	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
            on_preconditions_approved(new_state);
    8dd8:	4608      	mov	r0, r1
}
    8dda:	b007      	add	sp, #28
    8ddc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            on_preconditions_approved(m_state);
    8de0:	f7ff be86 	b.w	8af0 <on_preconditions_approved>
    else if (!old_prio_allows && new_prio_allows)
    8de4:	4284      	cmp	r4, r0
    8de6:	f4ff af68 	bcc.w	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
    8dea:	782b      	ldrb	r3, [r5, #0]
            on_preconditions_approved(m_state);
    8dec:	4b15      	ldr	r3, [pc, #84]	; (8e44 <nrf_802154_rsch_crit_sect_prio_changed+0x1bc>)
    8dee:	7818      	ldrb	r0, [r3, #0]
    8df0:	e7f3      	b.n	8dda <nrf_802154_rsch_crit_sect_prio_changed+0x152>
    else if (!old_prio_allows && new_prio_allows)
    8df2:	4284      	cmp	r4, r0
    8df4:	f4ff af61 	bcc.w	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
    8df8:	783b      	ldrb	r3, [r7, #0]
    bool coex_tx_request_mode_allows    = (m_coex_tx_request_mode ==
    8dfa:	4a17      	ldr	r2, [pc, #92]	; (8e58 <nrf_802154_rsch_crit_sect_prio_changed+0x1d0>)
            current_state_is_cca_tx &&
    8dfc:	2902      	cmp	r1, #2
    bool coex_tx_request_mode_allows    = (m_coex_tx_request_mode ==
    8dfe:	7812      	ldrb	r2, [r2, #0]
    bool current_state_is_cca_tx        = (m_state == RADIO_STATE_CCA_TX);
    8e00:	b2db      	uxtb	r3, r3
            current_state_is_cca_tx &&
    8e02:	d1f3      	bne.n	8dec <nrf_802154_rsch_crit_sect_prio_changed+0x164>
    return (only_coex_was_unapproved &&
    8e04:	2c04      	cmp	r4, #4
    8e06:	d1f1      	bne.n	8dec <nrf_802154_rsch_crit_sect_prio_changed+0x164>
            all_preconditions_are_approved &&
    8e08:	2b04      	cmp	r3, #4
    8e0a:	d1ef      	bne.n	8dec <nrf_802154_rsch_crit_sect_prio_changed+0x164>
            current_state_is_cca_tx &&
    8e0c:	2a03      	cmp	r2, #3
    8e0e:	d1ed      	bne.n	8dec <nrf_802154_rsch_crit_sect_prio_changed+0x164>
    8e10:	e753      	b.n	8cba <nrf_802154_rsch_crit_sect_prio_changed+0x32>
    trx_abort();
    8e12:	f00a fa61 	bl	132d8 <trx_abort>
    switch (state)
    8e16:	2d04      	cmp	r5, #4
    8e18:	d00b      	beq.n	8e32 <nrf_802154_rsch_crit_sect_prio_changed+0x1aa>
    8e1a:	d803      	bhi.n	8e24 <nrf_802154_rsch_crit_sect_prio_changed+0x19c>
    8e1c:	2d03      	cmp	r5, #3
    8e1e:	d004      	beq.n	8e2a <nrf_802154_rsch_crit_sect_prio_changed+0x1a2>
        bool receiving_psdu_now = false;
    8e20:	2600      	movs	r6, #0
    8e22:	e7cd      	b.n	8dc0 <nrf_802154_rsch_crit_sect_prio_changed+0x138>
    switch (state)
    8e24:	1f6b      	subs	r3, r5, #5
    8e26:	2b01      	cmp	r3, #1
    8e28:	d8fa      	bhi.n	8e20 <nrf_802154_rsch_crit_sect_prio_changed+0x198>
            state_set(RADIO_STATE_RX);
    8e2a:	2002      	movs	r0, #2
    8e2c:	f7ff fcb0 	bl	8790 <state_set>
            break;
    8e30:	e7f6      	b.n	8e20 <nrf_802154_rsch_crit_sect_prio_changed+0x198>
            m_flags.tx_diminished_prio = false;
    8e32:	4b0a      	ldr	r3, [pc, #40]	; (8e5c <nrf_802154_rsch_crit_sect_prio_changed+0x1d4>)
    8e34:	781a      	ldrb	r2, [r3, #0]
    8e36:	f36f 1204 	bfc	r2, #4, #1
    8e3a:	701a      	strb	r2, [r3, #0]
    8e3c:	e7f5      	b.n	8e2a <nrf_802154_rsch_crit_sect_prio_changed+0x1a2>
    8e3e:	bf00      	nop
    8e40:	20002eba 	.word	0x20002eba
    8e44:	20002ebd 	.word	0x20002ebd
    8e48:	20002ebb 	.word	0x20002ebb
    8e4c:	20001e9c 	.word	0x20001e9c
    8e50:	20001e98 	.word	0x20001e98
    8e54:	20001e94 	.word	0x20001e94
    8e58:	20002eb6 	.word	0x20002eb6
    8e5c:	20002ebc 	.word	0x20002ebc

00008e60 <nrf_802154_trx_receive_frame_prestarted>:
{
    8e60:	b570      	push	{r4, r5, r6, lr}
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
    8e62:	2000      	movs	r0, #0
    8e64:	f006 f852 	bl	ef0c <nrf_802154_sl_ant_div_cfg_mode_get>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8e68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    8e6c:	b672      	cpsid	i
    nrf_802154_stat_counter_increment(received_energy_events);
    8e6e:	4a18      	ldr	r2, [pc, #96]	; (8ed0 <nrf_802154_trx_receive_frame_prestarted+0x70>)
    8e70:	6893      	ldr	r3, [r2, #8]
    8e72:	3301      	adds	r3, #1
    8e74:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    8e76:	f381 8810 	msr	PRIMASK, r1
    nrf_802154_sl_ant_div_rx_preamble_detected_notify();
    8e7a:	f005 ff7d 	bl	ed78 <nrf_802154_sl_ant_div_rx_preamble_detected_notify>
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
    8e7e:	2000      	movs	r0, #0
    8e80:	f006 f844 	bl	ef0c <nrf_802154_sl_ant_div_cfg_mode_get>
    8e84:	4604      	mov	r4, r0
    if (nrf_802154_pib_coex_rx_request_mode_get() ==
    8e86:	f000 ff3d 	bl	9d04 <nrf_802154_pib_coex_rx_request_mode_get>
    8e8a:	2801      	cmp	r0, #1
    8e8c:	d11d      	bne.n	8eca <nrf_802154_trx_receive_frame_prestarted+0x6a>
        nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
    8e8e:	2002      	movs	r0, #2
    8e90:	f00b f8fe 	bl	14090 <nrf_802154_rsch_crit_sect_prio_request>
        uint64_t now = nrf_802154_sl_timer_current_time_get();
    8e94:	f00b f91d 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8e98:	4d0e      	ldr	r5, [pc, #56]	; (8ed4 <nrf_802154_trx_receive_frame_prestarted+0x74>)
        uint64_t now = nrf_802154_sl_timer_current_time_get();
    8e9a:	4604      	mov	r4, r0
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8e9c:	4628      	mov	r0, r5
        uint64_t now = nrf_802154_sl_timer_current_time_get();
    8e9e:	460e      	mov	r6, r1
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8ea0:	f006 faf4 	bl	f48c <nrf_802154_sl_timer_remove>
        m_rx_prestarted_timer.trigger_time             = now + PRESTARTED_TIMER_TIMEOUT_US;
    8ea4:	34a0      	adds	r4, #160	; 0xa0
        m_rx_prestarted_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
    8ea6:	f04f 0301 	mov.w	r3, #1
        m_rx_prestarted_timer.trigger_time             = now + PRESTARTED_TIMER_TIMEOUT_US;
    8eaa:	f146 0600 	adc.w	r6, r6, #0
        m_rx_prestarted_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
    8eae:	772b      	strb	r3, [r5, #28]
        ret = nrf_802154_sl_timer_add(&m_rx_prestarted_timer);
    8eb0:	4628      	mov	r0, r5
        m_rx_prestarted_timer.action.callback.callback = on_rx_prestarted_timeout;
    8eb2:	4b09      	ldr	r3, [pc, #36]	; (8ed8 <nrf_802154_trx_receive_frame_prestarted+0x78>)
    8eb4:	622b      	str	r3, [r5, #32]
        m_rx_prestarted_timer.trigger_time             = now + PRESTARTED_TIMER_TIMEOUT_US;
    8eb6:	e9c5 4604 	strd	r4, r6, [r5, #16]
        ret = nrf_802154_sl_timer_add(&m_rx_prestarted_timer);
    8eba:	f006 fac7 	bl	f44c <nrf_802154_sl_timer_add>
        m_rx_prestarted_trig_count += 1;
    8ebe:	4a07      	ldr	r2, [pc, #28]	; (8edc <nrf_802154_trx_receive_frame_prestarted+0x7c>)
    8ec0:	7813      	ldrb	r3, [r2, #0]
    8ec2:	3301      	adds	r3, #1
    8ec4:	b2db      	uxtb	r3, r3
    8ec6:	7013      	strb	r3, [r2, #0]
}
    8ec8:	e001      	b.n	8ece <nrf_802154_trx_receive_frame_prestarted+0x6e>
    if (rx_timeout_should_be_started)
    8eca:	2c00      	cmp	r4, #0
    8ecc:	d1e2      	bne.n	8e94 <nrf_802154_trx_receive_frame_prestarted+0x34>
}
    8ece:	bd70      	pop	{r4, r5, r6, pc}
    8ed0:	20000f18 	.word	0x20000f18
    8ed4:	20000ed8 	.word	0x20000ed8
    8ed8:	00008879 	.word	0x00008879
    8edc:	20002eb7 	.word	0x20002eb7

00008ee0 <nrf_802154_trx_receive_frame_started>:
{
    8ee0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8ee2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    8ee6:	b672      	cpsid	i
    nrf_802154_stat_counter_increment(received_preambles);
    8ee8:	4a12      	ldr	r2, [pc, #72]	; (8f34 <nrf_802154_trx_receive_frame_started+0x54>)
    8eea:	68d3      	ldr	r3, [r2, #12]
    8eec:	3301      	adds	r3, #1
    8eee:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    8ef0:	f381 8810 	msr	PRIMASK, r1
    switch (nrf_802154_pib_coex_rx_request_mode_get())
    8ef4:	f000 ff06 	bl	9d04 <nrf_802154_pib_coex_rx_request_mode_get>
    8ef8:	2801      	cmp	r0, #1
    8efa:	d00f      	beq.n	8f1c <nrf_802154_trx_receive_frame_started+0x3c>
    8efc:	2802      	cmp	r0, #2
    8efe:	d013      	beq.n	8f28 <nrf_802154_trx_receive_frame_started+0x48>
            nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX));
    8f00:	2000      	movs	r0, #0
    8f02:	f006 f803 	bl	ef0c <nrf_802154_sl_ant_div_cfg_mode_get>
    if (antenna_diversity_is_enabled())
    8f06:	b198      	cbz	r0, 8f30 <nrf_802154_trx_receive_frame_started+0x50>
        m_rx_prestarted_trig_count = 0;
    8f08:	4b0b      	ldr	r3, [pc, #44]	; (8f38 <nrf_802154_trx_receive_frame_started+0x58>)
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8f0a:	480c      	ldr	r0, [pc, #48]	; (8f3c <nrf_802154_trx_receive_frame_started+0x5c>)
        m_rx_prestarted_trig_count = 0;
    8f0c:	2200      	movs	r2, #0
    8f0e:	701a      	strb	r2, [r3, #0]
        (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8f10:	f006 fabc 	bl	f48c <nrf_802154_sl_timer_remove>
}
    8f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_sl_ant_div_rx_frame_started_notify();
    8f18:	f005 bf42 	b.w	eda0 <nrf_802154_sl_ant_div_rx_frame_started_notify>
            m_rx_prestarted_trig_count = 0;
    8f1c:	4b06      	ldr	r3, [pc, #24]	; (8f38 <nrf_802154_trx_receive_frame_started+0x58>)
            (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8f1e:	4807      	ldr	r0, [pc, #28]	; (8f3c <nrf_802154_trx_receive_frame_started+0x5c>)
            m_rx_prestarted_trig_count = 0;
    8f20:	2200      	movs	r2, #0
    8f22:	701a      	strb	r2, [r3, #0]
            (void)nrf_802154_sl_timer_remove(&m_rx_prestarted_timer);
    8f24:	f006 fab2 	bl	f48c <nrf_802154_sl_timer_remove>
            nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
    8f28:	2002      	movs	r0, #2
    8f2a:	f00b f8b1 	bl	14090 <nrf_802154_rsch_crit_sect_prio_request>
            break;
    8f2e:	e7e7      	b.n	8f00 <nrf_802154_trx_receive_frame_started+0x20>
}
    8f30:	bd08      	pop	{r3, pc}
    8f32:	bf00      	nop
    8f34:	20000f18 	.word	0x20000f18
    8f38:	20002eb7 	.word	0x20002eb7
    8f3c:	20000ed8 	.word	0x20000ed8

00008f40 <nrf_802154_trx_receive_frame_bcmatched>:
{
    8f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (!m_flags.frame_filtered)
    8f44:	4c53      	ldr	r4, [pc, #332]	; (9094 <nrf_802154_trx_receive_frame_bcmatched+0x154>)
    num_data_bytes      = bcc;
    8f46:	f88d 0007 	strb.w	r0, [sp, #7]
    if (!m_flags.frame_filtered)
    8f4a:	7823      	ldrb	r3, [r4, #0]
    8f4c:	07df      	lsls	r7, r3, #31
{
    8f4e:	4606      	mov	r6, r0
    if (!m_flags.frame_filtered)
    8f50:	d46a      	bmi.n	9028 <nrf_802154_trx_receive_frame_bcmatched+0xe8>
        filter_result = nrf_802154_filter_frame_part(&m_current_rx_frame_data,
    8f52:	f8df 8144 	ldr.w	r8, [pc, #324]	; 9098 <nrf_802154_trx_receive_frame_bcmatched+0x158>
    8f56:	f10d 0107 	add.w	r1, sp, #7
    8f5a:	4640      	mov	r0, r8
    8f5c:	f002 fc42 	bl	b7e4 <nrf_802154_filter_frame_part>
        if (filter_result == NRF_802154_RX_ERROR_NONE)
    8f60:	4607      	mov	r7, r0
    8f62:	b9c0      	cbnz	r0, 8f96 <nrf_802154_trx_receive_frame_bcmatched+0x56>
            if (num_data_bytes != prev_num_data_bytes)
    8f64:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
    8f68:	7823      	ldrb	r3, [r4, #0]
            if (num_data_bytes != prev_num_data_bytes)
    8f6a:	42b5      	cmp	r5, r6
    8f6c:	d110      	bne.n	8f90 <nrf_802154_trx_receive_frame_bcmatched+0x50>
                m_flags.frame_filtered = true;
    8f6e:	f043 0301 	orr.w	r3, r3, #1
                nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
    8f72:	2002      	movs	r0, #2
                m_flags.frame_filtered = true;
    8f74:	7023      	strb	r3, [r4, #0]
                nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_RX);
    8f76:	f00b f88b 	bl	14090 <nrf_802154_rsch_crit_sect_prio_request>
                m_flags.frame_parsed = false;
    8f7a:	7823      	ldrb	r3, [r4, #0]
    8f7c:	f367 0341 	bfi	r3, r7, #1, #1
    8f80:	7023      	strb	r3, [r4, #0]
                nrf_802154_ack_generator_reset();
    8f82:	f00a fbcb 	bl	1371c <nrf_802154_ack_generator_reset>
                bcc = PHR_SIZE +
    8f86:	f898 5014 	ldrb.w	r5, [r8, #20]
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
    8f8a:	7823      	ldrb	r3, [r4, #0]
                bcc = PHR_SIZE +
    8f8c:	3502      	adds	r5, #2
    8f8e:	b2ed      	uxtb	r5, r5
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
    8f90:	075a      	lsls	r2, r3, #29
    8f92:	d433      	bmi.n	8ffc <nrf_802154_trx_receive_frame_bcmatched+0xbc>
    8f94:	e008      	b.n	8fa8 <nrf_802154_trx_receive_frame_bcmatched+0x68>
        else if ((filter_result == NRF_802154_RX_ERROR_INVALID_LENGTH) ||
    8f96:	2809      	cmp	r0, #9
    8f98:	d01d      	beq.n	8fd6 <nrf_802154_trx_receive_frame_bcmatched+0x96>
                 (!nrf_802154_pib_promiscuous_get()))
    8f9a:	f000 fe65 	bl	9c68 <nrf_802154_pib_promiscuous_get>
        else if ((filter_result == NRF_802154_RX_ERROR_INVALID_LENGTH) ||
    8f9e:	b1d0      	cbz	r0, 8fd6 <nrf_802154_trx_receive_frame_bcmatched+0x96>
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
    8fa0:	7823      	ldrb	r3, [r4, #0]
    8fa2:	075d      	lsls	r5, r3, #29
    8fa4:	d429      	bmi.n	8ffa <nrf_802154_trx_receive_frame_bcmatched+0xba>
{
    8fa6:	4635      	mov	r5, r6
                                                 mp_current_rx_buffer->data[0],
    8fa8:	4f3c      	ldr	r7, [pc, #240]	; (909c <nrf_802154_trx_receive_frame_bcmatched+0x15c>)
    8faa:	6838      	ldr	r0, [r7, #0]
        if (nrf_802154_rsch_timeslot_request(nrf_802154_rx_duration_get(
    8fac:	7806      	ldrb	r6, [r0, #0]
    8fae:	f00a f958 	bl	13262 <ack_is_requested>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
    8fb2:	1c73      	adds	r3, r6, #1
    8fb4:	015b      	lsls	r3, r3, #5
{
    // SHR + PHR + PSDU
    // if ACK: + aTurnaroundTime + ACK frame duration
    uint16_t us_time = nrf_802154_frame_duration_get(psdu_length, true, true);

    if (ack_requested)
    8fb6:	2800      	cmp	r0, #0
    8fb8:	d15d      	bne.n	9076 <nrf_802154_trx_receive_frame_bcmatched+0x136>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SHR_SYMBOLS);
    8fba:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
    8fbe:	f00b f83a 	bl	14036 <nrf_802154_rsch_timeslot_request>
    8fc2:	2800      	cmp	r0, #0
    8fc4:	d05a      	beq.n	907c <nrf_802154_trx_receive_frame_bcmatched+0x13c>
            m_flags.rx_timeslot_requested = true;
    8fc6:	7823      	ldrb	r3, [r4, #0]
    nrf_802154_core_hooks_rx_started(p_frame);
    8fc8:	6838      	ldr	r0, [r7, #0]
            m_flags.rx_timeslot_requested = true;
    8fca:	f043 0304 	orr.w	r3, r3, #4
    8fce:	7023      	strb	r3, [r4, #0]
    nrf_802154_core_hooks_rx_started(p_frame);
    8fd0:	f00a f9ed 	bl	133ae <nrf_802154_core_hooks_rx_started>
}
    8fd4:	e012      	b.n	8ffc <nrf_802154_trx_receive_frame_bcmatched+0xbc>
            trx_abort();
    8fd6:	f00a f97f 	bl	132d8 <trx_abort>
            rx_init();
    8fda:	f7ff fcbf 	bl	895c <rx_init>
            request_preconditions_for_state(m_state);
    8fde:	4b30      	ldr	r3, [pc, #192]	; (90a0 <nrf_802154_trx_receive_frame_bcmatched+0x160>)
    8fe0:	7818      	ldrb	r0, [r3, #0]
    8fe2:	f00a f928 	bl	13236 <request_preconditions_for_state>
            if ((mp_current_rx_buffer->data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) !=
    8fe6:	4b2d      	ldr	r3, [pc, #180]	; (909c <nrf_802154_trx_receive_frame_bcmatched+0x15c>)
    8fe8:	681b      	ldr	r3, [r3, #0]
    8fea:	785b      	ldrb	r3, [r3, #1]
    8fec:	f003 0307 	and.w	r3, r3, #7
    8ff0:	2b02      	cmp	r3, #2
    8ff2:	d002      	beq.n	8ffa <nrf_802154_trx_receive_frame_bcmatched+0xba>
                receive_failed_notify(filter_result);
    8ff4:	4638      	mov	r0, r7
    8ff6:	f7ff fba7 	bl	8748 <receive_failed_notify>
{
    8ffa:	4635      	mov	r5, r6
    if (m_flags.frame_filtered &&
    8ffc:	7823      	ldrb	r3, [r4, #0]
    8ffe:	f003 0303 	and.w	r3, r3, #3
    9002:	2b03      	cmp	r3, #3
    9004:	d10c      	bne.n	9020 <nrf_802154_trx_receive_frame_bcmatched+0xe0>
 * @retval  false AR bit is not set.
 */
static inline bool nrf_802154_frame_parser_ar_bit_is_set(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
    9006:	4c24      	ldr	r4, [pc, #144]	; (9098 <nrf_802154_trx_receive_frame_bcmatched+0x158>)
    9008:	6823      	ldr	r3, [r4, #0]
    900a:	785b      	ldrb	r3, [r3, #1]
        m_flags.frame_parsed &&
    900c:	069b      	lsls	r3, r3, #26
    900e:	d507      	bpl.n	9020 <nrf_802154_trx_receive_frame_bcmatched+0xe0>
        nrf_802154_pib_auto_ack_get())
    9010:	f000 fe32 	bl	9c78 <nrf_802154_pib_auto_ack_get>
        nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
    9014:	b120      	cbz	r0, 9020 <nrf_802154_trx_receive_frame_bcmatched+0xe0>
        mp_ack = nrf_802154_ack_generator_create(&m_current_rx_frame_data);
    9016:	4620      	mov	r0, r4
    9018:	f00a fb87 	bl	1372a <nrf_802154_ack_generator_create>
    901c:	4b21      	ldr	r3, [pc, #132]	; (90a4 <nrf_802154_trx_receive_frame_bcmatched+0x164>)
    901e:	6018      	str	r0, [r3, #0]
}
    9020:	4628      	mov	r0, r5
    9022:	b002      	add	sp, #8
    9024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (!m_flags.frame_parsed)
    9028:	0798      	lsls	r0, r3, #30
    902a:	d4ba      	bmi.n	8fa2 <nrf_802154_trx_receive_frame_bcmatched+0x62>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
    902c:	4d1a      	ldr	r5, [pc, #104]	; (9098 <nrf_802154_trx_receive_frame_bcmatched+0x158>)
    902e:	682b      	ldr	r3, [r5, #0]
    9030:	785b      	ldrb	r3, [r3, #1]
        if (nrf_802154_frame_parser_security_enabled_bit_is_set(&m_current_rx_frame_data))
    9032:	0719      	lsls	r1, r3, #28
    9034:	d517      	bpl.n	9066 <nrf_802154_trx_receive_frame_bcmatched+0x126>
            if (nrf_802154_frame_parser_valid_data_extend(
    9036:	2205      	movs	r2, #5
    9038:	4631      	mov	r1, r6
    903a:	4628      	mov	r0, r5
    903c:	f00a fb38 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    9040:	b120      	cbz	r0, 904c <nrf_802154_trx_receive_frame_bcmatched+0x10c>
            m_flags.frame_parsed = true;
    9042:	7823      	ldrb	r3, [r4, #0]
    9044:	f043 0302 	orr.w	r3, r3, #2
    9048:	7023      	strb	r3, [r4, #0]
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
    904a:	e7aa      	b.n	8fa2 <nrf_802154_trx_receive_frame_bcmatched+0x62>
            else if (nrf_802154_frame_parser_valid_data_extend(
    904c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9050:	2204      	movs	r2, #4
    9052:	4628      	mov	r0, r5
    9054:	f00a fb2c 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    9058:	7823      	ldrb	r3, [r4, #0]
    905a:	2800      	cmp	r0, #0
    905c:	d0a1      	beq.n	8fa2 <nrf_802154_trx_receive_frame_bcmatched+0x62>
                bcc = PHR_SIZE +
    905e:	7d6d      	ldrb	r5, [r5, #21]
    9060:	3501      	adds	r5, #1
    9062:	b2ed      	uxtb	r5, r5
    if ((!m_flags.rx_timeslot_requested) && (frame_accepted))
    9064:	e794      	b.n	8f90 <nrf_802154_trx_receive_frame_bcmatched+0x50>
        else if (nrf_802154_frame_parser_valid_data_extend(
    9066:	2203      	movs	r2, #3
    9068:	4631      	mov	r1, r6
    906a:	4628      	mov	r0, r5
    906c:	f00a fb20 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    9070:	2800      	cmp	r0, #0
    9072:	d1e6      	bne.n	9042 <nrf_802154_trx_receive_frame_bcmatched+0x102>
    9074:	e794      	b.n	8fa0 <nrf_802154_trx_receive_frame_bcmatched+0x60>
    {
        us_time += PHY_US_TIME_FROM_SYMBOLS(A_TURNAROUND_TIME_SYMBOLS +
    9076:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
    907a:	e7a0      	b.n	8fbe <nrf_802154_trx_receive_frame_bcmatched+0x7e>
            trx_abort();
    907c:	f00a f92c 	bl	132d8 <trx_abort>
            rx_init();
    9080:	f7ff fc6c 	bl	895c <rx_init>
            (void)nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_TIMESLOT_ENDED,
    9084:	4b08      	ldr	r3, [pc, #32]	; (90a8 <nrf_802154_trx_receive_frame_bcmatched+0x168>)
    9086:	2201      	movs	r2, #1
    9088:	6819      	ldr	r1, [r3, #0]
    908a:	2005      	movs	r0, #5
    908c:	f00a fb7d 	bl	1378a <nrf_802154_notify_receive_failed>
    9090:	e7b4      	b.n	8ffc <nrf_802154_trx_receive_frame_bcmatched+0xbc>
    9092:	bf00      	nop
    9094:	20002ebc 	.word	0x20002ebc
    9098:	20001e78 	.word	0x20001e78
    909c:	20001e9c 	.word	0x20001e9c
    90a0:	20002ebd 	.word	0x20002ebd
    90a4:	20001e98 	.word	0x20001e98
    90a8:	20001e74 	.word	0x20001e74

000090ac <nrf_802154_trx_receive_frame_crcerror>:
{
    90ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    90ae:	f7ff f9c7 	bl	8440 <nrf_802154_hp_timer_timestamp_get>
    m_flags.frame_filtered        = false;
    90b2:	4a17      	ldr	r2, [pc, #92]	; (9110 <nrf_802154_trx_receive_frame_crcerror+0x64>)
    uint32_t listening_start_hp_timestamp = m_listening_start_hp_timestamp;
    90b4:	4d17      	ldr	r5, [pc, #92]	; (9114 <nrf_802154_trx_receive_frame_crcerror+0x68>)
    m_flags.frame_filtered        = false;
    90b6:	7813      	ldrb	r3, [r2, #0]
    uint32_t listening_start_hp_timestamp = m_listening_start_hp_timestamp;
    90b8:	682e      	ldr	r6, [r5, #0]
    m_flags.frame_filtered        = false;
    90ba:	f023 0307 	bic.w	r3, r3, #7
    90be:	7013      	strb	r3, [r2, #0]
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    90c0:	4604      	mov	r4, r0
    rx_data_clear();
    90c2:	f7ff fb7d 	bl	87c0 <rx_data_clear>
    request_preconditions_for_state(m_state);
    90c6:	4b14      	ldr	r3, [pc, #80]	; (9118 <nrf_802154_trx_receive_frame_crcerror+0x6c>)
    90c8:	7818      	ldrb	r0, [r3, #0]
    90ca:	f00a f8b4 	bl	13236 <request_preconditions_for_state>
    nrf_802154_fal_tx_power_split_t split_power = {0};
    90ce:	2300      	movs	r3, #0
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    90d0:	a801      	add	r0, sp, #4
    nrf_802154_fal_tx_power_split_t split_power = {0};
    90d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    90d6:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)nrf_802154_tx_power_split_pib_power_get(&split_power);
    90da:	f00a fa28 	bl	1352e <nrf_802154_tx_power_split_pib_power_get>
    nrf_802154_trx_receive_frame(BCC_INIT / 8U,
    90de:	4b0f      	ldr	r3, [pc, #60]	; (911c <nrf_802154_trx_receive_frame_crcerror+0x70>)
    90e0:	aa01      	add	r2, sp, #4
    90e2:	7819      	ldrb	r1, [r3, #0]
    90e4:	2003      	movs	r0, #3
    90e6:	f001 f941 	bl	a36c <nrf_802154_trx_receive_frame>
    m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
    90ea:	f7ff f9af 	bl	844c <nrf_802154_hp_timer_current_time_get>
    90ee:	6028      	str	r0, [r5, #0]
    nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_end_event_handle_get());
    90f0:	f001 fe6e 	bl	add0 <nrf_802154_trx_radio_end_event_handle_get>
    90f4:	f006 fa82 	bl	f5fc <nrf_802154_timer_coord_timestamp_prepare>
    update_total_times_on_receive_end(listening_start_hp_timestamp,
    90f8:	4b09      	ldr	r3, [pc, #36]	; (9120 <nrf_802154_trx_receive_frame_crcerror+0x74>)
    90fa:	681b      	ldr	r3, [r3, #0]
    90fc:	4621      	mov	r1, r4
    90fe:	781a      	ldrb	r2, [r3, #0]
    9100:	4630      	mov	r0, r6
    9102:	f7ff faf5 	bl	86f0 <update_total_times_on_receive_end>
    receive_failed_notify(NRF_802154_RX_ERROR_INVALID_FCS);
    9106:	2002      	movs	r0, #2
    9108:	f7ff fb1e 	bl	8748 <receive_failed_notify>
}
    910c:	b002      	add	sp, #8
    910e:	bd70      	pop	{r4, r5, r6, pc}
    9110:	20002ebc 	.word	0x20002ebc
    9114:	20001e70 	.word	0x20001e70
    9118:	20002ebd 	.word	0x20002ebd
    911c:	20002eb9 	.word	0x20002eb9
    9120:	20001e9c 	.word	0x20001e9c

00009124 <nrf_802154_trx_receive_ack_crcerror>:
{
    9124:	b508      	push	{r3, lr}
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    9126:	f7ff f98b 	bl	8440 <nrf_802154_hp_timer_timestamp_get>
    update_total_times_on_receive_end(listening_start_hp_timestamp,
    912a:	4b06      	ldr	r3, [pc, #24]	; (9144 <nrf_802154_trx_receive_ack_crcerror+0x20>)
    912c:	681b      	ldr	r3, [r3, #0]
    912e:	781a      	ldrb	r2, [r3, #0]
    9130:	4b05      	ldr	r3, [pc, #20]	; (9148 <nrf_802154_trx_receive_ack_crcerror+0x24>)
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    9132:	4601      	mov	r1, r0
    update_total_times_on_receive_end(listening_start_hp_timestamp,
    9134:	6818      	ldr	r0, [r3, #0]
    9136:	f7ff fadb 	bl	86f0 <update_total_times_on_receive_end>
}
    913a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    on_bad_ack();
    913e:	f7ff bc53 	b.w	89e8 <on_bad_ack>
    9142:	bf00      	nop
    9144:	20001e9c 	.word	0x20001e9c
    9148:	20001e70 	.word	0x20001e70

0000914c <nrf_802154_trx_receive_frame_received>:
{
    914c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t * p_received_data = mp_current_rx_buffer->data;
    9150:	4d57      	ldr	r5, [pc, #348]	; (92b0 <nrf_802154_trx_receive_frame_received+0x164>)
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
    9152:	f8df 8160 	ldr.w	r8, [pc, #352]	; 92b4 <nrf_802154_trx_receive_frame_received+0x168>
    uint8_t * p_received_data = mp_current_rx_buffer->data;
    9156:	682c      	ldr	r4, [r5, #0]
    m_last_rssi = rssi_last_measurement_get();
    9158:	f00a f893 	bl	13282 <rssi_last_measurement_get>
    915c:	4b56      	ldr	r3, [pc, #344]	; (92b8 <nrf_802154_trx_receive_frame_received+0x16c>)
    915e:	7018      	strb	r0, [r3, #0]
    uint32_t lqi = RX_FRAME_LQI(p_data);
    9160:	7823      	ldrb	r3, [r4, #0]
    9162:	4423      	add	r3, r4
    lqi  = nrf_802154_rssi_lqi_corrected_get(lqi);
    9164:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    9168:	f00a f982 	bl	13470 <nrf_802154_rssi_lqi_corrected_get>
    lqi *= LQI_VALUE_FACTOR;
    916c:	b200      	sxth	r0, r0
    916e:	0080      	lsls	r0, r0, #2
    if (lqi > LQI_MAX)
    9170:	28ff      	cmp	r0, #255	; 0xff
    return (uint8_t)lqi;
    9172:	4b52      	ldr	r3, [pc, #328]	; (92bc <nrf_802154_trx_receive_frame_received+0x170>)
    if (lqi > LQI_MAX)
    9174:	bf28      	it	cs
    9176:	20ff      	movcs	r0, #255	; 0xff
    return (uint8_t)lqi;
    9178:	7018      	strb	r0, [r3, #0]
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    917a:	f7ff f961 	bl	8440 <nrf_802154_hp_timer_timestamp_get>
    update_total_times_on_receive_end(listening_start_hp_timestamp,
    917e:	682b      	ldr	r3, [r5, #0]
    9180:	781a      	ldrb	r2, [r3, #0]
    9182:	4b4f      	ldr	r3, [pc, #316]	; (92c0 <nrf_802154_trx_receive_frame_received+0x174>)
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    9184:	4601      	mov	r1, r0
    update_total_times_on_receive_end(listening_start_hp_timestamp,
    9186:	6818      	ldr	r0, [r3, #0]
    9188:	f7ff fab2 	bl	86f0 <update_total_times_on_receive_end>
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
    918c:	f898 3000 	ldrb.w	r3, [r8]
    9190:	07d9      	lsls	r1, r3, #31
    9192:	d533      	bpl.n	91fc <nrf_802154_trx_receive_frame_received+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9194:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9198:	b672      	cpsid	i
        nrf_802154_stat_counter_increment(received_frames);
    919a:	4e4a      	ldr	r6, [pc, #296]	; (92c4 <nrf_802154_trx_receive_frame_received+0x178>)
    919c:	6873      	ldr	r3, [r6, #4]
    919e:	3301      	adds	r3, #1
    91a0:	6073      	str	r3, [r6, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    91a2:	f382 8810 	msr	PRIMASK, r2
        uint64_t ts = timer_coord_timestamp_get();
    91a6:	f00a f874 	bl	13292 <timer_coord_timestamp_get>
    91aa:	4602      	mov	r2, r0
    91ac:	460b      	mov	r3, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    91ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    91b2:	b672      	cpsid	i
        nrf_802154_stat_timestamp_write(last_rx_end_timestamp, ts);
    91b4:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    91b8:	f381 8810 	msr	PRIMASK, r1
    return p_parser_data->p_frame[PHR_OFFSET];
    91bc:	4f42      	ldr	r7, [pc, #264]	; (92c8 <nrf_802154_trx_receive_frame_received+0x17c>)
        nrf_802154_sl_ant_div_rx_frame_received_notify();
    91be:	f005 fe0f 	bl	ede0 <nrf_802154_sl_ant_div_rx_frame_received_notify>
    91c2:	683b      	ldr	r3, [r7, #0]
        bool parse_result = nrf_802154_frame_parser_valid_data_extend(
    91c4:	7819      	ldrb	r1, [r3, #0]
    91c6:	3101      	adds	r1, #1
    91c8:	2206      	movs	r2, #6
    91ca:	b2c9      	uxtb	r1, r1
    91cc:	4638      	mov	r0, r7
    91ce:	f00a fa6f 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
        if (m_flags.frame_filtered &&
    91d2:	f898 3000 	ldrb.w	r3, [r8]
    91d6:	07da      	lsls	r2, r3, #31
    91d8:	d41f      	bmi.n	921a <nrf_802154_trx_receive_frame_received+0xce>
            request_preconditions_for_state(m_state);
    91da:	4b3c      	ldr	r3, [pc, #240]	; (92cc <nrf_802154_trx_receive_frame_received+0x180>)
    91dc:	7818      	ldrb	r0, [r3, #0]
    91de:	f00a f82a 	bl	13236 <request_preconditions_for_state>
            if (((p_received_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK) ||
    91e2:	7863      	ldrb	r3, [r4, #1]
    91e4:	f003 0307 	and.w	r3, r3, #7
    91e8:	2b02      	cmp	r3, #2
    91ea:	d057      	beq.n	929c <nrf_802154_trx_receive_frame_received+0x150>
                mp_current_rx_buffer->free = false;
    91ec:	682b      	ldr	r3, [r5, #0]
    91ee:	2200      	movs	r2, #0
    91f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
    91f4:	f000 fdc4 	bl	9d80 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
    91f8:	6028      	str	r0, [r5, #0]
                rx_init();
    91fa:	e036      	b.n	926a <nrf_802154_trx_receive_frame_received+0x11e>
    if (m_flags.frame_filtered || nrf_802154_pib_promiscuous_get())
    91fc:	f000 fd34 	bl	9c68 <nrf_802154_pib_promiscuous_get>
    9200:	2800      	cmp	r0, #0
    9202:	d1c7      	bne.n	9194 <nrf_802154_trx_receive_frame_received+0x48>
        request_preconditions_for_state(m_state);
    9204:	4b31      	ldr	r3, [pc, #196]	; (92cc <nrf_802154_trx_receive_frame_received+0x180>)
    9206:	7818      	ldrb	r0, [r3, #0]
    9208:	f00a f815 	bl	13236 <request_preconditions_for_state>
        rx_init();
    920c:	f7ff fba6 	bl	895c <rx_init>
}
    9210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        receive_failed_notify(NRF_802154_RX_ERROR_RUNTIME);
    9214:	2004      	movs	r0, #4
    9216:	f7ff ba97 	b.w	8748 <receive_failed_notify>
        if (m_flags.frame_filtered &&
    921a:	2800      	cmp	r0, #0
    921c:	d0dd      	beq.n	91da <nrf_802154_trx_receive_frame_received+0x8e>
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
    921e:	683b      	ldr	r3, [r7, #0]
    9220:	785b      	ldrb	r3, [r3, #1]
            parse_result &&
    9222:	069b      	lsls	r3, r3, #26
    9224:	d5d9      	bpl.n	91da <nrf_802154_trx_receive_frame_received+0x8e>
            nrf_802154_pib_auto_ack_get())
    9226:	f000 fd27 	bl	9c78 <nrf_802154_pib_auto_ack_get>
            nrf_802154_frame_parser_ar_bit_is_set(&m_current_rx_frame_data) &&
    922a:	2800      	cmp	r0, #0
    922c:	d0d5      	beq.n	91da <nrf_802154_trx_receive_frame_received+0x8e>
            nrf_802154_tx_work_buffer_reset(&m_default_frame_props);
    922e:	4828      	ldr	r0, [pc, #160]	; (92d0 <nrf_802154_trx_receive_frame_received+0x184>)
    9230:	f001 fec6 	bl	afc0 <nrf_802154_tx_work_buffer_reset>
            mp_ack   = nrf_802154_ack_generator_create(&m_current_rx_frame_data);
    9234:	4638      	mov	r0, r7
    9236:	f00a fa78 	bl	1372a <nrf_802154_ack_generator_create>
    923a:	4f26      	ldr	r7, [pc, #152]	; (92d4 <nrf_802154_trx_receive_frame_received+0x188>)
    923c:	6038      	str	r0, [r7, #0]
        if (send_ack)
    923e:	2800      	cmp	r0, #0
    9240:	d0cb      	beq.n	91da <nrf_802154_trx_receive_frame_received+0x8e>
            state_set(RADIO_STATE_TX_ACK);
    9242:	2003      	movs	r0, #3
    9244:	f7ff faa4 	bl	8790 <state_set>
            if (is_state_allowed_for_prio(m_rsch_priority, RADIO_STATE_TX_ACK))
    9248:	4b23      	ldr	r3, [pc, #140]	; (92d8 <nrf_802154_trx_receive_frame_received+0x18c>)
    924a:	781b      	ldrb	r3, [r3, #0]
    924c:	2b03      	cmp	r3, #3
    924e:	d913      	bls.n	9278 <nrf_802154_trx_receive_frame_received+0x12c>
                if (nrf_802154_trx_transmit_ack(nrf_802154_tx_work_buffer_get(mp_ack), ACK_IFS))
    9250:	6838      	ldr	r0, [r7, #0]
    9252:	f001 fecd 	bl	aff0 <nrf_802154_tx_work_buffer_get>
    9256:	21c0      	movs	r1, #192	; 0xc0
    9258:	f001 fa2c 	bl	a6b4 <nrf_802154_trx_transmit_ack>
    925c:	bb30      	cbnz	r0, 92ac <nrf_802154_trx_receive_frame_received+0x160>
                    mp_current_rx_buffer->free = false;
    925e:	682b      	ldr	r3, [r5, #0]
    9260:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
                state_set(RADIO_STATE_RX);
    9264:	2002      	movs	r0, #2
    9266:	f7ff fa93 	bl	8790 <state_set>
                rx_init();
    926a:	f7ff fb77 	bl	895c <rx_init>
                received_frame_notify_and_nesting_allow(p_received_data);
    926e:	4620      	mov	r0, r4
}
    9270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                received_frame_notify_and_nesting_allow(p_received_data);
    9274:	f7ff ba78 	b.w	8768 <received_frame_notify_and_nesting_allow>
                if (!nrf_802154_rsch_prec_is_approved(RSCH_PREC_COEX,
    9278:	2104      	movs	r1, #4
    927a:	2002      	movs	r0, #2
    927c:	f006 f826 	bl	f2cc <nrf_802154_rsch_prec_is_approved>
    9280:	b938      	cbnz	r0, 9292 <nrf_802154_trx_receive_frame_received+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9282:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9286:	b672      	cpsid	i
                    nrf_802154_stat_counter_increment(coex_denied_requests);
    9288:	69b3      	ldr	r3, [r6, #24]
    928a:	3301      	adds	r3, #1
    928c:	61b3      	str	r3, [r6, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    928e:	f382 8810 	msr	PRIMASK, r2
                mp_current_rx_buffer->free = false;
    9292:	682b      	ldr	r3, [r5, #0]
    9294:	2200      	movs	r2, #0
    9296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    929a:	e7e3      	b.n	9264 <nrf_802154_trx_receive_frame_received+0x118>
                nrf_802154_pib_promiscuous_get())
    929c:	f000 fce4 	bl	9c68 <nrf_802154_pib_promiscuous_get>
            if (((p_received_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK) ||
    92a0:	2800      	cmp	r0, #0
    92a2:	d1a3      	bne.n	91ec <nrf_802154_trx_receive_frame_received+0xa0>
}
    92a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                rx_init();
    92a8:	f7ff bb58 	b.w	895c <rx_init>
}
    92ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92b0:	20001e9c 	.word	0x20001e9c
    92b4:	20002ebc 	.word	0x20002ebc
    92b8:	20002ebe 	.word	0x20002ebe
    92bc:	20002ec2 	.word	0x20002ec2
    92c0:	20001e70 	.word	0x20001e70
    92c4:	20000f18 	.word	0x20000f18
    92c8:	20001e78 	.word	0x20001e78
    92cc:	20002ebd 	.word	0x20002ebd
    92d0:	000151cf 	.word	0x000151cf
    92d4:	20001e98 	.word	0x20001e98
    92d8:	20002eba 	.word	0x20002eba

000092dc <nrf_802154_trx_transmit_frame_started>:
{
    92dc:	b510      	push	{r4, lr}
    uint8_t * p_frame = mp_tx_data;
    92de:	4b06      	ldr	r3, [pc, #24]	; (92f8 <nrf_802154_trx_transmit_frame_started+0x1c>)
    92e0:	681c      	ldr	r4, [r3, #0]
    if (nrf_802154_core_hooks_tx_started(p_frame))
    92e2:	4620      	mov	r0, r4
    92e4:	f000 fc06 	bl	9af4 <nrf_802154_core_hooks_tx_started>
    92e8:	b120      	cbz	r0, 92f4 <nrf_802154_trx_transmit_frame_started+0x18>
        nrf_802154_tx_started(p_frame);
    92ea:	4620      	mov	r0, r4
}
    92ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_802154_tx_started(p_frame);
    92f0:	f7fa bfae 	b.w	4250 <nrf_802154_tx_started>
}
    92f4:	bd10      	pop	{r4, pc}
    92f6:	bf00      	nop
    92f8:	20001e94 	.word	0x20001e94

000092fc <nrf_802154_trx_transmit_ack_started>:
{
    92fc:	b510      	push	{r4, lr}
    nrf_802154_core_hooks_tx_ack_started(mp_ack);
    92fe:	4c04      	ldr	r4, [pc, #16]	; (9310 <nrf_802154_trx_transmit_ack_started+0x14>)
    9300:	6820      	ldr	r0, [r4, #0]
    9302:	f00a f858 	bl	133b6 <nrf_802154_core_hooks_tx_ack_started>
    nrf_802154_tx_ack_started(mp_ack);
    9306:	6820      	ldr	r0, [r4, #0]
}
    9308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_tx_ack_started(mp_ack);
    930c:	f009 bf8b 	b.w	13226 <nrf_802154_tx_ack_started>
    9310:	20001e98 	.word	0x20001e98

00009314 <nrf_802154_trx_transmit_ack_transmitted>:
{
    9314:	b570      	push	{r4, r5, r6, lr}
    uint32_t t_transmit = TX_RAMP_UP_TIME + nrf_802154_frame_duration_get(mp_ack[PHR_OFFSET],
    9316:	4b10      	ldr	r3, [pc, #64]	; (9358 <nrf_802154_trx_transmit_ack_transmitted+0x44>)
    9318:	681b      	ldr	r3, [r3, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
    931a:	781b      	ldrb	r3, [r3, #0]
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
    931c:	015b      	lsls	r3, r3, #5
    931e:	33e8      	adds	r3, #232	; 0xe8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9320:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9324:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
    9326:	4a0d      	ldr	r2, [pc, #52]	; (935c <nrf_802154_trx_transmit_ack_transmitted+0x48>)
    9328:	e9d2 4504 	ldrd	r4, r5, [r2, #16]
    932c:	1918      	adds	r0, r3, r4
    932e:	f145 0100 	adc.w	r1, r5, #0
    9332:	e9c2 0104 	strd	r0, r1, [r2, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    9336:	f386 8810 	msr	PRIMASK, r6
    uint8_t * p_received_data = mp_current_rx_buffer->data;
    933a:	4b09      	ldr	r3, [pc, #36]	; (9360 <nrf_802154_trx_transmit_ack_transmitted+0x4c>)
    933c:	681c      	ldr	r4, [r3, #0]
    mp_current_rx_buffer->free = false;
    933e:	2300      	movs	r3, #0
    9340:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    state_set(RADIO_STATE_RX);
    9344:	2002      	movs	r0, #2
    9346:	f7ff fa23 	bl	8790 <state_set>
    rx_init();
    934a:	f7ff fb07 	bl	895c <rx_init>
    received_frame_notify_and_nesting_allow(p_received_data);
    934e:	4620      	mov	r0, r4
}
    9350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    received_frame_notify_and_nesting_allow(p_received_data);
    9354:	f7ff ba08 	b.w	8768 <received_frame_notify_and_nesting_allow>
    9358:	20001e98 	.word	0x20001e98
    935c:	20000f00 	.word	0x20000f00
    9360:	20001e9c 	.word	0x20001e9c

00009364 <nrf_802154_trx_transmit_frame_transmitted>:
{
    9364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint64_t ts = timer_coord_timestamp_get();
    9366:	f009 ff94 	bl	13292 <timer_coord_timestamp_get>
    936a:	4604      	mov	r4, r0
    936c:	460d      	mov	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    936e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9372:	b672      	cpsid	i
    nrf_802154_stat_timestamp_write(last_tx_end_timestamp, ts);
    9374:	483c      	ldr	r0, [pc, #240]	; (9468 <nrf_802154_trx_transmit_frame_transmitted+0x104>)
    9376:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    937a:	f383 8810 	msr	PRIMASK, r3
    if (m_flags.tx_with_cca)
    937e:	4e3b      	ldr	r6, [pc, #236]	; (946c <nrf_802154_trx_transmit_frame_transmitted+0x108>)
    9380:	493b      	ldr	r1, [pc, #236]	; (9470 <nrf_802154_trx_transmit_frame_transmitted+0x10c>)
    9382:	7833      	ldrb	r3, [r6, #0]
    9384:	f013 0208 	ands.w	r2, r3, #8
    9388:	d05f      	beq.n	944a <nrf_802154_trx_transmit_frame_transmitted+0xe6>
        m_flags.tx_diminished_prio = false;
    938a:	f36f 1304 	bfc	r3, #4, #1
    938e:	7033      	strb	r3, [r6, #0]
        ts -= nrf_802154_frame_duration_get(mp_tx_data[0], true, true) + RX_TX_TURNAROUND_TIME;
    9390:	680b      	ldr	r3, [r1, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
    9392:	781b      	ldrb	r3, [r3, #0]
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
    9394:	015b      	lsls	r3, r3, #5
    9396:	33d4      	adds	r3, #212	; 0xd4
    9398:	1ae6      	subs	r6, r4, r3
    939a:	f165 0700 	sbc.w	r7, r5, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    939e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    93a2:	b672      	cpsid	i
        nrf_802154_stat_timestamp_write(last_cca_idle_timestamp, ts);
    93a4:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    93a8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    93ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    93b0:	b672      	cpsid	i
        nrf_802154_stat_timestamp_read(&cca_start_ts, last_cca_start_timestamp);
    93b2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    93b6:	f384 8810 	msr	PRIMASK, r4
        t_listening += RX_RAMP_UP_TIME + (uint32_t)(ts - cca_start_ts);
    93ba:	f1c2 0228 	rsb	r2, r2, #40	; 0x28
    93be:	4432      	add	r2, r6
        t_transmit  += RX_TX_TURNAROUND_TIME;
    93c0:	2014      	movs	r0, #20
    t_transmit += nrf_802154_frame_duration_get(mp_tx_data[PHR_OFFSET], true, true);
    93c2:	680b      	ldr	r3, [r1, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
    93c4:	781b      	ldrb	r3, [r3, #0]
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
    93c6:	3301      	adds	r3, #1
    93c8:	015b      	lsls	r3, r3, #5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    93ca:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    93ce:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
    93d0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 9474 <nrf_802154_trx_transmit_frame_transmitted+0x110>
    93d4:	e9dc 6700 	ldrd	r6, r7, [ip]
    93d8:	1994      	adds	r4, r2, r6
    93da:	f147 0500 	adc.w	r5, r7, #0
    93de:	e9cc 4500 	strd	r4, r5, [ip]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    93e2:	f38e 8810 	msr	PRIMASK, lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    93e6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    93ea:	b672      	cpsid	i
    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
    93ec:	e9dc 4504 	ldrd	r4, r5, [ip, #16]
    t_transmit += nrf_802154_frame_duration_get(mp_tx_data[PHR_OFFSET], true, true);
    93f0:	33a0      	adds	r3, #160	; 0xa0
    93f2:	4403      	add	r3, r0
    nrf_802154_stat_totals_increment(total_transmit_time, t_transmit);
    93f4:	191e      	adds	r6, r3, r4
    93f6:	f145 0700 	adc.w	r7, r5, #0
    93fa:	e9cc 6704 	strd	r6, r7, [ip, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    93fe:	f382 8810 	msr	PRIMASK, r2
    if (ack_is_requested(mp_tx_data))
    9402:	6808      	ldr	r0, [r1, #0]
    9404:	f009 ff2d 	bl	13262 <ack_is_requested>
    9408:	4604      	mov	r4, r0
    940a:	b300      	cbz	r0, 944e <nrf_802154_trx_transmit_frame_transmitted+0xea>
        state_set(RADIO_STATE_RX_ACK);
    940c:	2006      	movs	r0, #6
    940e:	f7ff f9bf 	bl	8790 <state_set>
        bool rx_buffer_free = rx_buffer_is_available();
    9412:	f7ff f92b 	bl	866c <rx_buffer_is_available>
    9416:	4604      	mov	r4, r0
        nrf_802154_trx_receive_buffer_set(rx_buffer_get());
    9418:	f7ff f932 	bl	8680 <rx_buffer_get>
    941c:	f000 ff78 	bl	a310 <nrf_802154_trx_receive_buffer_set>
        nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_end_event_handle_get());
    9420:	f001 fcd6 	bl	add0 <nrf_802154_trx_radio_end_event_handle_get>
    9424:	f006 f8ea 	bl	f5fc <nrf_802154_timer_coord_timestamp_prepare>
        nrf_802154_trx_receive_ack();
    9428:	f001 f82e 	bl	a488 <nrf_802154_trx_receive_ack>
        m_listening_start_hp_timestamp = nrf_802154_hp_timer_current_time_get();
    942c:	f7ff f80e 	bl	844c <nrf_802154_hp_timer_current_time_get>
    9430:	4b11      	ldr	r3, [pc, #68]	; (9478 <nrf_802154_trx_transmit_frame_transmitted+0x114>)
    9432:	6018      	str	r0, [r3, #0]
        if (!rx_buffer_free)
    9434:	b9bc      	cbnz	r4, 9466 <nrf_802154_trx_transmit_frame_transmitted+0x102>
            rx_buffer_in_use_set(nrf_802154_rx_buffer_free_find());
    9436:	f000 fca3 	bl	9d80 <nrf_802154_rx_buffer_free_find>
    mp_current_rx_buffer = p_rx_buffer;
    943a:	4b10      	ldr	r3, [pc, #64]	; (947c <nrf_802154_trx_transmit_frame_transmitted+0x118>)
    943c:	6018      	str	r0, [r3, #0]
            nrf_802154_trx_receive_buffer_set(rx_buffer_get());
    943e:	f7ff f91f 	bl	8680 <rx_buffer_get>
}
    9442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            nrf_802154_trx_receive_buffer_set(rx_buffer_get());
    9446:	f000 bf63 	b.w	a310 <nrf_802154_trx_receive_buffer_set>
        t_transmit += TX_RAMP_UP_TIME;
    944a:	2028      	movs	r0, #40	; 0x28
    944c:	e7b9      	b.n	93c2 <nrf_802154_trx_transmit_frame_transmitted+0x5e>
        state_set(RADIO_STATE_RX);
    944e:	2002      	movs	r0, #2
    9450:	f7ff f99e 	bl	8790 <state_set>
        rx_init();
    9454:	f7ff fa82 	bl	895c <rx_init>
        transmitted_frame_notify(NULL, 0, 0);
    9458:	4622      	mov	r2, r4
    945a:	4621      	mov	r1, r4
    945c:	4620      	mov	r0, r4
}
    945e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        transmitted_frame_notify(NULL, 0, 0);
    9462:	f7ff ba33 	b.w	88cc <transmitted_frame_notify>
}
    9466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9468:	20000f18 	.word	0x20000f18
    946c:	20002ebc 	.word	0x20002ebc
    9470:	20001e94 	.word	0x20001e94
    9474:	20000f00 	.word	0x20000f00
    9478:	20001e70 	.word	0x20001e70
    947c:	20001e9c 	.word	0x20001e9c

00009480 <nrf_802154_trx_receive_ack_received>:

void nrf_802154_trx_receive_ack_received(void)
{
    9480:	b5f0      	push	{r4, r5, r6, r7, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // CRC of received frame is correct
    uint8_t * p_ack_data = mp_current_rx_buffer->data;
    9482:	4d40      	ldr	r5, [pc, #256]	; (9584 <nrf_802154_trx_receive_ack_received+0x104>)
{
    9484:	b08d      	sub	sp, #52	; 0x34
    uint8_t * p_ack_data = mp_current_rx_buffer->data;
    9486:	682c      	ldr	r4, [r5, #0]

#if NRF_802154_TOTAL_TIMES_MEASUREMENT_ENABLED
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    9488:	f7fe ffda 	bl	8440 <nrf_802154_hp_timer_timestamp_get>
    uint32_t listening_start_hp_timestamp = m_listening_start_hp_timestamp;

    update_total_times_on_receive_end(listening_start_hp_timestamp,
    948c:	682b      	ldr	r3, [r5, #0]
    948e:	781a      	ldrb	r2, [r3, #0]
    9490:	4b3d      	ldr	r3, [pc, #244]	; (9588 <nrf_802154_trx_receive_ack_received+0x108>)
    uint32_t receive_end_hp_timestamp     = nrf_802154_hp_timer_timestamp_get();
    9492:	4601      	mov	r1, r0
    update_total_times_on_receive_end(listening_start_hp_timestamp,
    9494:	6818      	ldr	r0, [r3, #0]
    9496:	f7ff f92b 	bl	86f0 <update_total_times_on_receive_end>
                                      receive_end_hp_timestamp,
                                      mp_current_rx_buffer->data[PHR_OFFSET]);
#endif

    if (ack_match_check(mp_tx_data, p_ack_data))
    949a:	4b3c      	ldr	r3, [pc, #240]	; (958c <nrf_802154_trx_receive_ack_received+0x10c>)
    949c:	6818      	ldr	r0, [r3, #0]
    if ((p_tx_data == NULL) || (p_ack_data == NULL))
    949e:	2800      	cmp	r0, #0
    94a0:	d036      	beq.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
    94a2:	b3ac      	cbz	r4, 9510 <nrf_802154_trx_receive_ack_received+0x90>
    if ((p_ack_data[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK) != FRAME_TYPE_ACK)
    94a4:	7863      	ldrb	r3, [r4, #1]
    94a6:	f003 0307 	and.w	r3, r3, #7
    94aa:	2b02      	cmp	r3, #2
    94ac:	d130      	bne.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
    if ((p_tx_data[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK) == FRAME_VERSION_2)
    94ae:	7883      	ldrb	r3, [r0, #2]
    94b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    94b4:	2b20      	cmp	r3, #32
    94b6:	d130      	bne.n	951a <nrf_802154_trx_receive_ack_received+0x9a>
    parse_result = nrf_802154_frame_parser_data_init(p_tx_frame,
    94b8:	7801      	ldrb	r1, [r0, #0]
    94ba:	3101      	adds	r1, #1
    94bc:	466b      	mov	r3, sp
    94be:	2203      	movs	r2, #3
    94c0:	b2c9      	uxtb	r1, r1
    94c2:	f00a f8d5 	bl	13670 <nrf_802154_frame_parser_data_init>
    if (!parse_result)
    94c6:	b318      	cbz	r0, 9510 <nrf_802154_trx_receive_ack_received+0x90>
    parse_result = nrf_802154_frame_parser_data_init(p_ack_frame,
    94c8:	7821      	ldrb	r1, [r4, #0]
    94ca:	3101      	adds	r1, #1
    94cc:	ab06      	add	r3, sp, #24
    94ce:	2203      	movs	r2, #3
    94d0:	b2c9      	uxtb	r1, r1
    94d2:	4620      	mov	r0, r4
    94d4:	f00a f8cc 	bl	13670 <nrf_802154_frame_parser_data_init>
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
    94d8:	9e06      	ldr	r6, [sp, #24]
    94da:	78b3      	ldrb	r3, [r6, #2]
    if (nrf_802154_frame_parser_frame_version_get(&ack_data) != FRAME_VERSION_2)
    94dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    94e0:	2b20      	cmp	r3, #32
    94e2:	d115      	bne.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
 * @returns  Offset of the frame Source Address field.
 */
static inline uint8_t nrf_802154_frame_parser_src_addr_offset_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->mhr.src.addr_offset;
    94e4:	f89d 4009 	ldrb.w	r4, [sp, #9]
static inline const uint8_t * nrf_802154_frame_parser_src_addr_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    uint8_t offset = nrf_802154_frame_parser_src_addr_offset_get(p_parser_data);

    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    94e8:	2cff      	cmp	r4, #255	; 0xff
    94ea:	d011      	beq.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
    return p_parser_data->mhr.dst.addr_offset;
    94ec:	f89d 101f 	ldrb.w	r1, [sp, #31]
    {
        return NULL;
    }

    return &p_parser_data->p_frame[offset];
    94f0:	9b00      	ldr	r3, [sp, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    94f2:	29ff      	cmp	r1, #255	; 0xff
    94f4:	d00c      	beq.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
 * @returns  Source address size in bytes.
 */
static inline uint8_t nrf_802154_frame_parser_src_addr_size_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.src_addr_size;
    94f6:	f89d 2012 	ldrb.w	r2, [sp, #18]
 * @returns  Destination address size in bytes.
 */
static inline uint8_t nrf_802154_frame_parser_dst_addr_size_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.dst_addr_size;
    94fa:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
    if (!parse_result ||
    94fe:	b138      	cbz	r0, 9510 <nrf_802154_trx_receive_ack_received+0x90>
    9500:	1918      	adds	r0, r3, r4
    9502:	d005      	beq.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
        (p_ack_dst_addr == NULL) ||
    9504:	42ba      	cmp	r2, r7
    9506:	d103      	bne.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
        (0 != memcmp(p_tx_src_addr,
    9508:	4431      	add	r1, r6
    950a:	f009 fbb8 	bl	12c7e <memcmp>
        (tx_src_addr_size != ack_dst_addr_size) ||
    950e:	b170      	cbz	r0, 952e <nrf_802154_trx_receive_ack_received+0xae>
    {
        on_bad_ack();
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    9510:	b00d      	add	sp, #52	; 0x34
    9512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        on_bad_ack();
    9516:	f7ff ba67 	b.w	89e8 <on_bad_ack>
    if (p_ack_data[PHR_OFFSET] != IMM_ACK_LENGTH)
    951a:	7823      	ldrb	r3, [r4, #0]
    951c:	2b05      	cmp	r3, #5
    951e:	d1f7      	bne.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
    switch (p_ack_data[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK)
    9520:	78a3      	ldrb	r3, [r4, #2]
    9522:	069b      	lsls	r3, r3, #26
    9524:	d4f4      	bmi.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
    if (p_ack_data[DSN_OFFSET] != p_tx_data[DSN_OFFSET])
    9526:	78e2      	ldrb	r2, [r4, #3]
    9528:	78c3      	ldrb	r3, [r0, #3]
    952a:	429a      	cmp	r2, r3
    952c:	d1f0      	bne.n	9510 <nrf_802154_trx_receive_ack_received+0x90>
        uint64_t ts = timer_coord_timestamp_get();
    952e:	f009 feb0 	bl	13292 <timer_coord_timestamp_get>
    9532:	4602      	mov	r2, r0
    9534:	460b      	mov	r3, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9536:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    953a:	b672      	cpsid	i
        nrf_802154_stat_timestamp_write(last_ack_end_timestamp, ts);
    953c:	4814      	ldr	r0, [pc, #80]	; (9590 <nrf_802154_trx_receive_ack_received+0x110>)
    953e:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    9542:	f381 8810 	msr	PRIMASK, r1
        rx_buffer_t * p_ack_buffer = mp_current_rx_buffer;
    9546:	682c      	ldr	r4, [r5, #0]
        mp_current_rx_buffer->free = false;
    9548:	2300      	movs	r3, #0
    954a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        state_set(RADIO_STATE_RX);
    954e:	2002      	movs	r0, #2
    9550:	f7ff f91e 	bl	8790 <state_set>
        rx_init();
    9554:	f7ff fa02 	bl	895c <rx_init>
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
    9558:	f009 fe93 	bl	13282 <rssi_last_measurement_get>
    uint32_t lqi = RX_FRAME_LQI(p_data);
    955c:	7823      	ldrb	r3, [r4, #0]
    955e:	4423      	add	r3, r4
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
    9560:	4605      	mov	r5, r0
    lqi  = nrf_802154_rssi_lqi_corrected_get(lqi);
    9562:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    9566:	f009 ff83 	bl	13470 <nrf_802154_rssi_lqi_corrected_get>
    lqi *= LQI_VALUE_FACTOR;
    956a:	b202      	sxth	r2, r0
    956c:	0092      	lsls	r2, r2, #2
    if (lqi > LQI_MAX)
    956e:	2aff      	cmp	r2, #255	; 0xff
    9570:	bf28      	it	cs
    9572:	22ff      	movcs	r2, #255	; 0xff
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
    9574:	b2d2      	uxtb	r2, r2
    9576:	4629      	mov	r1, r5
    9578:	4620      	mov	r0, r4
}
    957a:	b00d      	add	sp, #52	; 0x34
    957c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        transmitted_frame_notify(p_ack_buffer->data,           // phr + psdu
    9580:	f7ff b9a4 	b.w	88cc <transmitted_frame_notify>
    9584:	20001e9c 	.word	0x20001e9c
    9588:	20001e70 	.word	0x20001e70
    958c:	20001e94 	.word	0x20001e94
    9590:	20000f18 	.word	0x20000f18

00009594 <nrf_802154_trx_transmit_frame_ccaidle>:
    // of the nrf_802154_trx_transmit_frame does not contain TRX_TRANSMIT_NOTIFICATION_CCASTARTED.
    assert(false);
}

void nrf_802154_trx_transmit_frame_ccaidle(void)
{
    9594:	b538      	push	{r3, r4, r5, lr}

    assert(m_state == RADIO_STATE_CCA_TX);
    assert(m_trx_transmit_frame_notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCAIDLE);

#if (NRF_802154_FRAME_TIMESTAMP_ENABLED)
    uint64_t ts = timer_coord_timestamp_get();
    9596:	f009 fe7c 	bl	13292 <timer_coord_timestamp_get>
    959a:	460d      	mov	r5, r1
    959c:	4604      	mov	r4, r0

    // Configure the timer coordinator to get a timestamp of the PHYEND event.
    nrf_802154_timer_coord_timestamp_prepare(nrf_802154_trx_radio_phyend_event_handle_get());
    959e:	f001 fc1f 	bl	ade0 <nrf_802154_trx_radio_phyend_event_handle_get>
    95a2:	f006 f82b 	bl	f5fc <nrf_802154_timer_coord_timestamp_prepare>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    95a6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    95aa:	b672      	cpsid	i

    // Update stat timestamp of CCASTART event
    nrf_802154_stat_timestamp_write(last_cca_start_timestamp, ts);
    95ac:	4a08      	ldr	r2, [pc, #32]	; (95d0 <nrf_802154_trx_transmit_frame_ccaidle+0x3c>)
    95ae:	e9c2 450a 	strd	r4, r5, [r2, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    95b2:	f383 8810 	msr	PRIMASK, r3
#endif

    if (m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE)
    95b6:	4b07      	ldr	r3, [pc, #28]	; (95d4 <nrf_802154_trx_transmit_frame_ccaidle+0x40>)
    95b8:	781b      	ldrb	r3, [r3, #0]
    95ba:	2b03      	cmp	r3, #3
    95bc:	d107      	bne.n	95ce <nrf_802154_trx_transmit_frame_ccaidle+0x3a>
    {
        nrf_802154_rsch_crit_sect_prio_request(RSCH_PRIO_TX);
    95be:	2004      	movs	r0, #4
    95c0:	f00a fd66 	bl	14090 <nrf_802154_rsch_crit_sect_prio_request>
        m_flags.tx_diminished_prio = false;
    95c4:	4b04      	ldr	r3, [pc, #16]	; (95d8 <nrf_802154_trx_transmit_frame_ccaidle+0x44>)
    95c6:	781a      	ldrb	r2, [r3, #0]
    95c8:	f36f 1204 	bfc	r2, #4, #1
    95cc:	701a      	strb	r2, [r3, #0]
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    95ce:	bd38      	pop	{r3, r4, r5, pc}
    95d0:	20000f18 	.word	0x20000f18
    95d4:	20002eb6 	.word	0x20002eb6
    95d8:	20002ebc 	.word	0x20002ebc

000095dc <nrf_802154_trx_transmit_frame_ccabusy>:

void nrf_802154_trx_transmit_frame_ccabusy(void)
{
    95dc:	b530      	push	{r4, r5, lr}
    95de:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    95e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    95e4:	b672      	cpsid	i
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    nrf_802154_stat_counter_increment(cca_failed_attempts);
    95e6:	4a14      	ldr	r2, [pc, #80]	; (9638 <nrf_802154_trx_transmit_frame_ccabusy+0x5c>)
    95e8:	6813      	ldr	r3, [r2, #0]
    95ea:	3301      	adds	r3, #1
    95ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    95ee:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    95f2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    95f6:	b672      	cpsid	i

#if (NRF_802154_TOTAL_TIMES_MEASUREMENT_ENABLED)
    uint32_t t_listening = RX_RAMP_UP_TIME + PHY_US_TIME_FROM_SYMBOLS(A_CCA_DURATION_SYMBOLS);

    nrf_802154_stat_totals_increment(total_listening_time, t_listening);
    95f8:	4c10      	ldr	r4, [pc, #64]	; (963c <nrf_802154_trx_transmit_frame_ccabusy+0x60>)
    95fa:	e9d4 2300 	ldrd	r2, r3, [r4]
    95fe:	f112 00a8 	adds.w	r0, r2, #168	; 0xa8
    9602:	f143 0100 	adc.w	r1, r3, #0
    9606:	e9c4 0100 	strd	r0, r1, [r4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    960a:	f385 8810 	msr	PRIMASK, r5
#endif

    state_set(RADIO_STATE_RX);
    960e:	2002      	movs	r0, #2
    9610:	f7ff f8be 	bl	8790 <state_set>
    rx_init();
    9614:	f7ff f9a2 	bl	895c <rx_init>

    nrf_802154_transmit_done_metadata_t metadata = {};
    9618:	2218      	movs	r2, #24
    961a:	2100      	movs	r1, #0
    961c:	4668      	mov	r0, sp
    961e:	f009 fb60 	bl	12ce2 <memset>

    nrf_802154_tx_work_buffer_original_frame_update(mp_tx_data, &metadata.frame_props);
    9622:	4b07      	ldr	r3, [pc, #28]	; (9640 <nrf_802154_trx_transmit_frame_ccabusy+0x64>)
    9624:	4669      	mov	r1, sp
    9626:	6818      	ldr	r0, [r3, #0]
    9628:	f001 fcee 	bl	b008 <nrf_802154_tx_work_buffer_original_frame_update>
    transmit_failed_notify_and_nesting_allow(NRF_802154_TX_ERROR_BUSY_CHANNEL, &metadata);
    962c:	4669      	mov	r1, sp
    962e:	2001      	movs	r0, #1
    9630:	f7ff f8b4 	bl	879c <transmit_failed_notify_and_nesting_allow>

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    9634:	b007      	add	sp, #28
    9636:	bd30      	pop	{r4, r5, pc}
    9638:	20000f18 	.word	0x20000f18
    963c:	20000f00 	.word	0x20000f00
    9640:	20001e94 	.word	0x20001e94

00009644 <nrf_802154_trx_energy_detection_finished>:

void nrf_802154_trx_energy_detection_finished(uint8_t ed_sample)
{
    9644:	b538      	push	{r3, r4, r5, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (m_ed_result < ed_sample)
    9646:	4c1f      	ldr	r4, [pc, #124]	; (96c4 <nrf_802154_trx_energy_detection_finished+0x80>)
    {
        // Collect maximum value of samples provided by trx
        m_ed_result = ed_sample;
    }

    if (m_ed_time_left >= ED_ITER_DURATION)
    9648:	4d1f      	ldr	r5, [pc, #124]	; (96c8 <nrf_802154_trx_energy_detection_finished+0x84>)
    if (m_ed_result < ed_sample)
    964a:	7823      	ldrb	r3, [r4, #0]
    964c:	4283      	cmp	r3, r0
    if (m_ed_time_left >= ED_ITER_DURATION)
    964e:	682b      	ldr	r3, [r5, #0]
        m_ed_result = ed_sample;
    9650:	bf38      	it	cc
    9652:	7020      	strbcc	r0, [r4, #0]
    if (m_ed_time_left >= ED_ITER_DURATION)
    9654:	2b7f      	cmp	r3, #127	; 0x7f
    9656:	d916      	bls.n	9686 <nrf_802154_trx_energy_detection_finished+0x42>
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
    9658:	f00a fd18 	bl	1408c <nrf_802154_rsch_timeslot_us_left_get>
    if (iters_left_in_timeslot > ED_ITERS_OVERHEAD)
    965c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    9660:	d32e      	bcc.n	96c0 <nrf_802154_trx_energy_detection_finished+0x7c>
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
    9662:	682a      	ldr	r2, [r5, #0]
    uint32_t iters_left_in_timeslot = nrf_802154_rsch_timeslot_us_left_get() / ED_ITER_DURATION;
    9664:	09c0      	lsrs	r0, r0, #7
        iters_left_in_timeslot -= ED_ITERS_OVERHEAD;
    9666:	1e83      	subs	r3, r0, #2
        if (requested_iters < iters_left_in_timeslot)
    9668:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
        uint32_t requested_iters = *p_requested_ed_time_us / ED_ITER_DURATION;
    966c:	ea4f 10d2 	mov.w	r0, r2, lsr #7
            *p_requested_ed_time_us = *p_requested_ed_time_us -
    9670:	bf94      	ite	ls
    9672:	eba2 12c3 	subls.w	r2, r2, r3, lsl #7
            *p_requested_ed_time_us = 0U;
    9676:	2200      	movhi	r2, #0
    9678:	602a      	str	r2, [r5, #0]
            *p_requested_ed_time_us = *p_requested_ed_time_us -
    967a:	bf98      	it	ls
    967c:	4618      	movls	r0, r3
        energy_detected_notify(nrf_802154_rssi_ed_sample_convert(m_ed_result));

    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    967e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_trx_energy_detection(trx_ed_count);
    9682:	f001 b9e1 	b.w	aa48 <nrf_802154_trx_energy_detection>
    else if (nrf_802154_sl_ant_div_energy_detection_finished_notify())
    9686:	f005 fc17 	bl	eeb8 <nrf_802154_sl_ant_div_energy_detection_finished_notify>
    968a:	b118      	cbz	r0, 9694 <nrf_802154_trx_energy_detection_finished+0x50>
}
    968c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ed_init();
    9690:	f7ff ba06 	b.w	8aa0 <ed_init>
        nrf_802154_trx_channel_set(nrf_802154_pib_channel_get());
    9694:	f000 fb00 	bl	9c98 <nrf_802154_pib_channel_get>
    9698:	f009 ff28 	bl	134ec <nrf_802154_trx_channel_set>
        state_set(RADIO_STATE_RX);
    969c:	2002      	movs	r0, #2
    969e:	f7ff f877 	bl	8790 <state_set>
        rx_init();
    96a2:	f7ff f95b 	bl	895c <rx_init>
        energy_detected_notify(nrf_802154_rssi_ed_sample_convert(m_ed_result));
    96a6:	7820      	ldrb	r0, [r4, #0]
    96a8:	f009 fef3 	bl	13492 <nrf_802154_rssi_ed_sample_convert>
    96ac:	4604      	mov	r4, r0
    nrf_802154_critical_section_nesting_allow();
    96ae:	f000 faa5 	bl	9bfc <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_energy_detected(result);
    96b2:	4620      	mov	r0, r4
    96b4:	f00a f878 	bl	137a8 <nrf_802154_notify_energy_detected>
}
    96b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    nrf_802154_critical_section_nesting_deny();
    96bc:	f000 ba5a 	b.w	9b74 <nrf_802154_critical_section_nesting_deny>
}
    96c0:	bd38      	pop	{r3, r4, r5, pc}
    96c2:	bf00      	nop
    96c4:	20002ec3 	.word	0x20002ec3
    96c8:	20001e90 	.word	0x20001e90

000096cc <nrf_802154_core_init>:
 * @section API functions
 **************************************************************************************************/

void nrf_802154_core_init(void)
{
    m_state                    = RADIO_STATE_SLEEP;
    96cc:	4a08      	ldr	r2, [pc, #32]	; (96f0 <nrf_802154_core_init+0x24>)
    m_rsch_timeslot_is_granted = false;
    m_rx_prestarted_trig_count = 0;

    nrf_802154_sl_timer_init(&m_rx_prestarted_timer);
    96ce:	4809      	ldr	r0, [pc, #36]	; (96f4 <nrf_802154_core_init+0x28>)
{
    96d0:	b508      	push	{r3, lr}
    m_state                    = RADIO_STATE_SLEEP;
    96d2:	2300      	movs	r3, #0
    96d4:	7013      	strb	r3, [r2, #0]
    m_rsch_timeslot_is_granted = false;
    96d6:	4a08      	ldr	r2, [pc, #32]	; (96f8 <nrf_802154_core_init+0x2c>)
    96d8:	7013      	strb	r3, [r2, #0]
    m_rx_prestarted_trig_count = 0;
    96da:	4a08      	ldr	r2, [pc, #32]	; (96fc <nrf_802154_core_init+0x30>)
    96dc:	7013      	strb	r3, [r2, #0]
    nrf_802154_sl_timer_init(&m_rx_prestarted_timer);
    96de:	f00a fcff 	bl	140e0 <nrf_802154_sl_timer_init>

    nrf_802154_trx_init();
    96e2:	f009 fefc 	bl	134de <nrf_802154_trx_init>
    nrf_802154_ack_generator_init();
}
    96e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_ack_generator_init();
    96ea:	f00a b810 	b.w	1370e <nrf_802154_ack_generator_init>
    96ee:	bf00      	nop
    96f0:	20002ebd 	.word	0x20002ebd
    96f4:	20000ed8 	.word	0x20000ed8
    96f8:	20002ebb 	.word	0x20002ebb
    96fc:	20002eb7 	.word	0x20002eb7

00009700 <nrf_802154_core_sleep>:
{
    return m_state;
}

bool nrf_802154_core_sleep(nrf_802154_term_t term_lvl)
{
    9700:	b538      	push	{r3, r4, r5, lr}
    9702:	4605      	mov	r5, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = nrf_802154_critical_section_enter();
    9704:	f009 fe58 	bl	133b8 <nrf_802154_critical_section_enter>

    if (result)
    9708:	4604      	mov	r4, r0
    970a:	b1f0      	cbz	r0, 974a <nrf_802154_core_sleep+0x4a>
    {
        if ((m_state != RADIO_STATE_SLEEP) && (m_state != RADIO_STATE_FALLING_ASLEEP))
    970c:	4b10      	ldr	r3, [pc, #64]	; (9750 <nrf_802154_core_sleep+0x50>)
    970e:	781a      	ldrb	r2, [r3, #0]
    9710:	b1ba      	cbz	r2, 9742 <nrf_802154_core_sleep+0x42>
    9712:	781b      	ldrb	r3, [r3, #0]
    9714:	2b01      	cmp	r3, #1
    9716:	d014      	beq.n	9742 <nrf_802154_core_sleep+0x42>
        {
            result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
    9718:	2201      	movs	r2, #1
    971a:	4628      	mov	r0, r5
    971c:	4611      	mov	r1, r2
    971e:	f7ff fa6b 	bl	8bf8 <current_operation_terminate>

            if (result)
    9722:	4605      	mov	r5, r0
    9724:	b170      	cbz	r0, 9744 <nrf_802154_core_sleep+0x44>
    return m_rsch_timeslot_is_granted;
    9726:	4b0b      	ldr	r3, [pc, #44]	; (9754 <nrf_802154_core_sleep+0x54>)
    9728:	781b      	ldrb	r3, [r3, #0]
            {
                // The order of calls in the following blocks is inverted to avoid RAAL races.
                if (timeslot_is_granted())
    972a:	b12b      	cbz	r3, 9738 <nrf_802154_core_sleep+0x38>
                {
                    state_set(RADIO_STATE_FALLING_ASLEEP);
    972c:	2001      	movs	r0, #1
    972e:	f7ff f82f 	bl	8790 <state_set>
    if (nrf_802154_trx_go_idle())
    9732:	f001 f8f7 	bl	a924 <nrf_802154_trx_go_idle>
    9736:	b920      	cbnz	r0, 9742 <nrf_802154_core_sleep+0x42>
        sleep_init();
    9738:	f7fe fffe 	bl	8738 <sleep_init>
        state_set(RADIO_STATE_SLEEP);
    973c:	2000      	movs	r0, #0
    973e:	f7ff f827 	bl	8790 <state_set>
    bool result = nrf_802154_critical_section_enter();
    9742:	4625      	mov	r5, r4
                    state_set(RADIO_STATE_SLEEP);
                }
            }
        }

        nrf_802154_critical_section_exit();
    9744:	f000 f9f4 	bl	9b30 <nrf_802154_critical_section_exit>
    9748:	462c      	mov	r4, r5
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    974a:	4620      	mov	r0, r4
    974c:	bd38      	pop	{r3, r4, r5, pc}
    974e:	bf00      	nop
    9750:	20002ebd 	.word	0x20002ebd
    9754:	20002ebb 	.word	0x20002ebb

00009758 <nrf_802154_core_receive>:
bool nrf_802154_core_receive(nrf_802154_term_t              term_lvl,
                             req_originator_t               req_orig,
                             nrf_802154_notification_func_t notify_function,
                             bool                           notify_abort,
                             uint32_t                       id)
{
    9758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    975c:	4606      	mov	r6, r0
    975e:	460f      	mov	r7, r1
    9760:	4615      	mov	r5, r2
    9762:	4698      	mov	r8, r3
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = nrf_802154_critical_section_enter();
    9764:	f009 fe28 	bl	133b8 <nrf_802154_critical_section_enter>

    if (result)
    9768:	4604      	mov	r4, r0
    976a:	b350      	cbz	r0, 97c2 <nrf_802154_core_receive+0x6a>
    {
        if ((m_state != RADIO_STATE_RX) && (m_state != RADIO_STATE_TX_ACK))
    976c:	4b17      	ldr	r3, [pc, #92]	; (97cc <nrf_802154_core_receive+0x74>)
    976e:	781a      	ldrb	r2, [r3, #0]
    9770:	2a02      	cmp	r2, #2
    9772:	d006      	beq.n	9782 <nrf_802154_core_receive+0x2a>
    9774:	781b      	ldrb	r3, [r3, #0]
    9776:	2b03      	cmp	r3, #3
    9778:	d003      	beq.n	9782 <nrf_802154_core_receive+0x2a>
        {
            if (critical_section_can_be_processed_now())
    977a:	f7ff f86d 	bl	8858 <critical_section_can_be_processed_now>
    977e:	b940      	cbnz	r0, 9792 <nrf_802154_core_receive+0x3a>
                    rx_init();
                }
            }
            else
            {
                result = false;
    9780:	2400      	movs	r4, #0
            }
        }

        if (notify_function != NULL)
    9782:	b10d      	cbz	r5, 9788 <nrf_802154_core_receive+0x30>
        {
            notify_function(result);
    9784:	4620      	mov	r0, r4
    9786:	47a8      	blx	r5
        }

        nrf_802154_critical_section_exit();
    9788:	f000 f9d2 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    978c:	4620      	mov	r0, r4
    978e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                result = current_operation_terminate(term_lvl, req_orig, notify_abort);
    9792:	4642      	mov	r2, r8
    9794:	4639      	mov	r1, r7
    9796:	4630      	mov	r0, r6
    9798:	f7ff fa2e 	bl	8bf8 <current_operation_terminate>
                if (result)
    979c:	2800      	cmp	r0, #0
    979e:	d0ef      	beq.n	9780 <nrf_802154_core_receive+0x28>
    if (nrf_802154_wifi_coex_is_enabled())
    97a0:	f00a fc9f 	bl	140e2 <nrf_802154_wifi_coex_is_enabled>
    97a4:	b108      	cbz	r0, 97aa <nrf_802154_core_receive+0x52>
        switch (nrf_802154_pib_coex_rx_request_mode_get())
    97a6:	f000 faad 	bl	9d04 <nrf_802154_pib_coex_rx_request_mode_get>
                    m_trx_receive_frame_notifications_mask =
    97aa:	4b09      	ldr	r3, [pc, #36]	; (97d0 <nrf_802154_core_receive+0x78>)
    97ac:	2203      	movs	r2, #3
    97ae:	701a      	strb	r2, [r3, #0]
                    m_rx_window_id = id;
    97b0:	4b08      	ldr	r3, [pc, #32]	; (97d4 <nrf_802154_core_receive+0x7c>)
    97b2:	9a06      	ldr	r2, [sp, #24]
    97b4:	601a      	str	r2, [r3, #0]
                    state_set(RADIO_STATE_RX);
    97b6:	2002      	movs	r0, #2
    97b8:	f7fe ffea 	bl	8790 <state_set>
                    rx_init();
    97bc:	f7ff f8ce 	bl	895c <rx_init>
    97c0:	e7df      	b.n	9782 <nrf_802154_core_receive+0x2a>
        if (notify_function != NULL)
    97c2:	2d00      	cmp	r5, #0
    97c4:	d0e2      	beq.n	978c <nrf_802154_core_receive+0x34>
            notify_function(false);
    97c6:	47a8      	blx	r5
    97c8:	e7e0      	b.n	978c <nrf_802154_core_receive+0x34>
    97ca:	bf00      	nop
    97cc:	20002ebd 	.word	0x20002ebd
    97d0:	20002eb9 	.word	0x20002eb9
    97d4:	20001e74 	.word	0x20001e74

000097d8 <nrf_802154_core_transmit>:
bool nrf_802154_core_transmit(nrf_802154_term_t              term_lvl,
                              req_originator_t               req_orig,
                              uint8_t                      * p_data,
                              nrf_802154_transmit_params_t * p_params,
                              nrf_802154_notification_func_t notify_function)
{
    97d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    97e0:	4607      	mov	r7, r0
    97e2:	4689      	mov	r9, r1
    97e4:	4616      	mov	r6, r2
    97e6:	461c      	mov	r4, r3
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    97e8:	f009 fd6b 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    97ec:	4605      	mov	r5, r0
    97ee:	2800      	cmp	r0, #0
    97f0:	d05a      	beq.n	98a8 <nrf_802154_core_transmit+0xd0>
    {
        if (nrf_802154_core_hooks_pre_transmission(p_data, p_params, &transmit_failed_notify))
    97f2:	4a30      	ldr	r2, [pc, #192]	; (98b4 <nrf_802154_core_transmit+0xdc>)
    97f4:	4621      	mov	r1, r4
    97f6:	4630      	mov	r0, r6
    97f8:	f009 fdcb 	bl	13392 <nrf_802154_core_hooks_pre_transmission>
    97fc:	b130      	cbz	r0, 980c <nrf_802154_core_transmit+0x34>
        {
            result = current_operation_terminate(term_lvl, req_orig, true);
    97fe:	2201      	movs	r2, #1
    9800:	4649      	mov	r1, r9
    9802:	4638      	mov	r0, r7
    9804:	f7ff f9f8 	bl	8bf8 <current_operation_terminate>

            if (result)
    9808:	b950      	cbnz	r0, 9820 <nrf_802154_core_transmit+0x48>
            {
                nrf_802154_tx_work_buffer_reset(&p_params->frame_props);
                result = nrf_802154_core_hooks_tx_setup(p_data, p_params, &transmit_failed_notify);
    980a:	2500      	movs	r5, #0
                    result = true;
                }
            }
        }

        if (notify_function != NULL)
    980c:	f1b8 0f00 	cmp.w	r8, #0
    9810:	d001      	beq.n	9816 <nrf_802154_core_transmit+0x3e>
        {
            notify_function(result);
    9812:	4628      	mov	r0, r5
    9814:	47c0      	blx	r8
        }

        nrf_802154_critical_section_exit();
    9816:	f000 f98b 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    981a:	4628      	mov	r0, r5
    981c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_802154_tx_work_buffer_reset(&p_params->frame_props);
    9820:	4620      	mov	r0, r4
    9822:	f001 fbcd 	bl	afc0 <nrf_802154_tx_work_buffer_reset>
                result = nrf_802154_core_hooks_tx_setup(p_data, p_params, &transmit_failed_notify);
    9826:	4a23      	ldr	r2, [pc, #140]	; (98b4 <nrf_802154_core_transmit+0xdc>)
    9828:	4621      	mov	r1, r4
    982a:	4630      	mov	r0, r6
    982c:	f009 fdb3 	bl	13396 <nrf_802154_core_hooks_tx_setup>
            if (result)
    9830:	2800      	cmp	r0, #0
    9832:	d0ea      	beq.n	980a <nrf_802154_core_transmit+0x32>
                m_coex_tx_request_mode                  = nrf_802154_pib_coex_tx_request_mode_get();
    9834:	f000 fa6c 	bl	9d10 <nrf_802154_pib_coex_tx_request_mode_get>
    9838:	f8df 907c 	ldr.w	r9, [pc, #124]	; 98b8 <nrf_802154_core_transmit+0xe0>
                    make_trx_frame_transmit_notification_mask(p_params->cca);
    983c:	7967      	ldrb	r7, [r4, #5]
                m_coex_tx_request_mode                  = nrf_802154_pib_coex_tx_request_mode_get();
    983e:	f889 0000 	strb.w	r0, [r9]
    if (nrf_802154_wifi_coex_is_enabled())
    9842:	f00a fc4e 	bl	140e2 <nrf_802154_wifi_coex_is_enabled>
    9846:	b118      	cbz	r0, 9850 <nrf_802154_core_transmit+0x78>
        switch (nrf_802154_pib_coex_tx_request_mode_get())
    9848:	f000 fa62 	bl	9d10 <nrf_802154_pib_coex_tx_request_mode_get>
    984c:	2803      	cmp	r0, #3
    984e:	d029      	beq.n	98a4 <nrf_802154_core_transmit+0xcc>
    if (cca)
    9850:	007b      	lsls	r3, r7, #1
    9852:	b2db      	uxtb	r3, r3
                m_trx_transmit_frame_notifications_mask =
    9854:	4a19      	ldr	r2, [pc, #100]	; (98bc <nrf_802154_core_transmit+0xe4>)
    9856:	7013      	strb	r3, [r2, #0]
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;
    9858:	f899 3000 	ldrb.w	r3, [r9]
                m_flags.tx_diminished_prio =
    985c:	4a18      	ldr	r2, [pc, #96]	; (98c0 <nrf_802154_core_transmit+0xe8>)
                    m_coex_tx_request_mode == NRF_802154_COEX_TX_REQUEST_MODE_CCA_DONE;
    985e:	1ed9      	subs	r1, r3, #3
    9860:	424b      	negs	r3, r1
    9862:	414b      	adcs	r3, r1
                m_flags.tx_diminished_prio =
    9864:	7811      	ldrb	r1, [r2, #0]
    9866:	f363 1104 	bfi	r1, r3, #4, #1
    986a:	7011      	strb	r1, [r2, #0]
                state_set(p_params->cca ? RADIO_STATE_CCA_TX : RADIO_STATE_TX);
    986c:	7960      	ldrb	r0, [r4, #5]
    986e:	f1c0 0005 	rsb	r0, r0, #5
    9872:	b2c0      	uxtb	r0, r0
    9874:	f7fe ff8c 	bl	8790 <state_set>
                mp_tx_data = p_data;
    9878:	4b12      	ldr	r3, [pc, #72]	; (98c4 <nrf_802154_core_transmit+0xec>)
                m_tx_power = p_params->tx_power;
    987a:	8862      	ldrh	r2, [r4, #2]
                mp_tx_data = p_data;
    987c:	601e      	str	r6, [r3, #0]
                m_tx_power = p_params->tx_power;
    987e:	4b12      	ldr	r3, [pc, #72]	; (98c8 <nrf_802154_core_transmit+0xf0>)
                result = tx_init(p_data, p_params->cca);
    9880:	7961      	ldrb	r1, [r4, #5]
                m_tx_power = p_params->tx_power;
    9882:	801a      	strh	r2, [r3, #0]
                result = tx_init(p_data, p_params->cca);
    9884:	4630      	mov	r0, r6
                m_tx_power = p_params->tx_power;
    9886:	7922      	ldrb	r2, [r4, #4]
    9888:	709a      	strb	r2, [r3, #2]
                result = tx_init(p_data, p_params->cca);
    988a:	f7fe ffa5 	bl	87d8 <tx_init>
                if (p_params->immediate)
    988e:	79a3      	ldrb	r3, [r4, #6]
    9890:	2b00      	cmp	r3, #0
    9892:	d0bb      	beq.n	980c <nrf_802154_core_transmit+0x34>
                    if (!result)
    9894:	2800      	cmp	r0, #0
    9896:	d1b9      	bne.n	980c <nrf_802154_core_transmit+0x34>
                        state_set(RADIO_STATE_RX);
    9898:	2002      	movs	r0, #2
    989a:	f7fe ff79 	bl	8790 <state_set>
                        rx_init();
    989e:	f7ff f85d 	bl	895c <rx_init>
    98a2:	e7b2      	b.n	980a <nrf_802154_core_transmit+0x32>
                result |= TRX_TRANSMIT_NOTIFICATION_CCAIDLE;
    98a4:	2302      	movs	r3, #2
    98a6:	e7d5      	b.n	9854 <nrf_802154_core_transmit+0x7c>
        if (notify_function != NULL)
    98a8:	f1b8 0f00 	cmp.w	r8, #0
    98ac:	d0b5      	beq.n	981a <nrf_802154_core_transmit+0x42>
            notify_function(false);
    98ae:	47c0      	blx	r8
    98b0:	e7b3      	b.n	981a <nrf_802154_core_transmit+0x42>
    98b2:	bf00      	nop
    98b4:	00013245 	.word	0x00013245
    98b8:	20002eb6 	.word	0x20002eb6
    98bc:	20002eb8 	.word	0x20002eb8
    98c0:	20002ebc 	.word	0x20002ebc
    98c4:	20001e94 	.word	0x20001e94
    98c8:	20002ebf 	.word	0x20002ebf

000098cc <nrf_802154_core_energy_detection>:

bool nrf_802154_core_energy_detection(nrf_802154_term_t term_lvl, uint32_t time_us)
{
    98cc:	b570      	push	{r4, r5, r6, lr}
    98ce:	4606      	mov	r6, r0
    98d0:	460d      	mov	r5, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    98d2:	f009 fcf6 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    98d6:	4604      	mov	r4, r0
    98d8:	b1a8      	cbz	r0, 9906 <nrf_802154_core_energy_detection+0x3a>
    {
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
    98da:	2201      	movs	r2, #1
    98dc:	4611      	mov	r1, r2
    98de:	4630      	mov	r0, r6
    98e0:	f7ff f98a 	bl	8bf8 <current_operation_terminate>

        if (result)
    98e4:	4604      	mov	r4, r0
    98e6:	b160      	cbz	r0, 9902 <nrf_802154_core_energy_detection+0x36>
            if (time_us < ED_ITER_DURATION)
            {
                time_us = ED_ITER_DURATION;
            }

            m_ed_time_left = time_us;
    98e8:	4b08      	ldr	r3, [pc, #32]	; (990c <nrf_802154_core_energy_detection+0x40>)
            if (time_us < ED_ITER_DURATION)
    98ea:	2d80      	cmp	r5, #128	; 0x80
    98ec:	bf38      	it	cc
    98ee:	2580      	movcc	r5, #128	; 0x80
            m_ed_time_left = time_us;
    98f0:	601d      	str	r5, [r3, #0]
            m_ed_result    = 0;
    98f2:	4b07      	ldr	r3, [pc, #28]	; (9910 <nrf_802154_core_energy_detection+0x44>)
    98f4:	2200      	movs	r2, #0

            state_set(RADIO_STATE_ED);
    98f6:	2007      	movs	r0, #7
            m_ed_result    = 0;
    98f8:	701a      	strb	r2, [r3, #0]
            state_set(RADIO_STATE_ED);
    98fa:	f7fe ff49 	bl	8790 <state_set>
            ed_init();
    98fe:	f7ff f8cf 	bl	8aa0 <ed_init>
        }

        nrf_802154_critical_section_exit();
    9902:	f000 f915 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    9906:	4620      	mov	r0, r4
    9908:	bd70      	pop	{r4, r5, r6, pc}
    990a:	bf00      	nop
    990c:	20001e90 	.word	0x20001e90
    9910:	20002ec3 	.word	0x20002ec3

00009914 <nrf_802154_core_modulated_carrier>:
    return result;
}

bool nrf_802154_core_modulated_carrier(nrf_802154_term_t term_lvl,
                                       const uint8_t   * p_data)
{
    9914:	b570      	push	{r4, r5, r6, lr}
    9916:	4606      	mov	r6, r0
    9918:	460d      	mov	r5, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    991a:	f009 fcd2 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    991e:	4604      	mov	r4, r0
    9920:	b180      	cbz	r0, 9944 <nrf_802154_core_modulated_carrier+0x30>
    {
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
    9922:	2201      	movs	r2, #1
    9924:	4611      	mov	r1, r2
    9926:	4630      	mov	r0, r6
    9928:	f7ff f966 	bl	8bf8 <current_operation_terminate>

        if (result)
    992c:	4604      	mov	r4, r0
    992e:	b138      	cbz	r0, 9940 <nrf_802154_core_modulated_carrier+0x2c>
        {
            state_set(RADIO_STATE_MODULATED_CARRIER);
    9930:	200a      	movs	r0, #10
    9932:	f7fe ff2d 	bl	8790 <state_set>
            mp_tx_data = (uint8_t *)p_data;
    9936:	4b04      	ldr	r3, [pc, #16]	; (9948 <nrf_802154_core_modulated_carrier+0x34>)
            modulated_carrier_init(p_data);
    9938:	4628      	mov	r0, r5
            mp_tx_data = (uint8_t *)p_data;
    993a:	601d      	str	r5, [r3, #0]
            modulated_carrier_init(p_data);
    993c:	f7ff f898 	bl	8a70 <modulated_carrier_init>
        }

        nrf_802154_critical_section_exit();
    9940:	f000 f8f6 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    9944:	4620      	mov	r0, r4
    9946:	bd70      	pop	{r4, r5, r6, pc}
    9948:	20001e94 	.word	0x20001e94

0000994c <nrf_802154_core_notify_buffer_free>:

#endif // NRF_802154_CARRIER_FUNCTIONS_ENABLED

bool nrf_802154_core_notify_buffer_free(uint8_t * p_data)
{
    994c:	b510      	push	{r4, lr}
    994e:	4604      	mov	r4, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    rx_buffer_t * p_buffer     = (rx_buffer_t *)p_data;
    bool          in_crit_sect = critical_section_enter_and_verify_timeslot_length();
    9950:	f009 fcb7 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    p_buffer->free = true;
    9954:	2301      	movs	r3, #1
    9956:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80

    if (in_crit_sect)
    995a:	b168      	cbz	r0, 9978 <nrf_802154_core_notify_buffer_free+0x2c>
    return m_rsch_timeslot_is_granted;
    995c:	4b07      	ldr	r3, [pc, #28]	; (997c <nrf_802154_core_notify_buffer_free+0x30>)
    995e:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
    9960:	b143      	cbz	r3, 9974 <nrf_802154_core_notify_buffer_free+0x28>
        {
            if (nrf_802154_trx_receive_is_buffer_missing())
    9962:	f000 fcc5 	bl	a2f0 <nrf_802154_trx_receive_is_buffer_missing>
    9966:	b128      	cbz	r0, 9974 <nrf_802154_core_notify_buffer_free+0x28>
    mp_current_rx_buffer = p_rx_buffer;
    9968:	4b05      	ldr	r3, [pc, #20]	; (9980 <nrf_802154_core_notify_buffer_free+0x34>)
    996a:	601c      	str	r4, [r3, #0]
            {
                rx_buffer_in_use_set(p_buffer);
                nrf_802154_trx_receive_buffer_set(rx_buffer_get());
    996c:	f7fe fe88 	bl	8680 <rx_buffer_get>
    9970:	f000 fcce 	bl	a310 <nrf_802154_trx_receive_buffer_set>
            }
        }

        nrf_802154_critical_section_exit();
    9974:	f000 f8dc 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return true;
}
    9978:	2001      	movs	r0, #1
    997a:	bd10      	pop	{r4, pc}
    997c:	20002ebb 	.word	0x20002ebb
    9980:	20001e9c 	.word	0x20001e9c

00009984 <nrf_802154_core_channel_update>:

bool nrf_802154_core_channel_update(req_originator_t req_orig)
{
    9984:	b570      	push	{r4, r5, r6, lr}
    9986:	4606      	mov	r6, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    9988:	f009 fc9b 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    998c:	4604      	mov	r4, r0
    998e:	b1c8      	cbz	r0, 99c4 <nrf_802154_core_channel_update+0x40>
    return m_rsch_timeslot_is_granted;
    9990:	4d13      	ldr	r5, [pc, #76]	; (99e0 <nrf_802154_core_channel_update+0x5c>)
    9992:	782b      	ldrb	r3, [r5, #0]
    {
        if (timeslot_is_granted())
    9994:	b11b      	cbz	r3, 999e <nrf_802154_core_channel_update+0x1a>
        {
            nrf_802154_trx_channel_set(nrf_802154_pib_channel_get());
    9996:	f000 f97f 	bl	9c98 <nrf_802154_pib_channel_get>
    999a:	f009 fda7 	bl	134ec <nrf_802154_trx_channel_set>
        }

        switch (m_state)
    999e:	4b11      	ldr	r3, [pc, #68]	; (99e4 <nrf_802154_core_channel_update+0x60>)
    99a0:	781a      	ldrb	r2, [r3, #0]
    99a2:	2a09      	cmp	r2, #9
    99a4:	b2d3      	uxtb	r3, r2
    99a6:	d00f      	beq.n	99c8 <nrf_802154_core_channel_update+0x44>
    99a8:	2b0a      	cmp	r3, #10
    99aa:	d013      	beq.n	99d4 <nrf_802154_core_channel_update+0x50>
    99ac:	2b02      	cmp	r3, #2
    99ae:	d107      	bne.n	99c0 <nrf_802154_core_channel_update+0x3c>
        {
            case RADIO_STATE_RX:
                if (current_operation_terminate(NRF_802154_TERM_802154, req_orig, true))
    99b0:	2201      	movs	r2, #1
    99b2:	4631      	mov	r1, r6
    99b4:	4610      	mov	r0, r2
    99b6:	f7ff f91f 	bl	8bf8 <current_operation_terminate>
    99ba:	b108      	cbz	r0, 99c0 <nrf_802154_core_channel_update+0x3c>
                {
                    rx_init();
    99bc:	f7fe ffce 	bl	895c <rx_init>
            default:
                // Don't perform any additional action in any other state.
                break;
        }

        nrf_802154_critical_section_exit();
    99c0:	f000 f8b6 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    99c4:	4620      	mov	r0, r4
    99c6:	bd70      	pop	{r4, r5, r6, pc}
    return m_rsch_timeslot_is_granted;
    99c8:	782b      	ldrb	r3, [r5, #0]
                if (timeslot_is_granted())
    99ca:	2b00      	cmp	r3, #0
    99cc:	d0f8      	beq.n	99c0 <nrf_802154_core_channel_update+0x3c>
                    nrf_802154_trx_continuous_carrier_restart();
    99ce:	f001 f80d 	bl	a9ec <nrf_802154_trx_continuous_carrier_restart>
    99d2:	e7f5      	b.n	99c0 <nrf_802154_core_channel_update+0x3c>
    return m_rsch_timeslot_is_granted;
    99d4:	782b      	ldrb	r3, [r5, #0]
                if (timeslot_is_granted())
    99d6:	2b00      	cmp	r3, #0
    99d8:	d0f2      	beq.n	99c0 <nrf_802154_core_channel_update+0x3c>
                    nrf_802154_trx_modulated_carrier_restart();
    99da:	f001 f82f 	bl	aa3c <nrf_802154_trx_modulated_carrier_restart>
    99de:	e7ef      	b.n	99c0 <nrf_802154_core_channel_update+0x3c>
    99e0:	20002ebb 	.word	0x20002ebb
    99e4:	20002ebd 	.word	0x20002ebd

000099e8 <nrf_802154_core_cca_cfg_update>:

bool nrf_802154_core_cca_cfg_update(void)
{
    99e8:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    99ea:	f009 fc6a 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    99ee:	4604      	mov	r4, r0
    99f0:	b130      	cbz	r0, 9a00 <nrf_802154_core_cca_cfg_update+0x18>
    return m_rsch_timeslot_is_granted;
    99f2:	4b04      	ldr	r3, [pc, #16]	; (9a04 <nrf_802154_core_cca_cfg_update+0x1c>)
    99f4:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
    99f6:	b10b      	cbz	r3, 99fc <nrf_802154_core_cca_cfg_update+0x14>
        {
            nrf_802154_trx_cca_configuration_update();
    99f8:	f009 fd7a 	bl	134f0 <nrf_802154_trx_cca_configuration_update>
        }

        nrf_802154_critical_section_exit();
    99fc:	f000 f898 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    9a00:	4620      	mov	r0, r4
    9a02:	bd10      	pop	{r4, pc}
    9a04:	20002ebb 	.word	0x20002ebb

00009a08 <nrf_802154_core_rssi_measure>:

bool nrf_802154_core_rssi_measure(void)
{
    9a08:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    9a0a:	f009 fc5a 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    9a0e:	4604      	mov	r4, r0
    9a10:	b168      	cbz	r0, 9a2e <nrf_802154_core_rssi_measure+0x26>
    return m_rsch_timeslot_is_granted;
    9a12:	4b09      	ldr	r3, [pc, #36]	; (9a38 <nrf_802154_core_rssi_measure+0x30>)
    9a14:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted() && (m_state == RADIO_STATE_RX))
    9a16:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9a1a:	b133      	cbz	r3, 9a2a <nrf_802154_core_rssi_measure+0x22>
    9a1c:	4b07      	ldr	r3, [pc, #28]	; (9a3c <nrf_802154_core_rssi_measure+0x34>)
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	2b02      	cmp	r3, #2
    9a22:	d106      	bne.n	9a32 <nrf_802154_core_rssi_measure+0x2a>
        {
            result = nrf_802154_trx_rssi_measure();
    9a24:	f000 fd6c 	bl	a500 <nrf_802154_trx_rssi_measure>
    9a28:	4604      	mov	r4, r0
        else
        {
            result = false;
        }

        nrf_802154_critical_section_exit();
    9a2a:	f000 f881 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    9a2e:	4620      	mov	r0, r4
    9a30:	bd10      	pop	{r4, pc}
            result = false;
    9a32:	2400      	movs	r4, #0
    9a34:	e7f9      	b.n	9a2a <nrf_802154_core_rssi_measure+0x22>
    9a36:	bf00      	nop
    9a38:	20002ebb 	.word	0x20002ebb
    9a3c:	20002ebd 	.word	0x20002ebd

00009a40 <nrf_802154_core_last_rssi_measurement_get>:

bool nrf_802154_core_last_rssi_measurement_get(int8_t * p_rssi)
{
    9a40:	b538      	push	{r3, r4, r5, lr}
    9a42:	4605      	mov	r5, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result       = false;
    bool in_crit_sect = false;
    bool rssi_started = nrf_802154_trx_rssi_measure_is_started();
    9a44:	f000 fd86 	bl	a554 <nrf_802154_trx_rssi_measure_is_started>

    if (rssi_started)
    9a48:	b910      	cbnz	r0, 9a50 <nrf_802154_core_last_rssi_measurement_get+0x10>
    bool result       = false;
    9a4a:	2400      	movs	r4, #0
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    9a4c:	4620      	mov	r0, r4
    9a4e:	bd38      	pop	{r3, r4, r5, pc}
        in_crit_sect = critical_section_enter_and_verify_timeslot_length();
    9a50:	f009 fc37 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>
    if (rssi_started && in_crit_sect)
    9a54:	2800      	cmp	r0, #0
    9a56:	d0f8      	beq.n	9a4a <nrf_802154_core_last_rssi_measurement_get+0xa>
    return m_rsch_timeslot_is_granted;
    9a58:	4b09      	ldr	r3, [pc, #36]	; (9a80 <nrf_802154_core_last_rssi_measurement_get+0x40>)
    9a5a:	781b      	ldrb	r3, [r3, #0]
        if (timeslot_is_granted())
    9a5c:	b91b      	cbnz	r3, 9a66 <nrf_802154_core_last_rssi_measurement_get+0x26>
    bool result       = false;
    9a5e:	2400      	movs	r4, #0
        nrf_802154_critical_section_exit();
    9a60:	f000 f866 	bl	9b30 <nrf_802154_critical_section_exit>
    9a64:	e7f2      	b.n	9a4c <nrf_802154_core_last_rssi_measurement_get+0xc>
            rssi_started = nrf_802154_trx_rssi_measure_is_started();
    9a66:	f000 fd75 	bl	a554 <nrf_802154_trx_rssi_measure_is_started>
            if (rssi_started)
    9a6a:	2800      	cmp	r0, #0
    9a6c:	d0f7      	beq.n	9a5e <nrf_802154_core_last_rssi_measurement_get+0x1e>
    while (!nrf_802154_trx_rssi_sample_is_available())
    9a6e:	f000 fd7f 	bl	a570 <nrf_802154_trx_rssi_sample_is_available>
    9a72:	4604      	mov	r4, r0
    9a74:	2800      	cmp	r0, #0
    9a76:	d0fa      	beq.n	9a6e <nrf_802154_core_last_rssi_measurement_get+0x2e>
                *p_rssi = rssi_last_measurement_get();
    9a78:	f009 fc03 	bl	13282 <rssi_last_measurement_get>
    9a7c:	7028      	strb	r0, [r5, #0]
    if (in_crit_sect)
    9a7e:	e7ef      	b.n	9a60 <nrf_802154_core_last_rssi_measurement_get+0x20>
    9a80:	20002ebb 	.word	0x20002ebb

00009a84 <nrf_802154_core_antenna_update>:
{
    return m_last_lqi;
}

bool nrf_802154_core_antenna_update(void)
{
    9a84:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = critical_section_enter_and_verify_timeslot_length();
    9a86:	f009 fc1c 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>

    if (result)
    9a8a:	4604      	mov	r4, r0
    9a8c:	b130      	cbz	r0, 9a9c <nrf_802154_core_antenna_update+0x18>
    return m_rsch_timeslot_is_granted;
    9a8e:	4b04      	ldr	r3, [pc, #16]	; (9aa0 <nrf_802154_core_antenna_update+0x1c>)
    9a90:	781b      	ldrb	r3, [r3, #0]
    {
        if (timeslot_is_granted())
    9a92:	b10b      	cbz	r3, 9a98 <nrf_802154_core_antenna_update+0x14>
        {
            nrf_802154_trx_antenna_update();
    9a94:	f000 fbee 	bl	a274 <nrf_802154_trx_antenna_update>
        }

        nrf_802154_critical_section_exit();
    9a98:	f000 f84a 	bl	9b30 <nrf_802154_critical_section_exit>
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    9a9c:	4620      	mov	r0, r4
    9a9e:	bd10      	pop	{r4, pc}
    9aa0:	20002ebb 	.word	0x20002ebb

00009aa4 <nrf_802154_core_hooks_terminate>:

    NULL,
};

bool nrf_802154_core_hooks_terminate(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
    9aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aa6:	4f08      	ldr	r7, [pc, #32]	; (9ac8 <nrf_802154_core_hooks_terminate+0x24>)
    9aa8:	4605      	mov	r5, r0
    9aaa:	460e      	mov	r6, r1
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_abort_hooks) / sizeof(m_abort_hooks[0]); i++)
    9aac:	2400      	movs	r4, #0
    {
        if (m_abort_hooks[i] == NULL)
    9aae:	f857 3b04 	ldr.w	r3, [r7], #4
    9ab2:	b133      	cbz	r3, 9ac2 <nrf_802154_core_hooks_terminate+0x1e>
        {
            break;
        }

        result = m_abort_hooks[i](term_lvl, req_orig);
    9ab4:	4631      	mov	r1, r6
    9ab6:	4628      	mov	r0, r5
    9ab8:	4798      	blx	r3

        if (!result)
    9aba:	b118      	cbz	r0, 9ac4 <nrf_802154_core_hooks_terminate+0x20>
    for (uint32_t i = 0; i < sizeof(m_abort_hooks) / sizeof(m_abort_hooks[0]); i++)
    9abc:	3401      	adds	r4, #1
    9abe:	2c05      	cmp	r4, #5
    9ac0:	d1f5      	bne.n	9aae <nrf_802154_core_hooks_terminate+0xa>
    9ac2:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
    9ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ac6:	bf00      	nop
    9ac8:	000146c8 	.word	0x000146c8

00009acc <nrf_802154_core_hooks_tx_failed>:
        m_transmitted_hooks[i](p_frame);
    }
}

bool nrf_802154_core_hooks_tx_failed(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
    9acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ace:	4f08      	ldr	r7, [pc, #32]	; (9af0 <nrf_802154_core_hooks_tx_failed+0x24>)
    9ad0:	4605      	mov	r5, r0
    9ad2:	460e      	mov	r6, r1
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_failed_hooks) / sizeof(m_tx_failed_hooks[0]); i++)
    9ad4:	2400      	movs	r4, #0
    {
        if (m_tx_failed_hooks[i] == NULL)
    9ad6:	f857 3b04 	ldr.w	r3, [r7], #4
    9ada:	b133      	cbz	r3, 9aea <nrf_802154_core_hooks_tx_failed+0x1e>
        {
            break;
        }

        result = m_tx_failed_hooks[i](p_frame, error);
    9adc:	4631      	mov	r1, r6
    9ade:	4628      	mov	r0, r5
    9ae0:	4798      	blx	r3

        if (!result)
    9ae2:	b118      	cbz	r0, 9aec <nrf_802154_core_hooks_tx_failed+0x20>
    for (uint32_t i = 0; i < sizeof(m_tx_failed_hooks) / sizeof(m_tx_failed_hooks[0]); i++)
    9ae4:	3401      	adds	r4, #1
    9ae6:	2c03      	cmp	r4, #3
    9ae8:	d1f5      	bne.n	9ad6 <nrf_802154_core_hooks_tx_failed+0xa>
    9aea:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
    9aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9aee:	bf00      	nop
    9af0:	000146bc 	.word	0x000146bc

00009af4 <nrf_802154_core_hooks_tx_started>:
        m_tx_ack_failed_hooks[i](p_ack, error);
    }
}

bool nrf_802154_core_hooks_tx_started(uint8_t * p_frame)
{
    9af4:	b570      	push	{r4, r5, r6, lr}
    9af6:	4e07      	ldr	r6, [pc, #28]	; (9b14 <nrf_802154_core_hooks_tx_started+0x20>)
    9af8:	4605      	mov	r5, r0
    bool result = true;

    for (uint32_t i = 0; i < sizeof(m_tx_started_hooks) / sizeof(m_tx_started_hooks[0]); i++)
    9afa:	2400      	movs	r4, #0
    {
        if (m_tx_started_hooks[i] == NULL)
    9afc:	f856 3b04 	ldr.w	r3, [r6], #4
    9b00:	b12b      	cbz	r3, 9b0e <nrf_802154_core_hooks_tx_started+0x1a>
        {
            break;
        }

        result = m_tx_started_hooks[i](p_frame);
    9b02:	4628      	mov	r0, r5
    9b04:	4798      	blx	r3

        if (!result)
    9b06:	b118      	cbz	r0, 9b10 <nrf_802154_core_hooks_tx_started+0x1c>
    for (uint32_t i = 0; i < sizeof(m_tx_started_hooks) / sizeof(m_tx_started_hooks[0]); i++)
    9b08:	3401      	adds	r4, #1
    9b0a:	2c03      	cmp	r4, #3
    9b0c:	d1f6      	bne.n	9afc <nrf_802154_core_hooks_tx_started+0x8>
    9b0e:	2001      	movs	r0, #1
            break;
        }
    }

    return result;
}
    9b10:	bd70      	pop	{r4, r5, r6, pc}
    9b12:	bf00      	nop
    9b14:	000146b0 	.word	0x000146b0

00009b18 <nrf_802154_critical_section_init>:
 * @section API functions
 **************************************************************************************************/

void nrf_802154_critical_section_init(void)
{
    m_nested_critical_section_counter          = 0;
    9b18:	4b03      	ldr	r3, [pc, #12]	; (9b28 <nrf_802154_critical_section_init+0x10>)
    9b1a:	2200      	movs	r2, #0
    9b1c:	701a      	strb	r2, [r3, #0]
    m_nested_critical_section_allowed_priority = NESTED_CRITICAL_SECTION_ALLOWED_PRIORITY_NONE;
    9b1e:	4b03      	ldr	r3, [pc, #12]	; (9b2c <nrf_802154_critical_section_init+0x14>)
    9b20:	22ff      	movs	r2, #255	; 0xff
    9b22:	701a      	strb	r2, [r3, #0]
}
    9b24:	4770      	bx	lr
    9b26:	bf00      	nop
    9b28:	20002ec5 	.word	0x20002ec5
    9b2c:	20002ec4 	.word	0x20002ec4

00009b30 <nrf_802154_critical_section_exit>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

void nrf_802154_critical_section_exit(void)
{
    9b30:	b570      	push	{r4, r5, r6, lr}
        cnt = m_nested_critical_section_counter;
    9b32:	4e0f      	ldr	r6, [pc, #60]	; (9b70 <nrf_802154_critical_section_exit+0x40>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9b34:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9b38:	b672      	cpsid	i
    9b3a:	7833      	ldrb	r3, [r6, #0]
        --cnt;
    9b3c:	3b01      	subs	r3, #1
        if (cnt == 0U)
    9b3e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9b42:	d111      	bne.n	9b68 <nrf_802154_critical_section_exit+0x38>
            if (nrf_802154_critical_section_rsch_event_is_pending())
    9b44:	f005 fc50 	bl	f3e8 <nrf_802154_critical_section_rsch_event_is_pending>
    9b48:	b120      	cbz	r0, 9b54 <nrf_802154_critical_section_exit+0x24>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    9b4a:	f385 8810 	msr	PRIMASK, r5
                nrf_802154_critical_section_rsch_process_pending();
    9b4e:	f005 fc3b 	bl	f3c8 <nrf_802154_critical_section_rsch_process_pending>
    while (!succeed);
    9b52:	e7ef      	b.n	9b34 <nrf_802154_critical_section_exit+0x4>
    if (nrf_802154_rsch_prec_is_approved(RSCH_PREC_RAAL, RSCH_PRIO_MIN_APPROVED))
    9b54:	2101      	movs	r1, #1
    9b56:	4608      	mov	r0, r1
    9b58:	f005 fbb8 	bl	f2cc <nrf_802154_rsch_prec_is_approved>
    9b5c:	b110      	cbz	r0, 9b64 <nrf_802154_critical_section_exit+0x34>
        nrf_802154_irq_enable(RADIO_IRQn);
    9b5e:	2001      	movs	r0, #1
    9b60:	f009 fb12 	bl	13188 <nrf_802154_irq_enable>
            nrf_802154_platform_sl_lptimer_critical_section_exit();
    9b64:	f7fe fccc 	bl	8500 <nrf_802154_platform_sl_lptimer_critical_section_exit>
        m_nested_critical_section_counter = cnt;
    9b68:	7034      	strb	r4, [r6, #0]
    9b6a:	f385 8810 	msr	PRIMASK, r5
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    critical_section_exit();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    9b6e:	bd70      	pop	{r4, r5, r6, pc}
    9b70:	20002ec5 	.word	0x20002ec5

00009b74 <nrf_802154_critical_section_nesting_deny>:
void nrf_802154_critical_section_nesting_deny(void)
{
    assert(m_nested_critical_section_allowed_priority >= 0);
    assert(m_nested_critical_section_counter >= 1);

    m_nested_critical_section_allowed_priority = NESTED_CRITICAL_SECTION_ALLOWED_PRIORITY_NONE;
    9b74:	4b01      	ldr	r3, [pc, #4]	; (9b7c <nrf_802154_critical_section_nesting_deny+0x8>)
    9b76:	22ff      	movs	r2, #255	; 0xff
    9b78:	701a      	strb	r2, [r3, #0]
}
    9b7a:	4770      	bx	lr
    9b7c:	20002ec4 	.word	0x20002ec4

00009b80 <nrf_802154_critical_section_active_vector_priority_get>:
    return m_nested_critical_section_counter > 1;
}

uint32_t nrf_802154_critical_section_active_vector_priority_get(void)
{
    uint32_t  active_vector_id = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) >> SCB_ICSR_VECTACTIVE_Pos;
    9b80:	4b05      	ldr	r3, [pc, #20]	; (9b98 <nrf_802154_critical_section_active_vector_priority_get+0x18>)
    9b82:	6858      	ldr	r0, [r3, #4]
    9b84:	f3c0 0008 	ubfx	r0, r0, #0, #9
    IRQn_Type irq_number;
    uint32_t  active_priority;

    // Check if this function is called from main thread.
    if (active_vector_id == 0)
    9b88:	b118      	cbz	r0, 9b92 <nrf_802154_critical_section_active_vector_priority_get+0x12>
        return UINT32_MAX;
    }

    assert(active_vector_id >= CMSIS_IRQ_NUM_VECTACTIVE_DIFF);

    irq_number      = (IRQn_Type)(active_vector_id - CMSIS_IRQ_NUM_VECTACTIVE_DIFF);
    9b8a:	3810      	subs	r0, #16
    active_priority = nrf_802154_irq_priority_get(irq_number);
    9b8c:	b240      	sxtb	r0, r0
    9b8e:	f7fe bbbf 	b.w	8310 <nrf_802154_irq_priority_get>

    return active_priority;
}
    9b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9b96:	4770      	bx	lr
    9b98:	e000ed00 	.word	0xe000ed00

00009b9c <critical_section_enter>:
{
    9b9c:	b538      	push	{r3, r4, r5, lr}
    9b9e:	4604      	mov	r4, r0
    return active_priority_convert(nrf_802154_critical_section_active_vector_priority_get());
    9ba0:	f7ff ffee 	bl	9b80 <nrf_802154_critical_section_active_vector_priority_get>
    return active_priority == UINT32_MAX ? INT8_MAX : (int8_t)active_priority;
    9ba4:	1c43      	adds	r3, r0, #1
    9ba6:	bf08      	it	eq
    9ba8:	207f      	moveq	r0, #127	; 0x7f
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9baa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9bae:	b672      	cpsid	i
    if (forced ||
    9bb0:	4a10      	ldr	r2, [pc, #64]	; (9bf4 <critical_section_enter+0x58>)
    9bb2:	b93c      	cbnz	r4, 9bc4 <critical_section_enter+0x28>
        (m_nested_critical_section_counter == 0) ||
    9bb4:	7813      	ldrb	r3, [r2, #0]
    if (forced ||
    9bb6:	b12b      	cbz	r3, 9bc4 <critical_section_enter+0x28>
        (m_nested_critical_section_allowed_priority == active_vector_priority))
    9bb8:	4b0f      	ldr	r3, [pc, #60]	; (9bf8 <critical_section_enter+0x5c>)
    9bba:	7819      	ldrb	r1, [r3, #0]
        (m_nested_critical_section_counter == 0) ||
    9bbc:	b243      	sxtb	r3, r0
        (m_nested_critical_section_allowed_priority == active_vector_priority))
    9bbe:	b249      	sxtb	r1, r1
        (m_nested_critical_section_counter == 0) ||
    9bc0:	4299      	cmp	r1, r3
    9bc2:	d106      	bne.n	9bd2 <critical_section_enter+0x36>
        uint8_t cnt = m_nested_critical_section_counter;
    9bc4:	7814      	ldrb	r4, [r2, #0]
        ++cnt;
    9bc6:	3401      	adds	r4, #1
    9bc8:	b2e4      	uxtb	r4, r4
        if (cnt == 1U)
    9bca:	2c01      	cmp	r4, #1
        m_nested_critical_section_counter = cnt;
    9bcc:	7014      	strb	r4, [r2, #0]
        if (cnt == 1U)
    9bce:	d004      	beq.n	9bda <critical_section_enter+0x3e>
        result = true;
    9bd0:	2401      	movs	r4, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    9bd2:	f385 8810 	msr	PRIMASK, r5
}
    9bd6:	4620      	mov	r0, r4
    9bd8:	bd38      	pop	{r3, r4, r5, pc}
            nrf_802154_platform_sl_lptimer_critical_section_enter();
    9bda:	f7fe fc75 	bl	84c8 <nrf_802154_platform_sl_lptimer_critical_section_enter>
    if (nrf_802154_rsch_prec_is_approved(RSCH_PREC_RAAL, RSCH_PRIO_MIN_APPROVED))
    9bde:	4621      	mov	r1, r4
    9be0:	4620      	mov	r0, r4
    9be2:	f005 fb73 	bl	f2cc <nrf_802154_rsch_prec_is_approved>
    9be6:	2800      	cmp	r0, #0
    9be8:	d0f2      	beq.n	9bd0 <critical_section_enter+0x34>
        nrf_802154_irq_disable(RADIO_IRQn);
    9bea:	4620      	mov	r0, r4
    9bec:	f009 face 	bl	1318c <nrf_802154_irq_disable>
    9bf0:	e7ee      	b.n	9bd0 <critical_section_enter+0x34>
    9bf2:	bf00      	nop
    9bf4:	20002ec5 	.word	0x20002ec5
    9bf8:	20002ec4 	.word	0x20002ec4

00009bfc <nrf_802154_critical_section_nesting_allow>:
{
    9bfc:	b508      	push	{r3, lr}
    return active_priority_convert(nrf_802154_critical_section_active_vector_priority_get());
    9bfe:	f7ff ffbf 	bl	9b80 <nrf_802154_critical_section_active_vector_priority_get>
    return active_priority == UINT32_MAX ? INT8_MAX : (int8_t)active_priority;
    9c02:	1c43      	adds	r3, r0, #1
    9c04:	bf08      	it	eq
    9c06:	207f      	moveq	r0, #127	; 0x7f
    m_nested_critical_section_allowed_priority = active_vector_priority_get();
    9c08:	4b01      	ldr	r3, [pc, #4]	; (9c10 <nrf_802154_critical_section_nesting_allow+0x14>)
    9c0a:	b240      	sxtb	r0, r0
    9c0c:	7018      	strb	r0, [r3, #0]
}
    9c0e:	bd08      	pop	{r3, pc}
    9c10:	20002ec4 	.word	0x20002ec4

00009c14 <nrf_802154_pib_init>:

    return result;
}

void nrf_802154_pib_init(void)
{
    9c14:	b510      	push	{r4, lr}
    m_data.promiscuous = false;
    9c16:	4c13      	ldr	r4, [pc, #76]	; (9c64 <nrf_802154_pib_init+0x50>)
    9c18:	235a      	movs	r3, #90	; 0x5a
    9c1a:	7463      	strb	r3, [r4, #17]
    m_data.auto_ack    = true;
    m_data.pan_coord   = false;
    m_data.channel     = 11;

    memset(m_data.pan_id, 0xff, sizeof(m_data.pan_id));
    9c1c:	2202      	movs	r2, #2
    9c1e:	21ff      	movs	r1, #255	; 0xff
    9c20:	1c60      	adds	r0, r4, #1
    9c22:	f009 f85e 	bl	12ce2 <memset>
    m_data.short_addr[0] = 0xfe;
    9c26:	23fe      	movs	r3, #254	; 0xfe
    9c28:	70e3      	strb	r3, [r4, #3]
    m_data.short_addr[1] = 0xff;
    9c2a:	23ff      	movs	r3, #255	; 0xff
    9c2c:	7123      	strb	r3, [r4, #4]
    memset(m_data.extended_addr, 0, sizeof(m_data.extended_addr));
    9c2e:	2208      	movs	r2, #8
    9c30:	2100      	movs	r1, #0
    9c32:	1d60      	adds	r0, r4, #5
    9c34:	f009 f855 	bl	12ce2 <memset>

    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
    m_data.cca.ed_threshold   = NRF_802154_CCA_ED_THRESHOLD_DEFAULT;
    9c38:	f642 522d 	movw	r2, #11565	; 0x2d2d
    9c3c:	81e2      	strh	r2, [r4, #14]
    m_data.cca.corr_threshold = NRF_802154_CCA_CORR_THRESHOLD_DEFAULT;
    m_data.cca.corr_limit     = NRF_802154_CCA_CORR_LIMIT_DEFAULT;
    9c3e:	2202      	movs	r2, #2
    9c40:	7422      	strb	r2, [r4, #16]

#if NRF_802154_DISABLE_BCC_MATCHING
    m_data.coex.rx_request_mode = NRF_802154_COEX_RX_REQUEST_MODE_PREAMBLE;
#else
    m_data.coex.rx_request_mode = NRF_802154_COEX_RX_REQUEST_MODE_DESTINED;
    9c42:	f240 4203 	movw	r2, #1027	; 0x403
    9c46:	8262      	strh	r2, [r4, #18]
#endif
    m_data.coex.tx_request_mode = NRF_802154_COEX_TX_REQUEST_MODE_ON_CCA_TOGGLE;

#if NRF_802154_CSMA_CA_ENABLED
    m_data.csmaca.min_be       = NRF_802154_CSMA_CA_MIN_BE_DEFAULT;
    9c48:	f240 5203 	movw	r2, #1283	; 0x503
    9c4c:	82a2      	strh	r2, [r4, #20]
    m_data.csmaca.max_be       = NRF_802154_CSMA_CA_MAX_BE_DEFAULT;
    m_data.csmaca.max_backoffs = NRF_802154_CSMA_CA_MAX_CSMA_BACKOFFS_DEFAULT;
    9c4e:	2204      	movs	r2, #4
    9c50:	75a2      	strb	r2, [r4, #22]
#endif // NRF_802154_CSMA_CA_ENABLED

#if NRF_802154_IFS_ENABLED
    m_data.ifs.min_sifs_period_us = MIN_SIFS_PERIOD_US;
    9c52:	22c0      	movs	r2, #192	; 0xc0
    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
    9c54:	2300      	movs	r3, #0
    m_data.ifs.min_sifs_period_us = MIN_SIFS_PERIOD_US;
    9c56:	8362      	strh	r2, [r4, #26]
    m_data.ifs.min_lifs_period_us = MIN_LIFS_PERIOD_US;
    9c58:	f44f 7220 	mov.w	r2, #640	; 0x280
    m_data.cca.mode           = NRF_802154_CCA_MODE_DEFAULT;
    9c5c:	7363      	strb	r3, [r4, #13]
    m_data.ifs.min_lifs_period_us = MIN_LIFS_PERIOD_US;
    9c5e:	83a2      	strh	r2, [r4, #28]
    m_data.ifs.mode               = NRF_802154_IFS_MODE_DISABLED;
    9c60:	7623      	strb	r3, [r4, #24]

#if NRF_802154_TEST_MODES_ENABLED
    m_data.test_modes.csmaca_backoff = NRF_802154_TEST_MODE_CSMACA_BACKOFF_RANDOM;
#endif

}
    9c62:	bd10      	pop	{r4, pc}
    9c64:	20002dfc 	.word	0x20002dfc

00009c68 <nrf_802154_pib_promiscuous_get>:

bool nrf_802154_pib_promiscuous_get(void)
{
    return m_data.promiscuous;
    9c68:	4b02      	ldr	r3, [pc, #8]	; (9c74 <nrf_802154_pib_promiscuous_get+0xc>)
    9c6a:	7c58      	ldrb	r0, [r3, #17]
}
    9c6c:	f000 0001 	and.w	r0, r0, #1
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	20002dfc 	.word	0x20002dfc

00009c78 <nrf_802154_pib_auto_ack_get>:
    m_data.promiscuous = enabled;
}

bool nrf_802154_pib_auto_ack_get(void)
{
    return m_data.auto_ack;
    9c78:	4b02      	ldr	r3, [pc, #8]	; (9c84 <nrf_802154_pib_auto_ack_get+0xc>)
    9c7a:	7c58      	ldrb	r0, [r3, #17]
}
    9c7c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9c80:	4770      	bx	lr
    9c82:	bf00      	nop
    9c84:	20002dfc 	.word	0x20002dfc

00009c88 <nrf_802154_pib_pan_coord_get>:
    m_data.auto_ack = enabled;
}

bool nrf_802154_pib_pan_coord_get(void)
{
    return m_data.pan_coord;
    9c88:	4b02      	ldr	r3, [pc, #8]	; (9c94 <nrf_802154_pib_pan_coord_get+0xc>)
    9c8a:	7c58      	ldrb	r0, [r3, #17]
}
    9c8c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    9c90:	4770      	bx	lr
    9c92:	bf00      	nop
    9c94:	20002dfc 	.word	0x20002dfc

00009c98 <nrf_802154_pib_channel_get>:
    m_data.pan_coord = enabled;
}

uint8_t nrf_802154_pib_channel_get(void)
{
    return m_data.channel;
    9c98:	4b01      	ldr	r3, [pc, #4]	; (9ca0 <nrf_802154_pib_channel_get+0x8>)
    9c9a:	7c58      	ldrb	r0, [r3, #17]
}
    9c9c:	08c0      	lsrs	r0, r0, #3
    9c9e:	4770      	bx	lr
    9ca0:	20002dfc 	.word	0x20002dfc

00009ca4 <nrf_802154_pib_channel_set>:

void nrf_802154_pib_channel_set(uint8_t channel)
{
    m_data.channel = channel;
    9ca4:	4b02      	ldr	r3, [pc, #8]	; (9cb0 <nrf_802154_pib_channel_set+0xc>)
    9ca6:	7c5a      	ldrb	r2, [r3, #17]
    9ca8:	f360 02c7 	bfi	r2, r0, #3, #5
    9cac:	745a      	strb	r2, [r3, #17]
}
    9cae:	4770      	bx	lr
    9cb0:	20002dfc 	.word	0x20002dfc

00009cb4 <nrf_802154_pib_tx_power_get>:

int8_t nrf_802154_pib_tx_power_get(void)
{
    return m_data.tx_power;
}
    9cb4:	4b01      	ldr	r3, [pc, #4]	; (9cbc <nrf_802154_pib_tx_power_get+0x8>)
    9cb6:	f993 0000 	ldrsb.w	r0, [r3]
    9cba:	4770      	bx	lr
    9cbc:	20002dfc 	.word	0x20002dfc

00009cc0 <nrf_802154_pib_pan_id_get>:
}

const uint8_t * nrf_802154_pib_pan_id_get(void)
{
    return m_data.pan_id;
}
    9cc0:	4800      	ldr	r0, [pc, #0]	; (9cc4 <nrf_802154_pib_pan_id_get+0x4>)
    9cc2:	4770      	bx	lr
    9cc4:	20002dfd 	.word	0x20002dfd

00009cc8 <nrf_802154_pib_pan_id_set>:

void nrf_802154_pib_pan_id_set(const uint8_t * p_pan_id)
{
    9cc8:	4601      	mov	r1, r0
    memcpy(m_data.pan_id, p_pan_id, PAN_ID_SIZE);
    9cca:	2202      	movs	r2, #2
    9ccc:	4801      	ldr	r0, [pc, #4]	; (9cd4 <nrf_802154_pib_pan_id_set+0xc>)
    9cce:	f008 bffd 	b.w	12ccc <memcpy>
    9cd2:	bf00      	nop
    9cd4:	20002dfd 	.word	0x20002dfd

00009cd8 <nrf_802154_pib_extended_address_get>:
}

const uint8_t * nrf_802154_pib_extended_address_get(void)
{
    return m_data.extended_addr;
}
    9cd8:	4800      	ldr	r0, [pc, #0]	; (9cdc <nrf_802154_pib_extended_address_get+0x4>)
    9cda:	4770      	bx	lr
    9cdc:	20002e01 	.word	0x20002e01

00009ce0 <nrf_802154_pib_extended_address_set>:

void nrf_802154_pib_extended_address_set(const uint8_t * p_extended_address)
{
    9ce0:	4601      	mov	r1, r0
    memcpy(m_data.extended_addr, p_extended_address, EXTENDED_ADDRESS_SIZE);
    9ce2:	2208      	movs	r2, #8
    9ce4:	4801      	ldr	r0, [pc, #4]	; (9cec <nrf_802154_pib_extended_address_set+0xc>)
    9ce6:	f008 bff1 	b.w	12ccc <memcpy>
    9cea:	bf00      	nop
    9cec:	20002e01 	.word	0x20002e01

00009cf0 <nrf_802154_pib_short_address_get>:
}

const uint8_t * nrf_802154_pib_short_address_get(void)
{
    return m_data.short_addr;
}
    9cf0:	4800      	ldr	r0, [pc, #0]	; (9cf4 <nrf_802154_pib_short_address_get+0x4>)
    9cf2:	4770      	bx	lr
    9cf4:	20002dff 	.word	0x20002dff

00009cf8 <nrf_802154_pib_cca_cfg_get>:
    }
}

void nrf_802154_pib_cca_cfg_get(nrf_802154_cca_cfg_t * p_cca_cfg)
{
    memcpy(p_cca_cfg, &m_data.cca, sizeof(m_data.cca));
    9cf8:	4901      	ldr	r1, [pc, #4]	; (9d00 <nrf_802154_pib_cca_cfg_get+0x8>)
    9cfa:	2204      	movs	r2, #4
    9cfc:	f008 bfe6 	b.w	12ccc <memcpy>
    9d00:	20002e09 	.word	0x20002e09

00009d04 <nrf_802154_pib_coex_rx_request_mode_get>:
}

nrf_802154_coex_rx_request_mode_t nrf_802154_pib_coex_rx_request_mode_get(void)
{
    return m_data.coex.rx_request_mode;
}
    9d04:	4b01      	ldr	r3, [pc, #4]	; (9d0c <nrf_802154_pib_coex_rx_request_mode_get+0x8>)
    9d06:	7c98      	ldrb	r0, [r3, #18]
    9d08:	4770      	bx	lr
    9d0a:	bf00      	nop
    9d0c:	20002dfc 	.word	0x20002dfc

00009d10 <nrf_802154_pib_coex_tx_request_mode_get>:
}

nrf_802154_coex_tx_request_mode_t nrf_802154_pib_coex_tx_request_mode_get(void)
{
    return m_data.coex.tx_request_mode;
}
    9d10:	4b01      	ldr	r3, [pc, #4]	; (9d18 <nrf_802154_pib_coex_tx_request_mode_get+0x8>)
    9d12:	7cd8      	ldrb	r0, [r3, #19]
    9d14:	4770      	bx	lr
    9d16:	bf00      	nop
    9d18:	20002dfc 	.word	0x20002dfc

00009d1c <nrf_802154_pib_csmaca_min_be_get>:
}

uint8_t nrf_802154_pib_csmaca_min_be_get(void)
{
    return m_data.csmaca.min_be;
}
    9d1c:	4b01      	ldr	r3, [pc, #4]	; (9d24 <nrf_802154_pib_csmaca_min_be_get+0x8>)
    9d1e:	7d18      	ldrb	r0, [r3, #20]
    9d20:	4770      	bx	lr
    9d22:	bf00      	nop
    9d24:	20002dfc 	.word	0x20002dfc

00009d28 <nrf_802154_pib_csmaca_max_be_get>:
}

uint8_t nrf_802154_pib_csmaca_max_be_get(void)
{
    return m_data.csmaca.max_be;
}
    9d28:	4b01      	ldr	r3, [pc, #4]	; (9d30 <nrf_802154_pib_csmaca_max_be_get+0x8>)
    9d2a:	7d58      	ldrb	r0, [r3, #21]
    9d2c:	4770      	bx	lr
    9d2e:	bf00      	nop
    9d30:	20002dfc 	.word	0x20002dfc

00009d34 <nrf_802154_pib_csmaca_max_backoffs_get>:
}

uint8_t nrf_802154_pib_csmaca_max_backoffs_get(void)
{
    return m_data.csmaca.max_backoffs;
}
    9d34:	4b01      	ldr	r3, [pc, #4]	; (9d3c <nrf_802154_pib_csmaca_max_backoffs_get+0x8>)
    9d36:	7d98      	ldrb	r0, [r3, #22]
    9d38:	4770      	bx	lr
    9d3a:	bf00      	nop
    9d3c:	20002dfc 	.word	0x20002dfc

00009d40 <nrf_802154_pib_ifs_mode_get>:

#if NRF_802154_IFS_ENABLED
nrf_802154_ifs_mode_t nrf_802154_pib_ifs_mode_get(void)
{
    return m_data.ifs.mode;
}
    9d40:	4b01      	ldr	r3, [pc, #4]	; (9d48 <nrf_802154_pib_ifs_mode_get+0x8>)
    9d42:	7e18      	ldrb	r0, [r3, #24]
    9d44:	4770      	bx	lr
    9d46:	bf00      	nop
    9d48:	20002dfc 	.word	0x20002dfc

00009d4c <nrf_802154_pib_ifs_min_sifs_period_get>:
}

uint16_t nrf_802154_pib_ifs_min_sifs_period_get(void)
{
    return m_data.ifs.min_sifs_period_us;
}
    9d4c:	4b01      	ldr	r3, [pc, #4]	; (9d54 <nrf_802154_pib_ifs_min_sifs_period_get+0x8>)
    9d4e:	8b58      	ldrh	r0, [r3, #26]
    9d50:	4770      	bx	lr
    9d52:	bf00      	nop
    9d54:	20002dfc 	.word	0x20002dfc

00009d58 <nrf_802154_pib_ifs_min_lifs_period_get>:
}

uint16_t nrf_802154_pib_ifs_min_lifs_period_get(void)
{
    return m_data.ifs.min_lifs_period_us;
}
    9d58:	4b01      	ldr	r3, [pc, #4]	; (9d60 <nrf_802154_pib_ifs_min_lifs_period_get+0x8>)
    9d5a:	8b98      	ldrh	r0, [r3, #28]
    9d5c:	4770      	bx	lr
    9d5e:	bf00      	nop
    9d60:	20002dfc 	.word	0x20002dfc

00009d64 <nrf_802154_rx_buffer_init>:

rx_buffer_t nrf_802154_rx_buffers[NRF_802154_RX_BUFFERS]; ///< Receive buffers.

void nrf_802154_rx_buffer_init(void)
{
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
    9d64:	4a05      	ldr	r2, [pc, #20]	; (9d7c <nrf_802154_rx_buffer_init+0x18>)
    9d66:	2300      	movs	r3, #0
    {
        nrf_802154_rx_buffers[i].free = true;
    9d68:	2101      	movs	r1, #1
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
    9d6a:	3301      	adds	r3, #1
    9d6c:	2b10      	cmp	r3, #16
        nrf_802154_rx_buffers[i].free = true;
    9d6e:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
    9d72:	f102 0281 	add.w	r2, r2, #129	; 0x81
    9d76:	d1f8      	bne.n	9d6a <nrf_802154_rx_buffer_init+0x6>
    }
}
    9d78:	4770      	bx	lr
    9d7a:	bf00      	nop
    9d7c:	20002ec6 	.word	0x20002ec6

00009d80 <nrf_802154_rx_buffer_free_find>:

rx_buffer_t * nrf_802154_rx_buffer_free_find(void)
{
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
    9d80:	4a07      	ldr	r2, [pc, #28]	; (9da0 <nrf_802154_rx_buffer_free_find+0x20>)
    9d82:	2300      	movs	r3, #0
    9d84:	4611      	mov	r1, r2
    {
        if (nrf_802154_rx_buffers[i].free)
    9d86:	f892 0080 	ldrb.w	r0, [r2, #128]	; 0x80
    9d8a:	b118      	cbz	r0, 9d94 <nrf_802154_rx_buffer_free_find+0x14>
        {
            return &nrf_802154_rx_buffers[i];
    9d8c:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    9d90:	18c8      	adds	r0, r1, r3
    9d92:	4770      	bx	lr
    for (uint32_t i = 0; i < NRF_802154_RX_BUFFERS; i++)
    9d94:	3301      	adds	r3, #1
    9d96:	2b10      	cmp	r3, #16
    9d98:	f102 0281 	add.w	r2, r2, #129	; 0x81
    9d9c:	d1f3      	bne.n	9d86 <nrf_802154_rx_buffer_free_find+0x6>
        }
    }

    return NULL;
}
    9d9e:	4770      	bx	lr
    9da0:	20002ec6 	.word	0x20002ec6

00009da4 <nrf_802154_swi_init>:
    nrf_802154_notification_swi_irq_handler();
    nrf_802154_request_swi_irq_handler();
}

void nrf_802154_swi_init(void)
{
    9da4:	b510      	push	{r4, lr}
    static bool initialized = false;

    if (!initialized)
    9da6:	4c07      	ldr	r4, [pc, #28]	; (9dc4 <nrf_802154_swi_init+0x20>)
    9da8:	7823      	ldrb	r3, [r4, #0]
    9daa:	b94b      	cbnz	r3, 9dc0 <nrf_802154_swi_init+0x1c>
    {
        nrf_802154_irq_init(NRF_802154_EGU_IRQN, NRF_802154_SWI_PRIORITY, swi_irq_handler);
    9dac:	4a06      	ldr	r2, [pc, #24]	; (9dc8 <nrf_802154_swi_init+0x24>)
    9dae:	2101      	movs	r1, #1
    9db0:	2017      	movs	r0, #23
    9db2:	f009 f9dd 	bl	13170 <nrf_802154_irq_init>
        nrf_802154_irq_enable(NRF_802154_EGU_IRQN);
    9db6:	2017      	movs	r0, #23
    9db8:	f009 f9e6 	bl	13188 <nrf_802154_irq_enable>
        initialized = true;
    9dbc:	2301      	movs	r3, #1
    9dbe:	7023      	strb	r3, [r4, #0]
    }
}
    9dc0:	bd10      	pop	{r4, pc}
    9dc2:	bf00      	nop
    9dc4:	200036d6 	.word	0x200036d6
    9dc8:	000134af 	.word	0x000134af

00009dcc <fem_for_lna_reset>:
    }
}

/** Reset FEM configuration for LNA. */
static void fem_for_lna_reset(void)
{
    9dcc:	b508      	push	{r3, lr}
    mpsl_fem_lna_configuration_clear();
    9dce:	f7f9 fce5 	bl	379c <mpsl_fem_lna_configuration_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9dd2:	4b06      	ldr	r3, [pc, #24]	; (9dec <fem_for_lna_reset+0x20>)
    9dd4:	2201      	movs	r2, #1
    9dd6:	611a      	str	r2, [r3, #16]
    p_reg->SHORTS &= ~(mask);
    9dd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    9de0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_timer_shorts_disable(NRF_802154_TIMER_INSTANCE, NRF_TIMER_SHORT_COMPARE0_STOP_MASK);
    nrf_802154_trx_ppi_for_fem_clear();
    /* There is no need to explicitly deactivate LNA pin during reset as mpsl_fem_abort_set is used
     * to provide a deactivation mechanism on DISABLED event.
     */
}
    9de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_ppi_for_fem_clear();
    9de8:	f001 b8ba 	b.w	af60 <nrf_802154_trx_ppi_for_fem_clear>
    9dec:	40008000 	.word	0x40008000

00009df0 <standalone_cca_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void standalone_cca_finish(void)
{
    9df0:	b510      	push	{r4, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
    9df2:	2100      	movs	r1, #0
    p_reg->SHORTS &= ~shorts_mask;
}

NRF_STATIC_INLINE void nrf_radio_shorts_set(NRF_RADIO_Type * p_reg, uint32_t shorts_mask)
{
    p_reg->SHORTS = shorts_mask;
    9df4:	4c08      	ldr	r4, [pc, #32]	; (9e18 <standalone_cca_finish+0x28>)
    9df6:	2004      	movs	r0, #4
    9df8:	f001 f83c 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    9dfc:	2300      	movs	r3, #0
    9dfe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    fem_for_lna_reset();
    9e02:	f7ff ffe3 	bl	9dcc <fem_for_lna_reset>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_radio_int_disable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    9e06:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    9e0a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e0e:	2301      	movs	r3, #1
    9e10:	6323      	str	r3, [r4, #48]	; 0x30
    9e12:	6123      	str	r3, [r4, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_CCASTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    9e14:	bd10      	pop	{r4, pc}
    9e16:	bf00      	nop
    9e18:	40001000 	.word	0x40001000

00009e1c <energy_detection_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

static void energy_detection_finish(void)
{
    9e1c:	b508      	push	{r3, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
    9e1e:	2100      	movs	r1, #0
    9e20:	2004      	movs	r0, #4
    9e22:	f001 f827 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    fem_for_lna_reset();
    9e26:	f7ff ffd1 	bl	9dcc <fem_for_lna_reset>
    p_reg->INTENCLR = mask;
    9e2a:	4b06      	ldr	r3, [pc, #24]	; (9e44 <energy_detection_finish+0x28>)
    9e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    9e30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
    9e34:	2200      	movs	r2, #0
    9e36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e3a:	2201      	movs	r2, #1
    9e3c:	629a      	str	r2, [r3, #40]	; 0x28
    9e3e:	611a      	str	r2, [r3, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_EDSTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    9e40:	bd08      	pop	{r3, pc}
    9e42:	bf00      	nop
    9e44:	40001000 	.word	0x40001000

00009e48 <trigger_disable_to_start_rampup>:
{
    9e48:	b508      	push	{r3, lr}
    if (!nrf_802154_trx_ppi_for_ramp_up_was_triggered())
    9e4a:	f001 f841 	bl	aed0 <nrf_802154_trx_ppi_for_ramp_up_was_triggered>
    9e4e:	b910      	cbnz	r0, 9e56 <trigger_disable_to_start_rampup+0xe>
    9e50:	4b01      	ldr	r3, [pc, #4]	; (9e58 <trigger_disable_to_start_rampup+0x10>)
    9e52:	2201      	movs	r2, #1
    9e54:	611a      	str	r2, [r3, #16]
}
    9e56:	bd08      	pop	{r3, pc}
    9e58:	40001000 	.word	0x40001000

00009e5c <fem_for_tx_reset>:
{
    9e5c:	b510      	push	{r4, lr}
    9e5e:	4c09      	ldr	r4, [pc, #36]	; (9e84 <fem_for_tx_reset+0x28>)
    9e60:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    9e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9e68:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (cca)
    9e6c:	b108      	cbz	r0, 9e72 <fem_for_tx_reset+0x16>
        mpsl_fem_lna_configuration_clear();
    9e6e:	f7f9 fc95 	bl	379c <mpsl_fem_lna_configuration_clear>
        mpsl_fem_pa_configuration_clear();
    9e72:	f7f9 fc9f 	bl	37b4 <mpsl_fem_pa_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
    9e76:	f001 f873 	bl	af60 <nrf_802154_trx_ppi_for_fem_clear>
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
    9e7a:	f009 fb3d 	bl	134f8 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e7e:	2301      	movs	r3, #1
    9e80:	6123      	str	r3, [r4, #16]
}
    9e82:	bd10      	pop	{r4, pc}
    9e84:	40008000 	.word	0x40008000

00009e88 <txframe_finish>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}

static void txframe_finish(void)
{
    9e88:	b510      	push	{r4, lr}
     * If FEM is in use the PPI_EGU_TIMER_START might be triggered if radio reached DISABLED state,
     * so the TIMER may start counting from the value on which FEM activation finished. The TIMER's CC registers
     * are set in the past so even if TIMER started no spurious FEM PA activation will occur.
     * We need to disable PPI_EGU_TIMER_START and then shutdown TIMER as it is not used.
     */
    txframe_finish_disable_ppis(m_transmit_with_cca);
    9e8a:	4c09      	ldr	r4, [pc, #36]	; (9eb0 <txframe_finish+0x28>)
    9e8c:	7820      	ldrb	r0, [r4, #0]
    9e8e:	f009 fb16 	bl	134be <txframe_finish_disable_ppis>

    fem_for_tx_reset(m_transmit_with_cca);
    9e92:	7820      	ldrb	r0, [r4, #0]
    9e94:	f7ff ffe2 	bl	9e5c <fem_for_tx_reset>
    p_reg->INTENCLR = mask;
    9e98:	4a06      	ldr	r2, [pc, #24]	; (9eb4 <txframe_finish+0x2c>)
    9e9a:	4b07      	ldr	r3, [pc, #28]	; (9eb8 <txframe_finish+0x30>)
    9e9c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
    9ea0:	2300      	movs	r3, #0
    9ea2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    txframe_finish_disable_ints();

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);
#if NRF_802154_TX_STARTED_NOTIFY_ENABLED
    m_flags.tx_started = false;
    9ea6:	4a05      	ldr	r2, [pc, #20]	; (9ebc <txframe_finish+0x34>)
    9ea8:	7093      	strb	r3, [r2, #2]
#endif
    m_flags.missing_receive_buffer = false;
    9eaa:	7053      	strb	r3, [r2, #1]
     * All PPIs that were used are disabled (forks are cleared if used)
     * RADIO.SHORTS are cleared
     */

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    9eac:	bd10      	pop	{r4, pc}
    9eae:	bf00      	nop
    9eb0:	200036d7 	.word	0x200036d7
    9eb4:	40001000 	.word	0x40001000
    9eb8:	08060003 	.word	0x08060003
    9ebc:	200036d8 	.word	0x200036d8

00009ec0 <rxframe_finish>:
{
    9ec0:	b510      	push	{r4, lr}
                     RADIO_RSSISAMPLE_RSSISAMPLE_Pos);
}

NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get(NRF_RADIO_Type const * p_reg)
{
    return (nrf_radio_state_t) p_reg->STATE;
    9ec2:	4912      	ldr	r1, [pc, #72]	; (9f0c <rxframe_finish+0x4c>)
    9ec4:	2320      	movs	r3, #32
    9ec6:	f8d1 2550 	ldr.w	r2, [r1, #1360]	; 0x550
        if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_DISABLED)
    9eca:	b2d2      	uxtb	r2, r2
    9ecc:	b10a      	cbz	r2, 9ed2 <rxframe_finish+0x12>
    for (uint32_t i = 0; i < MAX_RXRAMPDOWN_CYCLES; i++)
    9ece:	3b01      	subs	r3, #1
    9ed0:	d1f9      	bne.n	9ec6 <rxframe_finish+0x6>
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
    9ed2:	f009 fb11 	bl	134f8 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    rxframe_finish_disable_ppis();
    9ed6:	f009 faf8 	bl	134ca <rxframe_finish_disable_ppis>
    mpsl_fem_lna_configuration_clear();
    9eda:	f7f9 fc5f 	bl	379c <mpsl_fem_lna_configuration_clear>
    p_reg->SHORTS &= ~(mask);
    9ede:	4a0c      	ldr	r2, [pc, #48]	; (9f10 <rxframe_finish+0x50>)
    p_reg->INTENCLR = mask;
    9ee0:	490a      	ldr	r1, [pc, #40]	; (9f0c <rxframe_finish+0x4c>)
    9ee2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    9ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    9eea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    m_flags.psdu_being_received = false;
    9eee:	4a09      	ldr	r2, [pc, #36]	; (9f14 <rxframe_finish+0x54>)
    9ef0:	2300      	movs	r3, #0
    9ef2:	f243 4002 	movw	r0, #13314	; 0x3402
    9ef6:	7013      	strb	r3, [r2, #0]
    9ef8:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
}

NRF_STATIC_INLINE void nrf_egu_int_disable(NRF_EGU_Type * p_reg, uint32_t mask)
{
    NRFX_ASSERT(p_reg);
    p_reg->INTENCLR = mask;
    9efc:	4806      	ldr	r0, [pc, #24]	; (9f18 <rxframe_finish+0x58>)
    9efe:	2408      	movs	r4, #8
    9f00:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
    9f04:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    m_flags.missing_receive_buffer = false;
    9f08:	7053      	strb	r3, [r2, #1]
}
    9f0a:	bd10      	pop	{r4, pc}
    9f0c:	40001000 	.word	0x40001000
    9f10:	40008000 	.word	0x40008000
    9f14:	200036d8 	.word	0x200036d8
    9f18:	40017000 	.word	0x40017000

00009f1c <fem_for_pa_set>:
{
    9f1c:	b508      	push	{r3, lr}
    (void)mpsl_fem_pa_gain_set(p_fem_gain_data);
    9f1e:	f7f9 fc55 	bl	37cc <mpsl_fem_pa_gain_set>
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0, NULL) == 0)
    9f22:	4808      	ldr	r0, [pc, #32]	; (9f44 <fem_for_pa_set+0x28>)
    9f24:	2100      	movs	r1, #0
    9f26:	f7f9 fc4b 	bl	37c0 <mpsl_fem_pa_configuration_set>
    9f2a:	b950      	cbnz	r0, 9f42 <fem_for_pa_set+0x26>
    p_reg->SHORTS |= mask;
    9f2c:	4a06      	ldr	r2, [pc, #24]	; (9f48 <fem_for_pa_set+0x2c>)
    9f2e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    9f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9f36:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    9f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_trx_ppi_for_fem_set();
    9f3e:	f000 bffd 	b.w	af3c <nrf_802154_trx_ppi_for_fem_set>
}
    9f42:	bd08      	pop	{r3, pc}
    9f44:	00014700 	.word	0x00014700
    9f48:	40008000 	.word	0x40008000

00009f4c <cca_configuration_update>:
{
    9f4c:	b513      	push	{r0, r1, r4, lr}
    nrf_802154_pib_cca_cfg_get(&cca_cfg);
    9f4e:	a801      	add	r0, sp, #4
    9f50:	f7ff fed2 	bl	9cf8 <nrf_802154_pib_cca_cfg_get>
    nrf_radio_cca_configure(NRF_RADIO,
    9f54:	f89d 0005 	ldrb.w	r0, [sp, #5]
    9f58:	f89d 4004 	ldrb.w	r4, [sp, #4]
    9f5c:	f009 fa97 	bl	1348e <nrf_802154_rssi_cca_ed_threshold_corrected_get>
                                               uint8_t              cca_corr_cnt)
{
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
                      ((uint32_t)cca_ed_threshold   << RADIO_CCACTRL_CCAEDTHRES_Pos) |
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
                      ((uint32_t)cca_corr_cnt       << RADIO_CCACTRL_CCACORRCNT_Pos));
    9f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
    9f64:	f89d 2006 	ldrb.w	r2, [sp, #6]
                      ((uint32_t)cca_corr_cnt       << RADIO_CCACTRL_CCACORRCNT_Pos));
    9f68:	061b      	lsls	r3, r3, #24
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
    9f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9f6e:	4323      	orrs	r3, r4
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
    9f70:	4a03      	ldr	r2, [pc, #12]	; (9f80 <cca_configuration_update+0x34>)
                      ((uint32_t)cca_corr_threshold << RADIO_CCACTRL_CCACORRTHRES_Pos) |
    9f72:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    p_reg->CCACTRL = (((uint32_t)cca_mode           << RADIO_CCACTRL_CCAMODE_Pos) |
    9f76:	f8c2 366c 	str.w	r3, [r2, #1644]	; 0x66c
}
    9f7a:	b002      	add	sp, #8
    9f7c:	bd10      	pop	{r4, pc}
    9f7e:	bf00      	nop
    9f80:	40001000 	.word	0x40001000

00009f84 <channel_set>:
    nrf_radio_frequency_set(NRF_RADIO, 2405U + 5U * (channel - 11U));
    9f84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9f88:	f600 102e 	addw	r0, r0, #2350	; 0x92e
    if (radio_frequency < 2400)
    9f8c:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
        delta = ((uint32_t)(radio_frequency - 2360)) |
    9f90:	bf38      	it	cc
    9f92:	f6a0 1038 	subwcc	r0, r0, #2360	; 0x938
    p_reg->FREQUENCY = delta;
    9f96:	4b04      	ldr	r3, [pc, #16]	; (9fa8 <channel_set+0x24>)
        delta = ((uint32_t)(radio_frequency - 2360)) |
    9f98:	bf34      	ite	cc
    9f9a:	f440 7080 	orrcc.w	r0, r0, #256	; 0x100
        delta = ((uint32_t)(radio_frequency - 2400)) |
    9f9e:	f5a0 6016 	subcs.w	r0, r0, #2400	; 0x960
    p_reg->FREQUENCY = delta;
    9fa2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    9fa6:	4770      	bx	lr
    9fa8:	40001000 	.word	0x40001000

00009fac <fem_for_lna_set>:
{
    9fac:	b508      	push	{r3, lr}
    if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, NULL) == 0)
    9fae:	4808      	ldr	r0, [pc, #32]	; (9fd0 <fem_for_lna_set+0x24>)
    9fb0:	2100      	movs	r1, #0
    9fb2:	f7f9 fbf9 	bl	37a8 <mpsl_fem_lna_configuration_set>
    9fb6:	b950      	cbnz	r0, 9fce <fem_for_lna_set+0x22>
    9fb8:	4a06      	ldr	r2, [pc, #24]	; (9fd4 <fem_for_lna_set+0x28>)
    9fba:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    9fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9fc2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    9fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_802154_trx_ppi_for_fem_set();
    9fca:	f000 bfb7 	b.w	af3c <nrf_802154_trx_ppi_for_fem_set>
}
    9fce:	bd08      	pop	{r3, pc}
    9fd0:	00014718 	.word	0x00014718
    9fd4:	40008000 	.word	0x40008000

00009fd8 <rxack_finish>:
{
    9fd8:	b510      	push	{r4, lr}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
    9fda:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    9fdc:	4c0d      	ldr	r4, [pc, #52]	; (a014 <rxack_finish+0x3c>)
    9fde:	2004      	movs	r0, #4
    9fe0:	f000 ff48 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    9fe4:	f243 0302 	movw	r3, #12290	; 0x3002
    9fe8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    mpsl_fem_lna_configuration_clear();
    9fec:	f7f9 fbd6 	bl	379c <mpsl_fem_lna_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
    9ff0:	f000 ffb6 	bl	af60 <nrf_802154_trx_ppi_for_fem_clear>
    p_reg->SHORTS &= ~(mask);
    9ff4:	4b08      	ldr	r3, [pc, #32]	; (a018 <rxack_finish+0x40>)
    9ff6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    9ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a002:	2201      	movs	r2, #1
    a004:	611a      	str	r2, [r3, #16]
    m_flags.missing_receive_buffer = false;
    a006:	4a05      	ldr	r2, [pc, #20]	; (a01c <rxack_finish+0x44>)
    p_reg->SHORTS = shorts_mask;
    a008:	2300      	movs	r3, #0
    a00a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    a00e:	7053      	strb	r3, [r2, #1]
}
    a010:	bd10      	pop	{r4, pc}
    a012:	bf00      	nop
    a014:	40001000 	.word	0x40001000
    a018:	40008000 	.word	0x40008000
    a01c:	200036d8 	.word	0x200036d8

0000a020 <rx_flags_clear>:
    m_flags.missing_receive_buffer = false;
    a020:	4b02      	ldr	r3, [pc, #8]	; (a02c <rx_flags_clear+0xc>)
    a022:	2200      	movs	r2, #0
    a024:	705a      	strb	r2, [r3, #1]
    m_flags.psdu_being_received = false;
    a026:	701a      	strb	r2, [r3, #0]
}
    a028:	4770      	bx	lr
    a02a:	bf00      	nop
    a02c:	200036d8 	.word	0x200036d8

0000a030 <nrf_timer_init>:
    a030:	4b09      	ldr	r3, [pc, #36]	; (a058 <nrf_timer_init+0x28>)
    a032:	2201      	movs	r2, #1
    a034:	611a      	str	r2, [r3, #16]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    a036:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    a03a:	f022 0203 	bic.w	r2, r2, #3
    a03e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    a042:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    a046:	f042 0203 	orr.w	r2, r2, #3
    a04a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PRESCALER = prescaler_factor;
    a04e:	2204      	movs	r2, #4
    a050:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    a054:	4770      	bx	lr
    a056:	bf00      	nop
    a058:	40008000 	.word	0x40008000

0000a05c <nrf_802154_trx_module_reset>:
    m_trx_state                      = TRX_STATE_DISABLED;
    a05c:	4b06      	ldr	r3, [pc, #24]	; (a078 <nrf_802154_trx_module_reset+0x1c>)
    memset(&m_flags, 0, sizeof(m_flags));
    a05e:	4807      	ldr	r0, [pc, #28]	; (a07c <nrf_802154_trx_module_reset+0x20>)
    m_trx_state                      = TRX_STATE_DISABLED;
    a060:	2100      	movs	r1, #0
    a062:	7019      	strb	r1, [r3, #0]
    m_timer_value_on_radio_end_event = 0;
    a064:	4b06      	ldr	r3, [pc, #24]	; (a080 <nrf_802154_trx_module_reset+0x24>)
    a066:	6019      	str	r1, [r3, #0]
    m_transmit_with_cca              = false;
    a068:	4b06      	ldr	r3, [pc, #24]	; (a084 <nrf_802154_trx_module_reset+0x28>)
    a06a:	7019      	strb	r1, [r3, #0]
    mp_receive_buffer                = NULL;
    a06c:	4b06      	ldr	r3, [pc, #24]	; (a088 <nrf_802154_trx_module_reset+0x2c>)
    memset(&m_flags, 0, sizeof(m_flags));
    a06e:	2205      	movs	r2, #5
    mp_receive_buffer                = NULL;
    a070:	6019      	str	r1, [r3, #0]
    memset(&m_flags, 0, sizeof(m_flags));
    a072:	f008 be36 	b.w	12ce2 <memset>
    a076:	bf00      	nop
    a078:	200036dd 	.word	0x200036dd
    a07c:	200036d8 	.word	0x200036d8
    a080:	20001ea4 	.word	0x20001ea4
    a084:	200036d7 	.word	0x200036d7
    a088:	20001ea0 	.word	0x20001ea0

0000a08c <nrf_802154_trx_enable>:
{
    a08c:	b530      	push	{r4, r5, lr}
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
    a08e:	4c42      	ldr	r4, [pc, #264]	; (a198 <nrf_802154_trx_enable+0x10c>)
    a090:	b085      	sub	sp, #20
    nrf_timer_init();
    a092:	f7ff ffcd 	bl	a030 <nrf_timer_init>
    a096:	2300      	movs	r3, #0
    a098:	f8c4 3ffc 	str.w	r3, [r4, #4092]	; 0xffc
    a09c:	2301      	movs	r3, #1
    a09e:	f8c4 3ffc 	str.w	r3, [r4, #4092]	; 0xffc
    if (mpsl_fem_device_config_254_apply_get())
    a0a2:	f7f9 fb9f 	bl	37e4 <mpsl_fem_device_config_254_apply_get>
    a0a6:	b1a0      	cbz	r0, a0d2 <nrf_802154_trx_enable+0x46>
    uint32_t ficr_reg1 = *(volatile uint32_t *)0x10000330UL;
    a0a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a0ac:	f8d3 0330 	ldr.w	r0, [r3, #816]	; 0x330
    uint32_t ficr_reg2 = *(volatile uint32_t *)0x10000334UL;
    a0b0:	f8d3 1334 	ldr.w	r1, [r3, #820]	; 0x334
    uint32_t ficr_reg3 = *(volatile uint32_t *)0x10000338UL;
    a0b4:	f8d3 2338 	ldr.w	r2, [r3, #824]	; 0x338
    if (ficr_reg1 != 0xffffffffUL)
    a0b8:	4b37      	ldr	r3, [pc, #220]	; (a198 <nrf_802154_trx_enable+0x10c>)
    a0ba:	1c45      	adds	r5, r0, #1
        *p_radio_reg1 = ficr_reg1;
    a0bc:	bf18      	it	ne
    a0be:	f8c4 074c 	strne.w	r0, [r4, #1868]	; 0x74c
    if (ficr_reg2 != 0xffffffffUL)
    a0c2:	1c48      	adds	r0, r1, #1
        *p_radio_reg2 = ficr_reg2;
    a0c4:	bf18      	it	ne
    a0c6:	f8c3 1584 	strne.w	r1, [r3, #1412]	; 0x584
    if (ficr_reg3 != 0xffffffffUL)
    a0ca:	1c51      	adds	r1, r2, #1
        *p_radio_reg3 = ficr_reg3;
    a0cc:	bf18      	it	ne
    a0ce:	f8c3 2588 	strne.w	r2, [r3, #1416]	; 0x588
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
    a0d2:	4d31      	ldr	r5, [pc, #196]	; (a198 <nrf_802154_trx_enable+0x10c>)
    a0d4:	230f      	movs	r3, #15
    memset(&packet_conf, 0, sizeof(packet_conf));
    a0d6:	2100      	movs	r1, #0
    a0d8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    a0dc:	220d      	movs	r2, #13
    a0de:	4668      	mov	r0, sp
    a0e0:	f008 fdff 	bl	12ce2 <memset>
    packet_conf.lflen  = 8;
    a0e4:	2308      	movs	r3, #8
    a0e6:	f88d 3000 	strb.w	r3, [sp]
    packet_conf.plen   = NRF_RADIO_PREAMBLE_LENGTH_32BIT_ZERO;
    a0ea:	2302      	movs	r3, #2
    a0ec:	f88d 3005 	strb.w	r3, [sp, #5]
    packet_conf.maxlen = MAX_PACKET_SIZE;
    a0f0:	237f      	movs	r3, #127	; 0x7f
    a0f2:	f88d 3008 	strb.w	r3, [sp, #8]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    a0f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    a0fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    a0fe:	075b      	lsls	r3, r3, #29
    a100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    a104:	f89d 2002 	ldrb.w	r2, [sp, #2]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    a108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                        (RADIO_PCNF0_S1INCL_Include   << RADIO_PCNF0_S1INCL_Pos) :
    a10c:	f89d 2003 	ldrb.w	r2, [sp, #3]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    a110:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    a114:	f89d 2004 	ldrb.w	r2, [sp, #4]
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    a118:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
    a11c:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
    packet_conf.crcinc = true;
    a120:	2401      	movs	r4, #1
    a122:	f043 0308 	orr.w	r3, r3, #8
    a126:	f88d 4006 	strb.w	r4, [sp, #6]
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    a12a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    a12e:	f89d 3009 	ldrb.w	r3, [sp, #9]
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
    a132:	f89d 200c 	ldrb.w	r2, [sp, #12]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    a136:	021b      	lsls	r3, r3, #8
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
    a138:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    a13c:	f89d 200a 	ldrb.w	r2, [sp, #10]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
    a140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
    a144:	f89d 200b 	ldrb.w	r2, [sp, #11]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
    a148:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    a14c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    a150:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    a154:	f240 2302 	movw	r3, #514	; 0x202
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    a158:	f8c5 4650 	str.w	r4, [r5, #1616]	; 0x650
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    a15c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    a160:	4b0e      	ldr	r3, [pc, #56]	; (a19c <nrf_802154_trx_enable+0x110>)
    a162:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    nrf_802154_trx_ppi_for_enable();
    a166:	f009 f9c5 	bl	134f4 <nrf_802154_trx_ppi_for_enable>
    cca_configuration_update();
    a16a:	f7ff feef 	bl	9f4c <cca_configuration_update>
    channel_set(nrf_802154_pib_channel_get());
    a16e:	f7ff fd93 	bl	9c98 <nrf_802154_pib_channel_get>
    a172:	f7ff ff07 	bl	9f84 <channel_set>
    nrf_802154_custom_part_of_radio_init();
    a176:	f009 f855 	bl	13224 <nrf_802154_custom_part_of_radio_init>
    nrf_802154_irq_enable(RADIO_IRQn);
    a17a:	4620      	mov	r0, r4
    a17c:	f009 f804 	bl	13188 <nrf_802154_irq_enable>
    mpsl_fem_abort_set(nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_DISABLED),
    a180:	4621      	mov	r1, r4
    a182:	4807      	ldr	r0, [pc, #28]	; (a1a0 <nrf_802154_trx_enable+0x114>)
    a184:	f7f9 faf8 	bl	3778 <mpsl_fem_abort_set>
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    a188:	2003      	movs	r0, #3
    a18a:	f7f9 fafb 	bl	3784 <mpsl_fem_deactivate_now>
    m_trx_state = TRX_STATE_IDLE;
    a18e:	4b05      	ldr	r3, [pc, #20]	; (a1a4 <nrf_802154_trx_enable+0x118>)
    a190:	701c      	strb	r4, [r3, #0]
}
    a192:	b005      	add	sp, #20
    a194:	bd30      	pop	{r4, r5, pc}
    a196:	bf00      	nop
    a198:	40001000 	.word	0x40001000
    a19c:	00011021 	.word	0x00011021
    a1a0:	40001110 	.word	0x40001110
    a1a4:	200036dd 	.word	0x200036dd

0000a1a8 <nrf_802154_trx_disable>:
{
    a1a8:	b510      	push	{r4, lr}
    if (m_trx_state != TRX_STATE_DISABLED)
    a1aa:	4c2c      	ldr	r4, [pc, #176]	; (a25c <nrf_802154_trx_disable+0xb4>)
    a1ac:	7823      	ldrb	r3, [r4, #0]
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d040      	beq.n	a234 <nrf_802154_trx_disable+0x8c>
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
    a1b2:	4b2b      	ldr	r3, [pc, #172]	; (a260 <nrf_802154_trx_disable+0xb8>)
    a1b4:	2200      	movs	r2, #0
    a1b6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
        nrf_802154_irq_clear_pending(RADIO_IRQn);
    a1ba:	2001      	movs	r0, #1
    a1bc:	f7fe f898 	bl	82f0 <nrf_802154_irq_clear_pending>
    switch (m_trx_state)
    a1c0:	7823      	ldrb	r3, [r4, #0]
    a1c2:	3b03      	subs	r3, #3
    a1c4:	2b08      	cmp	r3, #8
    a1c6:	d808      	bhi.n	a1da <nrf_802154_trx_disable+0x32>
    a1c8:	e8df f003 	tbb	[pc, r3]
    a1cc:	3a350705 	.word	0x3a350705
    a1d0:	44443541 	.word	0x44443541
    a1d4:	35          	.byte	0x35
    a1d5:	00          	.byte	0x00
            rxframe_finish_disable_ppis();
    a1d6:	f009 f978 	bl	134ca <rxframe_finish_disable_ppis>
    nrf_802154_trx_ppi_for_disable();
    a1da:	f009 f98c 	bl	134f6 <nrf_802154_trx_ppi_for_disable>
    a1de:	4b21      	ldr	r3, [pc, #132]	; (a264 <nrf_802154_trx_disable+0xbc>)
    a1e0:	2208      	movs	r2, #8
    a1e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    a1e6:	2200      	movs	r2, #0
    a1e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    a1ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    p_reg->SHORTS &= ~(mask);
    a1f0:	4b1d      	ldr	r3, [pc, #116]	; (a268 <nrf_802154_trx_disable+0xc0>)
    a1f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a1f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    a1fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a1fe:	2201      	movs	r2, #1
    a200:	611a      	str	r2, [r3, #16]
    a202:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
    a206:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
        mpsl_fem_lna_configuration_clear();
    a20a:	f7f9 fac7 	bl	379c <mpsl_fem_lna_configuration_clear>
        mpsl_fem_pa_configuration_clear();
    a20e:	f7f9 fad1 	bl	37b4 <mpsl_fem_pa_configuration_clear>
        mpsl_fem_abort_clear();
    a212:	f7f9 faab 	bl	376c <mpsl_fem_abort_clear>
        if (m_trx_state != TRX_STATE_IDLE)
    a216:	7823      	ldrb	r3, [r4, #0]
    a218:	2b01      	cmp	r3, #1
    a21a:	d004      	beq.n	a226 <nrf_802154_trx_disable+0x7e>
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    a21c:	2003      	movs	r0, #3
    a21e:	f7f9 fab1 	bl	3784 <mpsl_fem_deactivate_now>
    mpsl_fem_disable();
    a222:	f7f9 fab5 	bl	3790 <mpsl_fem_disable>
        m_flags.psdu_being_received = false;
    a226:	4a11      	ldr	r2, [pc, #68]	; (a26c <nrf_802154_trx_disable+0xc4>)
    a228:	2300      	movs	r3, #0
    a22a:	7013      	strb	r3, [r2, #0]
        m_flags.missing_receive_buffer = false;
    a22c:	7053      	strb	r3, [r2, #1]
        m_flags.rssi_started           = false;
    a22e:	70d3      	strb	r3, [r2, #3]
        m_flags.tx_started = false;
    a230:	7093      	strb	r3, [r2, #2]
        m_trx_state = TRX_STATE_DISABLED;
    a232:	7023      	strb	r3, [r4, #0]
}
    a234:	bd10      	pop	{r4, pc}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
    a236:	2100      	movs	r1, #0
    a238:	2004      	movs	r0, #4
            nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
    a23a:	f000 fe1b 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    a23e:	e003      	b.n	a248 <nrf_802154_trx_disable+0xa0>
            txframe_finish_disable_ppis(m_transmit_with_cca);
    a240:	4b0b      	ldr	r3, [pc, #44]	; (a270 <nrf_802154_trx_disable+0xc8>)
    a242:	7818      	ldrb	r0, [r3, #0]
    a244:	f009 f93b 	bl	134be <txframe_finish_disable_ppis>
            nrf_802154_trx_ppi_for_fem_clear();
    a248:	f000 fe8a 	bl	af60 <nrf_802154_trx_ppi_for_fem_clear>
            break;
    a24c:	e7c5      	b.n	a1da <nrf_802154_trx_disable+0x32>
            nrf_802154_trx_ppi_for_ack_tx_clear();
    a24e:	f000 fe67 	bl	af20 <nrf_802154_trx_ppi_for_ack_tx_clear>
            break;
    a252:	e7c2      	b.n	a1da <nrf_802154_trx_disable+0x32>
            nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
    a254:	2100      	movs	r1, #0
    a256:	4608      	mov	r0, r1
    a258:	e7ef      	b.n	a23a <nrf_802154_trx_disable+0x92>
    a25a:	bf00      	nop
    a25c:	200036dd 	.word	0x200036dd
    a260:	40001000 	.word	0x40001000
    a264:	40017000 	.word	0x40017000
    a268:	40008000 	.word	0x40008000
    a26c:	200036d8 	.word	0x200036d8
    a270:	200036d7 	.word	0x200036d7

0000a274 <nrf_802154_trx_antenna_update>:
{
    a274:	b538      	push	{r3, r4, r5, lr}
    switch (m_trx_state)
    a276:	4c1a      	ldr	r4, [pc, #104]	; (a2e0 <nrf_802154_trx_antenna_update+0x6c>)
    a278:	7823      	ldrb	r3, [r4, #0]
    a27a:	3b03      	subs	r3, #3
    a27c:	b2db      	uxtb	r3, r3
    a27e:	2b08      	cmp	r3, #8
    a280:	d810      	bhi.n	a2a4 <nrf_802154_trx_antenna_update+0x30>
    a282:	2001      	movs	r0, #1
    a284:	fa00 f303 	lsl.w	r3, r0, r3
    a288:	f013 05ec 	ands.w	r5, r3, #236	; 0xec
    a28c:	d122      	bne.n	a2d4 <nrf_802154_trx_antenna_update+0x60>
    a28e:	f240 1213 	movw	r2, #275	; 0x113
    a292:	4213      	tst	r3, r2
    a294:	d006      	beq.n	a2a4 <nrf_802154_trx_antenna_update+0x30>
    nrf_802154_sl_ant_div_mode_t mode   = nrf_802154_sl_ant_div_cfg_mode_get(
    a296:	4628      	mov	r0, r5
    a298:	f004 fe38 	bl	ef0c <nrf_802154_sl_ant_div_cfg_mode_get>
    switch (mode)
    a29c:	2801      	cmp	r0, #1
    a29e:	d002      	beq.n	a2a6 <nrf_802154_trx_antenna_update+0x32>
    a2a0:	2802      	cmp	r0, #2
    a2a2:	d007      	beq.n	a2b4 <nrf_802154_trx_antenna_update+0x40>
}
    a2a4:	bd38      	pop	{r3, r4, r5, pc}
            result = nrf_802154_sl_ant_div_antenna_set(
    a2a6:	4628      	mov	r0, r5
            result = nrf_802154_sl_ant_div_antenna_set(
    a2a8:	f004 fe3e 	bl	ef28 <nrf_802154_sl_ant_div_cfg_antenna_get>
}
    a2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            result = nrf_802154_sl_ant_div_antenna_set(
    a2b0:	f009 be25 	b.w	13efe <nrf_802154_sl_ant_div_antenna_set>
    switch (m_trx_state)
    a2b4:	7822      	ldrb	r2, [r4, #0]
    a2b6:	2a04      	cmp	r2, #4
    a2b8:	b2d3      	uxtb	r3, r2
    a2ba:	d805      	bhi.n	a2c8 <nrf_802154_trx_antenna_update+0x54>
    a2bc:	2b02      	cmp	r3, #2
    a2be:	d9f1      	bls.n	a2a4 <nrf_802154_trx_antenna_update+0x30>
}
    a2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_sl_ant_div_rx_started_notify();
    a2c4:	f004 bd22 	b.w	ed0c <nrf_802154_sl_ant_div_rx_started_notify>
    switch (m_trx_state)
    a2c8:	2b07      	cmp	r3, #7
    a2ca:	d1eb      	bne.n	a2a4 <nrf_802154_trx_antenna_update+0x30>
}
    a2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            nrf_802154_sl_ant_div_txack_notify();
    a2d0:	f004 be00 	b.w	eed4 <nrf_802154_sl_ant_div_txack_notify>
    nrf_802154_sl_ant_div_mode_t mode   = nrf_802154_sl_ant_div_cfg_mode_get(
    a2d4:	f004 fe1a 	bl	ef0c <nrf_802154_sl_ant_div_cfg_mode_get>
    switch (mode)
    a2d8:	2801      	cmp	r0, #1
    a2da:	d1e3      	bne.n	a2a4 <nrf_802154_trx_antenna_update+0x30>
    a2dc:	e7e4      	b.n	a2a8 <nrf_802154_trx_antenna_update+0x34>
    a2de:	bf00      	nop
    a2e0:	200036dd 	.word	0x200036dd

0000a2e4 <nrf_802154_trx_psdu_is_being_received>:
}
    a2e4:	4b01      	ldr	r3, [pc, #4]	; (a2ec <nrf_802154_trx_psdu_is_being_received+0x8>)
    a2e6:	7818      	ldrb	r0, [r3, #0]
    a2e8:	4770      	bx	lr
    a2ea:	bf00      	nop
    a2ec:	200036d8 	.word	0x200036d8

0000a2f0 <nrf_802154_trx_receive_is_buffer_missing>:
    switch (m_trx_state)
    a2f0:	4b05      	ldr	r3, [pc, #20]	; (a308 <nrf_802154_trx_receive_is_buffer_missing+0x18>)
    a2f2:	781b      	ldrb	r3, [r3, #0]
    a2f4:	2b03      	cmp	r3, #3
    a2f6:	b2da      	uxtb	r2, r3
    a2f8:	d001      	beq.n	a2fe <nrf_802154_trx_receive_is_buffer_missing+0xe>
    a2fa:	2a05      	cmp	r2, #5
    a2fc:	d102      	bne.n	a304 <nrf_802154_trx_receive_is_buffer_missing+0x14>
            return m_flags.missing_receive_buffer;
    a2fe:	4b03      	ldr	r3, [pc, #12]	; (a30c <nrf_802154_trx_receive_is_buffer_missing+0x1c>)
    a300:	7858      	ldrb	r0, [r3, #1]
    a302:	4770      	bx	lr
    switch (m_trx_state)
    a304:	2000      	movs	r0, #0
}
    a306:	4770      	bx	lr
    a308:	200036dd 	.word	0x200036dd
    a30c:	200036d8 	.word	0x200036d8

0000a310 <nrf_802154_trx_receive_buffer_set>:
    mp_receive_buffer = p_receive_buffer;
    a310:	4a10      	ldr	r2, [pc, #64]	; (a354 <nrf_802154_trx_receive_buffer_set+0x44>)
{
    a312:	b510      	push	{r4, lr}
    a314:	4603      	mov	r3, r0
    mp_receive_buffer = p_receive_buffer;
    a316:	6010      	str	r0, [r2, #0]
    if ((p_receive_buffer != NULL) && m_flags.missing_receive_buffer)
    a318:	b1c8      	cbz	r0, a34e <nrf_802154_trx_receive_buffer_set+0x3e>
    a31a:	4a0f      	ldr	r2, [pc, #60]	; (a358 <nrf_802154_trx_receive_buffer_set+0x48>)
    a31c:	7850      	ldrb	r0, [r2, #1]
    a31e:	b1b0      	cbz	r0, a34e <nrf_802154_trx_receive_buffer_set+0x3e>
    switch (m_trx_state)
    a320:	490e      	ldr	r1, [pc, #56]	; (a35c <nrf_802154_trx_receive_buffer_set+0x4c>)
    a322:	7809      	ldrb	r1, [r1, #0]
    a324:	2903      	cmp	r1, #3
    a326:	b2cc      	uxtb	r4, r1
    a328:	d012      	beq.n	a350 <nrf_802154_trx_receive_buffer_set+0x40>
    uint32_t shorts = SHORTS_IDLE;
    a32a:	2c05      	cmp	r4, #5
    a32c:	490c      	ldr	r1, [pc, #48]	; (a360 <nrf_802154_trx_receive_buffer_set+0x50>)
    a32e:	bf18      	it	ne
    a330:	2100      	movne	r1, #0
    m_flags.missing_receive_buffer = false;
    a332:	2400      	movs	r4, #0
    a334:	7054      	strb	r4, [r2, #1]
    p_reg->PACKETPTR = (uint32_t)p_packet;
    a336:	4a0b      	ldr	r2, [pc, #44]	; (a364 <nrf_802154_trx_receive_buffer_set+0x54>)
    a338:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
    a33c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    return (nrf_radio_state_t) p_reg->STATE;
    a340:	f8d2 3550 	ldr.w	r3, [r2, #1360]	; 0x550
    if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_RXIDLE)
    a344:	b2db      	uxtb	r3, r3
    a346:	2b02      	cmp	r3, #2
    a348:	d101      	bne.n	a34e <nrf_802154_trx_receive_buffer_set+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a34a:	2301      	movs	r3, #1
    a34c:	6093      	str	r3, [r2, #8]
}
    a34e:	bd10      	pop	{r4, pc}
    switch (m_trx_state)
    a350:	4905      	ldr	r1, [pc, #20]	; (a368 <nrf_802154_trx_receive_buffer_set+0x58>)
    a352:	e7ee      	b.n	a332 <nrf_802154_trx_receive_buffer_set+0x22>
    a354:	20001ea0 	.word	0x20001ea0
    a358:	200036d8 	.word	0x200036d8
    a35c:	200036dd 	.word	0x200036dd
    a360:	00080012 	.word	0x00080012
    a364:	40001000 	.word	0x40001000
    a368:	00080052 	.word	0x00080052

0000a36c <nrf_802154_trx_receive_frame>:
{
    a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a36e:	4b3d      	ldr	r3, [pc, #244]	; (a464 <nrf_802154_trx_receive_frame+0xf8>)
    a370:	2601      	movs	r6, #1
    a372:	611e      	str	r6, [r3, #16]
    m_trx_state = TRX_STATE_RXFRAME;
    a374:	4b3c      	ldr	r3, [pc, #240]	; (a468 <nrf_802154_trx_receive_frame+0xfc>)
{
    a376:	4615      	mov	r5, r2
    m_trx_state = TRX_STATE_RXFRAME;
    a378:	2203      	movs	r2, #3
    a37a:	701a      	strb	r2, [r3, #0]
    rx_flags_clear();
    a37c:	f7ff fe50 	bl	a020 <rx_flags_clear>
    m_flags.rssi_started = false;
    a380:	4a3a      	ldr	r2, [pc, #232]	; (a46c <nrf_802154_trx_receive_frame+0x100>)
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    a382:	4b3b      	ldr	r3, [pc, #236]	; (a470 <nrf_802154_trx_receive_frame+0x104>)
{
    a384:	4604      	mov	r4, r0
    m_flags.rssi_started = false;
    a386:	2000      	movs	r0, #0
    m_flags.rssi_settled = false;
    a388:	7110      	strb	r0, [r2, #4]
    m_flags.rssi_started = false;
    a38a:	70d0      	strb	r0, [r2, #3]
    a38c:	782f      	ldrb	r7, [r5, #0]
    a38e:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
    if (mp_receive_buffer != NULL)
    a392:	4f38      	ldr	r7, [pc, #224]	; (a474 <nrf_802154_trx_receive_frame+0x108>)
    a394:	f8d7 c000 	ldr.w	ip, [r7]
    a398:	f1bc 0f00 	cmp.w	ip, #0
    a39c:	d055      	beq.n	a44a <nrf_802154_trx_receive_frame+0xde>
        m_flags.missing_receive_buffer = false;
    a39e:	7050      	strb	r0, [r2, #1]
        nrf_radio_packetptr_set(NRF_RADIO, mp_receive_buffer);
    a3a0:	683a      	ldr	r2, [r7, #0]
    p_reg->PACKETPTR = (uint32_t)p_packet;
    a3a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        shorts |= SHORTS_RX_FREE_BUFFER;
    a3a6:	4a34      	ldr	r2, [pc, #208]	; (a478 <nrf_802154_trx_receive_frame+0x10c>)
    p_reg->SHORTS = shorts_mask;
    a3a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    nrf_radio_bcc_set(NRF_RADIO, bcc * 8U);
    a3ac:	00e4      	lsls	r4, r4, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a3ae:	2200      	movs	r2, #0
    p_reg->BCC = radio_bcc;
    a3b0:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a3b4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    a3b8:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
    a3bc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    a3c0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
    a3c4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    a3c8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    if ((notifications_mask & TRX_RECEIVE_NOTIFICATION_STARTED) != 0U)
    a3cc:	0788      	lsls	r0, r1, #30
    a3ce:	bf43      	ittte	mi
    a3d0:	f8c3 2104 	strmi.w	r2, [r3, #260]	; 0x104
    a3d4:	f8d3 3104 	ldrmi.w	r3, [r3, #260]	; 0x104
        ints_to_enable |= NRF_RADIO_INT_ADDRESS_MASK;
    a3d8:	f243 4402 	movwmi	r4, #13314	; 0x3402
    ints_to_enable |= NRF_RADIO_INT_CRCOK_MASK;
    a3dc:	f44f 5450 	movpl.w	r4, #13312	; 0x3400
    if (((notifications_mask & TRX_RECEIVE_NOTIFICATION_PRESTARTED) != 0U) ||
    a3e0:	f011 0001 	ands.w	r0, r1, #1
    a3e4:	d034      	beq.n	a450 <nrf_802154_trx_receive_frame+0xe4>
        nrf_802154_trx_ppi_for_radio_sync_set(EGU_SYNC_TASK);
    a3e6:	200c      	movs	r0, #12
    a3e8:	f000 fdc8 	bl	af7c <nrf_802154_trx_ppi_for_radio_sync_set>
    a3ec:	4b20      	ldr	r3, [pc, #128]	; (a470 <nrf_802154_trx_receive_frame+0x104>)
    a3ee:	2200      	movs	r2, #0
    a3f0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    a3f4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
    a3f8:	4b20      	ldr	r3, [pc, #128]	; (a47c <nrf_802154_trx_receive_frame+0x110>)
    a3fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    a3fe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    p_reg->INTENSET = mask;
    a402:	2208      	movs	r2, #8
    a404:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    p_reg->INTENSET = mask;
    a408:	4b19      	ldr	r3, [pc, #100]	; (a470 <nrf_802154_trx_receive_frame+0x104>)
    if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, NULL) == 0)
    a40a:	481d      	ldr	r0, [pc, #116]	; (a480 <nrf_802154_trx_receive_frame+0x114>)
    a40c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    a410:	2100      	movs	r1, #0
    a412:	f7f9 f9c9 	bl	37a8 <mpsl_fem_lna_configuration_set>
    a416:	4b13      	ldr	r3, [pc, #76]	; (a464 <nrf_802154_trx_receive_frame+0xf8>)
    a418:	b9f8      	cbnz	r0, a45a <nrf_802154_trx_receive_frame+0xee>
    return (uint32_t)p_reg->CC[cc_channel];
    a41a:	f8d3 4540 	ldr.w	r4, [r3, #1344]	; 0x540
    mpsl_fem_pa_gain_set(&p_ack_tx_power->fem);
    a41e:	1c68      	adds	r0, r5, #1
    a420:	f7f9 f9d4 	bl	37cc <mpsl_fem_pa_gain_set>
    m_timer_value_on_radio_end_event = delta_time;
    a424:	4b17      	ldr	r3, [pc, #92]	; (a484 <nrf_802154_trx_receive_frame+0x118>)
    a426:	601c      	str	r4, [r3, #0]
    nrf_802154_trx_antenna_update();
    a428:	f7ff ff24 	bl	a274 <nrf_802154_trx_antenna_update>
    p_reg->SHORTS |= mask;
    a42c:	4a0d      	ldr	r2, [pc, #52]	; (a464 <nrf_802154_trx_receive_frame+0xf8>)
    a42e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a436:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, true);
    a43a:	2101      	movs	r1, #1
    a43c:	2004      	movs	r0, #4
    a43e:	f000 fcd3 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    a442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    trigger_disable_to_start_rampup();
    a446:	f7ff bcff 	b.w	9e48 <trigger_disable_to_start_rampup>
        m_flags.missing_receive_buffer = true;
    a44a:	7056      	strb	r6, [r2, #1]
    uint32_t shorts         = SHORTS_RX;
    a44c:	2252      	movs	r2, #82	; 0x52
    a44e:	e7ab      	b.n	a3a8 <nrf_802154_trx_receive_frame+0x3c>
         nrf_802154_sl_ant_div_cfg_mode_get(NRF_802154_SL_ANT_DIV_OP_RX)))
    a450:	f004 fd5c 	bl	ef0c <nrf_802154_sl_ant_div_cfg_mode_get>
    if (((notifications_mask & TRX_RECEIVE_NOTIFICATION_PRESTARTED) != 0U) ||
    a454:	2800      	cmp	r0, #0
    a456:	d1c6      	bne.n	a3e6 <nrf_802154_trx_receive_frame+0x7a>
    a458:	e7d6      	b.n	a408 <nrf_802154_trx_receive_frame+0x9c>
    p_reg->CC[cc_channel] = cc_value;
    a45a:	2401      	movs	r4, #1
    a45c:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
}
    a460:	e7dd      	b.n	a41e <nrf_802154_trx_receive_frame+0xb2>
    a462:	bf00      	nop
    a464:	40008000 	.word	0x40008000
    a468:	200036dd 	.word	0x200036dd
    a46c:	200036d8 	.word	0x200036d8
    a470:	40001000 	.word	0x40001000
    a474:	20001ea0 	.word	0x20001ea0
    a478:	00080052 	.word	0x00080052
    a47c:	40017000 	.word	0x40017000
    a480:	00014718 	.word	0x00014718
    a484:	20001ea4 	.word	0x20001ea4

0000a488 <nrf_802154_trx_receive_ack>:
{
    a488:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_RXACK;
    a48a:	4b18      	ldr	r3, [pc, #96]	; (a4ec <nrf_802154_trx_receive_ack+0x64>)
    if (mp_receive_buffer != NULL)
    a48c:	4918      	ldr	r1, [pc, #96]	; (a4f0 <nrf_802154_trx_receive_ack+0x68>)
    m_trx_state = TRX_STATE_RXACK;
    a48e:	2205      	movs	r2, #5
    a490:	701a      	strb	r2, [r3, #0]
    if (mp_receive_buffer != NULL)
    a492:	6808      	ldr	r0, [r1, #0]
    a494:	4a17      	ldr	r2, [pc, #92]	; (a4f4 <nrf_802154_trx_receive_ack+0x6c>)
    a496:	4b18      	ldr	r3, [pc, #96]	; (a4f8 <nrf_802154_trx_receive_ack+0x70>)
    a498:	b320      	cbz	r0, a4e4 <nrf_802154_trx_receive_ack+0x5c>
        m_flags.missing_receive_buffer = false;
    a49a:	2000      	movs	r0, #0
    a49c:	7050      	strb	r0, [r2, #1]
        nrf_radio_packetptr_set(NRF_RADIO, mp_receive_buffer);
    a49e:	680a      	ldr	r2, [r1, #0]
    p_reg->PACKETPTR = (uint32_t)p_packet;
    a4a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        shorts |= SHORTS_RX_FREE_BUFFER;
    a4a4:	4a15      	ldr	r2, [pc, #84]	; (a4fc <nrf_802154_trx_receive_ack+0x74>)
    p_reg->SHORTS = shorts_mask;
    a4a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a4aa:	2400      	movs	r4, #0
    a4ac:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    a4b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a4b4:	f8c3 4130 	str.w	r4, [r3, #304]	; 0x130
    a4b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    a4bc:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
    a4c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
    p_reg->INTENSET = mask;
    a4c4:	f243 0202 	movw	r2, #12290	; 0x3002
    a4c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
    a4cc:	f7ff fd6e 	bl	9fac <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
    a4d0:	f7ff fed0 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
    a4d4:	4621      	mov	r1, r4
    a4d6:	2004      	movs	r0, #4
    a4d8:	f000 fc86 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    a4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
    a4e0:	f7ff bcb2 	b.w	9e48 <trigger_disable_to_start_rampup>
        m_flags.missing_receive_buffer = true;
    a4e4:	2101      	movs	r1, #1
    a4e6:	7051      	strb	r1, [r2, #1]
    uint32_t shorts         = SHORTS_RX_ACK;
    a4e8:	2212      	movs	r2, #18
    a4ea:	e7dc      	b.n	a4a6 <nrf_802154_trx_receive_ack+0x1e>
    a4ec:	200036dd 	.word	0x200036dd
    a4f0:	20001ea0 	.word	0x20001ea0
    a4f4:	200036d8 	.word	0x200036d8
    a4f8:	40001000 	.word	0x40001000
    a4fc:	00080012 	.word	0x00080012

0000a500 <nrf_802154_trx_rssi_measure>:
{
    a500:	b538      	push	{r3, r4, r5, lr}
    if (m_trx_state == TRX_STATE_RXFRAME)
    a502:	4b10      	ldr	r3, [pc, #64]	; (a544 <nrf_802154_trx_rssi_measure+0x44>)
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	2b03      	cmp	r3, #3
    a508:	d11a      	bne.n	a540 <nrf_802154_trx_rssi_measure+0x40>
    return (nrf_radio_state_t) p_reg->STATE;
    a50a:	4c0f      	ldr	r4, [pc, #60]	; (a548 <nrf_802154_trx_rssi_measure+0x48>)
    a50c:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
        if ((radio_state == RADIO_STATE_STATE_RxIdle) || (radio_state == RADIO_STATE_STATE_Rx))
    a510:	3b02      	subs	r3, #2
    a512:	b2db      	uxtb	r3, r3
    a514:	2b01      	cmp	r3, #1
    a516:	d813      	bhi.n	a540 <nrf_802154_trx_rssi_measure+0x40>
            if (!m_flags.rssi_settled)
    a518:	4d0c      	ldr	r5, [pc, #48]	; (a54c <nrf_802154_trx_rssi_measure+0x4c>)
    a51a:	792b      	ldrb	r3, [r5, #4]
    a51c:	b93b      	cbnz	r3, a52e <nrf_802154_trx_rssi_measure+0x2e>
    a51e:	4b0c      	ldr	r3, [pc, #48]	; (a550 <nrf_802154_trx_rssi_measure+0x50>)
    a520:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    a524:	f043 0301 	orr.w	r3, r3, #1
    a528:	4798      	blx	r3
                m_flags.rssi_settled = true;
    a52a:	2301      	movs	r3, #1
    a52c:	712b      	strb	r3, [r5, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a52e:	2300      	movs	r3, #0
    a530:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a534:	2001      	movs	r0, #1
    a536:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    a53a:	6160      	str	r0, [r4, #20]
            m_flags.rssi_started = true;
    a53c:	70e8      	strb	r0, [r5, #3]
}
    a53e:	bd38      	pop	{r3, r4, r5, pc}
    bool result = false;
    a540:	2000      	movs	r0, #0
    a542:	e7fc      	b.n	a53e <nrf_802154_trx_rssi_measure+0x3e>
    a544:	200036dd 	.word	0x200036dd
    a548:	40001000 	.word	0x40001000
    a54c:	200036d8 	.word	0x200036d8
    a550:	00014480 	.word	0x00014480

0000a554 <nrf_802154_trx_rssi_measure_is_started>:
}
    a554:	4b01      	ldr	r3, [pc, #4]	; (a55c <nrf_802154_trx_rssi_measure_is_started+0x8>)
    a556:	78d8      	ldrb	r0, [r3, #3]
    a558:	4770      	bx	lr
    a55a:	bf00      	nop
    a55c:	200036d8 	.word	0x200036d8

0000a560 <nrf_802154_trx_rssi_last_sample_get>:
    return (uint8_t)((p_reg->RSSISAMPLE & RADIO_RSSISAMPLE_RSSISAMPLE_Msk) >>
    a560:	4b02      	ldr	r3, [pc, #8]	; (a56c <nrf_802154_trx_rssi_last_sample_get+0xc>)
    a562:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    a566:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    a56a:	4770      	bx	lr
    a56c:	40001000 	.word	0x40001000

0000a570 <nrf_802154_trx_rssi_sample_is_available>:
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    a570:	4b03      	ldr	r3, [pc, #12]	; (a580 <nrf_802154_trx_rssi_sample_is_available+0x10>)
    a572:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    a576:	3800      	subs	r0, #0
    a578:	bf18      	it	ne
    a57a:	2001      	movne	r0, #1
    a57c:	4770      	bx	lr
    a57e:	bf00      	nop
    a580:	40001000 	.word	0x40001000

0000a584 <nrf_802154_trx_transmit_frame>:
{
    a584:	b538      	push	{r3, r4, r5, lr}
    a586:	460d      	mov	r5, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a588:	493f      	ldr	r1, [pc, #252]	; (a688 <nrf_802154_trx_transmit_frame+0x104>)
    a58a:	2401      	movs	r4, #1
    a58c:	610c      	str	r4, [r1, #16]
    m_trx_state         = TRX_STATE_TXFRAME;
    a58e:	493f      	ldr	r1, [pc, #252]	; (a68c <nrf_802154_trx_transmit_frame+0x108>)
    a590:	2406      	movs	r4, #6
    a592:	700c      	strb	r4, [r1, #0]
    m_transmit_with_cca = cca;
    a594:	493e      	ldr	r1, [pc, #248]	; (a690 <nrf_802154_trx_transmit_frame+0x10c>)
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    a596:	4c3f      	ldr	r4, [pc, #252]	; (a694 <nrf_802154_trx_transmit_frame+0x110>)
    a598:	700d      	strb	r5, [r1, #0]
    a59a:	7811      	ldrb	r1, [r2, #0]
    a59c:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    p_reg->PACKETPTR = (uint32_t)p_packet;
    a5a0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    if (cca)
    a5a4:	b1cd      	cbz	r5, a5da <nrf_802154_trx_transmit_frame+0x56>
    p_reg->SHORTS = shorts_mask;
    a5a6:	493c      	ldr	r1, [pc, #240]	; (a698 <nrf_802154_trx_transmit_frame+0x114>)
    a5a8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5ac:	2100      	movs	r1, #0
    a5ae:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
    a5b2:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    a5b6:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    a5ba:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
        if ((notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCAIDLE) != 0U)
    a5be:	0798      	lsls	r0, r3, #30
    a5c0:	d438      	bmi.n	a634 <nrf_802154_trx_transmit_frame+0xb0>
        ints_to_enable |= NRF_RADIO_INT_CCABUSY_MASK;
    a5c2:	4936      	ldr	r1, [pc, #216]	; (a69c <nrf_802154_trx_transmit_frame+0x118>)
        if ((notifications_mask & TRX_TRANSMIT_NOTIFICATION_CCASTARTED) != 0U)
    a5c4:	075b      	lsls	r3, r3, #29
    a5c6:	d512      	bpl.n	a5ee <nrf_802154_trx_transmit_frame+0x6a>
    a5c8:	4b32      	ldr	r3, [pc, #200]	; (a694 <nrf_802154_trx_transmit_frame+0x110>)
    a5ca:	2000      	movs	r0, #0
    a5cc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    a5d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
            ints_to_enable |= NRF_RADIO_INT_READY_MASK;
    a5d4:	f041 0101 	orr.w	r1, r1, #1
    a5d8:	e009      	b.n	a5ee <nrf_802154_trx_transmit_frame+0x6a>
    p_reg->SHORTS = shorts_mask;
    a5da:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
    a5de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5e2:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    a5e6:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
    ints_to_enable |= NRF_RADIO_INT_PHYEND_MASK;
    a5ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    a5ee:	4b29      	ldr	r3, [pc, #164]	; (a694 <nrf_802154_trx_transmit_frame+0x110>)
    a5f0:	2400      	movs	r4, #0
    a5f2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    a5f6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    m_flags.tx_started = false;
    a5fa:	4829      	ldr	r0, [pc, #164]	; (a6a0 <nrf_802154_trx_transmit_frame+0x11c>)
    ints_to_enable    |= NRF_RADIO_INT_ADDRESS_MASK;
    a5fc:	f041 0102 	orr.w	r1, r1, #2
    m_flags.tx_started = false;
    a600:	7084      	strb	r4, [r0, #2]
    p_reg->INTENSET = mask;
    a602:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    (void)mpsl_fem_pa_gain_set(p_fem_gain_data);
    a606:	1c50      	adds	r0, r2, #1
    a608:	f7f9 f8e0 	bl	37cc <mpsl_fem_pa_gain_set>
    if (cca)
    a60c:	b345      	cbz	r5, a660 <nrf_802154_trx_transmit_frame+0xdc>
        if (mpsl_fem_lna_configuration_set(&m_activate_rx_cc0, &m_ccaidle) == 0)
    a60e:	4925      	ldr	r1, [pc, #148]	; (a6a4 <nrf_802154_trx_transmit_frame+0x120>)
    a610:	4825      	ldr	r0, [pc, #148]	; (a6a8 <nrf_802154_trx_transmit_frame+0x124>)
    a612:	f7f9 f8c9 	bl	37a8 <mpsl_fem_lna_configuration_set>
    a616:	4601      	mov	r1, r0
    a618:	b990      	cbnz	r0, a640 <nrf_802154_trx_transmit_frame+0xbc>
        if (mpsl_fem_pa_configuration_set(&m_ccaidle, NULL) == 0)
    a61a:	4822      	ldr	r0, [pc, #136]	; (a6a4 <nrf_802154_trx_transmit_frame+0x120>)
    a61c:	f7f9 f8d0 	bl	37c0 <mpsl_fem_pa_configuration_set>
    p_reg->SHORTS |= mask;
    a620:	4a19      	ldr	r2, [pc, #100]	; (a688 <nrf_802154_trx_transmit_frame+0x104>)
    a622:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a62a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
        nrf_802154_trx_ppi_for_fem_set();
    a62e:	f000 fc85 	bl	af3c <nrf_802154_trx_ppi_for_fem_set>
    nrf_802154_trx_antenna_update();
    a632:	e00b      	b.n	a64c <nrf_802154_trx_transmit_frame+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a634:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
    a638:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
            ints_to_enable |= NRF_RADIO_INT_CCAIDLE_MASK;
    a63c:	491b      	ldr	r1, [pc, #108]	; (a6ac <nrf_802154_trx_transmit_frame+0x128>)
    a63e:	e7c1      	b.n	a5c4 <nrf_802154_trx_transmit_frame+0x40>
        if (mpsl_fem_pa_configuration_set(&m_ccaidle, NULL) == 0)
    a640:	4818      	ldr	r0, [pc, #96]	; (a6a4 <nrf_802154_trx_transmit_frame+0x120>)
    a642:	4621      	mov	r1, r4
    a644:	f7f9 f8bc 	bl	37c0 <mpsl_fem_pa_configuration_set>
    a648:	2800      	cmp	r0, #0
    a64a:	d0e9      	beq.n	a620 <nrf_802154_trx_transmit_frame+0x9c>
    nrf_802154_trx_antenna_update();
    a64c:	f7ff fe12 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
    a650:	2004      	movs	r0, #4
    a652:	2100      	movs	r1, #0
    a654:	f000 fbc8 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    a658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    trigger_disable_to_start_rampup();
    a65c:	f7ff bbf4 	b.w	9e48 <trigger_disable_to_start_rampup>
        success = (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0, NULL) == 0);
    a660:	4813      	ldr	r0, [pc, #76]	; (a6b0 <nrf_802154_trx_transmit_frame+0x12c>)
    a662:	4629      	mov	r1, r5
    a664:	f7f9 f8ac 	bl	37c0 <mpsl_fem_pa_configuration_set>
    if (success)
    a668:	b118      	cbz	r0, a672 <nrf_802154_trx_transmit_frame+0xee>
    nrf_802154_trx_antenna_update();
    a66a:	f7ff fe03 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
    a66e:	2000      	movs	r0, #0
    a670:	e7ef      	b.n	a652 <nrf_802154_trx_transmit_frame+0xce>
    a672:	4a05      	ldr	r2, [pc, #20]	; (a688 <nrf_802154_trx_transmit_frame+0x104>)
    a674:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a67c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
        nrf_802154_trx_ppi_for_fem_set();
    a680:	f000 fc5c 	bl	af3c <nrf_802154_trx_ppi_for_fem_set>
    a684:	e7f1      	b.n	a66a <nrf_802154_trx_transmit_frame+0xe6>
    a686:	bf00      	nop
    a688:	40008000 	.word	0x40008000
    a68c:	200036dd 	.word	0x200036dd
    a690:	200036d7 	.word	0x200036d7
    a694:	40001000 	.word	0x40001000
    a698:	00143800 	.word	0x00143800
    a69c:	08040000 	.word	0x08040000
    a6a0:	200036d8 	.word	0x200036d8
    a6a4:	000146e8 	.word	0x000146e8
    a6a8:	00014718 	.word	0x00014718
    a6ac:	08060000 	.word	0x08060000
    a6b0:	00014700 	.word	0x00014700

0000a6b4 <nrf_802154_trx_transmit_ack>:
    m_trx_state = TRX_STATE_TXACK;
    a6b4:	4b36      	ldr	r3, [pc, #216]	; (a790 <nrf_802154_trx_transmit_ack+0xdc>)
    a6b6:	2207      	movs	r2, #7
    if (delay_us <= TXRU_TIME + EVENT_LAT)
    a6b8:	293f      	cmp	r1, #63	; 0x3f
{
    a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6be:	4d35      	ldr	r5, [pc, #212]	; (a794 <nrf_802154_trx_transmit_ack+0xe0>)
    m_trx_state = TRX_STATE_TXACK;
    a6c0:	701a      	strb	r2, [r3, #0]
    if (delay_us <= TXRU_TIME + EVENT_LAT)
    a6c2:	d804      	bhi.n	a6ce <nrf_802154_trx_transmit_ack+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6c4:	2301      	movs	r3, #1
    a6c6:	612b      	str	r3, [r5, #16]
        return result;
    a6c8:	2000      	movs	r0, #0
}
    a6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t timer_cc_ramp_up_start = m_timer_value_on_radio_end_event + delay_us - TXRU_TIME -
    a6ce:	4b32      	ldr	r3, [pc, #200]	; (a798 <nrf_802154_trx_transmit_ack+0xe4>)
    p_reg->PACKETPTR = (uint32_t)p_packet;
    a6d0:	4c32      	ldr	r4, [pc, #200]	; (a79c <nrf_802154_trx_transmit_ack+0xe8>)
    a6d2:	681e      	ldr	r6, [r3, #0]
    a6d4:	440e      	add	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6d6:	f04f 0800 	mov.w	r8, #0
    a6da:	f1a6 073f 	sub.w	r7, r6, #63	; 0x3f
    p_reg->SHORTS = shorts_mask;
    a6de:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
    p_reg->CC[cc_channel] = cc_value;
    a6e2:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->PACKETPTR = (uint32_t)p_packet;
    a6e6:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
    a6ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6ee:	f8c4 8154 	str.w	r8, [r4, #340]	; 0x154
    a6f2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
    a6f6:	4b2a      	ldr	r3, [pc, #168]	; (a7a0 <nrf_802154_trx_transmit_ack+0xec>)
    a6f8:	2218      	movs	r2, #24
    a6fa:	4618      	mov	r0, r3
    a6fc:	4641      	mov	r1, r8
    a6fe:	f008 faf0 	bl	12ce2 <memset>
    m_activate_tx_cc0_timeshifted.event.timer.counter_period.end = timer_cc_ramp_up_start +
    a702:	3e17      	subs	r6, #23
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
    a704:	2205      	movs	r2, #5
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0_timeshifted, NULL) == 0)
    a706:	4641      	mov	r1, r8
    m_activate_tx_cc0_timeshifted = m_activate_tx_cc0;
    a708:	6045      	str	r5, [r0, #4]
    a70a:	7402      	strb	r2, [r0, #16]
    m_activate_tx_cc0_timeshifted.event.timer.counter_period.end = timer_cc_ramp_up_start +
    a70c:	60c6      	str	r6, [r0, #12]
    if (mpsl_fem_pa_configuration_set(&m_activate_tx_cc0_timeshifted, NULL) == 0)
    a70e:	f7f9 f857 	bl	37c0 <mpsl_fem_pa_configuration_set>
    p_reg->SHORTS |= mask;
    a712:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    a716:	bb98      	cbnz	r0, a780 <nrf_802154_trx_transmit_ack+0xcc>
    a718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a71c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    nrf_802154_trx_antenna_update();
    a720:	f7ff fda8 	bl	a274 <nrf_802154_trx_antenna_update>
    a724:	2300      	movs	r3, #0
    a726:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    a72a:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
    a72e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    a732:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    nrf_802154_trx_ppi_for_ack_tx_set();
    a736:	4c19      	ldr	r4, [pc, #100]	; (a79c <nrf_802154_trx_transmit_ack+0xe8>)
    a738:	f000 fbe0 	bl	aefc <nrf_802154_trx_ppi_for_ack_tx_set>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a73c:	4b15      	ldr	r3, [pc, #84]	; (a794 <nrf_802154_trx_transmit_ack+0xe0>)
    a73e:	2201      	movs	r2, #1
    a740:	64da      	str	r2, [r3, #76]	; 0x4c
    return (uint32_t)p_reg->CC[cc_channel];
    a742:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    a746:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
    if ((timer_cc_now < timer_cc_ramp_up_start) &&
    a74a:	4297      	cmp	r7, r2
    a74c:	d903      	bls.n	a756 <nrf_802154_trx_transmit_ack+0xa2>
    a74e:	429f      	cmp	r7, r3
    a750:	d919      	bls.n	a786 <nrf_802154_trx_transmit_ack+0xd2>
        ((timer_cc_fem_start >= timer_cc_ramp_up_start) || (timer_cc_now > timer_cc_fem_start)))
    a752:	4293      	cmp	r3, r2
    a754:	d317      	bcc.n	a786 <nrf_802154_trx_transmit_ack+0xd2>
        nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
    a756:	f008 fecf 	bl	134f8 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    return (nrf_radio_state_t) p_reg->STATE;
    a75a:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
        if (nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_TXRU)
    a75e:	b2db      	uxtb	r3, r3
    a760:	2b09      	cmp	r3, #9
    a762:	d010      	beq.n	a786 <nrf_802154_trx_transmit_ack+0xd2>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    a764:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
        else if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_TXREADY))
    a768:	b96b      	cbnz	r3, a786 <nrf_802154_trx_transmit_ack+0xd2>
        nrf_802154_trx_ppi_for_ack_tx_clear();
    a76a:	f000 fbd9 	bl	af20 <nrf_802154_trx_ppi_for_ack_tx_clear>
        mpsl_fem_pa_configuration_clear();
    a76e:	f7f9 f821 	bl	37b4 <mpsl_fem_pa_configuration_clear>
        mpsl_fem_deactivate_now(MPSL_FEM_PA);
    a772:	2001      	movs	r0, #1
    a774:	f7f9 f806 	bl	3784 <mpsl_fem_deactivate_now>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a778:	4b06      	ldr	r3, [pc, #24]	; (a794 <nrf_802154_trx_transmit_ack+0xe0>)
    a77a:	2201      	movs	r2, #1
    a77c:	611a      	str	r2, [r3, #16]
}
    a77e:	e7a3      	b.n	a6c8 <nrf_802154_trx_transmit_ack+0x14>
    p_reg->SHORTS |= mask;
    a780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a784:	e7ca      	b.n	a71c <nrf_802154_trx_transmit_ack+0x68>
    p_reg->INTENSET = mask;
    a786:	4b07      	ldr	r3, [pc, #28]	; (a7a4 <nrf_802154_trx_transmit_ack+0xf0>)
    a788:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    a78c:	2001      	movs	r0, #1
    a78e:	e79c      	b.n	a6ca <nrf_802154_trx_transmit_ack+0x16>
    a790:	200036dd 	.word	0x200036dd
    a794:	40008000 	.word	0x40008000
    a798:	20001ea4 	.word	0x20001ea4
    a79c:	40001000 	.word	0x40001000
    a7a0:	20001ea8 	.word	0x20001ea8
    a7a4:	08000002 	.word	0x08000002

0000a7a8 <nrf_802154_trx_abort>:
{
    a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (m_trx_state)
    a7aa:	4c53      	ldr	r4, [pc, #332]	; (a8f8 <nrf_802154_trx_abort+0x150>)
    a7ac:	7823      	ldrb	r3, [r4, #0]
    a7ae:	3b02      	subs	r3, #2
    a7b0:	2b09      	cmp	r3, #9
    a7b2:	d80c      	bhi.n	a7ce <nrf_802154_trx_abort+0x26>
    a7b4:	e8df f003 	tbb	[pc, r3]
    a7b8:	2e2a0c05 	.word	0x2e2a0c05
    a7bc:	78755f4a 	.word	0x78755f4a
    a7c0:	9d89      	.short	0x9d89
    p_reg->INTENCLR = mask;
    a7c2:	4b4e      	ldr	r3, [pc, #312]	; (a8fc <nrf_802154_trx_abort+0x154>)
    a7c4:	2210      	movs	r2, #16
    a7c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    m_trx_state = TRX_STATE_FINISHED;
    a7ca:	230c      	movs	r3, #12
    a7cc:	7023      	strb	r3, [r4, #0]
}
    a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rxframe_finish_disable_ppis();
    a7d0:	f008 fe7b 	bl	134ca <rxframe_finish_disable_ppis>
    mpsl_fem_lna_configuration_clear();
    a7d4:	f7f8 ffe2 	bl	379c <mpsl_fem_lna_configuration_clear>
    p_reg->SHORTS &= ~(mask);
    a7d8:	4b49      	ldr	r3, [pc, #292]	; (a900 <nrf_802154_trx_abort+0x158>)
    m_flags.psdu_being_received = false;
    a7da:	484a      	ldr	r0, [pc, #296]	; (a904 <nrf_802154_trx_abort+0x15c>)
    a7dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a7e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    a7e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    a7e8:	4a44      	ldr	r2, [pc, #272]	; (a8fc <nrf_802154_trx_abort+0x154>)
    a7ea:	2100      	movs	r1, #0
    a7ec:	f243 4502 	movw	r5, #13314	; 0x3402
    a7f0:	7001      	strb	r1, [r0, #0]
    a7f2:	f8c2 5308 	str.w	r5, [r2, #776]	; 0x308
    p_reg->INTENCLR = mask;
    a7f6:	4d44      	ldr	r5, [pc, #272]	; (a908 <nrf_802154_trx_abort+0x160>)
    a7f8:	2608      	movs	r6, #8
    a7fa:	f8c5 6308 	str.w	r6, [r5, #776]	; 0x308
    p_reg->SHORTS = shorts_mask;
    a7fe:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    m_flags.missing_receive_buffer = false;
    a802:	7041      	strb	r1, [r0, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a804:	2101      	movs	r1, #1
    a806:	6111      	str	r1, [r2, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a808:	6119      	str	r1, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
    a80a:	e7de      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    a80c:	4b3c      	ldr	r3, [pc, #240]	; (a900 <nrf_802154_trx_abort+0x158>)
    a80e:	2201      	movs	r2, #1
    a810:	611a      	str	r2, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
    a812:	e7da      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, false);
    a814:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    a816:	4d39      	ldr	r5, [pc, #228]	; (a8fc <nrf_802154_trx_abort+0x154>)
    a818:	2004      	movs	r0, #4
    a81a:	f000 fb2b 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    a81e:	f243 0302 	movw	r3, #12290	; 0x3002
    a822:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    mpsl_fem_lna_configuration_clear();
    a826:	f7f8 ffb9 	bl	379c <mpsl_fem_lna_configuration_clear>
    nrf_802154_trx_ppi_for_fem_clear();
    a82a:	f000 fb99 	bl	af60 <nrf_802154_trx_ppi_for_fem_clear>
    p_reg->SHORTS &= ~(mask);
    a82e:	4b34      	ldr	r3, [pc, #208]	; (a900 <nrf_802154_trx_abort+0x158>)
    m_flags.missing_receive_buffer = false;
    a830:	4934      	ldr	r1, [pc, #208]	; (a904 <nrf_802154_trx_abort+0x15c>)
    a832:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    a83a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->SHORTS = shorts_mask;
    a83e:	2200      	movs	r2, #0
    a840:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    a844:	704a      	strb	r2, [r1, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a846:	2201      	movs	r2, #1
    a848:	612a      	str	r2, [r5, #16]
    a84a:	e7e1      	b.n	a810 <nrf_802154_trx_abort+0x68>

static void transmit_frame_abort(void)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    txframe_finish_disable_ppis(m_transmit_with_cca);
    a84c:	4f2f      	ldr	r7, [pc, #188]	; (a90c <nrf_802154_trx_abort+0x164>)
    p_reg->SHORTS = shorts_mask;
    a84e:	4d2b      	ldr	r5, [pc, #172]	; (a8fc <nrf_802154_trx_abort+0x154>)
    a850:	7838      	ldrb	r0, [r7, #0]
    a852:	2600      	movs	r6, #0
    a854:	f008 fe33 	bl	134be <txframe_finish_disable_ppis>
    a858:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    fem_for_tx_reset(m_transmit_with_cca);
    a85c:	7838      	ldrb	r0, [r7, #0]
    a85e:	f7ff fafd 	bl	9e5c <fem_for_tx_reset>
    p_reg->INTENCLR = mask;
    a862:	4b2b      	ldr	r3, [pc, #172]	; (a910 <nrf_802154_trx_abort+0x168>)
    a864:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

    txframe_finish_disable_ints();
#if NRF_802154_TX_STARTED_NOTIFY_ENABLED
    m_flags.tx_started = false;
    a868:	4b26      	ldr	r3, [pc, #152]	; (a904 <nrf_802154_trx_abort+0x15c>)
    a86a:	709e      	strb	r6, [r3, #2]
#endif
    m_flags.missing_receive_buffer = false;
    a86c:	705e      	strb	r6, [r3, #1]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a86e:	2301      	movs	r3, #1
    a870:	632b      	str	r3, [r5, #48]	; 0x30
    a872:	612b      	str	r3, [r5, #16]

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_CCASTOP);
    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    m_trx_state = TRX_STATE_FINISHED;
    a874:	e7a9      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    p_reg->SHORTS = shorts_mask;
    a876:	4d21      	ldr	r5, [pc, #132]	; (a8fc <nrf_802154_trx_abort+0x154>)

static void transmit_ack_abort(void)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    nrf_802154_trx_ppi_for_ack_tx_clear();
    a878:	f000 fb52 	bl	af20 <nrf_802154_trx_ppi_for_ack_tx_clear>
    a87c:	2300      	movs	r3, #0
    a87e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200

    nrf_radio_shorts_set(NRF_RADIO, SHORTS_IDLE);

    mpsl_fem_pa_configuration_clear();
    a882:	f7f8 ff97 	bl	37b4 <mpsl_fem_pa_configuration_clear>
    a886:	4b1e      	ldr	r3, [pc, #120]	; (a900 <nrf_802154_trx_abort+0x158>)
    a888:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a88c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    a890:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a894:	2201      	movs	r2, #1
    a896:	611a      	str	r2, [r3, #16]
    p_reg->INTENCLR = mask;
    a898:	4b1e      	ldr	r3, [pc, #120]	; (a914 <nrf_802154_trx_abort+0x16c>)
    a89a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a89e:	612a      	str	r2, [r5, #16]

    nrf_radio_int_disable(NRF_RADIO, NRF_RADIO_INT_PHYEND_MASK | NRF_RADIO_INT_ADDRESS_MASK);

    nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);

    m_trx_state = TRX_STATE_FINISHED;
    a8a0:	e793      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    standalone_cca_finish();
    a8a2:	f7ff faa5 	bl	9df0 <standalone_cca_finish>
    m_trx_state = TRX_STATE_FINISHED;
    a8a6:	e790      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
    a8a8:	2100      	movs	r1, #0
    a8aa:	4608      	mov	r0, r1
    a8ac:	f000 fae2 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    mpsl_fem_pa_configuration_clear();
    a8b0:	f7f8 ff80 	bl	37b4 <mpsl_fem_pa_configuration_clear>
    a8b4:	4b12      	ldr	r3, [pc, #72]	; (a900 <nrf_802154_trx_abort+0x158>)
    a8b6:	2501      	movs	r5, #1
    a8b8:	611d      	str	r5, [r3, #16]
    nrf_802154_trx_ppi_for_fem_clear();
    a8ba:	f000 fb51 	bl	af60 <nrf_802154_trx_ppi_for_fem_clear>
    mpsl_fem_deactivate_now(MPSL_FEM_PA);
    a8be:	4628      	mov	r0, r5
    a8c0:	f7f8 ff60 	bl	3784 <mpsl_fem_deactivate_now>
    a8c4:	4b0d      	ldr	r3, [pc, #52]	; (a8fc <nrf_802154_trx_abort+0x154>)
    a8c6:	611d      	str	r5, [r3, #16]
    m_trx_state = TRX_STATE_FINISHED;
    a8c8:	e77f      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_TXEN, false);
    a8ca:	2100      	movs	r1, #0
    a8cc:	4608      	mov	r0, r1
    p_reg->SHORTS = shorts_mask;
    a8ce:	4e0b      	ldr	r6, [pc, #44]	; (a8fc <nrf_802154_trx_abort+0x154>)
    a8d0:	f000 fad0 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
    a8d4:	2300      	movs	r3, #0
    a8d6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    mpsl_fem_pa_configuration_clear();
    a8da:	f7f8 ff6b 	bl	37b4 <mpsl_fem_pa_configuration_clear>
    a8de:	4b08      	ldr	r3, [pc, #32]	; (a900 <nrf_802154_trx_abort+0x158>)
    a8e0:	2501      	movs	r5, #1
    a8e2:	611d      	str	r5, [r3, #16]
    nrf_802154_trx_ppi_for_fem_clear();
    a8e4:	f000 fb3c 	bl	af60 <nrf_802154_trx_ppi_for_fem_clear>
    mpsl_fem_deactivate_now(MPSL_FEM_PA);
    a8e8:	4628      	mov	r0, r5
    a8ea:	f7f8 ff4b 	bl	3784 <mpsl_fem_deactivate_now>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a8ee:	6135      	str	r5, [r6, #16]
    m_trx_state = TRX_STATE_FINISHED;
    a8f0:	e76b      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    energy_detection_finish();
    a8f2:	f7ff fa93 	bl	9e1c <energy_detection_finish>
    a8f6:	e768      	b.n	a7ca <nrf_802154_trx_abort+0x22>
    a8f8:	200036dd 	.word	0x200036dd
    a8fc:	40001000 	.word	0x40001000
    a900:	40008000 	.word	0x40008000
    a904:	200036d8 	.word	0x200036d8
    a908:	40017000 	.word	0x40017000
    a90c:	200036d7 	.word	0x200036d7
    a910:	08060003 	.word	0x08060003
    a914:	08000002 	.word	0x08000002

0000a918 <nrf_802154_trx_state_get>:
    return m_trx_state;
    a918:	4b01      	ldr	r3, [pc, #4]	; (a920 <nrf_802154_trx_state_get+0x8>)
    a91a:	7818      	ldrb	r0, [r3, #0]
}
    a91c:	4770      	bx	lr
    a91e:	bf00      	nop
    a920:	200036dd 	.word	0x200036dd

0000a924 <nrf_802154_trx_go_idle>:
    switch (m_trx_state)
    a924:	4b0e      	ldr	r3, [pc, #56]	; (a960 <nrf_802154_trx_go_idle+0x3c>)
    a926:	7819      	ldrb	r1, [r3, #0]
    a928:	2904      	cmp	r1, #4
    a92a:	b2ca      	uxtb	r2, r1
    a92c:	d005      	beq.n	a93a <nrf_802154_trx_go_idle+0x16>
    a92e:	2a0c      	cmp	r2, #12
    a930:	d006      	beq.n	a940 <nrf_802154_trx_go_idle+0x1c>
    a932:	2a02      	cmp	r2, #2
    a934:	d112      	bne.n	a95c <nrf_802154_trx_go_idle+0x38>
{
    a936:	2001      	movs	r0, #1
    a938:	4770      	bx	lr
    a93a:	4a0a      	ldr	r2, [pc, #40]	; (a964 <nrf_802154_trx_go_idle+0x40>)
    a93c:	2101      	movs	r1, #1
    a93e:	6111      	str	r1, [r2, #16]
    m_trx_state = TRX_STATE_GOING_IDLE;
    a940:	2202      	movs	r2, #2
    a942:	701a      	strb	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a944:	4b08      	ldr	r3, [pc, #32]	; (a968 <nrf_802154_trx_go_idle+0x44>)
    a946:	2200      	movs	r2, #0
    a948:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    a94c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a950:	2201      	movs	r2, #1
    a952:	611a      	str	r2, [r3, #16]
    p_reg->INTENSET = mask;
    a954:	2210      	movs	r2, #16
    a956:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a95a:	e7ec      	b.n	a936 <nrf_802154_trx_go_idle+0x12>
    bool result = false;
    a95c:	2000      	movs	r0, #0
}
    a95e:	4770      	bx	lr
    a960:	200036dd 	.word	0x200036dd
    a964:	40008000 	.word	0x40008000
    a968:	40001000 	.word	0x40001000

0000a96c <nrf_802154_trx_standalone_cca>:
{
    a96c:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_STANDALONE_CCA;
    a96e:	4b10      	ldr	r3, [pc, #64]	; (a9b0 <nrf_802154_trx_standalone_cca+0x44>)
    a970:	2208      	movs	r2, #8
    a972:	701a      	strb	r2, [r3, #0]
    p_reg->SHORTS = shorts_mask;
    a974:	4b0f      	ldr	r3, [pc, #60]	; (a9b4 <nrf_802154_trx_standalone_cca+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a976:	2400      	movs	r4, #0
    p_reg->SHORTS = shorts_mask;
    a978:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    a97c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a980:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
    a984:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a988:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
    a98c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    p_reg->INTENSET = mask;
    a990:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
    a994:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
    a998:	f7ff fb08 	bl	9fac <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
    a99c:	f7ff fc6a 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
    a9a0:	4621      	mov	r1, r4
    a9a2:	2004      	movs	r0, #4
    a9a4:	f000 fa20 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    a9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
    a9ac:	f7ff ba4c 	b.w	9e48 <trigger_disable_to_start_rampup>
    a9b0:	200036dd 	.word	0x200036dd
    a9b4:	40001000 	.word	0x40001000

0000a9b8 <nrf_802154_trx_continuous_carrier>:
{
    a9b8:	b508      	push	{r3, lr}
    m_trx_state = TRX_STATE_CONTINUOUS_CARRIER;
    a9ba:	4b0a      	ldr	r3, [pc, #40]	; (a9e4 <nrf_802154_trx_continuous_carrier+0x2c>)
    a9bc:	2209      	movs	r2, #9
    a9be:	701a      	strb	r2, [r3, #0]
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    a9c0:	4b09      	ldr	r3, [pc, #36]	; (a9e8 <nrf_802154_trx_continuous_carrier+0x30>)
    a9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
    a9c6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    fem_for_pa_set(&p_tx_power->fem);
    a9ca:	f7ff faa7 	bl	9f1c <fem_for_pa_set>
    nrf_802154_trx_antenna_update();
    a9ce:	f7ff fc51 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_TXEN, false);
    a9d2:	2100      	movs	r1, #0
    a9d4:	4608      	mov	r0, r1
    a9d6:	f000 fa07 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    a9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    trigger_disable_to_start_rampup();
    a9de:	f7ff ba33 	b.w	9e48 <trigger_disable_to_start_rampup>
    a9e2:	bf00      	nop
    a9e4:	200036dd 	.word	0x200036dd
    a9e8:	40001000 	.word	0x40001000

0000a9ec <nrf_802154_trx_continuous_carrier_restart>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a9ec:	4b01      	ldr	r3, [pc, #4]	; (a9f4 <nrf_802154_trx_continuous_carrier_restart+0x8>)
    a9ee:	2201      	movs	r2, #1
    a9f0:	611a      	str	r2, [r3, #16]
}
    a9f2:	4770      	bx	lr
    a9f4:	40001000 	.word	0x40001000

0000a9f8 <nrf_802154_trx_modulated_carrier>:
{
    a9f8:	b508      	push	{r3, lr}
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
    a9fa:	4b0e      	ldr	r3, [pc, #56]	; (aa34 <nrf_802154_trx_modulated_carrier+0x3c>)
{
    a9fc:	4602      	mov	r2, r0
    m_trx_state = TRX_STATE_MODULATED_CARRIER;
    a9fe:	200a      	movs	r0, #10
    aa00:	7018      	strb	r0, [r3, #0]
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    aa02:	4608      	mov	r0, r1
    aa04:	4b0c      	ldr	r3, [pc, #48]	; (aa38 <nrf_802154_trx_modulated_carrier+0x40>)
    aa06:	f810 1b01 	ldrb.w	r1, [r0], #1
    aa0a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PACKETPTR = (uint32_t)p_packet;
    aa0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->SHORTS = shorts_mask;
    aa12:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
    aa16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    fem_for_pa_set(&p_tx_power->fem);
    aa1a:	f7ff fa7f 	bl	9f1c <fem_for_pa_set>
    nrf_802154_trx_antenna_update();
    aa1e:	f7ff fc29 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_TXEN, false);
    aa22:	2100      	movs	r1, #0
    aa24:	4608      	mov	r0, r1
    aa26:	f000 f9df 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    aa2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    trigger_disable_to_start_rampup();
    aa2e:	f7ff ba0b 	b.w	9e48 <trigger_disable_to_start_rampup>
    aa32:	bf00      	nop
    aa34:	200036dd 	.word	0x200036dd
    aa38:	40001000 	.word	0x40001000

0000aa3c <nrf_802154_trx_modulated_carrier_restart>:
void nrf_802154_trx_modulated_carrier_restart(void)
    aa3c:	4b01      	ldr	r3, [pc, #4]	; (aa44 <nrf_802154_trx_modulated_carrier_restart+0x8>)
    aa3e:	2201      	movs	r2, #1
    aa40:	611a      	str	r2, [r3, #16]
    aa42:	4770      	bx	lr
    aa44:	40001000 	.word	0x40001000

0000aa48 <nrf_802154_trx_energy_detection>:
{
    aa48:	b510      	push	{r4, lr}
    m_trx_state = TRX_STATE_ENERGY_DETECTION;
    aa4a:	4b10      	ldr	r3, [pc, #64]	; (aa8c <nrf_802154_trx_energy_detection+0x44>)
    aa4c:	220b      	movs	r2, #11
    aa4e:	701a      	strb	r2, [r3, #0]
    ed_count--;
    aa50:	3801      	subs	r0, #1
    p_reg->EDCNT = (ed_loop_count & RADIO_EDCNT_EDCNT_Msk);
    aa52:	4b0f      	ldr	r3, [pc, #60]	; (aa90 <nrf_802154_trx_energy_detection+0x48>)
    p_reg->SHORTS = shorts_mask;
    aa54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    p_reg->EDCNT = (ed_loop_count & RADIO_EDCNT_EDCNT_Msk);
    aa58:	f3c0 0014 	ubfx	r0, r0, #0, #21
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aa5c:	2400      	movs	r4, #0
    p_reg->EDCNT = (ed_loop_count & RADIO_EDCNT_EDCNT_Msk);
    aa5e:	f8c3 0664 	str.w	r0, [r3, #1636]	; 0x664
    p_reg->SHORTS = shorts_mask;
    aa62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aa66:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
    aa6a:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    p_reg->INTENSET = mask;
    aa6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    fem_for_lna_set();
    aa72:	f7ff fa9b 	bl	9fac <fem_for_lna_set>
    nrf_802154_trx_antenna_update();
    aa76:	f7ff fbfd 	bl	a274 <nrf_802154_trx_antenna_update>
    nrf_802154_trx_ppi_for_ramp_up_set(NRF_RADIO_TASK_RXEN, false);
    aa7a:	4621      	mov	r1, r4
    aa7c:	2004      	movs	r0, #4
    aa7e:	f000 f9b3 	bl	ade8 <nrf_802154_trx_ppi_for_ramp_up_set>
}
    aa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    trigger_disable_to_start_rampup();
    aa86:	f7ff b9df 	b.w	9e48 <trigger_disable_to_start_rampup>
    aa8a:	bf00      	nop
    aa8c:	200036dd 	.word	0x200036dd
    aa90:	40001000 	.word	0x40001000

0000aa94 <nrf_802154_radio_irq_handler>:
}

#endif

void nrf_802154_radio_irq_handler(void)
{
    aa94:	b570      	push	{r4, r5, r6, lr}
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    // Prevent interrupting of this handler by requests from higher priority code.
    nrf_802154_critical_section_forcefully_enter();
    aa96:	f008 fc92 	bl	133be <nrf_802154_critical_section_forcefully_enter>
    return p_reg->INTENSET & mask;
    aa9a:	4bb2      	ldr	r3, [pc, #712]	; (ad64 <nrf_802154_radio_irq_handler+0x2d0>)
    aa9c:	4cb2      	ldr	r4, [pc, #712]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    aa9e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

#if defined(RADIO_INTENSET_SYNC_Msk)
    // Note: For NRF_RADIO_EVENT_SYNC we enable interrupt through EGU.
    // That's why we check here EGU's EGU_SYNC_INTMASK.
    // The RADIO does not have interrupt from SYNC event.
    if (nrf_egu_int_enable_check(NRF_802154_EGU_INSTANCE, EGU_SYNC_INTMASK) &&
    aaa2:	f012 0f08 	tst.w	r2, #8
    aaa6:	d00d      	beq.n	aac4 <nrf_802154_radio_irq_handler+0x30>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    aaa8:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
    aaac:	b152      	cbz	r2, aac4 <nrf_802154_radio_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aaae:	2200      	movs	r2, #0
    aab0:	f8c4 2168 	str.w	r2, [r4, #360]	; 0x168
    aab4:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    aab8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    aabc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    nrf_802154_trx_receive_frame_prestarted();
    aac0:	f7fe f9ce 	bl	8e60 <nrf_802154_trx_receive_frame_prestarted>
    return p_reg->INTENSET & mask;
    aac4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304

        irq_handler_sync();
    }
#endif

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_READY_MASK) &&
    aac8:	07dd      	lsls	r5, r3, #31
    aaca:	d50c      	bpl.n	aae6 <nrf_802154_radio_irq_handler+0x52>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    aacc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    aad0:	b14b      	cbz	r3, aae6 <nrf_802154_radio_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aad2:	2300      	movs	r3, #0
    aad4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    aad8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    p_reg->INTENCLR = mask;
    aadc:	2301      	movs	r3, #1
    aade:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    nrf_802154_trx_transmit_frame_ccastarted();
    aae2:	f008 fc29 	bl	13338 <nrf_802154_trx_transmit_frame_ccastarted>
    return p_reg->INTENSET & mask;
    aae6:	4ba0      	ldr	r3, [pc, #640]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    aae8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_READY);

        irq_handler_ready();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_ADDRESS_MASK) &&
    aaec:	0790      	lsls	r0, r2, #30
    aaee:	d515      	bpl.n	ab1c <nrf_802154_radio_irq_handler+0x88>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    aaf0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    aaf4:	b192      	cbz	r2, ab1c <nrf_802154_radio_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aaf6:	2200      	movs	r2, #0
    aaf8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    aafc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    switch (m_trx_state)
    ab00:	4a9a      	ldr	r2, [pc, #616]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    ab02:	7812      	ldrb	r2, [r2, #0]
    ab04:	3a03      	subs	r2, #3
    ab06:	2a04      	cmp	r2, #4
    ab08:	d808      	bhi.n	ab1c <nrf_802154_radio_irq_handler+0x88>
    ab0a:	e8df f012 	tbh	[pc, r2, lsl #1]
    ab0e:	0005      	.short	0x0005
    ab10:	00d30007 	.word	0x00d30007
    ab14:	00e200d9 	.word	0x00e200d9
            nrf_802154_trx_receive_frame_started();
    ab18:	f7fe f9e2 	bl	8ee0 <nrf_802154_trx_receive_frame_started>
    return p_reg->INTENSET & mask;
    ab1c:	4c92      	ldr	r4, [pc, #584]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    ab1e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
        irq_handler_address();
    }

#if !NRF_802154_DISABLE_BCC_MATCHING
    // Check MAC frame header.
    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_BCMATCH_MASK) &&
    ab22:	0559      	lsls	r1, r3, #21
    ab24:	d51a      	bpl.n	ab5c <nrf_802154_radio_irq_handler+0xc8>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ab26:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    ab2a:	b1bb      	cbz	r3, ab5c <nrf_802154_radio_irq_handler+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab2c:	2300      	movs	r3, #0
    ab2e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ab32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    m_flags.psdu_being_received = true;
    ab36:	4b8e      	ldr	r3, [pc, #568]	; (ad70 <nrf_802154_radio_irq_handler+0x2dc>)
    ab38:	2201      	movs	r2, #1
    ab3a:	701a      	strb	r2, [r3, #0]
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ab3c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
    if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_CRCERROR))
    ab40:	b963      	cbnz	r3, ab5c <nrf_802154_radio_irq_handler+0xc8>
    return p_reg->BCC;
    ab42:	f8d4 5560 	ldr.w	r5, [r4, #1376]	; 0x560
    current_bcc = nrf_radio_bcc_get(NRF_RADIO) / 8U;
    ab46:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    next_bcc = nrf_802154_trx_receive_frame_bcmatched(current_bcc);
    ab4a:	4628      	mov	r0, r5
    ab4c:	f7fe f9f8 	bl	8f40 <nrf_802154_trx_receive_frame_bcmatched>
    if (next_bcc > current_bcc)
    ab50:	4285      	cmp	r5, r0
        nrf_radio_bcc_set(NRF_RADIO, next_bcc * 8);
    ab52:	bf3e      	ittt	cc
    ab54:	b200      	sxthcc	r0, r0
    ab56:	00c0      	lslcc	r0, r0, #3
    p_reg->BCC = radio_bcc;
    ab58:	f8c4 0560 	strcc.w	r0, [r4, #1376]	; 0x560
    return p_reg->INTENSET & mask;
    ab5c:	4b82      	ldr	r3, [pc, #520]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    ab5e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    }

#endif // !NRF_802154_DISABLE_BCC_MATCHING

#if !NRF_802154_DISABLE_BCC_MATCHING || NRF_802154_NOTIFY_CRCERROR
    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CRCERROR_MASK) &&
    ab62:	0492      	lsls	r2, r2, #18
    ab64:	d510      	bpl.n	ab88 <nrf_802154_radio_irq_handler+0xf4>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ab66:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
    ab6a:	b16a      	cbz	r2, ab88 <nrf_802154_radio_irq_handler+0xf4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab6c:	2200      	movs	r2, #0
    switch (m_trx_state)
    ab6e:	4c7f      	ldr	r4, [pc, #508]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    ab70:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    ab74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    ab78:	7823      	ldrb	r3, [r4, #0]
    ab7a:	2b03      	cmp	r3, #3
    ab7c:	b2da      	uxtb	r2, r3
    ab7e:	f000 80ae 	beq.w	acde <nrf_802154_radio_irq_handler+0x24a>
    ab82:	2a05      	cmp	r2, #5
    ab84:	f000 80b5 	beq.w	acf2 <nrf_802154_radio_irq_handler+0x25e>
    return p_reg->INTENSET & mask;
    ab88:	4b77      	ldr	r3, [pc, #476]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    ab8a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304

        irq_handler_crcerror();
    }
#endif // !NRF_802154_DISABLE_BCC_MATCHING || NRF_802154_NOTIFY_CRCERROR

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CRCOK_MASK) &&
    ab8e:	04d6      	lsls	r6, r2, #19
    ab90:	d510      	bpl.n	abb4 <nrf_802154_radio_irq_handler+0x120>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ab92:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    ab96:	b16a      	cbz	r2, abb4 <nrf_802154_radio_irq_handler+0x120>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab98:	2200      	movs	r2, #0
    switch (m_trx_state)
    ab9a:	4c74      	ldr	r4, [pc, #464]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    ab9c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    aba0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    aba4:	7823      	ldrb	r3, [r4, #0]
    aba6:	2b03      	cmp	r3, #3
    aba8:	b2da      	uxtb	r2, r3
    abaa:	f000 80a9 	beq.w	ad00 <nrf_802154_radio_irq_handler+0x26c>
    abae:	2a05      	cmp	r2, #5
    abb0:	f000 80b0 	beq.w	ad14 <nrf_802154_radio_irq_handler+0x280>
    return p_reg->INTENSET & mask;
    abb4:	4c6c      	ldr	r4, [pc, #432]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    abb6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CRCOK);

        irq_handler_crcok();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_PHYEND_MASK) &&
    abba:	011d      	lsls	r5, r3, #4
    abbc:	d510      	bpl.n	abe0 <nrf_802154_radio_irq_handler+0x14c>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    abbe:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
    abc2:	b16b      	cbz	r3, abe0 <nrf_802154_radio_irq_handler+0x14c>
    switch (m_trx_state)
    abc4:	4d69      	ldr	r5, [pc, #420]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abc6:	2600      	movs	r6, #0
    abc8:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
    abcc:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
    abd0:	782b      	ldrb	r3, [r5, #0]
    abd2:	2b06      	cmp	r3, #6
    abd4:	b2da      	uxtb	r2, r3
    abd6:	f000 80a4 	beq.w	ad22 <nrf_802154_radio_irq_handler+0x28e>
    abda:	2a07      	cmp	r2, #7
    abdc:	f000 80a8 	beq.w	ad30 <nrf_802154_radio_irq_handler+0x29c>
    return p_reg->INTENSET & mask;
    abe0:	4b61      	ldr	r3, [pc, #388]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    abe2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_PHYEND);

        irq_handler_phyend();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
    abe6:	06d4      	lsls	r4, r2, #27
    abe8:	d517      	bpl.n	ac1a <nrf_802154_radio_irq_handler+0x186>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    abea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    abee:	b1a2      	cbz	r2, ac1a <nrf_802154_radio_irq_handler+0x186>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abf0:	2200      	movs	r2, #0
    switch (m_trx_state)
    abf2:	4c5e      	ldr	r4, [pc, #376]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    abf4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    abf8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    abfc:	7822      	ldrb	r2, [r4, #0]
    abfe:	2a02      	cmp	r2, #2
    ac00:	d10b      	bne.n	ac1a <nrf_802154_radio_irq_handler+0x186>
    p_reg->INTENCLR = mask;
    ac02:	2210      	movs	r2, #16
    ac04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    ac08:	2003      	movs	r0, #3
    ac0a:	f7f8 fdbb 	bl	3784 <mpsl_fem_deactivate_now>
    mpsl_fem_disable();
    ac0e:	f7f8 fdbf 	bl	3790 <mpsl_fem_disable>
    m_trx_state = TRX_STATE_IDLE;
    ac12:	2301      	movs	r3, #1
    ac14:	7023      	strb	r3, [r4, #0]
    nrf_802154_trx_go_idle_finished();
    ac16:	f008 fb77 	bl	13308 <nrf_802154_trx_go_idle_finished>
    return p_reg->INTENSET & mask;
    ac1a:	4b53      	ldr	r3, [pc, #332]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    ac1c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);

        irq_handler_disabled();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CCAIDLE_MASK) &&
    ac20:	0390      	lsls	r0, r2, #14
    ac22:	d516      	bpl.n	ac52 <nrf_802154_radio_irq_handler+0x1be>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ac24:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    ac28:	b19a      	cbz	r2, ac52 <nrf_802154_radio_irq_handler+0x1be>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac2a:	2200      	movs	r2, #0
    switch (m_trx_state)
    ac2c:	4c4f      	ldr	r4, [pc, #316]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    ac2e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    ac32:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    ac36:	7823      	ldrb	r3, [r4, #0]
    ac38:	2b06      	cmp	r3, #6
    ac3a:	b2da      	uxtb	r2, r3
    ac3c:	f000 808f 	beq.w	ad5e <nrf_802154_radio_irq_handler+0x2ca>
    ac40:	2a08      	cmp	r2, #8
    ac42:	d106      	bne.n	ac52 <nrf_802154_radio_irq_handler+0x1be>
            standalone_cca_finish();
    ac44:	f7ff f8d4 	bl	9df0 <standalone_cca_finish>
            m_trx_state = TRX_STATE_FINISHED;
    ac48:	230c      	movs	r3, #12
            nrf_802154_trx_standalone_cca_finished(true);
    ac4a:	2001      	movs	r0, #1
            m_trx_state = TRX_STATE_FINISHED;
    ac4c:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_standalone_cca_finished(true);
    ac4e:	f008 fb63 	bl	13318 <nrf_802154_trx_standalone_cca_finished>
    return p_reg->INTENSET & mask;
    ac52:	4b45      	ldr	r3, [pc, #276]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    ac54:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CCAIDLE);

        irq_handler_ccaidle();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_CCABUSY_MASK) &&
    ac58:	0351      	lsls	r1, r2, #13
    ac5a:	d510      	bpl.n	ac7e <nrf_802154_radio_irq_handler+0x1ea>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ac5c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ac60:	b16a      	cbz	r2, ac7e <nrf_802154_radio_irq_handler+0x1ea>
    switch (m_trx_state)
    ac62:	4c42      	ldr	r4, [pc, #264]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac64:	2500      	movs	r5, #0
    ac66:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
    ac6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    ac6e:	7823      	ldrb	r3, [r4, #0]
    ac70:	2b06      	cmp	r3, #6
    ac72:	b2da      	uxtb	r2, r3
    ac74:	f000 8082 	beq.w	ad7c <nrf_802154_radio_irq_handler+0x2e8>
    ac78:	2a08      	cmp	r2, #8
    ac7a:	f000 8086 	beq.w	ad8a <nrf_802154_radio_irq_handler+0x2f6>
    return p_reg->INTENSET & mask;
    ac7e:	4b3a      	ldr	r3, [pc, #232]	; (ad68 <nrf_802154_radio_irq_handler+0x2d4>)
    ac80:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
        nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_CCABUSY);

        irq_handler_ccabusy();
    }

    if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_EDEND_MASK) &&
    ac84:	0412      	lsls	r2, r2, #16
    ac86:	d511      	bpl.n	acac <nrf_802154_radio_irq_handler+0x218>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    ac88:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    ac8c:	b172      	cbz	r2, acac <nrf_802154_radio_irq_handler+0x218>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac8e:	2200      	movs	r2, #0
    ac90:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ac94:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    return (uint8_t) p_reg->EDSAMPLE;
    ac98:	f8d3 4668 	ldr.w	r4, [r3, #1640]	; 0x668
    energy_detection_finish();
    ac9c:	f7ff f8be 	bl	9e1c <energy_detection_finish>
    m_trx_state = TRX_STATE_FINISHED;
    aca0:	4b32      	ldr	r3, [pc, #200]	; (ad6c <nrf_802154_radio_irq_handler+0x2d8>)
    aca2:	220c      	movs	r2, #12
    nrf_802154_trx_energy_detection_finished(ed_sample);
    aca4:	b2e0      	uxtb	r0, r4
    m_trx_state = TRX_STATE_FINISHED;
    aca6:	701a      	strb	r2, [r3, #0]
    nrf_802154_trx_energy_detection_finished(ed_sample);
    aca8:	f7fe fccc 	bl	9644 <nrf_802154_trx_energy_detection_finished>
    }

    nrf_802154_critical_section_exit();

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}
    acac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    nrf_802154_critical_section_exit();
    acb0:	f7fe bf3e 	b.w	9b30 <nrf_802154_critical_section_exit>
            m_flags.rssi_started = true;
    acb4:	4b2e      	ldr	r3, [pc, #184]	; (ad70 <nrf_802154_radio_irq_handler+0x2dc>)
    acb6:	2201      	movs	r2, #1
    acb8:	70da      	strb	r2, [r3, #3]
            nrf_802154_trx_receive_ack_started();
    acba:	f008 fb23 	bl	13304 <nrf_802154_trx_receive_ack_started>
            break;
    acbe:	e72d      	b.n	ab1c <nrf_802154_radio_irq_handler+0x88>
    p_reg->INTENCLR = mask;
    acc0:	2202      	movs	r2, #2
    acc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_flags.tx_started = true;
    acc6:	4b2a      	ldr	r3, [pc, #168]	; (ad70 <nrf_802154_radio_irq_handler+0x2dc>)
    acc8:	2201      	movs	r2, #1
    acca:	709a      	strb	r2, [r3, #2]
            nrf_802154_trx_transmit_frame_started();
    accc:	f7fe fb06 	bl	92dc <nrf_802154_trx_transmit_frame_started>
            break;
    acd0:	e724      	b.n	ab1c <nrf_802154_radio_irq_handler+0x88>
    acd2:	2202      	movs	r2, #2
    acd4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            nrf_802154_trx_transmit_ack_started();
    acd8:	f7fe fb10 	bl	92fc <nrf_802154_trx_transmit_ack_started>
            break;
    acdc:	e71e      	b.n	ab1c <nrf_802154_radio_irq_handler+0x88>
            rxframe_finish();
    acde:	f7ff f8ef 	bl	9ec0 <rxframe_finish>
    ace2:	4b24      	ldr	r3, [pc, #144]	; (ad74 <nrf_802154_radio_irq_handler+0x2e0>)
    ace4:	2201      	movs	r2, #1
    ace6:	611a      	str	r2, [r3, #16]
            m_trx_state = TRX_STATE_FINISHED;
    ace8:	230c      	movs	r3, #12
    acea:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_frame_crcerror();
    acec:	f7fe f9de 	bl	90ac <nrf_802154_trx_receive_frame_crcerror>
            break;
    acf0:	e74a      	b.n	ab88 <nrf_802154_radio_irq_handler+0xf4>
            rxack_finish();
    acf2:	f7ff f971 	bl	9fd8 <rxack_finish>
            m_trx_state = TRX_STATE_FINISHED;
    acf6:	230c      	movs	r3, #12
    acf8:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_ack_crcerror();
    acfa:	f7fe fa13 	bl	9124 <nrf_802154_trx_receive_ack_crcerror>
            break;
    acfe:	e743      	b.n	ab88 <nrf_802154_radio_irq_handler+0xf4>
            m_flags.rssi_started = true;
    ad00:	4b1b      	ldr	r3, [pc, #108]	; (ad70 <nrf_802154_radio_irq_handler+0x2dc>)
    ad02:	2201      	movs	r2, #1
    ad04:	70da      	strb	r2, [r3, #3]
            rxframe_finish();
    ad06:	f7ff f8db 	bl	9ec0 <rxframe_finish>
            m_trx_state = TRX_STATE_RXFRAME_FINISHED;
    ad0a:	2304      	movs	r3, #4
    ad0c:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_frame_received();
    ad0e:	f7fe fa1d 	bl	914c <nrf_802154_trx_receive_frame_received>
            break;
    ad12:	e74f      	b.n	abb4 <nrf_802154_radio_irq_handler+0x120>
            rxack_finish();
    ad14:	f7ff f960 	bl	9fd8 <rxack_finish>
            m_trx_state = TRX_STATE_FINISHED;
    ad18:	230c      	movs	r3, #12
    ad1a:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_receive_ack_received();
    ad1c:	f7fe fbb0 	bl	9480 <nrf_802154_trx_receive_ack_received>
            break;
    ad20:	e748      	b.n	abb4 <nrf_802154_radio_irq_handler+0x120>
            txframe_finish();
    ad22:	f7ff f8b1 	bl	9e88 <txframe_finish>
            m_trx_state = TRX_STATE_FINISHED;
    ad26:	230c      	movs	r3, #12
    ad28:	702b      	strb	r3, [r5, #0]
            nrf_802154_trx_transmit_frame_transmitted();
    ad2a:	f7fe fb1b 	bl	9364 <nrf_802154_trx_transmit_frame_transmitted>
            break;
    ad2e:	e757      	b.n	abe0 <nrf_802154_radio_irq_handler+0x14c>
    nrf_802154_trx_ppi_for_ack_tx_clear();
    ad30:	f000 f8f6 	bl	af20 <nrf_802154_trx_ppi_for_ack_tx_clear>
    p_reg->SHORTS = shorts_mask;
    ad34:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
    mpsl_fem_pa_configuration_clear();
    ad38:	f7f8 fd3c 	bl	37b4 <mpsl_fem_pa_configuration_clear>
    p_reg->SHORTS &= ~(mask);
    ad3c:	4b0d      	ldr	r3, [pc, #52]	; (ad74 <nrf_802154_radio_irq_handler+0x2e0>)
    ad3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ad42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    ad46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ad4a:	2201      	movs	r2, #1
    ad4c:	611a      	str	r2, [r3, #16]
    p_reg->INTENCLR = mask;
    ad4e:	4b0a      	ldr	r3, [pc, #40]	; (ad78 <nrf_802154_radio_irq_handler+0x2e4>)
    ad50:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            m_trx_state = TRX_STATE_FINISHED;
    ad54:	230c      	movs	r3, #12
    ad56:	702b      	strb	r3, [r5, #0]
            nrf_802154_trx_transmit_ack_transmitted();
    ad58:	f7fe fadc 	bl	9314 <nrf_802154_trx_transmit_ack_transmitted>
            break;
    ad5c:	e740      	b.n	abe0 <nrf_802154_radio_irq_handler+0x14c>
            nrf_802154_trx_transmit_frame_ccaidle();
    ad5e:	f7fe fc19 	bl	9594 <nrf_802154_trx_transmit_frame_ccaidle>
            break;
    ad62:	e776      	b.n	ac52 <nrf_802154_radio_irq_handler+0x1be>
    ad64:	40017000 	.word	0x40017000
    ad68:	40001000 	.word	0x40001000
    ad6c:	200036dd 	.word	0x200036dd
    ad70:	200036d8 	.word	0x200036d8
    ad74:	40008000 	.word	0x40008000
    ad78:	08000002 	.word	0x08000002
            txframe_finish();
    ad7c:	f7ff f884 	bl	9e88 <txframe_finish>
            m_trx_state = TRX_STATE_FINISHED;
    ad80:	230c      	movs	r3, #12
    ad82:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_transmit_frame_ccabusy();
    ad84:	f7fe fc2a 	bl	95dc <nrf_802154_trx_transmit_frame_ccabusy>
            break;
    ad88:	e779      	b.n	ac7e <nrf_802154_radio_irq_handler+0x1ea>
            standalone_cca_finish();
    ad8a:	f7ff f831 	bl	9df0 <standalone_cca_finish>
            m_trx_state = TRX_STATE_FINISHED;
    ad8e:	230c      	movs	r3, #12
            nrf_802154_trx_standalone_cca_finished(false);
    ad90:	4628      	mov	r0, r5
            m_trx_state = TRX_STATE_FINISHED;
    ad92:	7023      	strb	r3, [r4, #0]
            nrf_802154_trx_standalone_cca_finished(false);
    ad94:	f008 fac0 	bl	13318 <nrf_802154_trx_standalone_cca_finished>
            break;
    ad98:	e771      	b.n	ac7e <nrf_802154_radio_irq_handler+0x1ea>
    ad9a:	bf00      	nop

0000ad9c <nrf_802154_trx_swi_irq_handler>:

#endif // NRF_802154_INTERNAL_RADIO_IRQ_HANDLING

#if defined(RADIO_INTENSET_SYNC_Msk)
void nrf_802154_trx_swi_irq_handler(void)
{
    ad9c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ad9e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    ada2:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    ada4:	4b09      	ldr	r3, [pc, #36]	; (adcc <nrf_802154_trx_swi_irq_handler+0x30>)
    ada6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    // To prevent that from happening, the handler is executed with disabled interrupts.
    nrf_802154_mcu_critical_state_t mcu_crit_state;

    nrf_802154_mcu_critical_enter(mcu_crit_state);

    if (nrf_egu_int_enable_check(NRF_802154_EGU_INSTANCE, EGU_SYNC_INTMASK) &&
    adaa:	0712      	lsls	r2, r2, #28
    adac:	d50a      	bpl.n	adc4 <nrf_802154_trx_swi_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
    adae:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    adb2:	b13a      	cbz	r2, adc4 <nrf_802154_trx_swi_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    adb4:	2200      	movs	r2, #0
    adb6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        // process sync event.
        // If we are in critical section, the RADIO_IRQ is disabled on NVIC.
        // Following will make it pending, and processing of RADIO_IRQ will start
        // when critical section is left.

        nrf_802154_irq_set_pending(RADIO_IRQn);
    adba:	2001      	movs	r0, #1
    adbc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    adc0:	f7fd fa86 	bl	82d0 <nrf_802154_irq_set_pending>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    adc4:	f384 8810 	msr	PRIMASK, r4
    }

    nrf_802154_mcu_critical_exit(mcu_crit_state);
}
    adc8:	bd10      	pop	{r4, pc}
    adca:	bf00      	nop
    adcc:	40017000 	.word	0x40017000

0000add0 <nrf_802154_trx_radio_end_event_handle_get>:
        .event_addr = (uint32_t)&NRF_RADIO->EVENTS_END
#endif
    };

    return &r;
}
    add0:	4800      	ldr	r0, [pc, #0]	; (add4 <nrf_802154_trx_radio_end_event_handle_get+0x4>)
    add2:	4770      	bx	lr
    add4:	000146e4 	.word	0x000146e4

0000add8 <nrf_802154_trx_radio_ready_event_handle_get>:
        .event_addr = (uint32_t)&NRF_RADIO->EVENTS_READY
#endif
    };

    return &r;
}
    add8:	4800      	ldr	r0, [pc, #0]	; (addc <nrf_802154_trx_radio_ready_event_handle_get+0x4>)
    adda:	4770      	bx	lr
    addc:	000146e0 	.word	0x000146e0

0000ade0 <nrf_802154_trx_radio_phyend_event_handle_get>:
        .event_addr = (uint32_t)&NRF_RADIO->EVENTS_PHYEND
#endif
    };

    return &r;
}
    ade0:	4800      	ldr	r0, [pc, #0]	; (ade4 <nrf_802154_trx_radio_phyend_event_handle_get+0x4>)
    ade2:	4770      	bx	lr
    ade4:	000146dc 	.word	0x000146dc

0000ade8 <nrf_802154_trx_ppi_for_ramp_up_set>:
{
    // Intentionally empty.
}

void nrf_802154_trx_ppi_for_ramp_up_set(nrf_radio_task_t ramp_up_task, bool start_timer)
{
    ade8:	b510      	push	{r4, lr}
    adea:	4b1c      	ldr	r3, [pc, #112]	; (ae5c <nrf_802154_trx_ppi_for_ramp_up_set+0x74>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    adec:	4c1c      	ldr	r4, [pc, #112]	; (ae60 <nrf_802154_trx_ppi_for_ramp_up_set+0x78>)
    adee:	2200      	movs	r2, #0
    adf0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    adf4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c

NRF_STATIC_INLINE void nrf_ppi_fork_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          fork_tep)
{
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    adf8:	4a1a      	ldr	r2, [pc, #104]	; (ae64 <nrf_802154_trx_ppi_for_ramp_up_set+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    adfa:	4b1b      	ldr	r3, [pc, #108]	; (ae68 <nrf_802154_trx_ppi_for_ramp_up_set+0x80>)
    return ((uint32_t)p_reg + (uint32_t)task);
    adfc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    ae00:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    ae04:	f8c3 4548 	str.w	r4, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae08:	f8c3 054c 	str.w	r0, [r3, #1356]	; 0x54c
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    ae0c:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
                                                EGU_EVENT),
                                            nrf_radio_task_address_get(NRF_RADIO, ramp_up_task),
                                            nrf_ppi_task_address_get(NRF_PPI,
                                                                     PPI_CHGRP_RAMP_UP_DIS_TASK));

    if (start_timer)
    ae10:	f5a2 42ff 	sub.w	r2, r2, #32640	; 0x7f80
    ae14:	4815      	ldr	r0, [pc, #84]	; (ae6c <nrf_802154_trx_ppi_for_ramp_up_set+0x84>)
    ae16:	3a48      	subs	r2, #72	; 0x48
    ae18:	b971      	cbnz	r1, ae38 <nrf_802154_trx_ppi_for_ramp_up_set+0x50>
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ae1a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae1e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544

NRF_STATIC_INLINE void nrf_ppi_channel_include_in_group(NRF_PPI_Type *          p_reg,
                                                        nrf_ppi_channel_t       channel,
                                                        nrf_ppi_channel_group_t channel_group)
{
    p_reg->CHG[(uint32_t) channel_group] |= (PPI_CHG_CH0_Included << ((uint32_t) channel));
    ae22:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    ae26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ae2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
                                   nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_DISABLED),
                                   nrf_egu_task_address_get(NRF_802154_EGU_INSTANCE, EGU_TASK));

    nrf_ppi_channel_include_in_group(NRF_PPI, PPI_EGU_RAMP_UP, PPI_CHGRP_RAMP_UP);

    uint32_t ppi_mask = (1UL << PPI_EGU_RAMP_UP) |
    ae2e:	23c0      	movs	r3, #192	; 0xc0
    p_reg->CHENSET = mask;
    ae30:	4a0d      	ldr	r2, [pc, #52]	; (ae68 <nrf_802154_trx_ppi_for_ramp_up_set+0x80>)
    ae32:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    }

    nrf_ppi_channels_enable(NRF_PPI, ppi_mask);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    ae36:	bd10      	pop	{r4, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae38:	490d      	ldr	r1, [pc, #52]	; (ae70 <nrf_802154_trx_ppi_for_ramp_up_set+0x88>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ae3a:	f8c3 4550 	str.w	r4, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae3e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ae42:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae46:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHG[(uint32_t) channel_group] |= (PPI_CHG_CH0_Included << ((uint32_t) channel));
    ae4a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    ae4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ae52:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        ppi_mask |= (1UL << PPI_EGU_TIMER_START);
    ae56:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    ae5a:	e7e9      	b.n	ae30 <nrf_802154_trx_ppi_for_ramp_up_set+0x48>
    ae5c:	40017000 	.word	0x40017000
    ae60:	4001713c 	.word	0x4001713c
    ae64:	4001f004 	.word	0x4001f004
    ae68:	4001f000 	.word	0x4001f000
    ae6c:	40001110 	.word	0x40001110
    ae70:	40008000 	.word	0x40008000

0000ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>:
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    uint32_t ppi_mask = (1UL << PPI_EGU_RAMP_UP) |
                        (1UL << PPI_DISABLED_EGU);

    if (start_timer)
    ae74:	4b15      	ldr	r3, [pc, #84]	; (aecc <nrf_802154_trx_ppi_for_ramp_up_clear+0x58>)
    ae76:	b9a1      	cbnz	r1, aea2 <nrf_802154_trx_ppi_for_ramp_up_clear+0x2e>
    p_reg->CHENCLR = mask;
    ae78:	22c0      	movs	r2, #192	; 0xc0
    ae7a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ae7e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae82:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    ae86:	f8c3 192c 	str.w	r1, [r3, #2348]	; 0x92c
    p_reg->CH[(uint32_t) channel].EEP = eep;
    ae8a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
    ae8e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544

NRF_STATIC_INLINE void nrf_ppi_channel_remove_from_group(NRF_PPI_Type *          p_reg,
                                                         nrf_ppi_channel_t       channel,
                                                         nrf_ppi_channel_group_t channel_group)
{
    p_reg->CHG[(uint32_t) channel_group] &= ~(PPI_CHG_CH0_Included << ((uint32_t) channel));
    ae92:	4a0e      	ldr	r2, [pc, #56]	; (aecc <nrf_802154_trx_ppi_for_ramp_up_clear+0x58>)
    ae94:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
    ae98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ae9c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    }

    nrf_ppi_channel_remove_from_group(NRF_PPI, PPI_EGU_RAMP_UP, PPI_CHGRP_RAMP_UP);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    aea0:	4770      	bx	lr
    p_reg->CHENCLR = mask;
    aea2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    aea6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    aeaa:	2200      	movs	r2, #0
    aeac:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
    aeb0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    aeb4:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    p_reg->CH[(uint32_t) channel].EEP = eep;
    aeb8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
    aebc:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CH[(uint32_t) channel].EEP = eep;
    aec0:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
    aec4:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
}
    aec8:	e7e3      	b.n	ae92 <nrf_802154_trx_ppi_for_ramp_up_clear+0x1e>
    aeca:	bf00      	nop
    aecc:	4001f000 	.word	0x4001f000

0000aed0 <nrf_802154_trx_ppi_for_ramp_up_was_triggered>:
    __ASM("nop");
    __ASM("nop");
}

bool nrf_802154_trx_ppi_for_ramp_up_was_triggered(void)
{
    aed0:	b508      	push	{r3, lr}
    return (nrf_radio_state_t) p_reg->STATE;
    aed2:	4b08      	ldr	r3, [pc, #32]	; (aef4 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x24>)
    aed4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    if (nrf_radio_state_get(NRF_RADIO) != NRF_RADIO_STATE_DISABLED)
    aed8:	b2db      	uxtb	r3, r3
    aeda:	b943      	cbnz	r3, aeee <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x1e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
    aedc:	4b06      	ldr	r3, [pc, #24]	; (aef8 <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x28>)
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return true;
    }

    // Wait for PPIs
    nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait();
    aede:	f008 fb0b 	bl	134f8 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>
    aee2:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c

    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, EGU_EVENT))
    aee6:	3800      	subs	r0, #0
    aee8:	bf18      	it	ne
    aeea:	2001      	movne	r0, #1
        return true;
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
    return false;
}
    aeec:	bd08      	pop	{r3, pc}
        return true;
    aeee:	2001      	movs	r0, #1
    aef0:	e7fc      	b.n	aeec <nrf_802154_trx_ppi_for_ramp_up_was_triggered+0x1c>
    aef2:	bf00      	nop
    aef4:	40001000 	.word	0x40001000
    aef8:	40017000 	.word	0x40017000

0000aefc <nrf_802154_trx_ppi_for_ack_tx_set>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
    aefc:	4b05      	ldr	r3, [pc, #20]	; (af14 <nrf_802154_trx_ppi_for_ack_tx_set+0x18>)
    aefe:	4a06      	ldr	r2, [pc, #24]	; (af18 <nrf_802154_trx_ppi_for_ack_tx_set+0x1c>)
    af00:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
    af04:	4a05      	ldr	r2, [pc, #20]	; (af1c <nrf_802154_trx_ppi_for_ack_tx_set+0x20>)
    af06:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    af0a:	f44f 7200 	mov.w	r2, #512	; 0x200
    af0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                                   nrf_radio_task_address_get(NRF_RADIO,
                                                              NRF_RADIO_TASK_TXEN));
    nrf_ppi_channel_enable(NRF_PPI, PPI_TIMER_TX_ACK);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    af12:	4770      	bx	lr
    af14:	4001f000 	.word	0x4001f000
    af18:	40008144 	.word	0x40008144
    af1c:	40001000 	.word	0x40001000

0000af20 <nrf_802154_trx_ppi_for_ack_tx_clear>:
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    af20:	4b05      	ldr	r3, [pc, #20]	; (af38 <nrf_802154_trx_ppi_for_ack_tx_clear+0x18>)
    af22:	f44f 7200 	mov.w	r2, #512	; 0x200
    af26:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    af2a:	2200      	movs	r2, #0
    af2c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
    af30:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c

    nrf_ppi_channel_disable(NRF_PPI, PPI_TIMER_TX_ACK);
    nrf_ppi_channel_endpoint_setup(NRF_PPI, PPI_TIMER_TX_ACK, 0, 0);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    af34:	4770      	bx	lr
    af36:	bf00      	nop
    af38:	4001f000 	.word	0x4001f000

0000af3c <nrf_802154_trx_ppi_for_fem_set>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
    af3c:	4b05      	ldr	r3, [pc, #20]	; (af54 <nrf_802154_trx_ppi_for_fem_set+0x18>)
    af3e:	4a06      	ldr	r2, [pc, #24]	; (af58 <nrf_802154_trx_ppi_for_fem_set+0x1c>)
    af40:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
    af44:	4a05      	ldr	r2, [pc, #20]	; (af5c <nrf_802154_trx_ppi_for_fem_set+0x20>)
    af46:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    af4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    af4e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    nrf_ppi_channel_endpoint_setup(NRF_PPI, PPI_EGU_TIMER_START, event_addr, task_addr);
    nrf_ppi_channel_enable(NRF_PPI, PPI_EGU_TIMER_START);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    af52:	4770      	bx	lr
    af54:	4001f000 	.word	0x4001f000
    af58:	4001713c 	.word	0x4001713c
    af5c:	40008000 	.word	0x40008000

0000af60 <nrf_802154_trx_ppi_for_fem_clear>:
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    af60:	4b05      	ldr	r3, [pc, #20]	; (af78 <nrf_802154_trx_ppi_for_fem_clear+0x18>)
    af62:	f44f 7280 	mov.w	r2, #256	; 0x100
    af66:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    af6a:	2200      	movs	r2, #0
    af6c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
    af70:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554

    nrf_ppi_channel_disable(NRF_PPI, PPI_EGU_TIMER_START);
    nrf_ppi_channel_endpoint_setup(NRF_PPI, PPI_EGU_TIMER_START, 0, 0);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    af74:	4770      	bx	lr
    af76:	bf00      	nop
    af78:	4001f000 	.word	0x4001f000

0000af7c <nrf_802154_trx_ppi_for_radio_sync_set>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
    af7c:	4b07      	ldr	r3, [pc, #28]	; (af9c <nrf_802154_trx_ppi_for_radio_sync_set+0x20>)
    af7e:	4a08      	ldr	r2, [pc, #32]	; (afa0 <nrf_802154_trx_ppi_for_radio_sync_set+0x24>)
    af80:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)egu_task);
    af84:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    af88:	f500 30b8 	add.w	r0, r0, #94208	; 0x17000
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    af8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    p_reg->CH[(uint32_t) channel].TEP = tep;
    af90:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    af94:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                                   nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_SYNC),
                                   nrf_egu_task_address_get(NRF_802154_EGU_INSTANCE, task));
    nrf_ppi_channel_enable(NRF_PPI, PPI_RADIO_SYNC_EGU_SYNC);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    af98:	4770      	bx	lr
    af9a:	bf00      	nop
    af9c:	4001f000 	.word	0x4001f000
    afa0:	40001168 	.word	0x40001168

0000afa4 <nrf_802154_trx_ppi_for_radio_sync_clear>:
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    afa4:	4b05      	ldr	r3, [pc, #20]	; (afbc <nrf_802154_trx_ppi_for_radio_sync_clear+0x18>)
    afa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    afaa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    afae:	2200      	movs	r2, #0
    afb0:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    p_reg->CH[(uint32_t) channel].TEP = tep;
    afb4:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c

    nrf_ppi_channel_disable(NRF_PPI, PPI_RADIO_SYNC_EGU_SYNC);
    nrf_ppi_channel_endpoint_setup(NRF_PPI, PPI_RADIO_SYNC_EGU_SYNC, 0, 0);

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    afb8:	4770      	bx	lr
    afba:	bf00      	nop
    afbc:	4001f000 	.word	0x4001f000

0000afc0 <nrf_802154_tx_work_buffer_reset>:
static bool      m_is_secured;                              ///< Flag that indicates if work buffer has been successfully secured.
static bool      m_is_dynamic_data_updated;                 ///< Flag that indicates if work buffer has had dynamic data successfully updated.

void nrf_802154_tx_work_buffer_reset(const nrf_802154_transmitted_frame_props_t * p_frame_props)
{
    mp_original_frame   = NULL;
    afc0:	4a07      	ldr	r2, [pc, #28]	; (afe0 <nrf_802154_tx_work_buffer_reset+0x20>)
    afc2:	2300      	movs	r3, #0
    afc4:	6013      	str	r3, [r2, #0]
    m_plain_text_offset = 0;
    afc6:	4a07      	ldr	r2, [pc, #28]	; (afe4 <nrf_802154_tx_work_buffer_reset+0x24>)
    afc8:	7013      	strb	r3, [r2, #0]

    if (p_frame_props == NULL)
    afca:	4b07      	ldr	r3, [pc, #28]	; (afe8 <nrf_802154_tx_work_buffer_reset+0x28>)
    afcc:	b918      	cbnz	r0, afd6 <nrf_802154_tx_work_buffer_reset+0x16>
    {
        m_is_secured              = false;
    afce:	7018      	strb	r0, [r3, #0]
        m_is_dynamic_data_updated = false;
    afd0:	4b06      	ldr	r3, [pc, #24]	; (afec <nrf_802154_tx_work_buffer_reset+0x2c>)
    afd2:	7018      	strb	r0, [r3, #0]
    else
    {
        m_is_secured              = p_frame_props->is_secured;
        m_is_dynamic_data_updated = p_frame_props->dynamic_data_is_set;
    }
}
    afd4:	4770      	bx	lr
        m_is_secured              = p_frame_props->is_secured;
    afd6:	7802      	ldrb	r2, [r0, #0]
    afd8:	701a      	strb	r2, [r3, #0]
        m_is_dynamic_data_updated = p_frame_props->dynamic_data_is_set;
    afda:	7840      	ldrb	r0, [r0, #1]
    afdc:	e7f8      	b.n	afd0 <nrf_802154_tx_work_buffer_reset+0x10>
    afde:	bf00      	nop
    afe0:	20001ec0 	.word	0x20001ec0
    afe4:	200036e0 	.word	0x200036e0
    afe8:	200036df 	.word	0x200036df
    afec:	200036de 	.word	0x200036de

0000aff0 <nrf_802154_tx_work_buffer_get>:
    return m_work_buffer;
}

const uint8_t * nrf_802154_tx_work_buffer_get(const uint8_t * p_original_frame)
{
    return mp_original_frame ? m_work_buffer : p_original_frame;
    aff0:	4b03      	ldr	r3, [pc, #12]	; (b000 <nrf_802154_tx_work_buffer_get+0x10>)
    aff2:	681a      	ldr	r2, [r3, #0]
}
    aff4:	4b03      	ldr	r3, [pc, #12]	; (b004 <nrf_802154_tx_work_buffer_get+0x14>)
    aff6:	2a00      	cmp	r2, #0
    aff8:	bf18      	it	ne
    affa:	4618      	movne	r0, r3
    affc:	4770      	bx	lr
    affe:	bf00      	nop
    b000:	20001ec0 	.word	0x20001ec0
    b004:	200036e1 	.word	0x200036e1

0000b008 <nrf_802154_tx_work_buffer_original_frame_update>:

void nrf_802154_tx_work_buffer_original_frame_update(
    uint8_t                              * p_original_frame,
    nrf_802154_transmitted_frame_props_t * p_frame_props)
{
    b008:	b410      	push	{r4}
    assert(p_frame_props != NULL);

    p_frame_props->is_secured          = m_is_secured;
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
    b00a:	4a0e      	ldr	r2, [pc, #56]	; (b044 <nrf_802154_tx_work_buffer_original_frame_update+0x3c>)
    p_frame_props->is_secured          = m_is_secured;
    b00c:	4b0e      	ldr	r3, [pc, #56]	; (b048 <nrf_802154_tx_work_buffer_original_frame_update+0x40>)
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
    b00e:	7814      	ldrb	r4, [r2, #0]

    if (mp_original_frame == NULL)
    b010:	4a0e      	ldr	r2, [pc, #56]	; (b04c <nrf_802154_tx_work_buffer_original_frame_update+0x44>)
    p_frame_props->is_secured          = m_is_secured;
    b012:	781b      	ldrb	r3, [r3, #0]
    if (mp_original_frame == NULL)
    b014:	6812      	ldr	r2, [r2, #0]
    p_frame_props->is_secured          = m_is_secured;
    b016:	700b      	strb	r3, [r1, #0]
    p_frame_props->dynamic_data_is_set = m_is_dynamic_data_updated;
    b018:	704c      	strb	r4, [r1, #1]
    if (mp_original_frame == NULL)
    b01a:	b182      	cbz	r2, b03e <nrf_802154_tx_work_buffer_original_frame_update+0x36>
    {
        return;
    }

    uint8_t work_buffer_len = m_work_buffer[PHR_OFFSET] + PHR_SIZE;
    b01c:	490c      	ldr	r1, [pc, #48]	; (b050 <nrf_802154_tx_work_buffer_original_frame_update+0x48>)
    b01e:	780a      	ldrb	r2, [r1, #0]
    b020:	3201      	adds	r2, #1
    b022:	b2d2      	uxtb	r2, r2

    if (m_is_dynamic_data_updated && m_is_secured)
    b024:	b134      	cbz	r4, b034 <nrf_802154_tx_work_buffer_original_frame_update+0x2c>
    b026:	b113      	cbz	r3, b02e <nrf_802154_tx_work_buffer_original_frame_update+0x26>
    }
    else
    {
        // Intentionally empty.
    }
}
    b028:	bc10      	pop	{r4}
        memcpy(p_original_frame, m_work_buffer, work_buffer_len - m_plain_text_offset);
    b02a:	f007 be4f 	b.w	12ccc <memcpy>
        memcpy(p_original_frame, m_work_buffer, m_plain_text_offset);
    b02e:	4b09      	ldr	r3, [pc, #36]	; (b054 <nrf_802154_tx_work_buffer_original_frame_update+0x4c>)
    b030:	781a      	ldrb	r2, [r3, #0]
    b032:	e7f9      	b.n	b028 <nrf_802154_tx_work_buffer_original_frame_update+0x20>
    else if (m_is_secured)
    b034:	b11b      	cbz	r3, b03e <nrf_802154_tx_work_buffer_original_frame_update+0x36>
        memcpy(p_original_frame, m_work_buffer, work_buffer_len - m_plain_text_offset);
    b036:	4b07      	ldr	r3, [pc, #28]	; (b054 <nrf_802154_tx_work_buffer_original_frame_update+0x4c>)
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	1ad2      	subs	r2, r2, r3
    b03c:	e7f4      	b.n	b028 <nrf_802154_tx_work_buffer_original_frame_update+0x20>
}
    b03e:	bc10      	pop	{r4}
    b040:	4770      	bx	lr
    b042:	bf00      	nop
    b044:	200036de 	.word	0x200036de
    b048:	200036df 	.word	0x200036df
    b04c:	20001ec0 	.word	0x20001ec0
    b050:	200036e1 	.word	0x200036e1
    b054:	200036e0 	.word	0x200036e0

0000b058 <notify_failed>:
 * @brief Notify MAC layer that CSMA-CA failed
 *
 * @param[in]  error  The error that caused the failure
 */
static void notify_failed(nrf_802154_tx_error_t error)
{
    b058:	b510      	push	{r4, lr}
    b05a:	b086      	sub	sp, #24
    b05c:	4604      	mov	r4, r0
    // core rejected attempt, use my current frame_props
    nrf_802154_transmit_done_metadata_t metadata = {};
    b05e:	2218      	movs	r2, #24
    b060:	2100      	movs	r1, #0
    b062:	4668      	mov	r0, sp
    b064:	f007 fe3d 	bl	12ce2 <memset>

    metadata.frame_props = m_data_props;
    b068:	4b05      	ldr	r3, [pc, #20]	; (b080 <notify_failed+0x28>)
    b06a:	881b      	ldrh	r3, [r3, #0]
    b06c:	f8ad 3000 	strh.w	r3, [sp]

    nrf_802154_notify_transmit_failed(mp_data, error, &metadata);
    b070:	4b04      	ldr	r3, [pc, #16]	; (b084 <notify_failed+0x2c>)
    b072:	466a      	mov	r2, sp
    b074:	6818      	ldr	r0, [r3, #0]
    b076:	4621      	mov	r1, r4
    b078:	f008 fb94 	bl	137a4 <nrf_802154_notify_transmit_failed>
}
    b07c:	b006      	add	sp, #24
    b07e:	bd10      	pop	{r4, pc}
    b080:	20003765 	.word	0x20003765
    b084:	20001ec4 	.word	0x20001ec4

0000b088 <random_backoff_start>:

/**
 * @brief Delay CCA procedure for random (2^BE - 1) unit backoff periods.
 */
static void random_backoff_start(void)
{
    b088:	b530      	push	{r4, r5, lr}
    b08a:	b087      	sub	sp, #28
    return nrf_802154_random_get() % (1U << m_be);
    b08c:	f7fd f8de 	bl	824c <nrf_802154_random_get>
    b090:	4b1e      	ldr	r3, [pc, #120]	; (b10c <random_backoff_start+0x84>)
    b092:	781c      	ldrb	r4, [r3, #0]
    b094:	2501      	movs	r5, #1
    b096:	fa05 f404 	lsl.w	r4, r5, r4
    b09a:	3c01      	subs	r4, #1
    b09c:	4004      	ands	r4, r0
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_HIGH);

    uint64_t backoff_us = backoff_periods_calc() * UNIT_BACKOFF_PERIOD;
    b09e:	f44f 73a0 	mov.w	r3, #320	; 0x140

    rsch_dly_ts_param_t backoff_ts_param =
    b0a2:	2218      	movs	r2, #24
    b0a4:	2100      	movs	r1, #0
    uint64_t backoff_us = backoff_periods_calc() * UNIT_BACKOFF_PERIOD;
    b0a6:	b2e4      	uxtb	r4, r4
    rsch_dly_ts_param_t backoff_ts_param =
    b0a8:	4668      	mov	r0, sp
    uint64_t backoff_us = backoff_periods_calc() * UNIT_BACKOFF_PERIOD;
    b0aa:	435c      	muls	r4, r3
    rsch_dly_ts_param_t backoff_ts_param =
    b0ac:	f007 fe19 	bl	12ce2 <memset>
    {
        .trigger_time     = nrf_802154_sl_timer_current_time_get() + backoff_us,
    b0b0:	f009 f80f 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    rsch_dly_ts_param_t backoff_ts_param =
    b0b4:	2302      	movs	r3, #2
        .trigger_time     = nrf_802154_sl_timer_current_time_get() + backoff_us,
    b0b6:	1900      	adds	r0, r0, r4
    rsch_dly_ts_param_t backoff_ts_param =
    b0b8:	f88d 3009 	strb.w	r3, [sp, #9]
    b0bc:	4b14      	ldr	r3, [pc, #80]	; (b110 <random_backoff_start+0x88>)
    b0be:	9303      	str	r3, [sp, #12]
        .trigger_time     = nrf_802154_sl_timer_current_time_get() + backoff_us,
    b0c0:	f141 0100 	adc.w	r1, r1, #0
    rsch_dly_ts_param_t backoff_ts_param =
    b0c4:	f06f 0302 	mvn.w	r3, #2
    b0c8:	e9cd 0100 	strd	r0, r1, [sp]
    b0cc:	9304      	str	r3, [sp, #16]
        .type             = RSCH_DLY_TS_TYPE_RELAXED,
        .started_callback = frame_transmit,
        .id               = NRF_802154_RESERVED_CSMACA_ID,
    };

    switch (nrf_802154_pib_coex_tx_request_mode_get())
    b0ce:	f7fe fe1f 	bl	9d10 <nrf_802154_pib_coex_tx_request_mode_get>
    b0d2:	2802      	cmp	r0, #2
    b0d4:	d012      	beq.n	b0fc <random_backoff_start+0x74>
    b0d6:	d806      	bhi.n	b0e6 <random_backoff_start+0x5e>
    b0d8:	42a8      	cmp	r0, r5
    b0da:	d00b      	beq.n	b0f4 <random_backoff_start+0x6c>
            assert(false);
            break;
    }

    // Delayed timeslot with these parameters should always be scheduled
    if (!nrf_802154_rsch_delayed_timeslot_request(&backoff_ts_param))
    b0dc:	4668      	mov	r0, sp
    b0de:	f004 f875 	bl	f1cc <nrf_802154_rsch_delayed_timeslot_request>
    {
        assert(false);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    b0e2:	b007      	add	sp, #28
    b0e4:	bd30      	pop	{r4, r5, pc}
    switch (nrf_802154_pib_coex_tx_request_mode_get())
    b0e6:	3803      	subs	r0, #3
    b0e8:	b2c0      	uxtb	r0, r0
    b0ea:	2801      	cmp	r0, #1
    b0ec:	d8f6      	bhi.n	b0dc <random_backoff_start+0x54>
            backoff_ts_param.prio = RSCH_PRIO_IDLE_LISTENING;
    b0ee:	f88d 5008 	strb.w	r5, [sp, #8]
            break;
    b0f2:	e7f3      	b.n	b0dc <random_backoff_start+0x54>
            backoff_ts_param.prio = RSCH_PRIO_TX;
    b0f4:	2304      	movs	r3, #4
            backoff_ts_param.prio = (m_nb == 0) ? RSCH_PRIO_IDLE_LISTENING : RSCH_PRIO_TX;
    b0f6:	f88d 3008 	strb.w	r3, [sp, #8]
            break;
    b0fa:	e7ef      	b.n	b0dc <random_backoff_start+0x54>
            backoff_ts_param.prio = (m_nb == 0) ? RSCH_PRIO_IDLE_LISTENING : RSCH_PRIO_TX;
    b0fc:	4b05      	ldr	r3, [pc, #20]	; (b114 <random_backoff_start+0x8c>)
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	2b00      	cmp	r3, #0
    b102:	bf14      	ite	ne
    b104:	2304      	movne	r3, #4
    b106:	2301      	moveq	r3, #1
    b108:	e7f5      	b.n	b0f6 <random_backoff_start+0x6e>
    b10a:	bf00      	nop
    b10c:	20003767 	.word	0x20003767
    b110:	0000b1c9 	.word	0x0000b1c9
    b114:	20003768 	.word	0x20003768

0000b118 <notify_busy_channel>:
{
    b118:	b510      	push	{r4, lr}
    nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID, true);
    b11a:	2101      	movs	r1, #1
{
    b11c:	4604      	mov	r4, r0
    nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID, true);
    b11e:	f06f 0002 	mvn.w	r0, #2
    b122:	f008 ff8a 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    if (!result && (m_nb >= nrf_802154_pib_csmaca_max_backoffs_get()))
    b126:	b954      	cbnz	r4, b13e <notify_busy_channel+0x26>
    b128:	f7fe fe04 	bl	9d34 <nrf_802154_pib_csmaca_max_backoffs_get>
    b12c:	4b04      	ldr	r3, [pc, #16]	; (b140 <notify_busy_channel+0x28>)
    b12e:	781b      	ldrb	r3, [r3, #0]
    b130:	4283      	cmp	r3, r0
    b132:	d304      	bcc.n	b13e <notify_busy_channel+0x26>
}
    b134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        notify_failed(NRF_802154_TX_ERROR_BUSY_CHANNEL);
    b138:	2001      	movs	r0, #1
    b13a:	f7ff bf8d 	b.w	b058 <notify_failed>
}
    b13e:	bd10      	pop	{r4, pc}
    b140:	20003768 	.word	0x20003768

0000b144 <csma_ca_state_set>:
  __ASM volatile ("dmb 0xF":::"memory");
    b144:	f3bf 8f5f 	dmb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
    b148:	4a08      	ldr	r2, [pc, #32]	; (b16c <csma_ca_state_set+0x28>)
    b14a:	e8d2 3f4f 	ldrexb	r3, [r2]

    do
    {
        uint8_t old_val = __LDREXB((volatile uint8_t *)p_obj);

        if ( old_val != *p_expected)
    b14e:	b2db      	uxtb	r3, r3
    b150:	4283      	cmp	r3, r0
    b152:	d003      	beq.n	b15c <csma_ca_state_set+0x18>
  __ASM volatile ("clrex" ::: "memory");
    b154:	f3bf 8f2f 	clrex
        {
            *p_expected = old_val;
            __CLREX();
            return false;
    b158:	2000      	movs	r0, #0
    b15a:	4770      	bx	lr
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
    b15c:	e8c2 1f43 	strexb	r3, r1, [r2]
        }
    }
    while (__STREXB(desired, (volatile uint8_t *)p_obj));
    b160:	2b00      	cmp	r3, #0
    b162:	d1f2      	bne.n	b14a <csma_ca_state_set+0x6>
  __ASM volatile ("dmb 0xF":::"memory");
    b164:	f3bf 8f5f 	dmb	sy

    __DMB();

    return true;
    b168:	2001      	movs	r0, #1
}
    b16a:	4770      	bx	lr
    b16c:	20003761 	.word	0x20003761

0000b170 <channel_busy>:

static bool channel_busy(void)
{
    b170:	b510      	push	{r4, lr}
    bool result = true;

    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (csma_ca_state_set(CSMA_CA_STATE_ONGOING, CSMA_CA_STATE_BACKOFF))
    b172:	2101      	movs	r1, #1
    b174:	2002      	movs	r0, #2
    b176:	f7ff ffe5 	bl	b144 <csma_ca_state_set>
    b17a:	b908      	cbnz	r0, b180 <channel_busy+0x10>
    bool result = true;
    b17c:	2001      	movs	r0, #1
        }
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return result;
}
    b17e:	bd10      	pop	{r4, pc}
        m_nb++;
    b180:	4c0e      	ldr	r4, [pc, #56]	; (b1bc <channel_busy+0x4c>)
    b182:	7823      	ldrb	r3, [r4, #0]
    b184:	3301      	adds	r3, #1
    b186:	7023      	strb	r3, [r4, #0]
        if (m_be < nrf_802154_pib_csmaca_max_be_get())
    b188:	f7fe fdce 	bl	9d28 <nrf_802154_pib_csmaca_max_be_get>
    b18c:	4a0c      	ldr	r2, [pc, #48]	; (b1c0 <channel_busy+0x50>)
    b18e:	7813      	ldrb	r3, [r2, #0]
    b190:	4298      	cmp	r0, r3
            m_be++;
    b192:	bf84      	itt	hi
    b194:	3301      	addhi	r3, #1
    b196:	7013      	strbhi	r3, [r2, #0]
        if (m_nb > nrf_802154_pib_csmaca_max_backoffs_get())
    b198:	f7fe fdcc 	bl	9d34 <nrf_802154_pib_csmaca_max_backoffs_get>
    b19c:	7823      	ldrb	r3, [r4, #0]
    b19e:	4283      	cmp	r3, r0
    b1a0:	f04f 0400 	mov.w	r4, #0
    b1a4:	d906      	bls.n	b1b4 <channel_busy+0x44>
            mp_data = NULL;
    b1a6:	4b07      	ldr	r3, [pc, #28]	; (b1c4 <channel_busy+0x54>)
            bool ret = csma_ca_state_set(CSMA_CA_STATE_BACKOFF, CSMA_CA_STATE_IDLE);
    b1a8:	4621      	mov	r1, r4
    b1aa:	2001      	movs	r0, #1
            mp_data = NULL;
    b1ac:	601c      	str	r4, [r3, #0]
            bool ret = csma_ca_state_set(CSMA_CA_STATE_BACKOFF, CSMA_CA_STATE_IDLE);
    b1ae:	f7ff ffc9 	bl	b144 <csma_ca_state_set>
            (void)ret;
    b1b2:	e7e3      	b.n	b17c <channel_busy+0xc>
            random_backoff_start();
    b1b4:	f7ff ff68 	bl	b088 <random_backoff_start>
            result = false;
    b1b8:	4620      	mov	r0, r4
    b1ba:	e7e0      	b.n	b17e <channel_busy+0xe>
    b1bc:	20003768 	.word	0x20003768
    b1c0:	20003767 	.word	0x20003767
    b1c4:	20001ec4 	.word	0x20001ec4

0000b1c8 <frame_transmit>:
{
    b1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b1ca:	4604      	mov	r4, r0
    if (csma_ca_state_set(CSMA_CA_STATE_BACKOFF, CSMA_CA_STATE_ONGOING))
    b1cc:	2102      	movs	r1, #2
    b1ce:	2001      	movs	r0, #1
    b1d0:	f7ff ffb8 	bl	b144 <csma_ca_state_set>
    b1d4:	b348      	cbz	r0, b22a <frame_transmit+0x62>
    bool first_transmit_attempt     = (0 == m_nb);
    b1d6:	4b18      	ldr	r3, [pc, #96]	; (b238 <frame_transmit+0x70>)
    b1d8:	781c      	ldrb	r4, [r3, #0]
    bool coex_requires_boosted_prio = (nrf_802154_pib_coex_tx_request_mode_get() ==
    b1da:	f7fe fd99 	bl	9d10 <nrf_802154_pib_coex_tx_request_mode_get>
    if (first_transmit_attempt && coex_requires_boosted_prio)
    b1de:	b934      	cbnz	r4, b1ee <frame_transmit+0x26>
    b1e0:	2802      	cmp	r0, #2
    b1e2:	d104      	bne.n	b1ee <frame_transmit+0x26>
        if (!nrf_802154_rsch_delayed_timeslot_priority_update(NRF_802154_RESERVED_CSMACA_ID,
    b1e4:	2104      	movs	r1, #4
    b1e6:	f06f 0002 	mvn.w	r0, #2
    b1ea:	f008 ff42 	bl	14072 <nrf_802154_rsch_delayed_timeslot_priority_update>
        nrf_802154_transmit_params_t params =
    b1ee:	4b13      	ldr	r3, [pc, #76]	; (b23c <frame_transmit+0x74>)
    b1f0:	881b      	ldrh	r3, [r3, #0]
    b1f2:	f8ad 3008 	strh.w	r3, [sp, #8]
    b1f6:	4b12      	ldr	r3, [pc, #72]	; (b240 <frame_transmit+0x78>)
    b1f8:	881a      	ldrh	r2, [r3, #0]
    b1fa:	789b      	ldrb	r3, [r3, #2]
    b1fc:	f88d 300c 	strb.w	r3, [sp, #12]
    b200:	2301      	movs	r3, #1
    b202:	f8ad 200a 	strh.w	r2, [sp, #10]
    b206:	f88d 300d 	strb.w	r3, [sp, #13]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
    b20a:	4a0e      	ldr	r2, [pc, #56]	; (b244 <frame_transmit+0x7c>)
    b20c:	4b0e      	ldr	r3, [pc, #56]	; (b248 <frame_transmit+0x80>)
    b20e:	9300      	str	r3, [sp, #0]
        nrf_802154_transmit_params_t params =
    b210:	2000      	movs	r0, #0
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
    b212:	6812      	ldr	r2, [r2, #0]
        nrf_802154_transmit_params_t params =
    b214:	f88d 000e 	strb.w	r0, [sp, #14]
        if (!nrf_802154_request_transmit(NRF_802154_TERM_NONE,
    b218:	ab02      	add	r3, sp, #8
    b21a:	2103      	movs	r1, #3
    b21c:	f008 fb05 	bl	1382a <nrf_802154_request_transmit>
    b220:	b908      	cbnz	r0, b226 <frame_transmit+0x5e>
            (void)channel_busy();
    b222:	f7ff ffa5 	bl	b170 <channel_busy>
}
    b226:	b004      	add	sp, #16
    b228:	bd10      	pop	{r4, pc}
        nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
    b22a:	2101      	movs	r1, #1
    b22c:	4620      	mov	r0, r4
}
    b22e:	b004      	add	sp, #16
    b230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
    b234:	f008 bf01 	b.w	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    b238:	20003768 	.word	0x20003768
    b23c:	20003765 	.word	0x20003765
    b240:	20003762 	.word	0x20003762
    b244:	20001ec4 	.word	0x20001ec4
    b248:	0000b119 	.word	0x0000b119

0000b24c <nrf_802154_csma_ca_start>:

bool nrf_802154_csma_ca_start(uint8_t                                      * p_data,
                              const nrf_802154_transmit_csma_ca_metadata_t * p_metadata)
{
    b24c:	b538      	push	{r3, r4, r5, lr}
    b24e:	4605      	mov	r5, r0
    b250:	460c      	mov	r4, r1
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

#if (NRF_802154_FRAME_TIMESTAMP_ENABLED)
    uint64_t ts = nrf_802154_sl_timer_current_time_get();
    b252:	f008 ff3e 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    b256:	4602      	mov	r2, r0
    b258:	460b      	mov	r3, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b25a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    b25e:	b672      	cpsid	i

    nrf_802154_stat_timestamp_write(last_csmaca_start_timestamp, ts);
    b260:	4810      	ldr	r0, [pc, #64]	; (b2a4 <nrf_802154_csma_ca_start+0x58>)
    b262:	e9c0 2308 	strd	r2, r3, [r0, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b266:	f381 8810 	msr	PRIMASK, r1
#endif

    bool result = csma_ca_state_set(CSMA_CA_STATE_IDLE, CSMA_CA_STATE_BACKOFF);
    b26a:	2101      	movs	r1, #1
    b26c:	2000      	movs	r0, #0
    b26e:	f7ff ff69 	bl	b144 <csma_ca_state_set>

    assert(result);
    (void)result;

    mp_data      = p_data;
    b272:	4b0d      	ldr	r3, [pc, #52]	; (b2a8 <nrf_802154_csma_ca_start+0x5c>)
    m_data_props = p_metadata->frame_props;
    b274:	8822      	ldrh	r2, [r4, #0]
    mp_data      = p_data;
    b276:	601d      	str	r5, [r3, #0]
    m_data_props = p_metadata->frame_props;
    b278:	4b0c      	ldr	r3, [pc, #48]	; (b2ac <nrf_802154_csma_ca_start+0x60>)
    b27a:	801a      	strh	r2, [r3, #0]
    m_nb         = 0;
    b27c:	4b0c      	ldr	r3, [pc, #48]	; (b2b0 <nrf_802154_csma_ca_start+0x64>)
    b27e:	2200      	movs	r2, #0
    b280:	701a      	strb	r2, [r3, #0]
    m_be         = nrf_802154_pib_csmaca_min_be_get();
    b282:	f7fe fd4b 	bl	9d1c <nrf_802154_pib_csmaca_min_be_get>
    b286:	4b0b      	ldr	r3, [pc, #44]	; (b2b4 <nrf_802154_csma_ca_start+0x68>)
    b288:	7018      	strb	r0, [r3, #0]
    (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(nrf_802154_pib_channel_get(),
    b28a:	f7fe fd05 	bl	9c98 <nrf_802154_pib_channel_get>
    b28e:	78a3      	ldrb	r3, [r4, #2]
    b290:	78e1      	ldrb	r1, [r4, #3]
    b292:	4a09      	ldr	r2, [pc, #36]	; (b2b8 <nrf_802154_csma_ca_start+0x6c>)
    b294:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    b298:	f008 f935 	bl	13506 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>
                                                                 p_metadata->tx_power,
                                                                 &m_tx_power);

    random_backoff_start();
    b29c:	f7ff fef4 	bl	b088 <random_backoff_start>

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return true;
}
    b2a0:	2001      	movs	r0, #1
    b2a2:	bd38      	pop	{r3, r4, r5, pc}
    b2a4:	20000f18 	.word	0x20000f18
    b2a8:	20001ec4 	.word	0x20001ec4
    b2ac:	20003765 	.word	0x20003765
    b2b0:	20003768 	.word	0x20003768
    b2b4:	20003767 	.word	0x20003767
    b2b8:	20003762 	.word	0x20003762

0000b2bc <nrf_802154_csma_ca_abort>:
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    bool result = true;

    if (((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER)) ||
    b2bc:	2901      	cmp	r1, #1
{
    b2be:	b508      	push	{r3, lr}
    if (((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER)) ||
    b2c0:	d901      	bls.n	b2c6 <nrf_802154_csma_ca_abort+0xa>
    bool result = true;
    b2c2:	2001      	movs	r0, #1
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    b2c4:	bd08      	pop	{r3, pc}
  __ASM volatile ("dmb 0xF":::"memory");
    b2c6:	f3bf 8f5f 	dmb	sy
static inline uint8_t nrf_802154_sl_atomic_load_u8(uint8_t * p_obj)
{
    uint8_t value;

    __DMB();
    value = *p_obj;
    b2ca:	4b0a      	ldr	r3, [pc, #40]	; (b2f4 <nrf_802154_csma_ca_abort+0x38>)
    b2cc:	781a      	ldrb	r2, [r3, #0]
    b2ce:	f3bf 8f5f 	dmb	sy
    if (((req_orig != REQ_ORIG_CORE) && (req_orig != REQ_ORIG_HIGHER_LAYER)) ||
    b2d2:	2a00      	cmp	r2, #0
    b2d4:	d0f5      	beq.n	b2c2 <nrf_802154_csma_ca_abort+0x6>
    else if (term_lvl >= NRF_802154_TERM_802154)
    b2d6:	2800      	cmp	r0, #0
    b2d8:	d0f4      	beq.n	b2c4 <nrf_802154_csma_ca_abort+0x8>
    b2da:	f3bf 8f5f 	dmb	sy
    *p_obj = value;
    b2de:	2203      	movs	r2, #3
    b2e0:	701a      	strb	r2, [r3, #0]
    b2e2:	f3bf 8f5f 	dmb	sy
        nrf_802154_rsch_delayed_timeslot_cancel(NRF_802154_RESERVED_CSMACA_ID, false);
    b2e6:	2100      	movs	r1, #0
    b2e8:	f06f 0002 	mvn.w	r0, #2
    b2ec:	f008 fea5 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    b2f0:	e7e7      	b.n	b2c2 <nrf_802154_csma_ca_abort+0x6>
    b2f2:	bf00      	nop
    b2f4:	20003761 	.word	0x20003761

0000b2f8 <nrf_802154_csma_ca_tx_failed_hook>:

bool nrf_802154_csma_ca_tx_failed_hook(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
    b2f8:	b570      	push	{r4, r5, r6, lr}
        // shall be stopped.

        case NRF_802154_TX_ERROR_KEY_ID_INVALID:
        /* Fallthrough. */
        case NRF_802154_TX_ERROR_FRAME_COUNTER_ERROR:
            if (mp_data == p_frame)
    b2fa:	4a12      	ldr	r2, [pc, #72]	; (b344 <nrf_802154_csma_ca_tx_failed_hook+0x4c>)
    switch (error)
    b2fc:	f1a1 0308 	sub.w	r3, r1, #8
    b300:	2b01      	cmp	r3, #1
            if (mp_data == p_frame)
    b302:	6816      	ldr	r6, [r2, #0]
{
    b304:	4604      	mov	r4, r0
    b306:	460d      	mov	r5, r1
    switch (error)
    b308:	d80b      	bhi.n	b322 <nrf_802154_csma_ca_tx_failed_hook+0x2a>
            if (mp_data == p_frame)
    b30a:	42b0      	cmp	r0, r6
    b30c:	d107      	bne.n	b31e <nrf_802154_csma_ca_tx_failed_hook+0x26>
            {
                mp_data = NULL;
    b30e:	2300      	movs	r3, #0
    b310:	6013      	str	r3, [r2, #0]
    b312:	f3bf 8f5f 	dmb	sy
    b316:	4a0c      	ldr	r2, [pc, #48]	; (b348 <nrf_802154_csma_ca_tx_failed_hook+0x50>)
    b318:	7013      	strb	r3, [r2, #0]
    b31a:	f3bf 8f5f 	dmb	sy
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);

    return result;
}
    b31e:	2001      	movs	r0, #1
    b320:	bd70      	pop	{r4, r5, r6, pc}
            if (csma_ca_state_set(CSMA_CA_STATE_ABORTED, CSMA_CA_STATE_IDLE))
    b322:	2100      	movs	r1, #0
    b324:	2003      	movs	r0, #3
    b326:	f7ff ff0d 	bl	b144 <csma_ca_state_set>
    b32a:	b128      	cbz	r0, b338 <nrf_802154_csma_ca_tx_failed_hook+0x40>
                if (p_frame != mp_data)
    b32c:	42b4      	cmp	r4, r6
    b32e:	d0f6      	beq.n	b31e <nrf_802154_csma_ca_tx_failed_hook+0x26>
                    notify_failed(error);
    b330:	4628      	mov	r0, r5
    b332:	f7ff fe91 	bl	b058 <notify_failed>
    b336:	e7f2      	b.n	b31e <nrf_802154_csma_ca_tx_failed_hook+0x26>
            else if (p_frame == mp_data)
    b338:	42b4      	cmp	r4, r6
    b33a:	d1f0      	bne.n	b31e <nrf_802154_csma_ca_tx_failed_hook+0x26>
}
    b33c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                result = channel_busy();
    b340:	f7ff bf16 	b.w	b170 <channel_busy>
    b344:	20001ec4 	.word	0x20001ec4
    b348:	20003761 	.word	0x20003761

0000b34c <nrf_802154_csma_ca_tx_started_hook>:

bool nrf_802154_csma_ca_tx_started_hook(uint8_t * p_frame)
{
    nrf_802154_log_function_enter(NRF_802154_LOG_VERBOSITY_LOW);

    if (mp_data == p_frame)
    b34c:	4a06      	ldr	r2, [pc, #24]	; (b368 <nrf_802154_csma_ca_tx_started_hook+0x1c>)
    b34e:	6813      	ldr	r3, [r2, #0]
    b350:	4283      	cmp	r3, r0
    b352:	d107      	bne.n	b364 <nrf_802154_csma_ca_tx_started_hook+0x18>
    {
        mp_data = NULL;
    b354:	2300      	movs	r3, #0
    b356:	6013      	str	r3, [r2, #0]
    b358:	f3bf 8f5f 	dmb	sy
    b35c:	4a03      	ldr	r2, [pc, #12]	; (b36c <nrf_802154_csma_ca_tx_started_hook+0x20>)
    b35e:	7013      	strb	r3, [r2, #0]
    b360:	f3bf 8f5f 	dmb	sy
        nrf_802154_sl_atomic_store_u8(&m_state, CSMA_CA_STATE_IDLE);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
    return true;
}
    b364:	2001      	movs	r0, #1
    b366:	4770      	bx	lr
    b368:	20001ec4 	.word	0x20001ec4
    b36c:	20003761 	.word	0x20003761

0000b370 <dly_tx_result_notify>:
 * Transmit request result callback.
 *
 * @param[in]  result  Result of TX request.
 */
static void dly_tx_result_notify(bool result)
{
    b370:	b510      	push	{r4, lr}
    if (id == m_dly_tx_data[0].id)
    b372:	4c0b      	ldr	r4, [pc, #44]	; (b3a0 <dly_tx_result_notify+0x30>)
    b374:	6863      	ldr	r3, [r4, #4]
    return NULL;
    b376:	3304      	adds	r3, #4
{
    b378:	b086      	sub	sp, #24
    return NULL;
    b37a:	bf18      	it	ne
    b37c:	2400      	movne	r4, #0
    // Currently there's only a single delayed transmission possible at a time
    dly_op_data_t * p_dly_op_data = dly_tx_data_by_id_search(NRF_802154_RESERVED_DTX_ID);

    assert(p_dly_op_data != NULL);

    if (!result)
    b37e:	4601      	mov	r1, r0
    b380:	b958      	cbnz	r0, b39a <dly_tx_result_notify+0x2a>
    {
        // core rejected attempt, use my current frame_props
        nrf_802154_transmit_done_metadata_t metadata = {};
    b382:	2218      	movs	r2, #24
    b384:	4668      	mov	r0, sp
    b386:	f007 fcac 	bl	12ce2 <memset>

        metadata.frame_props = p_dly_op_data->tx.params.frame_props;
    b38a:	8aa3      	ldrh	r3, [r4, #20]
        nrf_802154_notify_transmit_failed(p_dly_op_data->tx.p_data,
    b38c:	6920      	ldr	r0, [r4, #16]
        metadata.frame_props = p_dly_op_data->tx.params.frame_props;
    b38e:	f8ad 3000 	strh.w	r3, [sp]
        nrf_802154_notify_transmit_failed(p_dly_op_data->tx.p_data,
    b392:	466a      	mov	r2, sp
    b394:	2107      	movs	r1, #7
    b396:	f008 fa05 	bl	137a4 <nrf_802154_notify_transmit_failed>
                                          NRF_802154_TX_ERROR_TIMESLOT_DENIED,
                                          &metadata);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    b39a:	b006      	add	sp, #24
    b39c:	bd10      	pop	{r4, pc}
    b39e:	bf00      	nop
    b3a0:	20000f68 	.word	0x20000f68

0000b3a4 <tx_timeslot_started_callback>:
 * Notify that the previously requested delayed TX timeslot has started just now.
 *
 * @param[in]  dly_ts_id  ID of the started timeslot.
 */
static void tx_timeslot_started_callback(rsch_dly_ts_id_t dly_ts_id)
{
    b3a4:	b513      	push	{r0, r1, r4, lr}
    if (id == m_dly_tx_data[0].id)
    b3a6:	4c1a      	ldr	r4, [pc, #104]	; (b410 <tx_timeslot_started_callback+0x6c>)
    b3a8:	6863      	ldr	r3, [r4, #4]
    b3aa:	4298      	cmp	r0, r3

    dly_op_data_t * p_dly_op_data = dly_tx_data_by_id_search(dly_ts_id);

    assert(p_dly_op_data != NULL);

    bool result = dly_op_state_set(p_dly_op_data,
    b3ac:	f04f 0204 	mov.w	r2, #4
    b3b0:	f04f 0102 	mov.w	r1, #2
    if (id == m_dly_tx_data[0].id)
    b3b4:	d125      	bne.n	b402 <tx_timeslot_started_callback+0x5e>
    bool result = dly_op_state_set(p_dly_op_data,
    b3b6:	4620      	mov	r0, r4
    b3b8:	f008 f8c7 	bl	1354a <dly_op_state_set>
    nrf_802154_pib_channel_set(p_dly_op_data->tx.channel);
    b3bc:	7ee0      	ldrb	r0, [r4, #27]
    b3be:	f7fe fc71 	bl	9ca4 <nrf_802154_pib_channel_set>
    if (nrf_802154_request_channel_update(REQ_ORIG_DELAYED_TRX))
    b3c2:	2005      	movs	r0, #5
    b3c4:	f008 fa79 	bl	138ba <nrf_802154_request_channel_update>
    b3c8:	b1c0      	cbz	r0, b3fc <tx_timeslot_started_callback+0x58>
        (void)nrf_802154_request_transmit(NRF_802154_TERM_802154,
    b3ca:	4b12      	ldr	r3, [pc, #72]	; (b414 <tx_timeslot_started_callback+0x70>)
    b3cc:	9300      	str	r3, [sp, #0]
    b3ce:	6922      	ldr	r2, [r4, #16]
    b3d0:	f104 0314 	add.w	r3, r4, #20
    b3d4:	2105      	movs	r1, #5
    b3d6:	2001      	movs	r0, #1
    b3d8:	f008 fa27 	bl	1382a <nrf_802154_request_transmit>
    result = nrf_802154_rsch_delayed_timeslot_cancel(p_dly_op_data->id, handler);
    b3dc:	6860      	ldr	r0, [r4, #4]
    b3de:	2101      	movs	r1, #1
    b3e0:	f008 fe2b 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    if (result)
    b3e4:	b110      	cbz	r0, b3ec <tx_timeslot_started_callback+0x48>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b3ea:	6063      	str	r3, [r4, #4]
    transmit_attempt(p_dly_op_data);

    result = dly_ts_slot_release(p_dly_op_data, true);
    assert(result);

    result = dly_op_state_set(p_dly_op_data,
    b3ec:	4808      	ldr	r0, [pc, #32]	; (b410 <tx_timeslot_started_callback+0x6c>)
    b3ee:	2201      	movs	r2, #1
    b3f0:	2104      	movs	r1, #4
                              DELAYED_TRX_OP_STATE_STOPPED);
    assert(result);
    (void)result;

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    b3f2:	b002      	add	sp, #8
    b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = dly_op_state_set(p_dly_op_data,
    b3f8:	f008 b8a7 	b.w	1354a <dly_op_state_set>
        dly_tx_result_notify(false);
    b3fc:	f7ff ffb8 	bl	b370 <dly_tx_result_notify>
    b400:	e7ec      	b.n	b3dc <tx_timeslot_started_callback+0x38>
    bool result = dly_op_state_set(p_dly_op_data,
    b402:	2000      	movs	r0, #0
    b404:	f008 f8a1 	bl	1354a <dly_op_state_set>
    nrf_802154_pib_channel_set(p_dly_op_data->tx.channel);
    b408:	2300      	movs	r3, #0
    b40a:	7edb      	ldrb	r3, [r3, #27]
    b40c:	deff      	udf	#255	; 0xff
    b40e:	bf00      	nop
    b410:	20000f68 	.word	0x20000f68
    b414:	0000b371 	.word	0x0000b371

0000b418 <dly_rx_all_ongoing_abort>:
{
    b418:	b510      	push	{r4, lr}
        ret = nrf_802154_sl_timer_remove(&p_dly_op_data->rx.timeout_timer);
    b41a:	4814      	ldr	r0, [pc, #80]	; (b46c <dly_rx_all_ongoing_abort+0x54>)
    b41c:	f004 f836 	bl	f48c <nrf_802154_sl_timer_remove>
        if (ret != NRF_802154_SL_TIMER_RET_SUCCESS)
    b420:	4602      	mov	r2, r0
    b422:	b960      	cbnz	r0, b43e <dly_rx_all_ongoing_abort+0x26>
        bool notified = nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_DELAYED_ABORTED,
    b424:	4c12      	ldr	r4, [pc, #72]	; (b470 <dly_rx_all_ongoing_abort+0x58>)
    b426:	200a      	movs	r0, #10
    b428:	6861      	ldr	r1, [r4, #4]
    b42a:	f008 f9ae 	bl	1378a <nrf_802154_notify_receive_failed>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b432:	6063      	str	r3, [r4, #4]
        result = dly_op_state_set(p_dly_op_data,
    b434:	2201      	movs	r2, #1
    b436:	2104      	movs	r1, #4
    b438:	4620      	mov	r0, r4
    b43a:	f008 f886 	bl	1354a <dly_op_state_set>
        ret = nrf_802154_sl_timer_remove(&p_dly_op_data->rx.timeout_timer);
    b43e:	480d      	ldr	r0, [pc, #52]	; (b474 <dly_rx_all_ongoing_abort+0x5c>)
    b440:	f004 f824 	bl	f48c <nrf_802154_sl_timer_remove>
        if (ret != NRF_802154_SL_TIMER_RET_SUCCESS)
    b444:	4602      	mov	r2, r0
    b446:	b978      	cbnz	r0, b468 <dly_rx_all_ongoing_abort+0x50>
        bool notified = nrf_802154_notify_receive_failed(NRF_802154_RX_ERROR_DELAYED_ABORTED,
    b448:	4c09      	ldr	r4, [pc, #36]	; (b470 <dly_rx_all_ongoing_abort+0x58>)
    b44a:	200a      	movs	r0, #10
    b44c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    b44e:	f008 f99c 	bl	1378a <nrf_802154_notify_receive_failed>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b456:	65e3      	str	r3, [r4, #92]	; 0x5c
        result = dly_op_state_set(p_dly_op_data,
    b458:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b45c:	2201      	movs	r2, #1
}
    b45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        result = dly_op_state_set(p_dly_op_data,
    b462:	2104      	movs	r1, #4
    b464:	f008 b871 	b.w	1354a <dly_op_state_set>
}
    b468:	bd10      	pop	{r4, pc}
    b46a:	bf00      	nop
    b46c:	20000fd0 	.word	0x20000fd0
    b470:	20000fc0 	.word	0x20000fc0
    b474:	20001028 	.word	0x20001028

0000b478 <dly_rx_result_notify>:
{
    b478:	b570      	push	{r4, r5, r6, lr}
    b47a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b47c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    b480:	b672      	cpsid	i
    dly_op_data_t ** pp_op = (dly_op_data_t **)nrf_802154_queue_pop_begin(&m_dly_rx_id_q);
    b482:	4818      	ldr	r0, [pc, #96]	; (b4e4 <dly_rx_result_notify+0x6c>)
    b484:	f007 ffb8 	bl	133f8 <nrf_802154_queue_pop_begin>
    b488:	4604      	mov	r4, r0
    nrf_802154_queue_pop_commit(&m_dly_rx_id_q);
    b48a:	4816      	ldr	r0, [pc, #88]	; (b4e4 <dly_rx_result_notify+0x6c>)
    b48c:	f007 ffba 	bl	13404 <nrf_802154_queue_pop_commit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b490:	f386 8810 	msr	PRIMASK, r6
    return *pp_op;
    b494:	6824      	ldr	r4, [r4, #0]
    if (p_dly_op_data == NULL)
    b496:	b324      	cbz	r4, b4e2 <dly_rx_result_notify+0x6a>
    if (result)
    b498:	b1e5      	cbz	r5, b4d4 <dly_rx_result_notify+0x5c>
        dly_rx_all_ongoing_abort();
    b49a:	f7ff ffbd 	bl	b418 <dly_rx_all_ongoing_abort>
        now = nrf_802154_sl_timer_current_time_get();
    b49e:	f008 fe18 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    b4a2:	460b      	mov	r3, r1
        p_dly_op_data->rx.timeout_timer.trigger_time        = now + tout_len;
    b4a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        p_dly_op_data->rx.timeout_timer.user_data.p_pointer = p_dly_op_data;
    b4a6:	62a4      	str	r4, [r4, #40]	; 0x28
        now = nrf_802154_sl_timer_current_time_get();
    b4a8:	4602      	mov	r2, r0
        p_dly_op_data->rx.timeout_timer.trigger_time        = now + tout_len;
    b4aa:	1889      	adds	r1, r1, r2
    b4ac:	f143 0500 	adc.w	r5, r3, #0
        p_dly_op_data->rx.extension_frame.sof_timestamp = now;
    b4b0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        p_dly_op_data->rx.timeout_timer.trigger_time        = now + tout_len;
    b4b4:	e9c4 1508 	strd	r1, r5, [r4, #32]
    b4b8:	2000      	movs	r0, #0
        p_dly_op_data->rx.timeout_timer.action_type         =
    b4ba:	2101      	movs	r1, #1
        p_dly_op_data->rx.extension_frame.psdu_length   = 0;
    b4bc:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
        p_dly_op_data->rx.timeout_timer.action_type         =
    b4c0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
        p_dly_op_data->rx.extension_frame.ack_requested = false;
    b4c4:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
    b4c8:	f104 0010 	add.w	r0, r4, #16
}
    b4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
    b4d0:	f003 bfbc 	b.w	f44c <nrf_802154_sl_timer_add>
        bool notified = nrf_802154_notify_receive_failed(
    b4d4:	6861      	ldr	r1, [r4, #4]
    b4d6:	462a      	mov	r2, r5
    b4d8:	2007      	movs	r0, #7
}
    b4da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bool notified = nrf_802154_notify_receive_failed(
    b4de:	f008 b954 	b.w	1378a <nrf_802154_notify_receive_failed>
}
    b4e2:	bd70      	pop	{r4, r5, r6, pc}
    b4e4:	20001ed0 	.word	0x20001ed0

0000b4e8 <rx_timeslot_started_callback>:
 * Notify that the previously requested delayed RX timeslot has started just now.
 *
 * @param[in]  dly_ts_id  ID of the started timeslot.
 */
static void rx_timeslot_started_callback(rsch_dly_ts_id_t dly_ts_id)
{
    b4e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (m_dly_rx_data[i].id == id)
    b4ea:	4c22      	ldr	r4, [pc, #136]	; (b574 <rx_timeslot_started_callback+0x8c>)
    b4ec:	6863      	ldr	r3, [r4, #4]
    b4ee:	4298      	cmp	r0, r3
{
    b4f0:	4605      	mov	r5, r0
        if (m_dly_rx_data[i].id == id)
    b4f2:	d003      	beq.n	b4fc <rx_timeslot_started_callback+0x14>
    b4f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    b4f6:	4298      	cmp	r0, r3
    b4f8:	d13a      	bne.n	b570 <rx_timeslot_started_callback+0x88>
                p_dly_op_data = &m_dly_rx_data[i];
    b4fa:	3458      	adds	r4, #88	; 0x58
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return;
    }

    bool attempt_success = false;
    bool result          = dly_op_state_set(p_dly_op_data,
    b4fc:	2204      	movs	r2, #4
    b4fe:	2102      	movs	r1, #2
    b500:	4620      	mov	r0, r4
    b502:	f008 f822 	bl	1354a <dly_op_state_set>
                                            DELAYED_TRX_OP_STATE_PENDING,
                                            DELAYED_TRX_OP_STATE_ONGOING);

    if (result)
    b506:	b370      	cbz	r0, b566 <rx_timeslot_started_callback+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b508:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    b50c:	b672      	cpsid	i
    dly_op_data_t ** pp_op = (dly_op_data_t **)nrf_802154_queue_push_begin(&m_dly_rx_id_q);
    b50e:	481a      	ldr	r0, [pc, #104]	; (b578 <rx_timeslot_started_callback+0x90>)
    b510:	f007 ff63 	bl	133da <nrf_802154_queue_push_begin>
    *pp_op = p_dly_op_data;
    b514:	6004      	str	r4, [r0, #0]
    nrf_802154_queue_push_commit(&m_dly_rx_id_q);
    b516:	4818      	ldr	r0, [pc, #96]	; (b578 <rx_timeslot_started_callback+0x90>)
    b518:	f007 ff65 	bl	133e6 <nrf_802154_queue_push_commit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b51c:	f386 8810 	msr	PRIMASK, r6
    nrf_802154_pib_channel_set(p_dly_op_data->rx.channel);
    b520:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    b524:	f7fe fbbe 	bl	9ca4 <nrf_802154_pib_channel_set>
    if (nrf_802154_request_channel_update(REQ_ORIG_DELAYED_TRX))
    b528:	2005      	movs	r0, #5
    b52a:	f008 f9c6 	bl	138ba <nrf_802154_request_channel_update>
    b52e:	b1c0      	cbz	r0, b562 <rx_timeslot_started_callback+0x7a>
        result = nrf_802154_request_receive(NRF_802154_TERM_802154,
    b530:	6863      	ldr	r3, [r4, #4]
    b532:	9300      	str	r3, [sp, #0]
    b534:	2301      	movs	r3, #1
    b536:	2105      	movs	r1, #5
    b538:	4a10      	ldr	r2, [pc, #64]	; (b57c <rx_timeslot_started_callback+0x94>)
    b53a:	4618      	mov	r0, r3
    b53c:	f008 f948 	bl	137d0 <nrf_802154_request_receive>
    {
        attempt_success = receive_attempt(p_dly_op_data);
    }

    result = nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
    b540:	2101      	movs	r1, #1
        result = nrf_802154_request_receive(NRF_802154_TERM_802154,
    b542:	4606      	mov	r6, r0
    result = nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
    b544:	4628      	mov	r0, r5
    b546:	f008 fd78 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    assert(result);

    if (!attempt_success)
    b54a:	b98e      	cbnz	r6, b570 <rx_timeslot_started_callback+0x88>
    {
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

        result = dly_op_state_set(p_dly_op_data,
    b550:	2201      	movs	r2, #1
    b552:	2104      	movs	r1, #4
    b554:	4620      	mov	r0, r4
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b556:	6063      	str	r3, [r4, #4]
                                  DELAYED_TRX_OP_STATE_STOPPED);
        assert(result);
    }

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
}
    b558:	b002      	add	sp, #8
    b55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        result = dly_op_state_set(p_dly_op_data,
    b55e:	f007 bff4 	b.w	1354a <dly_op_state_set>
        dly_rx_result_notify(false);
    b562:	f7ff ff89 	bl	b478 <dly_rx_result_notify>
    result = nrf_802154_rsch_delayed_timeslot_cancel(dly_ts_id, true);
    b566:	2101      	movs	r1, #1
    b568:	4628      	mov	r0, r5
    b56a:	f008 fd66 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    if (!attempt_success)
    b56e:	e7ed      	b.n	b54c <rx_timeslot_started_callback+0x64>
}
    b570:	b002      	add	sp, #8
    b572:	bd70      	pop	{r4, r5, r6, pc}
    b574:	20000fc0 	.word	0x20000fc0
    b578:	20001ed0 	.word	0x20001ed0
    b57c:	0000b479 	.word	0x0000b479

0000b580 <nrf_802154_delayed_trx_init>:
}

#endif // TEST

void nrf_802154_delayed_trx_init(void)
{
    b580:	b570      	push	{r4, r5, r6, lr}
                          sizeof(m_dly_rx_id_q_mem),
                          sizeof(m_dly_rx_id_q_mem[0]));

    for (uint32_t i = 0; i < sizeof(m_dly_rx_data) / sizeof(m_dly_rx_data[0]); i++)
    {
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
    b582:	4c0d      	ldr	r4, [pc, #52]	; (b5b8 <nrf_802154_delayed_trx_init+0x38>)
    nrf_802154_queue_init(&m_dly_rx_id_q,
    b584:	490d      	ldr	r1, [pc, #52]	; (b5bc <nrf_802154_delayed_trx_init+0x3c>)
    b586:	480e      	ldr	r0, [pc, #56]	; (b5c0 <nrf_802154_delayed_trx_init+0x40>)
    b588:	2304      	movs	r3, #4
    b58a:	2208      	movs	r2, #8
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
    b58c:	2601      	movs	r6, #1
        m_dly_rx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
    b58e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    nrf_802154_queue_init(&m_dly_rx_id_q,
    b592:	f007 ff19 	bl	133c8 <nrf_802154_queue_init>
        nrf_802154_sl_timer_init(&m_dly_rx_data[i].rx.timeout_timer);
    b596:	f104 0010 	add.w	r0, r4, #16
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
    b59a:	7026      	strb	r6, [r4, #0]
        m_dly_rx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
    b59c:	6065      	str	r5, [r4, #4]
        nrf_802154_sl_timer_init(&m_dly_rx_data[i].rx.timeout_timer);
    b59e:	f008 fd9f 	bl	140e0 <nrf_802154_sl_timer_init>
        m_dly_rx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
    b5a2:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
        m_dly_rx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
    b5a6:	65e5      	str	r5, [r4, #92]	; 0x5c
        nrf_802154_sl_timer_init(&m_dly_rx_data[i].rx.timeout_timer);
    b5a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
    b5ac:	f008 fd98 	bl	140e0 <nrf_802154_sl_timer_init>
    }

    for (uint32_t i = 0; i < sizeof(m_dly_tx_data) / sizeof(m_dly_tx_data[0]); i++)
    {
        m_dly_tx_data[i].state = DELAYED_TRX_OP_STATE_STOPPED;
    b5b0:	4b04      	ldr	r3, [pc, #16]	; (b5c4 <nrf_802154_delayed_trx_init+0x44>)
    b5b2:	701e      	strb	r6, [r3, #0]
        m_dly_tx_data[i].id    = NRF_802154_RESERVED_INVALID_ID;
    b5b4:	605d      	str	r5, [r3, #4]
    }
}
    b5b6:	bd70      	pop	{r4, r5, r6, pc}
    b5b8:	20000fc0 	.word	0x20000fc0
    b5bc:	20001ec8 	.word	0x20001ec8
    b5c0:	20001ed0 	.word	0x20001ed0
    b5c4:	20000f68 	.word	0x20000f68

0000b5c8 <nrf_802154_delayed_trx_transmit>:
}

bool nrf_802154_delayed_trx_transmit(uint8_t                                 * p_data,
                                     uint64_t                                  tx_time,
                                     const nrf_802154_transmit_at_metadata_t * p_metadata)
{
    b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5cc:	b086      	sub	sp, #24
    b5ce:	4607      	mov	r7, r0
    return available_dly_ts_slot_from_pool_get(
    b5d0:	2101      	movs	r1, #1
    b5d2:	4828      	ldr	r0, [pc, #160]	; (b674 <nrf_802154_delayed_trx_transmit+0xac>)
{
    b5d4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    b5d8:	4615      	mov	r5, r2
    b5da:	461e      	mov	r6, r3
    return available_dly_ts_slot_from_pool_get(
    b5dc:	f007 ffcc 	bl	13578 <available_dly_ts_slot_from_pool_get>
    dly_op_data_t * p_dly_tx_data = available_dly_tx_slot_get();
    bool            result        = false;

    if (p_dly_tx_data != NULL)
    b5e0:	4604      	mov	r4, r0
    b5e2:	2800      	cmp	r0, #0
    b5e4:	d043      	beq.n	b66e <nrf_802154_delayed_trx_transmit+0xa6>
    {
        tx_time -= TX_SETUP_TIME;
        tx_time -= TX_RAMP_UP_TIME;

        if (p_metadata->cca)
    b5e6:	f898 3002 	ldrb.w	r3, [r8, #2]
    b5ea:	bbd3      	cbnz	r3, b662 <nrf_802154_delayed_trx_transmit+0x9a>
        tx_time -= TX_RAMP_UP_TIME;
    b5ec:	3df3      	subs	r5, #243	; 0xf3
    b5ee:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
        {
            tx_time -= nrf_802154_cca_before_tx_duration_get();
        }

        p_dly_tx_data->op = RSCH_DLY_TS_OP_DTX;
    b5f2:	2300      	movs	r3, #0

        p_dly_tx_data->tx.p_data             = p_data;
    b5f4:	6127      	str	r7, [r4, #16]
        p_dly_tx_data->op = RSCH_DLY_TS_OP_DTX;
    b5f6:	7223      	strb	r3, [r4, #8]
        p_dly_tx_data->tx.params.frame_props = p_metadata->frame_props;
    b5f8:	f8b8 3000 	ldrh.w	r3, [r8]
    b5fc:	82a3      	strh	r3, [r4, #20]
        (void)nrf_802154_tx_power_convert_metadata_to_tx_power_split(p_metadata->channel,
    b5fe:	f898 3004 	ldrb.w	r3, [r8, #4]
    b602:	f898 1005 	ldrb.w	r1, [r8, #5]
    b606:	f898 0003 	ldrb.w	r0, [r8, #3]
    b60a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    b60e:	f104 0216 	add.w	r2, r4, #22
    b612:	f007 ff78 	bl	13506 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>
                                                                     p_metadata->tx_power,
                                                                     &p_dly_tx_data->tx.params.tx_power);
        p_dly_tx_data->tx.params.cca       = p_metadata->cca;
        p_dly_tx_data->tx.params.immediate = true;
    b616:	2701      	movs	r7, #1
        p_dly_tx_data->tx.params.cca       = p_metadata->cca;
    b618:	f898 3002 	ldrb.w	r3, [r8, #2]
    b61c:	7663      	strb	r3, [r4, #25]
        p_dly_tx_data->tx.params.immediate = true;
    b61e:	76a7      	strb	r7, [r4, #26]
        p_dly_tx_data->tx.channel          = p_metadata->channel;
    b620:	f898 3003 	ldrb.w	r3, [r8, #3]
    b624:	76e3      	strb	r3, [r4, #27]
        p_dly_tx_data->id                  = NRF_802154_RESERVED_DTX_ID;

        rsch_dly_ts_param_t dly_ts_param =
    b626:	2204      	movs	r2, #4
        p_dly_tx_data->id                  = NRF_802154_RESERVED_DTX_ID;
    b628:	f06f 0303 	mvn.w	r3, #3
    b62c:	6063      	str	r3, [r4, #4]
        rsch_dly_ts_param_t dly_ts_param =
    b62e:	f8ad 2008 	strh.w	r2, [sp, #8]
    b632:	4a11      	ldr	r2, [pc, #68]	; (b678 <nrf_802154_delayed_trx_transmit+0xb0>)
    b634:	f88d 700a 	strb.w	r7, [sp, #10]
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
    b638:	4668      	mov	r0, sp
        rsch_dly_ts_param_t dly_ts_param =
    b63a:	e9cd 5600 	strd	r5, r6, [sp]
    b63e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
    b642:	f003 fdc3 	bl	f1cc <nrf_802154_rsch_delayed_timeslot_request>
    if (!result)
    b646:	4605      	mov	r5, r0
    b648:	b938      	cbnz	r0, b65a <nrf_802154_delayed_trx_transmit+0x92>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b64a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b64e:	6063      	str	r3, [r4, #4]
        bool state_set = dly_op_state_set(p_dly_op_data,
    b650:	463a      	mov	r2, r7
    b652:	2102      	movs	r1, #2
    b654:	4620      	mov	r0, r4
    b656:	f007 ff78 	bl	1354a <dly_op_state_set>

        result = dly_op_request(&dly_ts_param, p_dly_tx_data);
    }

    return result;
}
    b65a:	4628      	mov	r0, r5
    b65c:	b006      	add	sp, #24
    b65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tx_time -= nrf_802154_cca_before_tx_duration_get();
    b662:	f46f 73c3 	mvn.w	r3, #390	; 0x186
    b666:	18ed      	adds	r5, r5, r3
    b668:	f166 0600 	sbc.w	r6, r6, #0
    b66c:	e7c1      	b.n	b5f2 <nrf_802154_delayed_trx_transmit+0x2a>
    bool            result        = false;
    b66e:	4605      	mov	r5, r0
    b670:	e7f3      	b.n	b65a <nrf_802154_delayed_trx_transmit+0x92>
    b672:	bf00      	nop
    b674:	20000f68 	.word	0x20000f68
    b678:	0000b3a5 	.word	0x0000b3a5

0000b67c <nrf_802154_delayed_trx_receive>:

bool nrf_802154_delayed_trx_receive(uint64_t rx_time,
                                    uint32_t timeout,
                                    uint8_t  channel,
                                    uint32_t id)
{
    b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b680:	b086      	sub	sp, #24
    b682:	4605      	mov	r5, r0
    b684:	460e      	mov	r6, r1
    return available_dly_ts_slot_from_pool_get(
    b686:	481c      	ldr	r0, [pc, #112]	; (b6f8 <nrf_802154_delayed_trx_receive+0x7c>)
{
    b688:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    return available_dly_ts_slot_from_pool_get(
    b68c:	2102      	movs	r1, #2
{
    b68e:	4617      	mov	r7, r2
    b690:	469a      	mov	sl, r3
    return available_dly_ts_slot_from_pool_get(
    b692:	f007 ff71 	bl	13578 <available_dly_ts_slot_from_pool_get>
    dly_op_data_t * p_dly_rx_data = available_dly_rx_slot_get();
    bool            result        = false;

    if (p_dly_rx_data != NULL)
    b696:	4604      	mov	r4, r0
    b698:	b358      	cbz	r0, b6f2 <nrf_802154_delayed_trx_receive+0x76>
        rx_time -= RX_RAMP_UP_TIME;

        p_dly_rx_data->op = RSCH_DLY_TS_OP_DRX;

        p_dly_rx_data->rx.timeout_length                         = timeout + RX_RAMP_UP_TIME;
        p_dly_rx_data->rx.timeout_timer.action.callback.callback = notify_rx_timeout;
    b69a:	4b18      	ldr	r3, [pc, #96]	; (b6fc <nrf_802154_delayed_trx_receive+0x80>)
    b69c:	6303      	str	r3, [r0, #48]	; 0x30
        p_dly_rx_data->op = RSCH_DLY_TS_OP_DRX;
    b69e:	f04f 0801 	mov.w	r8, #1

        p_dly_rx_data->rx.channel = channel;
        p_dly_rx_data->id         = id;

        rsch_dly_ts_param_t dly_ts_param =
    b6a2:	f240 1301 	movw	r3, #257	; 0x101
        p_dly_rx_data->op = RSCH_DLY_TS_OP_DRX;
    b6a6:	f880 8008 	strb.w	r8, [r0, #8]
        p_dly_rx_data->id         = id;
    b6aa:	f8c0 9004 	str.w	r9, [r0, #4]
        rx_time -= RX_RAMP_UP_TIME;
    b6ae:	3d96      	subs	r5, #150	; 0x96
        rsch_dly_ts_param_t dly_ts_param =
    b6b0:	f8ad 3008 	strh.w	r3, [sp, #8]
        p_dly_rx_data->rx.timeout_length                         = timeout + RX_RAMP_UP_TIME;
    b6b4:	f107 0728 	add.w	r7, r7, #40	; 0x28
        rsch_dly_ts_param_t dly_ts_param =
    b6b8:	4b11      	ldr	r3, [pc, #68]	; (b700 <nrf_802154_delayed_trx_receive+0x84>)
        p_dly_rx_data->rx.timeout_length                         = timeout + RX_RAMP_UP_TIME;
    b6ba:	6387      	str	r7, [r0, #56]	; 0x38
        p_dly_rx_data->rx.channel = channel;
    b6bc:	f880 a050 	strb.w	sl, [r0, #80]	; 0x50
        rx_time -= RX_RAMP_UP_TIME;
    b6c0:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
    b6c4:	4668      	mov	r0, sp
        rsch_dly_ts_param_t dly_ts_param =
    b6c6:	e9cd 5600 	strd	r5, r6, [sp]
    b6ca:	e9cd 3903 	strd	r3, r9, [sp, #12]
    b6ce:	f88d 800a 	strb.w	r8, [sp, #10]
    bool result = nrf_802154_rsch_delayed_timeslot_request(p_dly_ts_param);
    b6d2:	f003 fd7b 	bl	f1cc <nrf_802154_rsch_delayed_timeslot_request>
    if (!result)
    b6d6:	4605      	mov	r5, r0
    b6d8:	b938      	cbnz	r0, b6ea <nrf_802154_delayed_trx_receive+0x6e>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b6de:	6063      	str	r3, [r4, #4]
        bool state_set = dly_op_state_set(p_dly_op_data,
    b6e0:	4642      	mov	r2, r8
    b6e2:	2102      	movs	r1, #2
    b6e4:	4620      	mov	r0, r4
    b6e6:	f007 ff30 	bl	1354a <dly_op_state_set>

        result = dly_op_request(&dly_ts_param, p_dly_rx_data);
    }

    return result;
}
    b6ea:	4628      	mov	r0, r5
    b6ec:	b006      	add	sp, #24
    b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool            result        = false;
    b6f2:	4605      	mov	r5, r0
    b6f4:	e7f9      	b.n	b6ea <nrf_802154_delayed_trx_receive+0x6e>
    b6f6:	bf00      	nop
    b6f8:	20000fc0 	.word	0x20000fc0
    b6fc:	000135a1 	.word	0x000135a1
    b700:	0000b4e9 	.word	0x0000b4e9

0000b704 <nrf_802154_delayed_trx_transmit_cancel>:

bool nrf_802154_delayed_trx_transmit_cancel(void)
{
    b704:	b510      	push	{r4, lr}
    result = nrf_802154_rsch_delayed_timeslot_cancel(p_dly_op_data->id, handler);
    b706:	4c08      	ldr	r4, [pc, #32]	; (b728 <nrf_802154_delayed_trx_transmit_cancel+0x24>)
    b708:	2100      	movs	r1, #0
    b70a:	6860      	ldr	r0, [r4, #4]
    b70c:	f008 fc95 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    if (result)
    b710:	b148      	cbz	r0, b726 <nrf_802154_delayed_trx_transmit_cancel+0x22>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b716:	6063      	str	r3, [r4, #4]
    dly_op_data_t * p_dly_op_data = &m_dly_tx_data[0];
    bool            result        = false;

    if (dly_ts_slot_release(p_dly_op_data, false))
    {
        result = dly_op_state_set(p_dly_op_data,
    b718:	4620      	mov	r0, r4
    b71a:	2201      	movs	r2, #1

        assert(result);
    }

    return result;
}
    b71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        result = dly_op_state_set(p_dly_op_data,
    b720:	2102      	movs	r1, #2
    b722:	f007 bf12 	b.w	1354a <dly_op_state_set>
}
    b726:	bd10      	pop	{r4, pc}
    b728:	20000f68 	.word	0x20000f68

0000b72c <nrf_802154_delayed_trx_receive_cancel>:

bool nrf_802154_delayed_trx_receive_cancel(uint32_t id)
{
    b72c:	b538      	push	{r3, r4, r5, lr}
        if (m_dly_rx_data[i].id == id)
    b72e:	4c0f      	ldr	r4, [pc, #60]	; (b76c <nrf_802154_delayed_trx_receive_cancel+0x40>)
    b730:	6863      	ldr	r3, [r4, #4]
    b732:	4298      	cmp	r0, r3
    b734:	d005      	beq.n	b742 <nrf_802154_delayed_trx_receive_cancel+0x16>
    b736:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    b738:	4298      	cmp	r0, r3
    b73a:	d001      	beq.n	b740 <nrf_802154_delayed_trx_receive_cancel+0x14>
    bool            stopped       = false;

    if (p_dly_op_data == NULL)
    {
        // Delayed receive window with provided ID could not be found.
        return false;
    b73c:	2000      	movs	r0, #0

        nrf_802154_sl_atomic_store_u8(&p_dly_op_data->state, DELAYED_TRX_OP_STATE_STOPPED);
    }

    return stopped;
}
    b73e:	bd38      	pop	{r3, r4, r5, pc}
                p_dly_op_data = &m_dly_rx_data[i];
    b740:	3458      	adds	r4, #88	; 0x58
    bool result      = nrf_802154_rsch_delayed_timeslot_cancel(id, false);
    b742:	2100      	movs	r1, #0
    b744:	f008 fc79 	bl	1403a <nrf_802154_rsch_delayed_timeslot_cancel>
    b748:	4605      	mov	r5, r0
    nrf_802154_sl_timer_ret_t ret = nrf_802154_sl_timer_remove(&p_dly_op_data->rx.timeout_timer);
    b74a:	f104 0010 	add.w	r0, r4, #16
    b74e:	f003 fe9d 	bl	f48c <nrf_802154_sl_timer_remove>
    if (result || was_running)
    b752:	b90d      	cbnz	r5, b758 <nrf_802154_delayed_trx_receive_cancel+0x2c>
    b754:	2800      	cmp	r0, #0
    b756:	d1f1      	bne.n	b73c <nrf_802154_delayed_trx_receive_cancel+0x10>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
    b758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b75c:	6063      	str	r3, [r4, #4]
  __ASM volatile ("dmb 0xF":::"memory");
    b75e:	f3bf 8f5f 	dmb	sy
    b762:	2001      	movs	r0, #1
    b764:	7020      	strb	r0, [r4, #0]
    b766:	f3bf 8f5f 	dmb	sy
}
    b76a:	e7e8      	b.n	b73e <nrf_802154_delayed_trx_receive_cancel+0x12>
    b76c:	20000fc0 	.word	0x20000fc0

0000b770 <nrf_802154_delayed_trx_abort>:

bool nrf_802154_delayed_trx_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
    b770:	b508      	push	{r3, lr}
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
    b772:	4b06      	ldr	r3, [pc, #24]	; (b78c <nrf_802154_delayed_trx_abort+0x1c>)
    b774:	781a      	ldrb	r2, [r3, #0]
    b776:	2a04      	cmp	r2, #4
    b778:	d003      	beq.n	b782 <nrf_802154_delayed_trx_abort+0x12>
    b77a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    b77e:	2b04      	cmp	r3, #4
    b780:	d102      	bne.n	b788 <nrf_802154_delayed_trx_abort+0x18>
    {
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return true;
    }

    if (term_lvl < NRF_802154_TERM_802154)
    b782:	b110      	cbz	r0, b78a <nrf_802154_delayed_trx_abort+0x1a>
    {
        nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
        return false;
    }

    dly_rx_all_ongoing_abort();
    b784:	f7ff fe48 	bl	b418 <dly_rx_all_ongoing_abort>
        return true;
    b788:	2001      	movs	r0, #1

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_HIGH);
    return true;
}
    b78a:	bd08      	pop	{r3, pc}
    b78c:	20000fc0 	.word	0x20000fc0

0000b790 <nrf_802154_delayed_trx_rx_started_hook>:

void nrf_802154_delayed_trx_rx_started_hook(const uint8_t * p_frame)
{
    b790:	b530      	push	{r4, r5, lr}
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
    b792:	4b13      	ldr	r3, [pc, #76]	; (b7e0 <nrf_802154_delayed_trx_rx_started_hook+0x50>)
    dly_op_data_t                * p_dly_op_data = ongoing_dly_rx_slot_get();
    nrf_802154_frame_parser_data_t frame_data;

    bool result = nrf_802154_frame_parser_data_init(p_frame,
    b794:	7801      	ldrb	r1, [r0, #0]
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
    b796:	781a      	ldrb	r2, [r3, #0]
    dly_op_data_t * p_dly_op_data = NULL;
    b798:	2a04      	cmp	r2, #4
    b79a:	bf08      	it	eq
    b79c:	461c      	moveq	r4, r3
        if (m_dly_rx_data[i].state == DELAYED_TRX_OP_STATE_ONGOING)
    b79e:	f813 2f58 	ldrb.w	r2, [r3, #88]!
{
    b7a2:	b087      	sub	sp, #28
    dly_op_data_t * p_dly_op_data = NULL;
    b7a4:	bf18      	it	ne
    b7a6:	2400      	movne	r4, #0
    bool result = nrf_802154_frame_parser_data_init(p_frame,
    b7a8:	3101      	adds	r1, #1
            p_dly_op_data = &m_dly_rx_data[i];
    b7aa:	2a04      	cmp	r2, #4
    b7ac:	bf08      	it	eq
    b7ae:	461c      	moveq	r4, r3
    bool result = nrf_802154_frame_parser_data_init(p_frame,
    b7b0:	b2c9      	uxtb	r1, r1
    b7b2:	466b      	mov	r3, sp
    b7b4:	2201      	movs	r2, #1
{
    b7b6:	4605      	mov	r5, r0
    bool result = nrf_802154_frame_parser_data_init(p_frame,
    b7b8:	f007 ff5a 	bl	13670 <nrf_802154_frame_parser_data_init>
                                                    p_frame[PHR_OFFSET] + PHR_SIZE,
                                                    PARSE_LEVEL_FCF_OFFSETS,
                                                    &frame_data);

    if ((result) && (p_dly_op_data != NULL))
    b7bc:	b168      	cbz	r0, b7da <nrf_802154_delayed_trx_rx_started_hook+0x4a>
    b7be:	b164      	cbz	r4, b7da <nrf_802154_delayed_trx_rx_started_hook+0x4a>
    {
        p_dly_op_data->rx.extension_frame.sof_timestamp = nrf_802154_sl_timer_current_time_get();
    b7c0:	f008 fc87 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    b7c4:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
        p_dly_op_data->rx.extension_frame.psdu_length   = p_frame[PHR_OFFSET];
    b7c8:	782b      	ldrb	r3, [r5, #0]
    b7ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
    b7ce:	9b00      	ldr	r3, [sp, #0]
    b7d0:	785b      	ldrb	r3, [r3, #1]
    b7d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
        p_dly_op_data->rx.extension_frame.ack_requested = nrf_802154_frame_parser_ar_bit_is_set(
    b7d6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            &frame_data);
    }
}
    b7da:	b007      	add	sp, #28
    b7dc:	bd30      	pop	{r4, r5, pc}
    b7de:	bf00      	nop
    b7e0:	20000fc0 	.word	0x20000fc0

0000b7e4 <nrf_802154_filter_frame_part>:
}

nrf_802154_rx_error_t nrf_802154_filter_frame_part(
    nrf_802154_frame_parser_data_t * p_frame_data,
    uint8_t                        * p_num_bytes)
{
    b7e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b7e8:	460f      	mov	r7, r1
    nrf_802154_rx_error_t result        = NRF_802154_RX_ERROR_INVALID_FRAME;
    uint8_t               frame_type    = nrf_802154_frame_parser_frame_type_get(p_frame_data);
    uint8_t               frame_version = nrf_802154_frame_parser_frame_version_get(p_frame_data);
    uint8_t               psdu_length   = nrf_802154_frame_parser_frame_length_get(p_frame_data);

    switch (*p_num_bytes)
    b7ea:	7809      	ldrb	r1, [r1, #0]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
    b7ec:	6803      	ldr	r3, [r0, #0]
    b7ee:	2903      	cmp	r1, #3
    b7f0:	785c      	ldrb	r4, [r3, #1]
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
    b7f2:	789e      	ldrb	r6, [r3, #2]
    return p_parser_data->p_frame[PHR_OFFSET];
    b7f4:	781b      	ldrb	r3, [r3, #0]
{
    b7f6:	4605      	mov	r5, r0
    switch (*p_num_bytes)
    b7f8:	d13b      	bne.n	b872 <nrf_802154_filter_frame_part+0x8e>
    {
        case FCF_CHECK_OFFSET:
            if ((psdu_length < IMM_ACK_LENGTH) || (psdu_length > MAX_PACKET_SIZE))
    b7fa:	3b05      	subs	r3, #5
    b7fc:	2b7a      	cmp	r3, #122	; 0x7a
    b7fe:	f200 8098 	bhi.w	b932 <nrf_802154_filter_frame_part+0x14e>
            {
                result = NRF_802154_RX_ERROR_INVALID_LENGTH;
                break;
            }

            if (!nrf_802154_frame_parser_valid_data_extend(p_frame_data,
    b802:	2201      	movs	r2, #1
    b804:	f007 ff54 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    b808:	b918      	cbnz	r0, b812 <nrf_802154_filter_frame_part+0x2e>
                                                           *p_num_bytes,
                                                           PARSE_LEVEL_FCF_OFFSETS))
            {
                result = NRF_802154_RX_ERROR_INVALID_FRAME;
    b80a:	2001      	movs	r0, #1
            result = dst_addr_check(p_frame_data);
            break;
    }

    return result;
}
    b80c:	b002      	add	sp, #8
    b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
    b812:	f004 0407 	and.w	r4, r4, #7
    switch (frame_type)
    b816:	2c05      	cmp	r4, #5
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
    b818:	f006 0630 	and.w	r6, r6, #48	; 0x30
    b81c:	d008      	beq.n	b830 <nrf_802154_filter_frame_part+0x4c>
    b81e:	d81b      	bhi.n	b858 <nrf_802154_filter_frame_part+0x74>
    b820:	2c04      	cmp	r4, #4
    b822:	d0f2      	beq.n	b80a <nrf_802154_filter_frame_part+0x26>
            if (!frame_type_and_version_filter(frame_type, frame_version))
    b824:	2e30      	cmp	r6, #48	; 0x30
    b826:	d0f0      	beq.n	b80a <nrf_802154_filter_frame_part+0x26>
    switch (frame_version)
    b828:	2e20      	cmp	r6, #32
    b82a:	d01e      	beq.n	b86a <nrf_802154_filter_frame_part+0x86>
    b82c:	d902      	bls.n	b834 <nrf_802154_filter_frame_part+0x50>
    b82e:	e7ec      	b.n	b80a <nrf_802154_filter_frame_part+0x26>
            if (!frame_type_and_version_filter(frame_type, frame_version))
    b830:	2e00      	cmp	r6, #0
    b832:	d1ea      	bne.n	b80a <nrf_802154_filter_frame_part+0x26>
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
    b834:	682b      	ldr	r3, [r5, #0]
    b836:	789b      	ldrb	r3, [r3, #2]
    b838:	f003 030c 	and.w	r3, r3, #12
    switch (nrf_802154_frame_parser_dst_addr_type_get(p_frame_data))
    b83c:	2b08      	cmp	r3, #8
    b83e:	d00a      	beq.n	b856 <nrf_802154_filter_frame_part+0x72>
    b840:	2b0c      	cmp	r3, #12
    b842:	d007      	beq.n	b854 <nrf_802154_filter_frame_part+0x70>
    b844:	2b00      	cmp	r3, #0
    b846:	d1e0      	bne.n	b80a <nrf_802154_filter_frame_part+0x26>
            if (nrf_802154_pib_pan_coord_get() || (frame_type == FRAME_TYPE_BEACON))
    b848:	f7fe fa1e 	bl	9c88 <nrf_802154_pib_pan_coord_get>
    b84c:	b930      	cbnz	r0, b85c <nrf_802154_filter_frame_part+0x78>
    b84e:	b12c      	cbz	r4, b85c <nrf_802154_filter_frame_part+0x78>
                result = NRF_802154_RX_ERROR_INVALID_DEST_ADDR;
    b850:	2003      	movs	r0, #3
    b852:	e7db      	b.n	b80c <nrf_802154_filter_frame_part+0x28>
            *p_num_bytes = EXTENDED_ADDR_CHECK_OFFSET;
    b854:	230e      	movs	r3, #14
    b856:	703b      	strb	r3, [r7, #0]
            result       = NRF_802154_RX_ERROR_NONE;
    b858:	2000      	movs	r0, #0
    b85a:	e7d7      	b.n	b80c <nrf_802154_filter_frame_part+0x28>
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
    b85c:	682b      	ldr	r3, [r5, #0]
    b85e:	f993 3002 	ldrsb.w	r3, [r3, #2]
    b862:	2b00      	cmp	r3, #0
    b864:	dad1      	bge.n	b80a <nrf_802154_filter_frame_part+0x26>
                        *p_num_bytes = PANID_CHECK_OFFSET;
    b866:	2306      	movs	r3, #6
    b868:	e7f5      	b.n	b856 <nrf_802154_filter_frame_part+0x72>
 * @returns  End offset of the destination addressing section.
 */
static inline uint8_t nrf_802154_frame_parser_dst_addressing_end_offset_get(
    const nrf_802154_frame_parser_data_t * p_parser_data)
{
    return p_parser_data->helper.dst_addressing_end_offset;
    b86a:	7ceb      	ldrb	r3, [r5, #19]
            if (end_offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    b86c:	2bff      	cmp	r3, #255	; 0xff
    b86e:	d1f2      	bne.n	b856 <nrf_802154_filter_frame_part+0x72>
    b870:	e7cb      	b.n	b80a <nrf_802154_filter_frame_part+0x26>
            if (!nrf_802154_frame_parser_valid_data_extend(p_frame_data,
    b872:	2202      	movs	r2, #2
    b874:	f007 ff1c 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    b878:	2800      	cmp	r0, #0
    b87a:	d0c6      	beq.n	b80a <nrf_802154_filter_frame_part+0x26>
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
    b87c:	682e      	ldr	r6, [r5, #0]
    return p_parser_data->mhr.dst.panid_offset;
    b87e:	79aa      	ldrb	r2, [r5, #6]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
    b880:	7877      	ldrb	r7, [r6, #1]
    return p_parser_data->mhr.dst.addr_offset;
    b882:	79ec      	ldrb	r4, [r5, #7]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    b884:	2aff      	cmp	r2, #255	; 0xff
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
    b886:	f007 0707 	and.w	r7, r7, #7
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    b88a:	d108      	bne.n	b89e <nrf_802154_filter_frame_part+0xba>
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    b88c:	2cff      	cmp	r4, #255	; 0xff
    b88e:	d12b      	bne.n	b8e8 <nrf_802154_filter_frame_part+0x104>
            return (nrf_802154_pib_pan_coord_get() ||
    b890:	f7fe f9fa 	bl	9c88 <nrf_802154_pib_pan_coord_get>
                     FRAME_TYPE_BEACON)) ? NRF_802154_RX_ERROR_NONE :
    b894:	2800      	cmp	r0, #0
    b896:	d1df      	bne.n	b858 <nrf_802154_filter_frame_part+0x74>
            return (nrf_802154_pib_pan_coord_get() ||
    b898:	2f00      	cmp	r7, #0
    b89a:	d0dd      	beq.n	b858 <nrf_802154_filter_frame_part+0x74>
    b89c:	e7d8      	b.n	b850 <nrf_802154_filter_frame_part+0x6c>
    b89e:	2cff      	cmp	r4, #255	; 0xff
    b8a0:	d02b      	beq.n	b8fa <nrf_802154_filter_frame_part+0x116>
    return &p_parser_data->p_frame[offset];
    b8a2:	4434      	add	r4, r6
    return &p_parser_data->p_frame[offset];
    b8a4:	4416      	add	r6, r2
    if ((0 == memcmp(p_panid, nrf_802154_pib_pan_id_get(), PAN_ID_SIZE)) ||
    b8a6:	f7fe fa0b 	bl	9cc0 <nrf_802154_pib_pan_id_get>
    b8aa:	2202      	movs	r2, #2
    b8ac:	4601      	mov	r1, r0
    b8ae:	4630      	mov	r0, r6
    b8b0:	f007 f9e5 	bl	12c7e <memcmp>
    b8b4:	b1b0      	cbz	r0, b8e4 <nrf_802154_filter_frame_part+0x100>
        (0 == memcmp(p_panid, BROADCAST_ADDRESS, PAN_ID_SIZE)))
    b8b6:	4b20      	ldr	r3, [pc, #128]	; (b938 <nrf_802154_filter_frame_part+0x154>)
    b8b8:	2202      	movs	r2, #2
    b8ba:	f8b3 8000 	ldrh.w	r8, [r3]
    b8be:	f8ad 8004 	strh.w	r8, [sp, #4]
    b8c2:	a901      	add	r1, sp, #4
    b8c4:	4630      	mov	r0, r6
    b8c6:	f007 f9da 	bl	12c7e <memcmp>
    if ((0 == memcmp(p_panid, nrf_802154_pib_pan_id_get(), PAN_ID_SIZE)) ||
    b8ca:	b158      	cbz	r0, b8e4 <nrf_802154_filter_frame_part+0x100>
    else if ((FRAME_TYPE_BEACON == frame_type) &&
    b8cc:	2f00      	cmp	r7, #0
    b8ce:	d1bf      	bne.n	b850 <nrf_802154_filter_frame_part+0x6c>
             (0 == memcmp(nrf_802154_pib_pan_id_get(), BROADCAST_ADDRESS, PAN_ID_SIZE)))
    b8d0:	f7fe f9f6 	bl	9cc0 <nrf_802154_pib_pan_id_get>
    b8d4:	2202      	movs	r2, #2
    b8d6:	4669      	mov	r1, sp
    b8d8:	f8ad 8000 	strh.w	r8, [sp]
    b8dc:	f007 f9cf 	bl	12c7e <memcmp>
    else if ((FRAME_TYPE_BEACON == frame_type) &&
    b8e0:	2800      	cmp	r0, #0
    b8e2:	d1b5      	bne.n	b850 <nrf_802154_filter_frame_part+0x6c>
    uint8_t dst_addr_size =
    b8e4:	b90c      	cbnz	r4, b8ea <nrf_802154_filter_frame_part+0x106>
    b8e6:	e7d3      	b.n	b890 <nrf_802154_filter_frame_part+0xac>
    return &p_parser_data->p_frame[offset];
    b8e8:	4434      	add	r4, r6
    return p_parser_data->helper.dst_addr_size;
    b8ea:	7c6d      	ldrb	r5, [r5, #17]
    switch (dst_addr_size)
    b8ec:	2d02      	cmp	r5, #2
    b8ee:	d006      	beq.n	b8fe <nrf_802154_filter_frame_part+0x11a>
    b8f0:	2d08      	cmp	r5, #8
    b8f2:	d019      	beq.n	b928 <nrf_802154_filter_frame_part+0x144>
    b8f4:	2d00      	cmp	r5, #0
    b8f6:	d188      	bne.n	b80a <nrf_802154_filter_frame_part+0x26>
    b8f8:	e7ca      	b.n	b890 <nrf_802154_filter_frame_part+0xac>
        return NULL;
    b8fa:	2400      	movs	r4, #0
    b8fc:	e7d2      	b.n	b8a4 <nrf_802154_filter_frame_part+0xc0>
    if ((0 == memcmp(p_dst_addr, nrf_802154_pib_short_address_get(), SHORT_ADDRESS_SIZE)) ||
    b8fe:	f7fe f9f7 	bl	9cf0 <nrf_802154_pib_short_address_get>
    b902:	462a      	mov	r2, r5
    b904:	4601      	mov	r1, r0
    b906:	4620      	mov	r0, r4
    b908:	f007 f9b9 	bl	12c7e <memcmp>
    b90c:	2800      	cmp	r0, #0
    b90e:	d0a3      	beq.n	b858 <nrf_802154_filter_frame_part+0x74>
        (0 == memcmp(p_dst_addr, BROADCAST_ADDRESS, SHORT_ADDRESS_SIZE)))
    b910:	4b09      	ldr	r3, [pc, #36]	; (b938 <nrf_802154_filter_frame_part+0x154>)
    b912:	881b      	ldrh	r3, [r3, #0]
    b914:	f8ad 3004 	strh.w	r3, [sp, #4]
    b918:	462a      	mov	r2, r5
    b91a:	a901      	add	r1, sp, #4
    if (0 == memcmp(p_dst_addr, nrf_802154_pib_extended_address_get(), EXTENDED_ADDRESS_SIZE))
    b91c:	4620      	mov	r0, r4
    b91e:	f007 f9ae 	bl	12c7e <memcmp>
    b922:	2800      	cmp	r0, #0
    b924:	d194      	bne.n	b850 <nrf_802154_filter_frame_part+0x6c>
    b926:	e797      	b.n	b858 <nrf_802154_filter_frame_part+0x74>
    b928:	f7fe f9d6 	bl	9cd8 <nrf_802154_pib_extended_address_get>
    b92c:	462a      	mov	r2, r5
    b92e:	4601      	mov	r1, r0
    b930:	e7f4      	b.n	b91c <nrf_802154_filter_frame_part+0x138>
                result = NRF_802154_RX_ERROR_INVALID_LENGTH;
    b932:	2009      	movs	r0, #9
    b934:	e76a      	b.n	b80c <nrf_802154_filter_frame_part+0x28>
    b936:	bf00      	nop
    b938:	00014460 	.word	0x00014460

0000b93c <parse_state_advance>:
    return requested_parse_level > p_parser_data->parse_level;
}

static bool parse_state_advance(nrf_802154_frame_parser_data_t * p_parser_data,
                                nrf_802154_frame_parser_level_t  requested_parse_level)
{
    b93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b940:	4604      	mov	r4, r0
    b942:	460e      	mov	r6, r1

    do
    {
        result = false;

        switch (p_parser_data->parse_level)
    b944:	7927      	ldrb	r7, [r4, #4]
    b946:	2f06      	cmp	r7, #6
    b948:	f200 8110 	bhi.w	bb6c <parse_state_advance+0x230>
    b94c:	e8df f007 	tbb	[pc, r7]
    b950:	8d877d07 	.word	0x8d877d07
    b954:	c1bb      	.short	0xc1bb
    b956:	04          	.byte	0x04
    b957:	00          	.byte	0x00
                    next_level = PARSE_LEVEL_FULL;
                }
                break;

            case PARSE_LEVEL_FULL:
                return true;
    b958:	2001      	movs	r0, #1
        }
    }
    while (result);

    return p_parser_data->parse_level >= requested_parse_level;
}
    b95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (level_is_elevated(p_parser_data, requested_parse_level))
    b95e:	2e00      	cmp	r6, #0
    b960:	d078      	beq.n	ba54 <parse_state_advance+0x118>
    if (offset > p_parser_data->valid_data_len)
    b962:	7963      	ldrb	r3, [r4, #5]
    b964:	2b02      	cmp	r3, #2
    b966:	d975      	bls.n	ba54 <parse_state_advance+0x118>
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
    b968:	6822      	ldr	r2, [r4, #0]
    b96a:	7890      	ldrb	r0, [r2, #2]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
    b96c:	7851      	ldrb	r1, [r2, #1]
    b96e:	f000 0501 	and.w	r5, r0, #1
    b972:	f1c5 0304 	rsb	r3, r5, #4
    switch (nrf_802154_frame_parser_frame_version_get(p_parser_data))
    b976:	f010 0f20 	tst.w	r0, #32
    b97a:	b2db      	uxtb	r3, r3
    return p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK;
    b97c:	f000 0c0c 	and.w	ip, r0, #12
    b980:	d11d      	bne.n	b9be <parse_state_advance+0x82>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
    b982:	f1bc 0f00 	cmp.w	ip, #0
    b986:	d129      	bne.n	b9dc <parse_state_advance+0xa0>
    b988:	7891      	ldrb	r1, [r2, #2]
    b98a:	4879      	ldr	r0, [pc, #484]	; (bb70 <parse_state_advance+0x234>)
    if (dst_addr_is_present(p_parser_data))
    b98c:	f011 0f0c 	tst.w	r1, #12
        p_parser_data->mhr.dst.addr_offset = offset;
    b990:	bf18      	it	ne
    b992:	71e3      	strbne	r3, [r4, #7]
    b994:	7891      	ldrb	r1, [r2, #2]
    b996:	f001 010c 	and.w	r1, r1, #12
    b99a:	5c41      	ldrb	r1, [r0, r1]
    if (addr_size == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    b99c:	29ff      	cmp	r1, #255	; 0xff
    b99e:	d059      	beq.n	ba54 <parse_state_advance+0x118>
    offset                                         += addr_size;
    b9a0:	440b      	add	r3, r1
    b9a2:	b2db      	uxtb	r3, r3
    p_parser_data->helper.dst_addr_size             = addr_size;
    b9a4:	7461      	strb	r1, [r4, #17]
    p_parser_data->helper.dst_addressing_end_offset = offset;
    b9a6:	74e3      	strb	r3, [r4, #19]
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
    b9a8:	7891      	ldrb	r1, [r2, #2]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
    b9aa:	7850      	ldrb	r0, [r2, #1]
    switch (nrf_802154_frame_parser_frame_version_get(p_parser_data))
    b9ac:	068d      	lsls	r5, r1, #26
    b9ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    b9b2:	d420      	bmi.n	b9f6 <parse_state_advance+0xba>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
    b9b4:	293f      	cmp	r1, #63	; 0x3f
    b9b6:	d926      	bls.n	ba06 <parse_state_advance+0xca>
                return panid_compression ? false : true;
    b9b8:	f080 0101 	eor.w	r1, r0, #1
    b9bc:	e03b      	b.n	ba36 <parse_state_advance+0xfa>
            if (nrf_802154_frame_parser_dst_addr_is_extended(p_parser_data) &&
    b9be:	f1bc 0f0c 	cmp.w	ip, #12
    b9c2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    b9c6:	d10e      	bne.n	b9e6 <parse_state_advance+0xaa>
    b9c8:	f000 0cc0 	and.w	ip, r0, #192	; 0xc0
    b9cc:	f1bc 0fc0 	cmp.w	ip, #192	; 0xc0
    b9d0:	d102      	bne.n	b9d8 <parse_state_advance+0x9c>
                return panid_compression ? false : true;
    b9d2:	f081 0101 	eor.w	r1, r1, #1
    b9d6:	e00b      	b.n	b9f0 <parse_state_advance+0xb4>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
    b9d8:	283f      	cmp	r0, #63	; 0x3f
    b9da:	d9fa      	bls.n	b9d2 <parse_state_advance+0x96>
        offset                             += PAN_ID_SIZE;
    b9dc:	f1c5 0506 	rsb	r5, r5, #6
        p_parser_data->mhr.dst.panid_offset = offset;
    b9e0:	71a3      	strb	r3, [r4, #6]
        offset                             += PAN_ID_SIZE;
    b9e2:	b2eb      	uxtb	r3, r5
    b9e4:	e7d0      	b.n	b988 <parse_state_advance+0x4c>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
    b9e6:	283f      	cmp	r0, #63	; 0x3f
    b9e8:	d8cb      	bhi.n	b982 <parse_state_advance+0x46>
            if (dst_addr_is_present(p_parser_data))
    b9ea:	f1bc 0f00 	cmp.w	ip, #0
    b9ee:	d1f0      	bne.n	b9d2 <parse_state_advance+0x96>
    if (dst_panid_is_present(p_parser_data))
    b9f0:	2900      	cmp	r1, #0
    b9f2:	d1f3      	bne.n	b9dc <parse_state_advance+0xa0>
    b9f4:	e7c8      	b.n	b988 <parse_state_advance+0x4c>
            if (nrf_802154_frame_parser_dst_addr_is_extended(p_parser_data) &&
    b9f6:	f001 050c 	and.w	r5, r1, #12
    b9fa:	2d0c      	cmp	r5, #12
    b9fc:	d115      	bne.n	ba2a <parse_state_advance+0xee>
    b9fe:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
    ba02:	2dc0      	cmp	r5, #192	; 0xc0
    ba04:	d1d6      	bne.n	b9b4 <parse_state_advance+0x78>
    if (src_addr_is_present(p_parser_data))
    ba06:	7891      	ldrb	r1, [r2, #2]
    ba08:	293f      	cmp	r1, #63	; 0x3f
        p_parser_data->mhr.src.addr_offset = offset;
    ba0a:	bf88      	it	hi
    ba0c:	7263      	strbhi	r3, [r4, #9]
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
    ba0e:	7892      	ldrb	r2, [r2, #2]
    ba10:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    switch (addr_type)
    ba14:	2a80      	cmp	r2, #128	; 0x80
    ba16:	d014      	beq.n	ba42 <parse_state_advance+0x106>
    ba18:	2ac0      	cmp	r2, #192	; 0xc0
    ba1a:	d014      	beq.n	ba46 <parse_state_advance+0x10a>
    ba1c:	b9d2      	cbnz	r2, ba54 <parse_state_advance+0x118>
    offset                             += addr_size;
    ba1e:	4413      	add	r3, r2
    p_parser_data->helper.addressing_end_offset = offset;
    ba20:	7523      	strb	r3, [r4, #20]
    p_parser_data->helper.src_addr_size = addr_size;
    ba22:	74a2      	strb	r2, [r4, #18]
                    next_level = PARSE_LEVEL_FCF_OFFSETS;
    ba24:	2301      	movs	r3, #1
            p_parser_data->parse_level = next_level;
    ba26:	7123      	strb	r3, [r4, #4]
    while (result);
    ba28:	e78c      	b.n	b944 <parse_state_advance+0x8>
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
    ba2a:	293f      	cmp	r1, #63	; 0x3f
    ba2c:	d9eb      	bls.n	ba06 <parse_state_advance+0xca>
            return panid_compression ? false : true;
    ba2e:	f080 0101 	eor.w	r1, r0, #1
            if (src_addr_is_present(p_parser_data) && dst_addr_is_present(p_parser_data))
    ba32:	2d00      	cmp	r5, #0
    ba34:	d1c0      	bne.n	b9b8 <parse_state_advance+0x7c>
    if (src_panid_is_present(p_parser_data))
    ba36:	2900      	cmp	r1, #0
    ba38:	d0e5      	beq.n	ba06 <parse_state_advance+0xca>
        p_parser_data->mhr.src.panid_offset = offset;
    ba3a:	7223      	strb	r3, [r4, #8]
        offset                             += PAN_ID_SIZE;
    ba3c:	3302      	adds	r3, #2
    ba3e:	b2db      	uxtb	r3, r3
    ba40:	e7e1      	b.n	ba06 <parse_state_advance+0xca>
    switch (addr_type)
    ba42:	2202      	movs	r2, #2
    ba44:	e7eb      	b.n	ba1e <parse_state_advance+0xe2>
            return EXTENDED_ADDRESS_SIZE;
    ba46:	2208      	movs	r2, #8
    ba48:	e7e9      	b.n	ba1e <parse_state_advance+0xe2>
                if (p_parser_data->valid_data_len >=
    ba4a:	7962      	ldrb	r2, [r4, #5]
    ba4c:	7ce3      	ldrb	r3, [r4, #19]
    ba4e:	429a      	cmp	r2, r3
    ba50:	f080 808a 	bcs.w	bb68 <parse_state_advance+0x22c>
    return p_parser_data->parse_level >= requested_parse_level;
    ba54:	42be      	cmp	r6, r7
    ba56:	bf8c      	ite	hi
    ba58:	2000      	movhi	r0, #0
    ba5a:	2001      	movls	r0, #1
    ba5c:	e77d      	b.n	b95a <parse_state_advance+0x1e>
                if (p_parser_data->valid_data_len >= p_parser_data->helper.addressing_end_offset)
    ba5e:	7962      	ldrb	r2, [r4, #5]
    ba60:	7d23      	ldrb	r3, [r4, #20]
    ba62:	429a      	cmp	r2, r3
    ba64:	d3f6      	bcc.n	ba54 <parse_state_advance+0x118>
                    next_level = PARSE_LEVEL_ADDRESSING_END;
    ba66:	2303      	movs	r3, #3
    ba68:	e7dd      	b.n	ba26 <parse_state_advance+0xea>
                if (level_is_elevated(p_parser_data, requested_parse_level))
    ba6a:	2e03      	cmp	r6, #3
    ba6c:	d9f2      	bls.n	ba54 <parse_state_advance+0x118>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
    ba6e:	6822      	ldr	r2, [r4, #0]
    uint8_t offset = p_parser_data->helper.addressing_end_offset;
    ba70:	7d23      	ldrb	r3, [r4, #20]
    ba72:	7851      	ldrb	r1, [r2, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_parser_data) == false)
    ba74:	070d      	lsls	r5, r1, #28
    ba76:	d402      	bmi.n	ba7e <parse_state_advance+0x142>
        p_parser_data->helper.aux_sec_hdr_end_offset = offset;
    ba78:	7563      	strb	r3, [r4, #21]
                    next_level = PARSE_LEVEL_SEC_CTRL_OFFSETS;
    ba7a:	2304      	movs	r3, #4
    ba7c:	e7d3      	b.n	ba26 <parse_state_advance+0xea>
    if ((offset + SECURITY_CONTROL_SIZE) > p_parser_data->valid_data_len)
    ba7e:	7961      	ldrb	r1, [r4, #5]
    ba80:	4299      	cmp	r1, r3
    ba82:	d9e7      	bls.n	ba54 <parse_state_advance+0x118>
    p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset = offset;
    ba84:	72a3      	strb	r3, [r4, #10]
    return p_parser_data->p_frame[offset] & FRAME_COUNTER_SUPPRESS_BIT;
    ba86:	18d1      	adds	r1, r2, r3
    if (nrf_802154_frame_parser_sec_ctrl_fc_suppress_bit_is_set(p_parser_data) == false)
    ba88:	5cd2      	ldrb	r2, [r2, r3]
    offset += SECURITY_CONTROL_SIZE;
    ba8a:	1c5d      	adds	r5, r3, #1
    if (nrf_802154_frame_parser_sec_ctrl_fc_suppress_bit_is_set(p_parser_data) == false)
    ba8c:	0690      	lsls	r0, r2, #26
    offset += SECURITY_CONTROL_SIZE;
    ba8e:	b2ed      	uxtb	r5, r5
        p_parser_data->mhr.aux_sec_hdr.frame_counter_offset = offset;
    ba90:	bf5e      	ittt	pl
    ba92:	72e5      	strbpl	r5, [r4, #11]
        offset += FRAME_COUNTER_SIZE;
    ba94:	3305      	addpl	r3, #5
    ba96:	b2dd      	uxtbpl	r5, r3
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
    ba98:	780b      	ldrb	r3, [r1, #0]
    if (key_id_mode != KEY_ID_MODE_0)
    ba9a:	f013 0f18 	tst.w	r3, #24
    ba9e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
    baa2:	d00a      	beq.n	baba <parse_state_advance+0x17e>
    key_src_size = key_source_size_get(key_id_mode);
    baa4:	f007 fddb 	bl	1365e <key_source_size_get>
        p_parser_data->mhr.aux_sec_hdr.key_id_offset = offset;
    baa8:	7325      	strb	r5, [r4, #12]
        if (key_src_size > 0)
    baaa:	b110      	cbz	r0, bab2 <parse_state_advance+0x176>
            p_parser_data->mhr.aux_sec_hdr.key_src_offset = offset;
    baac:	7365      	strb	r5, [r4, #13]
            offset += key_src_size;
    baae:	4405      	add	r5, r0
    bab0:	b2ed      	uxtb	r5, r5
        p_parser_data->mhr.aux_sec_hdr.key_idx_offset = offset;
    bab2:	73a5      	strb	r5, [r4, #14]
        offset += KEY_IDX_SIZE;
    bab4:	3501      	adds	r5, #1
        p_parser_data->helper.key_src_size            = key_src_size;
    bab6:	75a0      	strb	r0, [r4, #22]
        offset += KEY_IDX_SIZE;
    bab8:	b2ed      	uxtb	r5, r5
    p_parser_data->helper.mic_size               = mic_size_get(p_parser_data);
    baba:	4620      	mov	r0, r4
    babc:	f007 fdb3 	bl	13626 <mic_size_get>
    bac0:	462b      	mov	r3, r5
    bac2:	75e0      	strb	r0, [r4, #23]
        if (result)
    bac4:	e7d8      	b.n	ba78 <parse_state_advance+0x13c>
                if (p_parser_data->valid_data_len >= p_parser_data->helper.aux_sec_hdr_end_offset)
    bac6:	7962      	ldrb	r2, [r4, #5]
    bac8:	7d63      	ldrb	r3, [r4, #21]
    baca:	429a      	cmp	r2, r3
    bacc:	d3c2      	bcc.n	ba54 <parse_state_advance+0x118>
                    next_level = PARSE_LEVEL_AUX_SEC_HDR_END;
    bace:	2305      	movs	r3, #5
    bad0:	e7a9      	b.n	ba26 <parse_state_advance+0xea>
                if (level_is_elevated(p_parser_data, requested_parse_level))
    bad2:	2e05      	cmp	r6, #5
    bad4:	d9be      	bls.n	ba54 <parse_state_advance+0x118>
    return p_parser_data->p_frame[PHR_OFFSET];
    bad6:	f8d4 9000 	ldr.w	r9, [r4]
    if (((psdu_length + PHR_SIZE) != p_parser_data->valid_data_len) ||
    bada:	7962      	ldrb	r2, [r4, #5]
    badc:	f899 3000 	ldrb.w	r3, [r9]
    uint8_t         offset      = p_parser_data->helper.aux_sec_hdr_end_offset;
    bae0:	f894 8015 	ldrb.w	r8, [r4, #21]
    if (((psdu_length + PHR_SIZE) != p_parser_data->valid_data_len) ||
    bae4:	1c59      	adds	r1, r3, #1
    bae6:	4291      	cmp	r1, r2
    bae8:	d1b4      	bne.n	ba54 <parse_state_advance+0x118>
    baea:	061a      	lsls	r2, r3, #24
    baec:	d4b2      	bmi.n	ba54 <parse_state_advance+0x118>
    return (p_parser_data->p_frame[IE_PRESENT_OFFSET] & IE_PRESENT_BIT) ? true : false;
    baee:	f899 3002 	ldrb.w	r3, [r9, #2]
    if (nrf_802154_frame_parser_ie_present_bit_is_set(p_parser_data))
    baf2:	079b      	lsls	r3, r3, #30
    baf4:	d521      	bpl.n	bb3a <parse_state_advance+0x1fe>
        p_parser_data->mhr.header_ie_offset = offset;
    baf6:	f884 800f 	strb.w	r8, [r4, #15]
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
    bafa:	f899 5000 	ldrb.w	r5, [r9]
    bafe:	3d01      	subs	r5, #1
    bb00:	b2ed      	uxtb	r5, r5
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    bb02:	2dff      	cmp	r5, #255	; 0xff
        p_end_addr  = nrf_802154_frame_parser_mfr_get(p_parser_data) - mic_size_get(p_parser_data);
    bb04:	4620      	mov	r0, r4
    return &p_parser_data->p_frame[offset];
    bb06:	bf14      	ite	ne
    bb08:	444d      	addne	r5, r9
        return NULL;
    bb0a:	2500      	moveq	r5, #0
    bb0c:	f007 fd8b 	bl	13626 <mic_size_get>
        p_ie_header = &p_parser_data->p_frame[offset];
    bb10:	eb09 0a08 	add.w	sl, r9, r8
        p_end_addr  = nrf_802154_frame_parser_mfr_get(p_parser_data) - mic_size_get(p_parser_data);
    bb14:	1a2d      	subs	r5, r5, r0
        while (!nrf_802154_frame_parser_ie_iterator_end(p_iterator, p_end_addr))
    bb16:	4629      	mov	r1, r5
    bb18:	4650      	mov	r0, sl
    bb1a:	f007 fd72 	bl	13602 <nrf_802154_frame_parser_ie_iterator_end>
    bb1e:	b960      	cbnz	r0, bb3a <parse_state_advance+0x1fe>
 * @returns  Length of currently iterated information element.
 *
 */
static inline uint8_t nrf_802154_frame_parser_ie_length_get(const uint8_t * p_ie_iterator)
{
    return p_ie_iterator[IE_LENGTH_OFFSET] & IE_LENGTH_MASK;
    bb20:	f89a 3000 	ldrb.w	r3, [sl]
    bb24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 */
static inline const uint8_t * nrf_802154_frame_parser_ie_iterator_next(
    const uint8_t * p_ie_iterator)
{
    return nrf_802154_frame_parser_ie_content_address_get(p_ie_iterator)
           + nrf_802154_frame_parser_ie_length_get(p_ie_iterator);
    bb28:	3302      	adds	r3, #2
    bb2a:	449a      	add	sl, r3
            if (p_iterator > p_end_addr)
    bb2c:	4555      	cmp	r5, sl
    bb2e:	d391      	bcc.n	ba54 <parse_state_advance+0x118>
            else if (p_iterator == p_end_addr)
    bb30:	d10b      	bne.n	bb4a <parse_state_advance+0x20e>
                offset = p_iterator - p_parser_data->p_frame;
    bb32:	eba5 0509 	sub.w	r5, r5, r9
    bb36:	fa5f f885 	uxtb.w	r8, r5
    return nrf_802154_frame_parser_frame_length_get(p_parser_data) - FCS_SIZE + PHR_SIZE;
    bb3a:	f899 3000 	ldrb.w	r3, [r9]
    bb3e:	3b01      	subs	r3, #1
    if (offset != nrf_802154_frame_parser_mfr_offset_get(p_parser_data))
    bb40:	b2db      	uxtb	r3, r3
    bb42:	4543      	cmp	r3, r8
    bb44:	d10d      	bne.n	bb62 <parse_state_advance+0x226>
                    next_level = PARSE_LEVEL_FULL;
    bb46:	2306      	movs	r3, #6
    bb48:	e76d      	b.n	ba26 <parse_state_advance+0xea>
            else if (nrf_802154_frame_parser_ie_iterator_end(p_iterator, p_end_addr))
    bb4a:	4650      	mov	r0, sl
    bb4c:	f007 fd59 	bl	13602 <nrf_802154_frame_parser_ie_iterator_end>
    bb50:	2800      	cmp	r0, #0
    bb52:	d0e0      	beq.n	bb16 <parse_state_advance+0x1da>
    return p_ie_iterator + IE_DATA_OFFSET;
    bb54:	f10a 0802 	add.w	r8, sl, #2
                offset = nrf_802154_frame_parser_ie_content_address_get(p_iterator) -
    bb58:	eba8 0809 	sub.w	r8, r8, r9
    bb5c:	fa5f f888 	uxtb.w	r8, r8
                break;
    bb60:	e7eb      	b.n	bb3a <parse_state_advance+0x1fe>
        p_parser_data->mac_payload.mac_payload_offset = offset;
    bb62:	f884 8010 	strb.w	r8, [r4, #16]
        if (result)
    bb66:	e7ee      	b.n	bb46 <parse_state_advance+0x20a>
                    next_level = PARSE_LEVEL_DST_ADDRESSING_END;
    bb68:	2302      	movs	r3, #2
    bb6a:	e75c      	b.n	ba26 <parse_state_advance+0xea>
        switch (p_parser_data->parse_level)
    bb6c:	2000      	movs	r0, #0
    bb6e:	e6f4      	b.n	b95a <parse_state_advance+0x1e>
    bb70:	000151d1 	.word	0x000151d1

0000bb74 <ifs_tx_result_notify>:
{
    return ((m_state & expected_state_mask) != 0);
}

static void ifs_tx_result_notify(bool result)
{
    bb74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!result)
    bb76:	4601      	mov	r1, r0
    bb78:	b960      	cbnz	r0, bb94 <ifs_tx_result_notify+0x20>
    {
        nrf_802154_transmit_done_metadata_t metadata = {};
    bb7a:	2218      	movs	r2, #24
    bb7c:	4668      	mov	r0, sp
    bb7e:	f007 f8b0 	bl	12ce2 <memset>

        metadata.frame_props = m_context.params.frame_props;
    bb82:	4b06      	ldr	r3, [pc, #24]	; (bb9c <ifs_tx_result_notify+0x28>)
    bb84:	889a      	ldrh	r2, [r3, #4]
    bb86:	f8ad 2000 	strh.w	r2, [sp]
        nrf_802154_notify_transmit_failed(m_context.p_data,
    bb8a:	6818      	ldr	r0, [r3, #0]
    bb8c:	466a      	mov	r2, sp
    bb8e:	2107      	movs	r1, #7
    bb90:	f007 fe08 	bl	137a4 <nrf_802154_notify_transmit_failed>
                                          NRF_802154_TX_ERROR_TIMESLOT_DENIED,
                                          &metadata);
    }
}
    bb94:	b007      	add	sp, #28
    bb96:	f85d fb04 	ldr.w	pc, [sp], #4
    bb9a:	bf00      	nop
    bb9c:	20001ed8 	.word	0x20001ed8

0000bba0 <ifs_state_set>:
    bba0:	f3bf 8f5f 	dmb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
    bba4:	4a08      	ldr	r2, [pc, #32]	; (bbc8 <ifs_state_set+0x28>)
    bba6:	e8d2 3f4f 	ldrexb	r3, [r2]
        if ( old_val != *p_expected)
    bbaa:	b2db      	uxtb	r3, r3
    bbac:	4283      	cmp	r3, r0
    bbae:	d003      	beq.n	bbb8 <ifs_state_set+0x18>
  __ASM volatile ("clrex" ::: "memory");
    bbb0:	f3bf 8f2f 	clrex
            return false;
    bbb4:	2000      	movs	r0, #0
    bbb6:	4770      	bx	lr
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
    bbb8:	e8c2 1f43 	strexb	r3, r1, [r2]
    while (__STREXB(desired, (volatile uint8_t *)p_obj));
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	d1f2      	bne.n	bba6 <ifs_state_set+0x6>
  __ASM volatile ("dmb 0xF":::"memory");
    bbc0:	f3bf 8f5f 	dmb	sy
    return true;
    bbc4:	2001      	movs	r0, #1
}
    bbc6:	4770      	bx	lr
    bbc8:	20003773 	.word	0x20003773

0000bbcc <callback_fired>:

static void callback_fired(nrf_802154_sl_timer_t * p_timer)
{
    bbcc:	b513      	push	{r0, r1, r4, lr}
    ifs_operation_t * p_ctx = (ifs_operation_t *)p_timer->user_data.p_pointer;

    if (ifs_state_set(IFS_STATE_ARMED, IFS_STATE_FIRED))
    bbce:	2104      	movs	r1, #4
    ifs_operation_t * p_ctx = (ifs_operation_t *)p_timer->user_data.p_pointer;
    bbd0:	6984      	ldr	r4, [r0, #24]
    if (ifs_state_set(IFS_STATE_ARMED, IFS_STATE_FIRED))
    bbd2:	2002      	movs	r0, #2
    bbd4:	f7ff ffe4 	bl	bba0 <ifs_state_set>
    bbd8:	b170      	cbz	r0, bbf8 <callback_fired+0x2c>
    {
        nrf_802154_request_transmit(NRF_802154_TERM_NONE,
    bbda:	4b08      	ldr	r3, [pc, #32]	; (bbfc <callback_fired+0x30>)
    bbdc:	9300      	str	r3, [sp, #0]
    bbde:	6822      	ldr	r2, [r4, #0]
    bbe0:	1863      	adds	r3, r4, r1
    bbe2:	2000      	movs	r0, #0
    bbe4:	2106      	movs	r1, #6
    bbe6:	f007 fe20 	bl	1382a <nrf_802154_request_transmit>
                                    REQ_ORIG_IFS,
                                    p_ctx->p_data,
                                    &p_ctx->params,
                                    ifs_tx_result_notify);

        ifs_state_set(IFS_STATE_FIRED, IFS_STATE_STOPPED);
    bbea:	2101      	movs	r1, #1
    bbec:	2004      	movs	r0, #4
    }
}
    bbee:	b002      	add	sp, #8
    bbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ifs_state_set(IFS_STATE_FIRED, IFS_STATE_STOPPED);
    bbf4:	f7ff bfd4 	b.w	bba0 <ifs_state_set>
}
    bbf8:	b002      	add	sp, #8
    bbfa:	bd10      	pop	{r4, pc}
    bbfc:	0000bb75 	.word	0x0000bb75

0000bc00 <nrf_802154_ifs_init>:
    return ifs_period;
}

void nrf_802154_ifs_init(void)
{
    m_state                    = IFS_STATE_STOPPED;
    bc00:	4b09      	ldr	r3, [pc, #36]	; (bc28 <nrf_802154_ifs_init+0x28>)
    bc02:	2201      	movs	r2, #1
    bc04:	701a      	strb	r2, [r3, #0]
    m_is_last_address_extended = false;
    bc06:	4a09      	ldr	r2, [pc, #36]	; (bc2c <nrf_802154_ifs_init+0x2c>)
    bc08:	2300      	movs	r3, #0
    bc0a:	7013      	strb	r3, [r2, #0]
    m_last_frame_timestamp     = 0;
    bc0c:	4a08      	ldr	r2, [pc, #32]	; (bc30 <nrf_802154_ifs_init+0x30>)
    bc0e:	2000      	movs	r0, #0
    bc10:	2100      	movs	r1, #0
    bc12:	e9c2 0100 	strd	r0, r1, [r2]
    m_last_frame_length        = 0;
    bc16:	4a07      	ldr	r2, [pc, #28]	; (bc34 <nrf_802154_ifs_init+0x34>)
    m_context                  = (ifs_operation_t){ .p_data = NULL };

    nrf_802154_sl_timer_init(&m_timer);
    bc18:	4807      	ldr	r0, [pc, #28]	; (bc38 <nrf_802154_ifs_init+0x38>)
    m_last_frame_length        = 0;
    bc1a:	7013      	strb	r3, [r2, #0]
    m_context                  = (ifs_operation_t){ .p_data = NULL };
    bc1c:	4a07      	ldr	r2, [pc, #28]	; (bc3c <nrf_802154_ifs_init+0x3c>)
    bc1e:	e9c2 3300 	strd	r3, r3, [r2]
    bc22:	6093      	str	r3, [r2, #8]
    nrf_802154_sl_timer_init(&m_timer);
    bc24:	f008 ba5c 	b.w	140e0 <nrf_802154_sl_timer_init>
    bc28:	20003773 	.word	0x20003773
    bc2c:	2000376a 	.word	0x2000376a
    bc30:	20001098 	.word	0x20001098
    bc34:	20003769 	.word	0x20003769
    bc38:	20001070 	.word	0x20001070
    bc3c:	20001ed8 	.word	0x20001ed8

0000bc40 <nrf_802154_ifs_pretransmission>:

bool nrf_802154_ifs_pretransmission(
    uint8_t                                 * p_frame,
    nrf_802154_transmit_params_t            * p_params,
    nrf_802154_transmit_failed_notification_t notify_function)
{
    bc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void)notify_function;

    nrf_802154_ifs_mode_t mode;

    if (p_params->immediate)
    bc44:	f891 8006 	ldrb.w	r8, [r1, #6]
{
    bc48:	b086      	sub	sp, #24
    bc4a:	4681      	mov	r9, r0
    bc4c:	460e      	mov	r6, r1
    if (p_params->immediate)
    bc4e:	f1b8 0f00 	cmp.w	r8, #0
    bc52:	d177      	bne.n	bd44 <nrf_802154_ifs_pretransmission+0x104>
    {
        return true;
    }

    mode = nrf_802154_pib_ifs_mode_get();
    bc54:	f7fe f874 	bl	9d40 <nrf_802154_pib_ifs_mode_get>

    if (mode == NRF_802154_IFS_MODE_DISABLED)
    bc58:	2800      	cmp	r0, #0
    bc5a:	d073      	beq.n	bd44 <nrf_802154_ifs_pretransmission+0x104>
    {
        // Functionality is disabled - skip the routine.
        return true;
    }

    if (!m_last_frame_length)
    bc5c:	4c3c      	ldr	r4, [pc, #240]	; (bd50 <nrf_802154_ifs_pretransmission+0x110>)
    bc5e:	7823      	ldrb	r3, [r4, #0]
    bc60:	2b00      	cmp	r3, #0
    bc62:	d06f      	beq.n	bd44 <nrf_802154_ifs_pretransmission+0x104>
    {
        // No frame was transmitted before - skip the routine.
        return true;
    }

    if ((mode == NRF_802154_IFS_MODE_MATCHING_ADDRESSES) && !is_ifs_needed_by_address(p_frame))
    bc64:	2801      	cmp	r0, #1
    bc66:	d123      	bne.n	bcb0 <nrf_802154_ifs_pretransmission+0x70>
    bool result = nrf_802154_frame_parser_data_init(p_frame,
    bc68:	f899 1000 	ldrb.w	r1, [r9]
    bc6c:	3101      	adds	r1, #1
    bc6e:	466b      	mov	r3, sp
    bc70:	2203      	movs	r2, #3
    bc72:	b2c9      	uxtb	r1, r1
    bc74:	4648      	mov	r0, r9
    bc76:	f007 fcfb 	bl	13670 <nrf_802154_frame_parser_data_init>
    if (result)
    bc7a:	b1c8      	cbz	r0, bcb0 <nrf_802154_ifs_pretransmission+0x70>
    return p_parser_data->mhr.dst.addr_offset;
    bc7c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    bc80:	28ff      	cmp	r0, #255	; 0xff
    bc82:	d015      	beq.n	bcb0 <nrf_802154_ifs_pretransmission+0x70>
    return &p_parser_data->p_frame[offset];
    bc84:	9d00      	ldr	r5, [sp, #0]
    if (is_extended == m_is_last_address_extended)
    bc86:	4a33      	ldr	r2, [pc, #204]	; (bd54 <nrf_802154_ifs_pretransmission+0x114>)
    bc88:	78ab      	ldrb	r3, [r5, #2]
    bc8a:	7811      	ldrb	r1, [r2, #0]
    bc8c:	f003 030c 	and.w	r3, r3, #12
    bc90:	f1a3 070c 	sub.w	r7, r3, #12
    bc94:	427a      	negs	r2, r7
    bc96:	417a      	adcs	r2, r7
    bc98:	4291      	cmp	r1, r2
    bc9a:	d153      	bne.n	bd44 <nrf_802154_ifs_pretransmission+0x104>
        size_t    addr_len  = is_extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
    bc9c:	2b0c      	cmp	r3, #12
        if (0 == memcmp(addr, last_addr, addr_len))
    bc9e:	bf14      	ite	ne
    bca0:	2202      	movne	r2, #2
    bca2:	2208      	moveq	r2, #8
    bca4:	492c      	ldr	r1, [pc, #176]	; (bd58 <nrf_802154_ifs_pretransmission+0x118>)
    bca6:	4428      	add	r0, r5
    bca8:	f006 ffe9 	bl	12c7e <memcmp>
    bcac:	2800      	cmp	r0, #0
    bcae:	d149      	bne.n	bd44 <nrf_802154_ifs_pretransmission+0x104>
    if (!nrf_802154_sl_time64_is_in_future(m_last_frame_timestamp, current_timestamp))
    bcb0:	4f2a      	ldr	r7, [pc, #168]	; (bd5c <nrf_802154_ifs_pretransmission+0x11c>)
    {
        return true;
    }

    uint64_t current_timestamp = nrf_802154_sl_timer_current_time_get();
    bcb2:	f008 fa0e 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    if (!nrf_802154_sl_time64_is_in_future(m_last_frame_timestamp, current_timestamp))
    bcb6:	e9d7 3200 	ldrd	r3, r2, [r7]
    bcba:	4283      	cmp	r3, r0
    bcbc:	eb72 0501 	sbcs.w	r5, r2, r1
    bcc0:	d331      	bcc.n	bd26 <nrf_802154_ifs_pretransmission+0xe6>
        if (current_timestamp != m_last_frame_timestamp)
    bcc2:	4291      	cmp	r1, r2
    bcc4:	bf08      	it	eq
    bcc6:	4298      	cmpeq	r0, r3
    bcc8:	d13c      	bne.n	bd44 <nrf_802154_ifs_pretransmission+0x104>
    if (m_last_frame_length > MAX_SIFS_FRAME_SIZE)
    bcca:	7823      	ldrb	r3, [r4, #0]
    bccc:	2b12      	cmp	r3, #18
    bcce:	d927      	bls.n	bd20 <nrf_802154_ifs_pretransmission+0xe0>
        ifs_period = nrf_802154_pib_ifs_min_lifs_period_get();
    bcd0:	f7fe f842 	bl	9d58 <nrf_802154_pib_ifs_min_lifs_period_get>
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
    bcd4:	4604      	mov	r4, r0
    uint32_t dt                = ifs_needed_by_time(current_timestamp);

    if (dt == 0)
    bcd6:	b3a8      	cbz	r0, bd44 <nrf_802154_ifs_pretransmission+0x104>
    {
        return true;
    }

    if (!ifs_state_set(IFS_STATE_STOPPED, IFS_STATE_ARMED))
    bcd8:	2102      	movs	r1, #2
    bcda:	2001      	movs	r0, #1
    bcdc:	f7ff ff60 	bl	bba0 <ifs_state_set>
    bce0:	b1d0      	cbz	r0, bd18 <nrf_802154_ifs_pretransmission+0xd8>
    {
        assert(false);
    }
    else
    {
        m_context.p_data                 = p_frame;
    bce2:	4b1f      	ldr	r3, [pc, #124]	; (bd60 <nrf_802154_ifs_pretransmission+0x120>)
        m_context.params.frame_props     = p_params->frame_props;
        m_context.params.cca             = p_params->cca;
        m_context.params.tx_power        = p_params->tx_power;
        m_context.params.immediate       = true;
        m_timer.trigger_time             = m_last_frame_timestamp + dt;
    bce4:	481f      	ldr	r0, [pc, #124]	; (bd64 <nrf_802154_ifs_pretransmission+0x124>)
        m_context.p_data                 = p_frame;
    bce6:	f8c3 9000 	str.w	r9, [r3]
        m_context.params.frame_props     = p_params->frame_props;
    bcea:	8832      	ldrh	r2, [r6, #0]
    bcec:	809a      	strh	r2, [r3, #4]
        m_context.params.cca             = p_params->cca;
    bcee:	7972      	ldrb	r2, [r6, #5]
    bcf0:	725a      	strb	r2, [r3, #9]
        m_context.params.tx_power        = p_params->tx_power;
    bcf2:	8872      	ldrh	r2, [r6, #2]
    bcf4:	80da      	strh	r2, [r3, #6]
    bcf6:	7932      	ldrb	r2, [r6, #4]
    bcf8:	721a      	strb	r2, [r3, #8]
        m_timer.trigger_time             = m_last_frame_timestamp + dt;
    bcfa:	e9d7 2100 	ldrd	r2, r1, [r7]
    bcfe:	1912      	adds	r2, r2, r4
    bd00:	f141 0100 	adc.w	r1, r1, #0
        m_context.params.immediate       = true;
    bd04:	2501      	movs	r5, #1
        m_timer.trigger_time             = m_last_frame_timestamp + dt;
    bd06:	e9c0 2104 	strd	r2, r1, [r0, #16]
        m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
        m_timer.action.callback.callback = callback_fired;
    bd0a:	4a17      	ldr	r2, [pc, #92]	; (bd68 <nrf_802154_ifs_pretransmission+0x128>)
        m_context.params.immediate       = true;
    bd0c:	729d      	strb	r5, [r3, #10]
        m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
    bd0e:	7705      	strb	r5, [r0, #28]
        m_timer.action.callback.callback = callback_fired;
    bd10:	6202      	str	r2, [r0, #32]
        m_timer.user_data.p_pointer      = &m_context;
    bd12:	6183      	str	r3, [r0, #24]

        if (nrf_802154_sl_timer_add(&m_timer) != NRF_802154_SL_TIMER_RET_SUCCESS)
    bd14:	f003 fb9a 	bl	f44c <nrf_802154_sl_timer_add>
            assert(false);
        }
    }

    return false;
}
    bd18:	4640      	mov	r0, r8
    bd1a:	b006      	add	sp, #24
    bd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
    bd20:	f7fe f814 	bl	9d4c <nrf_802154_pib_ifs_min_sifs_period_get>
    bd24:	e7d6      	b.n	bcd4 <nrf_802154_ifs_pretransmission+0x94>
    uint64_t dt = current_timestamp - m_last_frame_timestamp;
    bd26:	1ac5      	subs	r5, r0, r3
    if (m_last_frame_length > MAX_SIFS_FRAME_SIZE)
    bd28:	7823      	ldrb	r3, [r4, #0]
    uint64_t dt = current_timestamp - m_last_frame_timestamp;
    bd2a:	eb61 0a02 	sbc.w	sl, r1, r2
    if (m_last_frame_length > MAX_SIFS_FRAME_SIZE)
    bd2e:	2b12      	cmp	r3, #18
    bd30:	d90b      	bls.n	bd4a <nrf_802154_ifs_pretransmission+0x10a>
        ifs_period = nrf_802154_pib_ifs_min_lifs_period_get();
    bd32:	f7fe f811 	bl	9d58 <nrf_802154_pib_ifs_min_lifs_period_get>
    if (dt > ifs_period)
    bd36:	42a8      	cmp	r0, r5
    bd38:	f04f 0300 	mov.w	r3, #0
    bd3c:	eb73 030a 	sbcs.w	r3, r3, sl
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
    bd40:	4604      	mov	r4, r0
    if (dt > ifs_period)
    bd42:	d2c9      	bcs.n	bcd8 <nrf_802154_ifs_pretransmission+0x98>
        return true;
    bd44:	f04f 0801 	mov.w	r8, #1
    bd48:	e7e6      	b.n	bd18 <nrf_802154_ifs_pretransmission+0xd8>
        ifs_period = nrf_802154_pib_ifs_min_sifs_period_get();
    bd4a:	f7fd ffff 	bl	9d4c <nrf_802154_pib_ifs_min_sifs_period_get>
    bd4e:	e7f2      	b.n	bd36 <nrf_802154_ifs_pretransmission+0xf6>
    bd50:	20003769 	.word	0x20003769
    bd54:	2000376a 	.word	0x2000376a
    bd58:	2000376b 	.word	0x2000376b
    bd5c:	20001098 	.word	0x20001098
    bd60:	20001ed8 	.word	0x20001ed8
    bd64:	20001070 	.word	0x20001070
    bd68:	0000bbcd 	.word	0x0000bbcd

0000bd6c <nrf_802154_ifs_transmitted_hook>:

void nrf_802154_ifs_transmitted_hook(const uint8_t * p_frame)
{
    bd6c:	b530      	push	{r4, r5, lr}
    bd6e:	b087      	sub	sp, #28
    bd70:	4604      	mov	r4, r0
    assert(p_frame[0] != 0U);

    m_last_frame_timestamp = nrf_802154_sl_timer_current_time_get();
    bd72:	f008 f9ae 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    bd76:	4b16      	ldr	r3, [pc, #88]	; (bdd0 <nrf_802154_ifs_transmitted_hook+0x64>)
    bd78:	e9c3 0100 	strd	r0, r1, [r3]

    nrf_802154_frame_parser_data_t frame_data;
    const uint8_t                * addr;

    bool result = nrf_802154_frame_parser_data_init(p_frame,
    bd7c:	7821      	ldrb	r1, [r4, #0]
    bd7e:	3101      	adds	r1, #1
    bd80:	2203      	movs	r2, #3
    bd82:	466b      	mov	r3, sp
    bd84:	b2c9      	uxtb	r1, r1
    bd86:	4620      	mov	r0, r4
    bd88:	f007 fc72 	bl	13670 <nrf_802154_frame_parser_data_init>
                                                    p_frame[PHR_OFFSET] + PHR_SIZE,
                                                    PARSE_LEVEL_ADDRESSING_END,
                                                    &frame_data);

    if (result)
    bd8c:	4a11      	ldr	r2, [pc, #68]	; (bdd4 <nrf_802154_ifs_transmitted_hook+0x68>)
    bd8e:	b198      	cbz	r0, bdb8 <nrf_802154_ifs_transmitted_hook+0x4c>
    return p_parser_data->mhr.dst.addr_offset;
    bd90:	9900      	ldr	r1, [sp, #0]
    bd92:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    bd96:	788b      	ldrb	r3, [r1, #2]
    bd98:	f003 030c 	and.w	r3, r3, #12
    return (p_parser_data->p_frame[DEST_ADDR_TYPE_OFFSET] & DEST_ADDR_TYPE_MASK) ==
    bd9c:	f1a3 0c0c 	sub.w	ip, r3, #12
    bda0:	f1dc 0000 	rsbs	r0, ip, #0
    bda4:	eb40 000c 	adc.w	r0, r0, ip
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    bda8:	2dff      	cmp	r5, #255	; 0xff
    bdaa:	d005      	beq.n	bdb8 <nrf_802154_ifs_transmitted_hook+0x4c>
        // If the transmitted frame has no address, we consider that enough time has passed so no IFS insertion will be needed.
        m_last_frame_length = 0;
        return;
    }

    if (m_is_last_address_extended)
    bdac:	2b0c      	cmp	r3, #12
    return &p_parser_data->p_frame[offset];
    bdae:	4429      	add	r1, r5
        m_is_last_address_extended = nrf_802154_frame_parser_dst_addr_is_extended(&frame_data);
    bdb0:	7010      	strb	r0, [r2, #0]
    if (m_is_last_address_extended)
    bdb2:	d007      	beq.n	bdc4 <nrf_802154_ifs_transmitted_hook+0x58>
    {
        memcpy(m_last_address.ext, addr, EXTENDED_ADDRESS_SIZE);
    }
    else
    {
        memcpy(m_last_address.sh, addr, SHORT_ADDRESS_SIZE);
    bdb4:	2202      	movs	r2, #2
    bdb6:	e006      	b.n	bdc6 <nrf_802154_ifs_transmitted_hook+0x5a>
        m_is_last_address_extended = nrf_802154_frame_parser_dst_addr_is_extended(&frame_data);
    bdb8:	7010      	strb	r0, [r2, #0]
    bdba:	2300      	movs	r3, #0
    }

    m_last_frame_length = p_frame[0];
    bdbc:	4a06      	ldr	r2, [pc, #24]	; (bdd8 <nrf_802154_ifs_transmitted_hook+0x6c>)
    bdbe:	7013      	strb	r3, [r2, #0]
}
    bdc0:	b007      	add	sp, #28
    bdc2:	bd30      	pop	{r4, r5, pc}
        memcpy(m_last_address.ext, addr, EXTENDED_ADDRESS_SIZE);
    bdc4:	2208      	movs	r2, #8
        memcpy(m_last_address.sh, addr, SHORT_ADDRESS_SIZE);
    bdc6:	4805      	ldr	r0, [pc, #20]	; (bddc <nrf_802154_ifs_transmitted_hook+0x70>)
    bdc8:	f006 ff80 	bl	12ccc <memcpy>
    m_last_frame_length = p_frame[0];
    bdcc:	7823      	ldrb	r3, [r4, #0]
    bdce:	e7f5      	b.n	bdbc <nrf_802154_ifs_transmitted_hook+0x50>
    bdd0:	20001098 	.word	0x20001098
    bdd4:	2000376a 	.word	0x2000376a
    bdd8:	20003769 	.word	0x20003769
    bddc:	2000376b 	.word	0x2000376b

0000bde0 <nrf_802154_ifs_abort>:

bool nrf_802154_ifs_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
    bde0:	b510      	push	{r4, lr}
    bool result = true;

    if (req_orig == REQ_ORIG_IFS)
    bde2:	2906      	cmp	r1, #6
{
    bde4:	b086      	sub	sp, #24
    if (req_orig == REQ_ORIG_IFS)
    bde6:	d019      	beq.n	be1c <nrf_802154_ifs_abort+0x3c>
    {
        // Ignore if self-request.
    }
    else
    {
        if (term_lvl >= NRF_802154_TERM_802154)
    bde8:	b1d8      	cbz	r0, be22 <nrf_802154_ifs_abort+0x42>
        {
            if (ifs_state_set(IFS_STATE_ARMED, IFS_STATE_ABORTING))
    bdea:	2108      	movs	r1, #8
    bdec:	2002      	movs	r0, #2
    bdee:	f7ff fed7 	bl	bba0 <ifs_state_set>
    bdf2:	b178      	cbz	r0, be14 <nrf_802154_ifs_abort+0x34>
            {
                ifs_operation_t * p_op = (ifs_operation_t *)m_timer.user_data.p_pointer;
    bdf4:	4b0f      	ldr	r3, [pc, #60]	; (be34 <nrf_802154_ifs_abort+0x54>)

                // The IFS was still waiting, so the transmission didn't occur
                // at all. Notify with frame_props passed in nrf_802154_ifs_pretransmission hook
                nrf_802154_transmit_done_metadata_t metadata = {};
    bdf6:	2218      	movs	r2, #24
    bdf8:	2100      	movs	r1, #0
    bdfa:	4668      	mov	r0, sp
                ifs_operation_t * p_op = (ifs_operation_t *)m_timer.user_data.p_pointer;
    bdfc:	699c      	ldr	r4, [r3, #24]
                nrf_802154_transmit_done_metadata_t metadata = {};
    bdfe:	f006 ff70 	bl	12ce2 <memset>

                metadata.frame_props = m_context.params.frame_props;
    be02:	4b0d      	ldr	r3, [pc, #52]	; (be38 <nrf_802154_ifs_abort+0x58>)
    be04:	889b      	ldrh	r3, [r3, #4]
    be06:	f8ad 3000 	strh.w	r3, [sp]
                nrf_802154_notify_transmit_failed(p_op->p_data,
    be0a:	6820      	ldr	r0, [r4, #0]
    be0c:	466a      	mov	r2, sp
    be0e:	2106      	movs	r1, #6
    be10:	f007 fcc8 	bl	137a4 <nrf_802154_notify_transmit_failed>
                                                  NRF_802154_TX_ERROR_ABORTED,
                                                  &metadata);
            }

            ifs_state_set(IFS_STATE_MASK, IFS_STATE_STOPPED);
    be14:	2101      	movs	r1, #1
    be16:	200f      	movs	r0, #15
    be18:	f7ff fec2 	bl	bba0 <ifs_state_set>
    bool result = true;
    be1c:	2001      	movs	r0, #1
            result = !ifs_state_is(IFS_STATE_ARMED | IFS_STATE_FIRED);
        }
    }

    return result;
}
    be1e:	b006      	add	sp, #24
    be20:	bd10      	pop	{r4, pc}
    return ((m_state & expected_state_mask) != 0);
    be22:	4b06      	ldr	r3, [pc, #24]	; (be3c <nrf_802154_ifs_abort+0x5c>)
    be24:	781b      	ldrb	r3, [r3, #0]
            result = !ifs_state_is(IFS_STATE_ARMED | IFS_STATE_FIRED);
    be26:	f013 0f06 	tst.w	r3, #6
    be2a:	bf0c      	ite	eq
    be2c:	2001      	moveq	r0, #1
    be2e:	2000      	movne	r0, #0
    be30:	e7f5      	b.n	be1e <nrf_802154_ifs_abort+0x3e>
    be32:	bf00      	nop
    be34:	20001070 	.word	0x20001070
    be38:	20001ed8 	.word	0x20001ed8
    be3c:	20003773 	.word	0x20003773

0000be40 <nrf_802154_security_pib_init>:

nrf_802154_security_error_t nrf_802154_security_pib_init(void)
{
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
    {
        m_key_storage[i].taken = false;
    be40:	4b04      	ldr	r3, [pc, #16]	; (be54 <nrf_802154_security_pib_init+0x14>)
    be42:	2000      	movs	r0, #0
    be44:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
    be48:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
    be4c:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
    }

    return NRF_802154_SECURITY_ERROR_NONE;
}
    be50:	4770      	bx	lr
    be52:	bf00      	nop
    be54:	20001ee8 	.word	0x20001ee8

0000be58 <nrf_802154_security_pib_frame_counter_get_next>:
}

nrf_802154_security_error_t nrf_802154_security_pib_frame_counter_get_next(
    uint32_t            * p_frame_counter,
    nrf_802154_key_id_t * p_id)
{
    be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be5c:	4e16      	ldr	r6, [pc, #88]	; (beb8 <nrf_802154_security_pib_frame_counter_get_next+0x60>)
    be5e:	4607      	mov	r7, r0
    be60:	4688      	mov	r8, r1
    assert(p_id != NULL);

    uint32_t * p_frame_counter_to_use = NULL;
    uint32_t   fc;

    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
    be62:	2400      	movs	r4, #0
    be64:	4635      	mov	r5, r6
    {
        if (key_matches(&m_key_storage[i], p_id))
    be66:	4641      	mov	r1, r8
    be68:	4630      	mov	r0, r6
    be6a:	f007 fc29 	bl	136c0 <key_matches>
    be6e:	b178      	cbz	r0, be90 <nrf_802154_security_pib_frame_counter_get_next+0x38>
        {
            if (m_key_storage[i].use_global_frame_counter)
    be70:	2324      	movs	r3, #36	; 0x24
    be72:	435c      	muls	r4, r3
    be74:	192b      	adds	r3, r5, r4
    be76:	f893 3020 	ldrb.w	r3, [r3, #32]
    be7a:	b98b      	cbnz	r3, bea0 <nrf_802154_security_pib_frame_counter_get_next+0x48>
            {
                p_frame_counter_to_use = &m_global_frame_counter;
            }
            else
            {
                p_frame_counter_to_use = &m_key_storage[i].frame_counter;
    be7c:	341c      	adds	r4, #28
    be7e:	442c      	add	r4, r5
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
    be80:	e854 2f00 	ldrex	r2, [r4]

    do
    {
        fc = __LDREXW(p_frame_counter_to_use);

        if (fc == UINT32_MAX)
    be84:	1c53      	adds	r3, r2, #1
    be86:	d10d      	bne.n	bea4 <nrf_802154_security_pib_frame_counter_get_next+0x4c>
  __ASM volatile ("clrex" ::: "memory");
    be88:	f3bf 8f2f 	clrex
        {
            __CLREX();
            return NRF_802154_SECURITY_ERROR_FRAME_COUNTER_OVERFLOW;
    be8c:	2006      	movs	r0, #6
    be8e:	e005      	b.n	be9c <nrf_802154_security_pib_frame_counter_get_next+0x44>
    for (uint32_t i = 0; i < NRF_802154_SECURITY_KEY_STORAGE_SIZE; i++)
    be90:	3401      	adds	r4, #1
    be92:	2c03      	cmp	r4, #3
    be94:	f106 0624 	add.w	r6, r6, #36	; 0x24
    be98:	d1e5      	bne.n	be66 <nrf_802154_security_pib_frame_counter_get_next+0xe>
        return NRF_802154_SECURITY_ERROR_KEY_NOT_FOUND;
    be9a:	2002      	movs	r0, #2
    while (__STREXW(fc + 1, p_frame_counter_to_use));

    *p_frame_counter = *p_frame_counter_to_use - 1;

    return NRF_802154_SECURITY_ERROR_NONE;
}
    be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                p_frame_counter_to_use = &m_global_frame_counter;
    bea0:	4c06      	ldr	r4, [pc, #24]	; (bebc <nrf_802154_security_pib_frame_counter_get_next+0x64>)
    bea2:	e7ed      	b.n	be80 <nrf_802154_security_pib_frame_counter_get_next+0x28>
    while (__STREXW(fc + 1, p_frame_counter_to_use));
    bea4:	3201      	adds	r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
    bea6:	e844 2000 	strex	r0, r2, [r4]
    beaa:	2800      	cmp	r0, #0
    beac:	d1e8      	bne.n	be80 <nrf_802154_security_pib_frame_counter_get_next+0x28>
    *p_frame_counter = *p_frame_counter_to_use - 1;
    beae:	6823      	ldr	r3, [r4, #0]
    beb0:	3b01      	subs	r3, #1
    beb2:	603b      	str	r3, [r7, #0]
    return NRF_802154_SECURITY_ERROR_NONE;
    beb4:	e7f2      	b.n	be9c <nrf_802154_security_pib_frame_counter_get_next+0x44>
    beb6:	bf00      	nop
    beb8:	20001ee8 	.word	0x20001ee8
    bebc:	20001ee4 	.word	0x20001ee4

0000bec0 <timeout_timer_stop>:
    (void)ret;
}

static void timeout_timer_stop(void)
{
    m_procedure_is_active = false;
    bec0:	4b03      	ldr	r3, [pc, #12]	; (bed0 <timeout_timer_stop+0x10>)
    bec2:	2200      	movs	r2, #0
    bec4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    bec6:	f3bf 8f5f 	dmb	sy

    // To make sure `timeout_timer_fired()` detects that procedure is being stopped if it preempts
    // this function.
    __DMB();

    (void)nrf_802154_sl_timer_remove(&m_timer);
    beca:	4802      	ldr	r0, [pc, #8]	; (bed4 <timeout_timer_stop+0x14>)
    becc:	f003 bade 	b.w	f48c <nrf_802154_sl_timer_remove>
    bed0:	20003774 	.word	0x20003774
    bed4:	200010a0 	.word	0x200010a0

0000bed8 <timeout_timer_fired>:
{
    bed8:	b513      	push	{r0, r1, r4, lr}
    if (m_procedure_is_active)
    beda:	4c12      	ldr	r4, [pc, #72]	; (bf24 <timeout_timer_fired+0x4c>)
    bedc:	7823      	ldrb	r3, [r4, #0]
    bede:	b15b      	cbz	r3, bef8 <timeout_timer_fired+0x20>
        if (nrf_802154_request_receive(NRF_802154_TERM_802154,
    bee0:	f06f 0301 	mvn.w	r3, #1
    bee4:	9300      	str	r3, [sp, #0]
    bee6:	4a10      	ldr	r2, [pc, #64]	; (bf28 <timeout_timer_fired+0x50>)
    bee8:	2300      	movs	r3, #0
    beea:	2104      	movs	r1, #4
    beec:	2001      	movs	r0, #1
    beee:	f007 fc6f 	bl	137d0 <nrf_802154_request_receive>
    bef2:	b118      	cbz	r0, befc <timeout_timer_fired+0x24>
            m_procedure_is_active = false;
    bef4:	2300      	movs	r3, #0
    bef6:	7023      	strb	r3, [r4, #0]
}
    bef8:	b002      	add	sp, #8
    befa:	bd10      	pop	{r4, pc}
    m_dt += RETRY_DELAY;
    befc:	4a0b      	ldr	r2, [pc, #44]	; (bf2c <timeout_timer_fired+0x54>)
    m_timer.trigger_time += RETRY_DELAY;
    befe:	480c      	ldr	r0, [pc, #48]	; (bf30 <timeout_timer_fired+0x58>)
    m_dt += RETRY_DELAY;
    bf00:	6813      	ldr	r3, [r2, #0]
    bf02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    bf06:	6013      	str	r3, [r2, #0]
    m_timer.trigger_time += RETRY_DELAY;
    bf08:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
    bf0c:	f513 73fa 	adds.w	r3, r3, #500	; 0x1f4
    bf10:	f142 0200 	adc.w	r2, r2, #0
    bf14:	e9c0 3204 	strd	r3, r2, [r0, #16]
}
    bf18:	b002      	add	sp, #8
    bf1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ret = nrf_802154_sl_timer_add(&m_timer);
    bf1e:	f003 ba95 	b.w	f44c <nrf_802154_sl_timer_add>
    bf22:	bf00      	nop
    bf24:	20003774 	.word	0x20003774
    bf28:	0000bf35 	.word	0x0000bf35
    bf2c:	20001f58 	.word	0x20001f58
    bf30:	200010a0 	.word	0x200010a0

0000bf34 <notify_tx_error>:
{
    bf34:	b510      	push	{r4, lr}
    bf36:	b086      	sub	sp, #24
    if (result)
    bf38:	b170      	cbz	r0, bf58 <notify_tx_error+0x24>
        nrf_802154_tx_work_buffer_original_frame_update(mp_frame, &metadata.frame_props);
    bf3a:	4c08      	ldr	r4, [pc, #32]	; (bf5c <notify_tx_error+0x28>)
        nrf_802154_transmit_done_metadata_t metadata = {0};
    bf3c:	2218      	movs	r2, #24
    bf3e:	2100      	movs	r1, #0
    bf40:	4668      	mov	r0, sp
    bf42:	f006 fece 	bl	12ce2 <memset>
        nrf_802154_tx_work_buffer_original_frame_update(mp_frame, &metadata.frame_props);
    bf46:	6820      	ldr	r0, [r4, #0]
    bf48:	4669      	mov	r1, sp
    bf4a:	f7ff f85d 	bl	b008 <nrf_802154_tx_work_buffer_original_frame_update>
        nrf_802154_notify_transmit_failed(mp_frame, NRF_802154_TX_ERROR_NO_ACK, &metadata);
    bf4e:	6820      	ldr	r0, [r4, #0]
    bf50:	466a      	mov	r2, sp
    bf52:	2105      	movs	r1, #5
    bf54:	f007 fc26 	bl	137a4 <nrf_802154_notify_transmit_failed>
}
    bf58:	b006      	add	sp, #24
    bf5a:	bd10      	pop	{r4, pc}
    bf5c:	20001f54 	.word	0x20001f54

0000bf60 <nrf_802154_ack_timeout_init>:
}

void nrf_802154_ack_timeout_init(void)
{
    m_timeout             = NRF_802154_PRECISE_ACK_TIMEOUT_DEFAULT_TIMEOUT;
    bf60:	4b06      	ldr	r3, [pc, #24]	; (bf7c <nrf_802154_ack_timeout_init+0x1c>)
    m_dt                  = 0;
    m_procedure_is_active = false;
    mp_frame              = NULL;

    nrf_802154_sl_timer_init(&m_timer);
    bf62:	4807      	ldr	r0, [pc, #28]	; (bf80 <nrf_802154_ack_timeout_init+0x20>)
    m_timeout             = NRF_802154_PRECISE_ACK_TIMEOUT_DEFAULT_TIMEOUT;
    bf64:	22d2      	movs	r2, #210	; 0xd2
    bf66:	601a      	str	r2, [r3, #0]
    m_dt                  = 0;
    bf68:	4a06      	ldr	r2, [pc, #24]	; (bf84 <nrf_802154_ack_timeout_init+0x24>)
    bf6a:	2300      	movs	r3, #0
    bf6c:	6013      	str	r3, [r2, #0]
    m_procedure_is_active = false;
    bf6e:	4a06      	ldr	r2, [pc, #24]	; (bf88 <nrf_802154_ack_timeout_init+0x28>)
    bf70:	7013      	strb	r3, [r2, #0]
    mp_frame              = NULL;
    bf72:	4a06      	ldr	r2, [pc, #24]	; (bf8c <nrf_802154_ack_timeout_init+0x2c>)
    bf74:	6013      	str	r3, [r2, #0]
    nrf_802154_sl_timer_init(&m_timer);
    bf76:	f008 b8b3 	b.w	140e0 <nrf_802154_sl_timer_init>
    bf7a:	bf00      	nop
    bf7c:	200000ec 	.word	0x200000ec
    bf80:	200010a0 	.word	0x200010a0
    bf84:	20001f58 	.word	0x20001f58
    bf88:	20003774 	.word	0x20003774
    bf8c:	20001f54 	.word	0x20001f54

0000bf90 <nrf_802154_ack_timeout_tx_started_hook>:
{
    m_timeout = time;
}

bool nrf_802154_ack_timeout_tx_started_hook(uint8_t * p_frame)
{
    bf90:	b538      	push	{r3, r4, r5, lr}
    mp_frame = p_frame;
    bf92:	4c0f      	ldr	r4, [pc, #60]	; (bfd0 <nrf_802154_ack_timeout_tx_started_hook+0x40>)
    m_timer.action.callback.callback = timeout_timer_fired;
    bf94:	4d0f      	ldr	r5, [pc, #60]	; (bfd4 <nrf_802154_ack_timeout_tx_started_hook+0x44>)
    mp_frame = p_frame;
    bf96:	6020      	str	r0, [r4, #0]
    uint64_t                  now = nrf_802154_sl_timer_current_time_get();
    bf98:	f008 f89b 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
           nrf_802154_frame_duration_get(mp_frame[0], false, true);
    bf9c:	6823      	ldr	r3, [r4, #0]
    uint16_t us_time = PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(psdu_length));
    bf9e:	781a      	ldrb	r2, [r3, #0]
           IMM_ACK_DURATION +
    bfa0:	4b0d      	ldr	r3, [pc, #52]	; (bfd8 <nrf_802154_ack_timeout_tx_started_hook+0x48>)
    bfa2:	681b      	ldr	r3, [r3, #0]
    bfa4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    m_dt = m_timeout +
    bfa8:	4a0c      	ldr	r2, [pc, #48]	; (bfdc <nrf_802154_ack_timeout_tx_started_hook+0x4c>)
           IMM_ACK_DURATION +
    bfaa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    m_dt = m_timeout +
    bfae:	6013      	str	r3, [r2, #0]
    m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
    bfb0:	4a0b      	ldr	r2, [pc, #44]	; (bfe0 <nrf_802154_ack_timeout_tx_started_hook+0x50>)
    m_timer.trigger_time             = now + m_dt;
    bfb2:	181b      	adds	r3, r3, r0
    bfb4:	f141 0100 	adc.w	r1, r1, #0
    bfb8:	e9c2 3104 	strd	r3, r1, [r2, #16]
    m_procedure_is_active = true;
    bfbc:	4b09      	ldr	r3, [pc, #36]	; (bfe4 <nrf_802154_ack_timeout_tx_started_hook+0x54>)
    m_timer.action.callback.callback = timeout_timer_fired;
    bfbe:	6215      	str	r5, [r2, #32]
    m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
    bfc0:	2401      	movs	r4, #1
    ret = nrf_802154_sl_timer_add(&m_timer);
    bfc2:	4610      	mov	r0, r2
    m_timer.action_type              = NRF_802154_SL_TIMER_ACTION_TYPE_CALLBACK;
    bfc4:	7714      	strb	r4, [r2, #28]
    m_procedure_is_active = true;
    bfc6:	701c      	strb	r4, [r3, #0]
    ret = nrf_802154_sl_timer_add(&m_timer);
    bfc8:	f003 fa40 	bl	f44c <nrf_802154_sl_timer_add>
    timeout_timer_start();

    return true;
}
    bfcc:	4620      	mov	r0, r4
    bfce:	bd38      	pop	{r3, r4, r5, pc}
    bfd0:	20001f54 	.word	0x20001f54
    bfd4:	0000bed9 	.word	0x0000bed9
    bfd8:	200000ec 	.word	0x200000ec
    bfdc:	20001f58 	.word	0x20001f58
    bfe0:	200010a0 	.word	0x200010a0
    bfe4:	20003774 	.word	0x20003774

0000bfe8 <nrf_802154_ack_timeout_abort>:

bool nrf_802154_ack_timeout_abort(nrf_802154_term_t term_lvl, req_originator_t req_orig)
{
    bfe8:	b508      	push	{r3, lr}
    bool result;

    if (!m_procedure_is_active || req_orig == REQ_ORIG_ACK_TIMEOUT)
    bfea:	4b05      	ldr	r3, [pc, #20]	; (c000 <nrf_802154_ack_timeout_abort+0x18>)
    bfec:	781b      	ldrb	r3, [r3, #0]
    bfee:	b123      	cbz	r3, bffa <nrf_802154_ack_timeout_abort+0x12>
    bff0:	2904      	cmp	r1, #4
    bff2:	d002      	beq.n	bffa <nrf_802154_ack_timeout_abort+0x12>
    {
        // Ignore if procedure is not running or self-request.
        result = true;
    }
    else if (term_lvl >= NRF_802154_TERM_802154)
    bff4:	b110      	cbz	r0, bffc <nrf_802154_ack_timeout_abort+0x14>
    {
        // Stop procedure only if termination level is high enough.
        timeout_timer_stop();
    bff6:	f7ff ff63 	bl	bec0 <timeout_timer_stop>
        result = true;
    bffa:	2001      	movs	r0, #1
    {
        result = false;
    }

    return result;
}
    bffc:	bd08      	pop	{r3, pc}
    bffe:	bf00      	nop
    c000:	20003774 	.word	0x20003774

0000c004 <addr_index_find>:
 */
static bool addr_index_find(const uint8_t       * p_addr,
                            uint32_t            * p_location,
                            nrf_802154_ack_data_t data_type,
                            bool                  extended)
{
    c004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t * p_addr_array;
    bool      valid_data_type = true;

    switch (data_type)
    c008:	b122      	cbz	r2, c014 <addr_index_find+0x10>
    c00a:	2a01      	cmp	r2, #1
    c00c:	d013      	beq.n	c036 <addr_index_find+0x32>
            break;
    }

    if (!valid_data_type)
    {
        return false;
    c00e:	2000      	movs	r0, #0
    }

    return addr_binary_search(p_addr, p_addr_array, p_location, data_type, extended);
}
    c010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
    c014:	4a23      	ldr	r2, [pc, #140]	; (c0a4 <addr_index_find+0xa0>)
    c016:	b9a3      	cbnz	r3, c042 <addr_index_find+0x3e>
                             m_pending_bit.num_of_ext_addr : m_pending_bit.num_of_short_addr;
    c018:	f8d2 70a4 	ldr.w	r7, [r2, #164]	; 0xa4
            entry_size     = extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
    c01c:	2402      	movs	r4, #2
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
    c01e:	3201      	adds	r2, #1
    uint32_t midpoint = 0;
    c020:	2500      	movs	r5, #0
    int32_t  high     = addr_array_len;
    c022:	46bc      	mov	ip, r7
    int32_t  low      = 0;
    c024:	462e      	mov	r6, r5
    while (high >= low)
    c026:	45b4      	cmp	ip, r6
    c028:	da15      	bge.n	c056 <addr_index_find+0x52>
    if ((uint32_t)low == midpoint + 1)
    c02a:	1c6b      	adds	r3, r5, #1
    c02c:	42b3      	cmp	r3, r6
    c02e:	bf08      	it	eq
    c030:	4635      	moveq	r5, r6
    *p_location = midpoint;
    c032:	600d      	str	r5, [r1, #0]
    return false;
    c034:	e7eb      	b.n	c00e <addr_index_find+0xa>
            p_addr_array = extended ? (uint8_t *)m_ie.ext_data : (uint8_t *)m_ie.short_data;
    c036:	4a1c      	ldr	r2, [pc, #112]	; (c0a8 <addr_index_find+0xa4>)
    c038:	b943      	cbnz	r3, c04c <addr_index_find+0x48>
            addr_array_len = extended ? m_ie.num_of_ext_data : m_ie.num_of_short_data;
    c03a:	f8d2 71c0 	ldr.w	r7, [r2, #448]	; 0x1c0
            entry_size     = extended ? sizeof(ack_ext_ie_data_t) : sizeof(ack_short_ie_data_t);
    c03e:	240b      	movs	r4, #11
    c040:	e7ee      	b.n	c020 <addr_index_find+0x1c>
                             m_pending_bit.num_of_ext_addr : m_pending_bit.num_of_short_addr;
    c042:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
            entry_size     = extended ? EXTENDED_ADDRESS_SIZE : SHORT_ADDRESS_SIZE;
    c046:	2408      	movs	r4, #8
            p_addr_array = extended ? (uint8_t *)m_pending_bit.extended_addr :
    c048:	3221      	adds	r2, #33	; 0x21
    c04a:	e7e9      	b.n	c020 <addr_index_find+0x1c>
            addr_array_len = extended ? m_ie.num_of_ext_data : m_ie.num_of_short_data;
    c04c:	f8d2 71c4 	ldr.w	r7, [r2, #452]	; 0x1c4
            entry_size     = extended ? sizeof(ack_ext_ie_data_t) : sizeof(ack_short_ie_data_t);
    c050:	2411      	movs	r4, #17
            p_addr_array = extended ? (uint8_t *)m_ie.ext_data : (uint8_t *)m_ie.short_data;
    c052:	32b0      	adds	r2, #176	; 0xb0
    c054:	e7e4      	b.n	c020 <addr_index_find+0x1c>
        midpoint = (uint32_t)(low + (high - low) / 2);
    c056:	ebac 0506 	sub.w	r5, ip, r6
    c05a:	eb06 0565 	add.w	r5, r6, r5, asr #1
        if (midpoint >= addr_array_len)
    c05e:	42af      	cmp	r7, r5
    c060:	d9e3      	bls.n	c02a <addr_index_find+0x26>
        switch (addr_compare(p_addr, p_addr_array + entry_size * midpoint, extended))
    c062:	fb05 fe04 	mul.w	lr, r5, r4
    c066:	eb02 080e 	add.w	r8, r2, lr
    if (extended)
    c06a:	b183      	cbz	r3, c08e <addr_index_find+0x8a>
        second_addr = *(uint32_t *)(p_second_addr + (i * sizeof(uint32_t)));
    c06c:	f852 e00e 	ldr.w	lr, [r2, lr]
        if (first_addr < second_addr)
    c070:	f8d0 9000 	ldr.w	r9, [r0]
    c074:	45ce      	cmp	lr, r9
    c076:	d80f      	bhi.n	c098 <addr_index_find+0x94>
        else if (first_addr > second_addr)
    c078:	d311      	bcc.n	c09e <addr_index_find+0x9a>
        second_addr = *(uint32_t *)(p_second_addr + (i * sizeof(uint32_t)));
    c07a:	f8d8 e004 	ldr.w	lr, [r8, #4]
        if (first_addr < second_addr)
    c07e:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (first_addr < second_addr)
    c082:	45f0      	cmp	r8, lr
    c084:	d308      	bcc.n	c098 <addr_index_find+0x94>
    else if (first_addr > second_addr)
    c086:	d80a      	bhi.n	c09e <addr_index_find+0x9a>
                *p_location = midpoint;
    c088:	600d      	str	r5, [r1, #0]
                return true;
    c08a:	2001      	movs	r0, #1
    c08c:	e7c0      	b.n	c010 <addr_index_find+0xc>
    uint16_t first_addr  = *(uint16_t *)(p_first_addr);
    c08e:	f8b0 8000 	ldrh.w	r8, [r0]
    uint16_t second_addr = *(uint16_t *)(p_second_addr);
    c092:	f832 e00e 	ldrh.w	lr, [r2, lr]
    c096:	e7f4      	b.n	c082 <addr_index_find+0x7e>
                high = (int32_t)(midpoint - 1);
    c098:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
                break;
    c09c:	e7c3      	b.n	c026 <addr_index_find+0x22>
                low = (int32_t)(midpoint + 1);
    c09e:	1c6e      	adds	r6, r5, #1
                break;
    c0a0:	e7c1      	b.n	c026 <addr_index_find+0x22>
    c0a2:	bf00      	nop
    c0a4:	20002124 	.word	0x20002124
    c0a8:	20001f5c 	.word	0x20001f5c

0000c0ac <nrf_802154_ack_data_init>:
/***************************************************************************************************
 * @section Public API
 **************************************************************************************************/

void nrf_802154_ack_data_init(void)
{
    c0ac:	b510      	push	{r4, lr}
    memset(&m_pending_bit, 0, sizeof(m_pending_bit));
    c0ae:	4c09      	ldr	r4, [pc, #36]	; (c0d4 <nrf_802154_ack_data_init+0x28>)
    c0b0:	22ac      	movs	r2, #172	; 0xac
    c0b2:	2100      	movs	r1, #0
    c0b4:	4620      	mov	r0, r4
    c0b6:	f006 fe14 	bl	12ce2 <memset>
    memset(&m_ie, 0, sizeof(m_ie));
    c0ba:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    c0be:	4806      	ldr	r0, [pc, #24]	; (c0d8 <nrf_802154_ack_data_init+0x2c>)
    c0c0:	2100      	movs	r1, #0
    c0c2:	f006 fe0e 	bl	12ce2 <memset>

    m_pending_bit.enabled = true;
    c0c6:	2301      	movs	r3, #1
    c0c8:	7023      	strb	r3, [r4, #0]
    m_src_matching_method = NRF_802154_SRC_ADDR_MATCH_THREAD;
    c0ca:	4b04      	ldr	r3, [pc, #16]	; (c0dc <nrf_802154_ack_data_init+0x30>)
    c0cc:	2200      	movs	r2, #0
    c0ce:	701a      	strb	r2, [r3, #0]
}
    c0d0:	bd10      	pop	{r4, pc}
    c0d2:	bf00      	nop
    c0d4:	20002124 	.word	0x20002124
    c0d8:	20001f5c 	.word	0x20001f5c
    c0dc:	20003775 	.word	0x20003775

0000c0e0 <nrf_802154_ack_data_pending_bit_should_be_set>:

}

bool nrf_802154_ack_data_pending_bit_should_be_set(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
    c0e0:	b513      	push	{r0, r1, r4, lr}
    bool ret;

    switch (m_src_matching_method)
    c0e2:	4a22      	ldr	r2, [pc, #136]	; (c16c <nrf_802154_ack_data_pending_bit_should_be_set+0x8c>)
    c0e4:	7812      	ldrb	r2, [r2, #0]
    c0e6:	2a01      	cmp	r2, #1
{
    c0e8:	4603      	mov	r3, r0
    switch (m_src_matching_method)
    c0ea:	d018      	beq.n	c11e <nrf_802154_ack_data_pending_bit_should_be_set+0x3e>
    c0ec:	2a02      	cmp	r2, #2
    c0ee:	d039      	beq.n	c164 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
    c0f0:	2a00      	cmp	r2, #0
    c0f2:	d139      	bne.n	c168 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    return p_parser_data->mhr.src.addr_offset;
    c0f4:	7a40      	ldrb	r0, [r0, #9]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c0f6:	28ff      	cmp	r0, #255	; 0xff
    c0f8:	d034      	beq.n	c164 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
    if (!m_pending_bit.enabled || (NULL == p_src_addr))
    c0fa:	491d      	ldr	r1, [pc, #116]	; (c170 <nrf_802154_ack_data_pending_bit_should_be_set+0x90>)
    c0fc:	7809      	ldrb	r1, [r1, #0]
    c0fe:	2900      	cmp	r1, #0
    c100:	d030      	beq.n	c164 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
    c102:	681c      	ldr	r4, [r3, #0]
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
    c104:	78a3      	ldrb	r3, [r4, #2]
    c106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    return addr_index_find(p_src_addr, &location, NRF_802154_ACK_DATA_PENDING_BIT, extended);
    c10a:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
    c10e:	424b      	negs	r3, r1
    c110:	414b      	adcs	r3, r1
    c112:	4420      	add	r0, r4
    c114:	a901      	add	r1, sp, #4
    c116:	f7ff ff75 	bl	c004 <addr_index_find>
            ret = false;
            assert(false);
    }

    return ret;
}
    c11a:	b002      	add	sp, #8
    c11c:	bd10      	pop	{r4, pc}
    if (!m_pending_bit.enabled)
    c11e:	4914      	ldr	r1, [pc, #80]	; (c170 <nrf_802154_ack_data_pending_bit_should_be_set+0x90>)
    c120:	7808      	ldrb	r0, [r1, #0]
    c122:	b1f8      	cbz	r0, c164 <nrf_802154_ack_data_pending_bit_should_be_set+0x84>
    return p_parser_data->mhr.src.addr_offset;
    c124:	681a      	ldr	r2, [r3, #0]
    c126:	7a5c      	ldrb	r4, [r3, #9]
    return p_parser_data->p_frame[FRAME_TYPE_OFFSET] & FRAME_TYPE_MASK;
    c128:	7851      	ldrb	r1, [r2, #1]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c12a:	2cff      	cmp	r4, #255	; 0xff
    if (nrf_802154_frame_parser_frame_type_get(p_parser_data) != FRAME_TYPE_COMMAND)
    c12c:	f001 0107 	and.w	r1, r1, #7
    return &p_parser_data->p_frame[offset];
    c130:	bf14      	ite	ne
    c132:	18a4      	addne	r4, r4, r2
        return NULL;
    c134:	2400      	moveq	r4, #0
    if (nrf_802154_frame_parser_frame_type_get(p_parser_data) != FRAME_TYPE_COMMAND)
    c136:	2903      	cmp	r1, #3
    c138:	d116      	bne.n	c168 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    return p_parser_data->mac_payload.mac_payload_offset;
    c13a:	7c1b      	ldrb	r3, [r3, #16]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c13c:	2bff      	cmp	r3, #255	; 0xff
    c13e:	d013      	beq.n	c168 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    if ((p_cmd != NULL) && (*p_cmd == MAC_CMD_DATA_REQ))
    c140:	5cd3      	ldrb	r3, [r2, r3]
    c142:	2b04      	cmp	r3, #4
    c144:	d110      	bne.n	c168 <nrf_802154_ack_data_pending_bit_should_be_set+0x88>
    return p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK;
    c146:	7893      	ldrb	r3, [r2, #2]
        if (src_addr_type == SRC_ADDR_TYPE_SHORT)
    c148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c14c:	2b80      	cmp	r3, #128	; 0x80
    c14e:	d1e4      	bne.n	c11a <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
            ret = !addr_index_find(p_src_addr,
    c150:	2300      	movs	r3, #0
    c152:	461a      	mov	r2, r3
    c154:	a901      	add	r1, sp, #4
    c156:	4620      	mov	r0, r4
    c158:	f7ff ff54 	bl	c004 <addr_index_find>
                                   false);
    c15c:	f080 0001 	eor.w	r0, r0, #1
    c160:	b2c0      	uxtb	r0, r0
    c162:	e7da      	b.n	c11a <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
            ret = addr_match_standard_compliant(p_frame_data);
    c164:	2001      	movs	r0, #1
    c166:	e7d8      	b.n	c11a <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
    switch (m_src_matching_method)
    c168:	2000      	movs	r0, #0
    c16a:	e7d6      	b.n	c11a <nrf_802154_ack_data_pending_bit_should_be_set+0x3a>
    c16c:	20003775 	.word	0x20003775
    c170:	20002124 	.word	0x20002124

0000c174 <nrf_802154_ack_data_ie_get>:

const uint8_t * nrf_802154_ack_data_ie_get(const uint8_t * p_src_addr,
                                           bool            src_addr_extended,
                                           uint8_t       * p_ie_length)
{
    c174:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c176:	460e      	mov	r6, r1
    c178:	4615      	mov	r5, r2
    uint32_t location;

    if (NULL == p_src_addr)
    c17a:	b1d0      	cbz	r0, c1b2 <nrf_802154_ack_data_ie_get+0x3e>
    {
        return NULL;
    }

    if (addr_index_find(p_src_addr, &location, NRF_802154_ACK_DATA_IE, src_addr_extended))
    c17c:	460b      	mov	r3, r1
    c17e:	2201      	movs	r2, #1
    c180:	a901      	add	r1, sp, #4
    c182:	f7ff ff3f 	bl	c004 <addr_index_find>
    c186:	b198      	cbz	r0, c1b0 <nrf_802154_ack_data_ie_get+0x3c>
    {
        if (src_addr_extended)
        {
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
    c188:	9c01      	ldr	r4, [sp, #4]
    c18a:	480b      	ldr	r0, [pc, #44]	; (c1b8 <nrf_802154_ack_data_ie_get+0x44>)
        if (src_addr_extended)
    c18c:	b14e      	cbz	r6, c1a2 <nrf_802154_ack_data_ie_get+0x2e>
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
    c18e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    c192:	1903      	adds	r3, r0, r4
            return m_ie.ext_data[location].ie_data.p_data;
    c194:	34b8      	adds	r4, #184	; 0xb8
            *p_ie_length = m_ie.ext_data[location].ie_data.len;
    c196:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    c19a:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            *p_ie_length = m_ie.short_data[location].ie_data.len;
            return m_ie.short_data[location].ie_data.p_data;
    c19c:	4420      	add	r0, r4
    else
    {
        *p_ie_length = 0;
        return NULL;
    }
}
    c19e:	b002      	add	sp, #8
    c1a0:	bd70      	pop	{r4, r5, r6, pc}
            *p_ie_length = m_ie.short_data[location].ie_data.len;
    c1a2:	230b      	movs	r3, #11
    c1a4:	435c      	muls	r4, r3
    c1a6:	1903      	adds	r3, r0, r4
            return m_ie.short_data[location].ie_data.p_data;
    c1a8:	3402      	adds	r4, #2
            *p_ie_length = m_ie.short_data[location].ie_data.len;
    c1aa:	7a9b      	ldrb	r3, [r3, #10]
    c1ac:	702b      	strb	r3, [r5, #0]
            return m_ie.short_data[location].ie_data.p_data;
    c1ae:	e7f5      	b.n	c19c <nrf_802154_ack_data_ie_get+0x28>
        *p_ie_length = 0;
    c1b0:	7028      	strb	r0, [r5, #0]
        return NULL;
    c1b2:	2000      	movs	r0, #0
    c1b4:	e7f3      	b.n	c19e <nrf_802154_ack_data_ie_get+0x2a>
    c1b6:	bf00      	nop
    c1b8:	20001f5c 	.word	0x20001f5c

0000c1bc <fcf_frame_pending_set>:
        m_ack[SECURITY_ENABLED_OFFSET] |= SECURITY_ENABLED_BIT;
    }
}

static void fcf_frame_pending_set(const nrf_802154_frame_parser_data_t * p_frame_data)
{
    c1bc:	b508      	push	{r3, lr}
    if (nrf_802154_ack_data_pending_bit_should_be_set(p_frame_data))
    c1be:	f7ff ff8f 	bl	c0e0 <nrf_802154_ack_data_pending_bit_should_be_set>
    c1c2:	b120      	cbz	r0, c1ce <fcf_frame_pending_set+0x12>
    {
        m_ack[FRAME_PENDING_OFFSET] |= FRAME_PENDING_BIT;
    c1c4:	4a02      	ldr	r2, [pc, #8]	; (c1d0 <fcf_frame_pending_set+0x14>)
    c1c6:	7853      	ldrb	r3, [r2, #1]
    c1c8:	f043 0310 	orr.w	r3, r3, #16
    c1cc:	7053      	strb	r3, [r2, #1]
    }
}
    c1ce:	bd08      	pop	{r3, pc}
    c1d0:	20003777 	.word	0x20003777

0000c1d4 <nrf_802154_enh_ack_generator_reset>:
{
    // Intentionally empty.
}

void nrf_802154_enh_ack_generator_reset(void)
{
    c1d4:	b510      	push	{r4, lr}
    memset(m_ack, 0U, sizeof(m_ack));
    c1d6:	4c0a      	ldr	r4, [pc, #40]	; (c200 <nrf_802154_enh_ack_generator_reset+0x2c>)
    c1d8:	2280      	movs	r2, #128	; 0x80
    c1da:	2100      	movs	r1, #0
    c1dc:	4620      	mov	r0, r4
    c1de:	f006 fd80 	bl	12ce2 <memset>
    (void)nrf_802154_frame_parser_data_init(m_ack, 0U, PARSE_LEVEL_NONE, &m_ack_data);
    c1e2:	2200      	movs	r2, #0
    c1e4:	4b07      	ldr	r3, [pc, #28]	; (c204 <nrf_802154_enh_ack_generator_reset+0x30>)
    c1e6:	4611      	mov	r1, r2
    c1e8:	4620      	mov	r0, r4
    c1ea:	f007 fa41 	bl	13670 <nrf_802154_frame_parser_data_init>
    mp_ie_data    = 0U;
    c1ee:	4a06      	ldr	r2, [pc, #24]	; (c208 <nrf_802154_enh_ack_generator_reset+0x34>)
    c1f0:	2300      	movs	r3, #0
    c1f2:	6013      	str	r3, [r2, #0]
    m_ie_data_len = 0U;
    c1f4:	4a05      	ldr	r2, [pc, #20]	; (c20c <nrf_802154_enh_ack_generator_reset+0x38>)
    c1f6:	7013      	strb	r3, [r2, #0]
    m_ack_state   = ACK_STATE_RESET;
    c1f8:	4a05      	ldr	r2, [pc, #20]	; (c210 <nrf_802154_enh_ack_generator_reset+0x3c>)
    c1fa:	7013      	strb	r3, [r2, #0]
}
    c1fc:	bd10      	pop	{r4, pc}
    c1fe:	bf00      	nop
    c200:	20003777 	.word	0x20003777
    c204:	200021d4 	.word	0x200021d4
    c208:	200021d0 	.word	0x200021d0
    c20c:	20003776 	.word	0x20003776
    c210:	200037f7 	.word	0x200037f7

0000c214 <nrf_802154_enh_ack_generator_create>:

uint8_t * nrf_802154_enh_ack_generator_create(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
    c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_ack_state;
    c218:	4f8a      	ldr	r7, [pc, #552]	; (c444 <nrf_802154_enh_ack_generator_create+0x230>)
    c21a:	783b      	ldrb	r3, [r7, #0]
    switch (ack_state_get())
    c21c:	2b02      	cmp	r3, #2
{
    c21e:	b087      	sub	sp, #28
    c220:	4604      	mov	r4, r0
    switch (ack_state_get())
    c222:	d005      	beq.n	c230 <nrf_802154_enh_ack_generator_create+0x1c>
    c224:	2b03      	cmp	r3, #3
    c226:	f000 8204 	beq.w	c632 <nrf_802154_enh_ack_generator_create+0x41e>
    c22a:	b92b      	cbnz	r3, c238 <nrf_802154_enh_ack_generator_create+0x24>
    m_ack_state = state_to_set;
    c22c:	2302      	movs	r3, #2
    c22e:	703b      	strb	r3, [r7, #0]
    return p_parser_data->parse_level;
    c230:	4d85      	ldr	r5, [pc, #532]	; (c448 <nrf_802154_enh_ack_generator_create+0x234>)
    c232:	7926      	ldrb	r6, [r4, #4]
    c234:	792b      	ldrb	r3, [r5, #4]
    if ((frame_parse_level >= PARSE_LEVEL_FCF_OFFSETS) &&
    c236:	b91e      	cbnz	r6, c240 <nrf_802154_enh_ack_generator_create+0x2c>
            if (processing_done)
            {
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
            }

            return processing_done ? p_ack : NULL;
    c238:	2000      	movs	r0, #0

        default:
            assert(false);
            return NULL;
    }
}
    c23a:	b007      	add	sp, #28
    c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((frame_parse_level >= PARSE_LEVEL_FCF_OFFSETS) &&
    c240:	2b00      	cmp	r3, #0
    c242:	d155      	bne.n	c2f0 <nrf_802154_enh_ack_generator_create+0xdc>
    m_ack[FRAME_TYPE_OFFSET] |= FRAME_TYPE_ACK;
    c244:	f8df 8204 	ldr.w	r8, [pc, #516]	; c44c <nrf_802154_enh_ack_generator_create+0x238>
    c248:	f898 3001 	ldrb.w	r3, [r8, #1]
    c24c:	f043 0202 	orr.w	r2, r3, #2
    c250:	f888 2001 	strb.w	r2, [r8, #1]
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
    c254:	6822      	ldr	r2, [r4, #0]
    c256:	7852      	ldrb	r2, [r2, #1]
    if (nrf_802154_frame_parser_security_enabled_bit_is_set(p_frame_data))
    c258:	0711      	lsls	r1, r2, #28
        m_ack[SECURITY_ENABLED_OFFSET] |= SECURITY_ENABLED_BIT;
    c25a:	bf44      	itt	mi
    c25c:	f043 030a 	orrmi.w	r3, r3, #10
    c260:	f888 3001 	strbmi.w	r3, [r8, #1]
    return (p_parser_data->p_frame[PAN_ID_COMPR_OFFSET] & PAN_ID_COMPR_MASK) ? true : false;
    c264:	6823      	ldr	r3, [r4, #0]
    c266:	785b      	ldrb	r3, [r3, #1]
    if (nrf_802154_frame_parser_panid_compression_is_set(p_frame_data))
    c268:	065a      	lsls	r2, r3, #25
        m_ack[PAN_ID_COMPR_OFFSET] |= PAN_ID_COMPR_MASK;
    c26a:	bf42      	ittt	mi
    c26c:	f898 3001 	ldrbmi.w	r3, [r8, #1]
    c270:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    c274:	f888 3001 	strbmi.w	r3, [r8, #1]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
    c278:	6823      	ldr	r3, [r4, #0]
    c27a:	789b      	ldrb	r3, [r3, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_frame_data))
    c27c:	07db      	lsls	r3, r3, #31
        m_ack[DSN_SUPPRESS_OFFSET] |= DSN_SUPPRESS_BIT;
    c27e:	bf42      	ittt	mi
    c280:	f898 3002 	ldrbmi.w	r3, [r8, #2]
    c284:	f043 0301 	orrmi.w	r3, r3, #1
    c288:	f888 3002 	strbmi.w	r3, [r8, #2]
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
    c28c:	6823      	ldr	r3, [r4, #0]
    c28e:	789a      	ldrb	r2, [r3, #2]
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_EXTENDED;
    c290:	f898 3002 	ldrb.w	r3, [r8, #2]
    c294:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (nrf_802154_frame_parser_src_addr_is_extended(p_frame_data))
    c298:	2ac0      	cmp	r2, #192	; 0xc0
    c29a:	d124      	bne.n	c2e6 <nrf_802154_enh_ack_generator_create+0xd2>
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_EXTENDED;
    c29c:	f043 030c 	orr.w	r3, r3, #12
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_SHORT;
    c2a0:	f888 3002 	strb.w	r3, [r8, #2]
    m_ack[FRAME_VERSION_OFFSET] |= FRAME_VERSION_2;
    c2a4:	f898 3002 	ldrb.w	r3, [r8, #2]
    if (level >= PARSE_LEVEL_FULL)
    c2a8:	2e05      	cmp	r6, #5
    m_ack[FRAME_VERSION_OFFSET] |= FRAME_VERSION_2;
    c2aa:	f043 0320 	orr.w	r3, r3, #32
    c2ae:	f888 3002 	strb.w	r3, [r8, #2]
    if (level >= PARSE_LEVEL_FULL)
    c2b2:	d902      	bls.n	c2ba <nrf_802154_enh_ack_generator_create+0xa6>
        fcf_frame_pending_set(p_frame_data);
    c2b4:	4620      	mov	r0, r4
    c2b6:	f7ff ff81 	bl	c1bc <fcf_frame_pending_set>
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c2ba:	f898 1000 	ldrb.w	r1, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c2be:	4862      	ldr	r0, [pc, #392]	; (c448 <nrf_802154_enh_ack_generator_create+0x234>)
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c2c0:	1c8b      	adds	r3, r1, #2
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c2c2:	3103      	adds	r1, #3
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c2c4:	f888 3000 	strb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c2c8:	2201      	movs	r2, #1
    c2ca:	b2c9      	uxtb	r1, r1
    c2cc:	f007 f9f0 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_DST_ADDRESSING_END) &&
    c2d0:	2e01      	cmp	r6, #1
    c2d2:	d0b1      	beq.n	c238 <nrf_802154_enh_ack_generator_create+0x24>
    *p_bytes_written   = sequence_number_set(p_frame_data);
    c2d4:	6822      	ldr	r2, [r4, #0]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
    c2d6:	f8df 9174 	ldr.w	r9, [pc, #372]	; c44c <nrf_802154_enh_ack_generator_create+0x238>
    c2da:	7893      	ldrb	r3, [r2, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_parser_data))
    c2dc:	f013 0f01 	tst.w	r3, #1
    c2e0:	d01b      	beq.n	c31a <nrf_802154_enh_ack_generator_create+0x106>
    return 0U;
    c2e2:	2200      	movs	r2, #0
    c2e4:	e01d      	b.n	c322 <nrf_802154_enh_ack_generator_create+0x10e>
    else if (nrf_802154_frame_parser_src_addr_is_short(p_frame_data))
    c2e6:	2a80      	cmp	r2, #128	; 0x80
    c2e8:	d1dc      	bne.n	c2a4 <nrf_802154_enh_ack_generator_create+0x90>
        m_ack[DEST_ADDR_TYPE_OFFSET] |= DEST_ADDR_TYPE_SHORT;
    c2ea:	f043 0308 	orr.w	r3, r3, #8
    c2ee:	e7d7      	b.n	c2a0 <nrf_802154_enh_ack_generator_create+0x8c>
    if ((frame_parse_level >= PARSE_LEVEL_DST_ADDRESSING_END) &&
    c2f0:	2e01      	cmp	r6, #1
    c2f2:	d0a1      	beq.n	c238 <nrf_802154_enh_ack_generator_create+0x24>
    c2f4:	2b01      	cmp	r3, #1
    c2f6:	d0ed      	beq.n	c2d4 <nrf_802154_enh_ack_generator_create+0xc0>
    if ((frame_parse_level >= PARSE_LEVEL_ADDRESSING_END) &&
    c2f8:	2e02      	cmp	r6, #2
    c2fa:	d09d      	beq.n	c238 <nrf_802154_enh_ack_generator_create+0x24>
    c2fc:	2b02      	cmp	r3, #2
    c2fe:	d04f      	beq.n	c3a0 <nrf_802154_enh_ack_generator_create+0x18c>
    if ((frame_parse_level >= PARSE_LEVEL_AUX_SEC_HDR_END) &&
    c300:	2e04      	cmp	r6, #4
    c302:	d999      	bls.n	c238 <nrf_802154_enh_ack_generator_create+0x24>
    c304:	2b04      	cmp	r3, #4
    c306:	f240 8097 	bls.w	c438 <nrf_802154_enh_ack_generator_create+0x224>
    if (frame_parse_level == PARSE_LEVEL_FULL)
    c30a:	2e06      	cmp	r6, #6
    c30c:	d194      	bne.n	c238 <nrf_802154_enh_ack_generator_create+0x24>
        fcf_frame_pending_set(p_frame_data);
    c30e:	4620      	mov	r0, r4
    c310:	f7ff ff54 	bl	c1bc <fcf_frame_pending_set>
            return m_ack;
    c314:	484d      	ldr	r0, [pc, #308]	; (c44c <nrf_802154_enh_ack_generator_create+0x238>)
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
    c316:	2303      	movs	r3, #3
    c318:	e178      	b.n	c60c <nrf_802154_enh_ack_generator_create+0x3f8>
        m_ack[DSN_OFFSET] = *p_frame_dsn;
    c31a:	78d2      	ldrb	r2, [r2, #3]
    c31c:	f889 2003 	strb.w	r2, [r9, #3]
        return DSN_SIZE;
    c320:	2201      	movs	r2, #1
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c322:	f899 1000 	ldrb.w	r1, [r9]
    return p_parser_data->mhr.dst.panid_offset;
    c326:	79a0      	ldrb	r0, [r4, #6]
    return p_parser_data->mhr.src.addr_offset;
    c328:	f894 c009 	ldrb.w	ip, [r4, #9]
    return p_parser_data->helper.src_addr_size;
    c32c:	7ca3      	ldrb	r3, [r4, #18]
    c32e:	9301      	str	r3, [sp, #4]
    c330:	440a      	add	r2, r1
    c332:	f889 2000 	strb.w	r2, [r9]
    return p_parser_data->mhr.dst.panid_offset;
    c336:	79aa      	ldrb	r2, [r5, #6]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c338:	2aff      	cmp	r2, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c33a:	bf1c      	itt	ne
    c33c:	6829      	ldrne	r1, [r5, #0]
    c33e:	eb01 0802 	addne.w	r8, r1, r2
    return p_parser_data->mhr.dst.addr_offset;
    c342:	79ea      	ldrb	r2, [r5, #7]
        return NULL;
    c344:	bf08      	it	eq
    c346:	f04f 0800 	moveq.w	r8, #0
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c34a:	2aff      	cmp	r2, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c34c:	bf1c      	itt	ne
    c34e:	6829      	ldrne	r1, [r5, #0]
    c350:	eb01 0b02 	addne.w	fp, r1, r2
    return p_parser_data->mhr.src.panid_offset;
    c354:	7a21      	ldrb	r1, [r4, #8]
        return NULL;
    c356:	bf08      	it	eq
    c358:	f04f 0b00 	moveq.w	fp, #0
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c35c:	29ff      	cmp	r1, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c35e:	bf16      	itet	ne
    c360:	6822      	ldrne	r2, [r4, #0]
        return NULL;
    c362:	2200      	moveq	r2, #0
    return &p_parser_data->p_frame[offset];
    c364:	1852      	addne	r2, r2, r1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c366:	28ff      	cmp	r0, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c368:	bf16      	itet	ne
    c36a:	6821      	ldrne	r1, [r4, #0]
        return NULL;
    c36c:	2100      	moveq	r1, #0
    return &p_parser_data->p_frame[offset];
    c36e:	1809      	addne	r1, r1, r0
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c370:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c374:	d11a      	bne.n	c3ac <nrf_802154_enh_ack_generator_create+0x198>
    if (p_ack_dst_panid != NULL)
    c376:	f1b8 0f00 	cmp.w	r8, #0
    c37a:	d12e      	bne.n	c3da <nrf_802154_enh_ack_generator_create+0x1c6>
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c37c:	f899 2000 	ldrb.w	r2, [r9]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c380:	4831      	ldr	r0, [pc, #196]	; (c448 <nrf_802154_enh_ack_generator_create+0x234>)
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c382:	4490      	add	r8, r2
    c384:	fa5f f888 	uxtb.w	r8, r8
    c388:	f889 8000 	strb.w	r8, [r9]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c38c:	f108 0801 	add.w	r8, r8, #1
    c390:	2202      	movs	r2, #2
    c392:	fa5f f188 	uxtb.w	r1, r8
    c396:	f007 f98b 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_ADDRESSING_END) &&
    c39a:	2e02      	cmp	r6, #2
    c39c:	f67f af4c 	bls.w	c238 <nrf_802154_enh_ack_generator_create+0x24>
    return p_parser_data->mhr.src.addr_offset;
    c3a0:	7a60      	ldrb	r0, [r4, #9]
    return &p_parser_data->p_frame[offset];
    c3a2:	6823      	ldr	r3, [r4, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c3a4:	28ff      	cmp	r0, #255	; 0xff
    c3a6:	d128      	bne.n	c3fa <nrf_802154_enh_ack_generator_create+0x1e6>
        return NULL;
    c3a8:	2000      	movs	r0, #0
    c3aa:	e027      	b.n	c3fc <nrf_802154_enh_ack_generator_create+0x1e8>
    return &p_parser_data->p_frame[offset];
    c3ac:	6820      	ldr	r0, [r4, #0]
    c3ae:	eb00 0a0c 	add.w	sl, r0, ip
    if (p_ack_dst_panid != NULL)
    c3b2:	f1b8 0f00 	cmp.w	r8, #0
    c3b6:	d112      	bne.n	c3de <nrf_802154_enh_ack_generator_create+0x1ca>
    if ((p_ack_dst_addr != NULL) && (p_frame_src_addr != NULL))
    c3b8:	f1bb 0f00 	cmp.w	fp, #0
    c3bc:	d0de      	beq.n	c37c <nrf_802154_enh_ack_generator_create+0x168>
    c3be:	f1ba 0f00 	cmp.w	sl, #0
    c3c2:	d0db      	beq.n	c37c <nrf_802154_enh_ack_generator_create+0x168>
        memcpy(p_ack_dst_addr, p_frame_src_addr, src_addr_size);
    c3c4:	4658      	mov	r0, fp
    c3c6:	9a01      	ldr	r2, [sp, #4]
    c3c8:	4651      	mov	r1, sl
    c3ca:	f006 fc7f 	bl	12ccc <memcpy>
        bytes_written += src_addr_size;
    c3ce:	f8dd b004 	ldr.w	fp, [sp, #4]
    c3d2:	44c3      	add	fp, r8
    c3d4:	fa5f f88b 	uxtb.w	r8, fp
    c3d8:	e7d0      	b.n	c37c <nrf_802154_enh_ack_generator_create+0x168>
        return NULL;
    c3da:	f04f 0a00 	mov.w	sl, #0
        if (p_frame_src_panid != NULL)
    c3de:	b952      	cbnz	r2, c3f6 <nrf_802154_enh_ack_generator_create+0x1e2>
        else if (p_frame_dst_panid != NULL)
    c3e0:	b911      	cbnz	r1, c3e8 <nrf_802154_enh_ack_generator_create+0x1d4>
            p_dst_panid = nrf_802154_pib_pan_id_get();
    c3e2:	f7fd fc6d 	bl	9cc0 <nrf_802154_pib_pan_id_get>
    c3e6:	4601      	mov	r1, r0
        memcpy(p_ack_dst_panid, p_dst_panid, PAN_ID_SIZE);
    c3e8:	4640      	mov	r0, r8
    c3ea:	2202      	movs	r2, #2
    c3ec:	f006 fc6e 	bl	12ccc <memcpy>
        bytes_written += PAN_ID_SIZE;
    c3f0:	f04f 0802 	mov.w	r8, #2
    c3f4:	e7e0      	b.n	c3b8 <nrf_802154_enh_ack_generator_create+0x1a4>
    c3f6:	4611      	mov	r1, r2
    c3f8:	e7f6      	b.n	c3e8 <nrf_802154_enh_ack_generator_create+0x1d4>
    return &p_parser_data->p_frame[offset];
    c3fa:	4418      	add	r0, r3
    return (p_parser_data->p_frame[SRC_ADDR_TYPE_OFFSET] & SRC_ADDR_TYPE_MASK) ==
    c3fc:	7899      	ldrb	r1, [r3, #2]
    mp_ie_data = nrf_802154_ack_data_ie_get(
    c3fe:	4a14      	ldr	r2, [pc, #80]	; (c450 <nrf_802154_enh_ack_generator_create+0x23c>)
    c400:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    c404:	f1a1 0cc0 	sub.w	ip, r1, #192	; 0xc0
    c408:	f1dc 0100 	rsbs	r1, ip, #0
    c40c:	eb41 010c 	adc.w	r1, r1, ip
    c410:	f7ff feb0 	bl	c174 <nrf_802154_ack_data_ie_get>
    c414:	4b0f      	ldr	r3, [pc, #60]	; (c454 <nrf_802154_enh_ack_generator_create+0x240>)
    c416:	6018      	str	r0, [r3, #0]
    if (ie_present)
    c418:	4b0c      	ldr	r3, [pc, #48]	; (c44c <nrf_802154_enh_ack_generator_create+0x238>)
    c41a:	b118      	cbz	r0, c424 <nrf_802154_enh_ack_generator_create+0x210>
        m_ack[IE_PRESENT_OFFSET] |= IE_PRESENT_BIT;
    c41c:	789a      	ldrb	r2, [r3, #2]
    c41e:	f042 0202 	orr.w	r2, r2, #2
    c422:	709a      	strb	r2, [r3, #2]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c424:	7819      	ldrb	r1, [r3, #0]
    c426:	4808      	ldr	r0, [pc, #32]	; (c448 <nrf_802154_enh_ack_generator_create+0x234>)
    c428:	3101      	adds	r1, #1
    c42a:	2203      	movs	r2, #3
    c42c:	b2c9      	uxtb	r1, r1
    c42e:	f007 f93f 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    if ((frame_parse_level >= PARSE_LEVEL_AUX_SEC_HDR_END) &&
    c432:	2e04      	cmp	r6, #4
    c434:	f67f af00 	bls.w	c238 <nrf_802154_enh_ack_generator_create+0x24>
    return p_parser_data->helper.addressing_end_offset;
    c438:	7d29      	ldrb	r1, [r5, #20]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c43a:	29ff      	cmp	r1, #255	; 0xff
    c43c:	d10c      	bne.n	c458 <nrf_802154_enh_ack_generator_create+0x244>
    c43e:	2100      	movs	r1, #0
    c440:	e03c      	b.n	c4bc <nrf_802154_enh_ack_generator_create+0x2a8>
    c442:	bf00      	nop
    c444:	200037f7 	.word	0x200037f7
    c448:	200021d4 	.word	0x200021d4
    c44c:	20003777 	.word	0x20003777
    c450:	20003776 	.word	0x20003776
    c454:	200021d0 	.word	0x200021d0
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
    c458:	7aa3      	ldrb	r3, [r4, #10]
    return &p_parser_data->p_frame[offset];
    c45a:	682a      	ldr	r2, [r5, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c45c:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c45e:	eb02 0a01 	add.w	sl, r2, r1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c462:	d0ec      	beq.n	c43e <nrf_802154_enh_ack_generator_create+0x22a>
    return &p_parser_data->p_frame[offset];
    c464:	6820      	ldr	r0, [r4, #0]
    c466:	eb00 0803 	add.w	r8, r0, r3
    if ((ack_sec_ctrl == NULL) || (frame_sec_ctrl == NULL))
    c46a:	f1ba 0f00 	cmp.w	sl, #0
    c46e:	d0e6      	beq.n	c43e <nrf_802154_enh_ack_generator_create+0x22a>
    c470:	f1b8 0f00 	cmp.w	r8, #0
    c474:	f000 80d9 	beq.w	c62a <nrf_802154_enh_ack_generator_create+0x416>
    *ack_sec_ctrl  = *frame_sec_ctrl;
    c478:	5cc3      	ldrb	r3, [r0, r3]
    c47a:	5453      	strb	r3, [r2, r1]
    result = nrf_802154_frame_parser_valid_data_extend(p_ack_data,
    c47c:	3101      	adds	r1, #1
    c47e:	486e      	ldr	r0, [pc, #440]	; (c638 <nrf_802154_enh_ack_generator_create+0x424>)
    c480:	2204      	movs	r2, #4
    c482:	b2c9      	uxtb	r1, r1
    c484:	f007 f914 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
    c488:	7aa3      	ldrb	r3, [r4, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c48a:	2bff      	cmp	r3, #255	; 0xff
    c48c:	d003      	beq.n	c496 <nrf_802154_enh_ack_generator_create+0x282>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
    c48e:	6821      	ldr	r1, [r4, #0]
    c490:	5cca      	ldrb	r2, [r1, r3]
    if (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_frame_data) == SECURITY_LEVEL_NONE)
    c492:	0752      	lsls	r2, r2, #29
    c494:	d169      	bne.n	c56a <nrf_802154_enh_ack_generator_create+0x356>
    return aux_sec_hdr_end - sec_ctrl_offset;
    c496:	f894 9015 	ldrb.w	r9, [r4, #21]
    c49a:	eba9 0903 	sub.w	r9, r9, r3
    c49e:	fa5f f989 	uxtb.w	r9, r9
        uint8_t sec_hdr_size = security_header_size(p_frame_data) - SECURITY_CONTROL_SIZE;
    c4a2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
        memcpy(ack_sec_ctrl + SECURITY_CONTROL_SIZE,
    c4a6:	f108 0101 	add.w	r1, r8, #1
    c4aa:	b2d2      	uxtb	r2, r2
    c4ac:	f10a 0001 	add.w	r0, sl, #1
    c4b0:	f006 fc0c 	bl	12ccc <memcpy>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
    c4b4:	7deb      	ldrb	r3, [r5, #23]
    c4b6:	4499      	add	r9, r3
    c4b8:	fa5f f189 	uxtb.w	r1, r9
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c4bc:	f8df 817c 	ldr.w	r8, [pc, #380]	; c63c <nrf_802154_enh_ack_generator_create+0x428>
    ie_header_set(mp_ie_data, m_ie_data_len, &m_ack_data);
    c4c0:	f8df a17c 	ldr.w	sl, [pc, #380]	; c640 <nrf_802154_enh_ack_generator_create+0x42c>
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c4c4:	f898 3000 	ldrb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c4c8:	485b      	ldr	r0, [pc, #364]	; (c638 <nrf_802154_enh_ack_generator_create+0x424>)
    c4ca:	f8df 9178 	ldr.w	r9, [pc, #376]	; c644 <nrf_802154_enh_ack_generator_create+0x430>
    m_ack[PHR_OFFSET] += *p_bytes_written;
    c4ce:	4419      	add	r1, r3
    c4d0:	b2c9      	uxtb	r1, r1
    c4d2:	f888 1000 	strb.w	r1, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c4d6:	3101      	adds	r1, #1
    c4d8:	b2c9      	uxtb	r1, r1
    c4da:	2205      	movs	r2, #5
    c4dc:	f007 f8e8 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
    ie_header_set(mp_ie_data, m_ie_data_len, &m_ack_data);
    c4e0:	f8da 1000 	ldr.w	r1, [sl]
    if (p_ie_data == NULL)
    c4e4:	b131      	cbz	r1, c4f4 <nrf_802154_enh_ack_generator_create+0x2e0>
    p_ack_ie = (uint8_t *)p_ack_data->p_frame + ie_offset;
    c4e6:	7d68      	ldrb	r0, [r5, #21]
    c4e8:	682b      	ldr	r3, [r5, #0]
    memcpy(p_ack_ie, p_ie_data, ie_data_len);
    c4ea:	f899 2000 	ldrb.w	r2, [r9]
    c4ee:	4418      	add	r0, r3
    c4f0:	f006 fbec 	bl	12ccc <memcpy>
    m_ack[PHR_OFFSET] += m_ie_data_len;
    c4f4:	f898 3000 	ldrb.w	r3, [r8]
    c4f8:	f899 9000 	ldrb.w	r9, [r9]
    if (p_ie_data == NULL)
    c4fc:	f8da 1000 	ldr.w	r1, [sl]
    m_ack[PHR_OFFSET] += m_ie_data_len;
    c500:	444b      	add	r3, r9
    c502:	f888 3000 	strb.w	r3, [r8]
    if (p_ie_data == NULL)
    c506:	b311      	cbz	r1, c54e <nrf_802154_enh_ack_generator_create+0x33a>
    return (p_parser_data->p_frame[SECURITY_ENABLED_OFFSET] & SECURITY_ENABLED_BIT) ? true : false;
    c508:	f8d5 a000 	ldr.w	sl, [r5]
    c50c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    if ((nrf_802154_frame_parser_security_enabled_bit_is_set(p_ack_data) == false) ||
    c510:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    c514:	071b      	lsls	r3, r3, #28
    c516:	d51a      	bpl.n	c54e <nrf_802154_enh_ack_generator_create+0x33a>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
    c518:	7aab      	ldrb	r3, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c51a:	2bff      	cmp	r3, #255	; 0xff
    c51c:	f000 8087 	beq.w	c62e <nrf_802154_enh_ack_generator_create+0x41a>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
    c520:	f81a 1003 	ldrb.w	r1, [sl, r3]
    c524:	f011 0107 	ands.w	r1, r1, #7
    c528:	d011      	beq.n	c54e <nrf_802154_enh_ack_generator_create+0x33a>
    uint8_t * p_ack_ie = (uint8_t *)p_ack_data->p_frame + p_ack_data->helper.aux_sec_hdr_end_offset;
    c52a:	7d6d      	ldrb	r5, [r5, #21]
/**@brief Write 16-bit value from host byte-order to little-endian byte array.
 *
 * @param[in]  value     A 16-bit host-order value to write
 * @param[out] p_buffer  A little-endian byte array to be populated
 */
static inline void host_16_to_little(uint16_t value, uint8_t * p_buffer)
    c52c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
{
    assert(p_buffer != NULL);
    memcpy(p_buffer, &value, sizeof(uint16_t));
    c530:	2202      	movs	r2, #2
    c532:	a904      	add	r1, sp, #16
    c534:	a803      	add	r0, sp, #12
    c536:	f8ad 3010 	strh.w	r3, [sp, #16]
    c53a:	f006 fbc7 	bl	12ccc <memcpy>
    memcpy(p_ack_ie + ie_data_len, ie_hdr_term, sizeof(ie_hdr_term));
    c53e:	eb09 0005 	add.w	r0, r9, r5
    c542:	a903      	add	r1, sp, #12
    c544:	2202      	movs	r2, #2
    c546:	4450      	add	r0, sl
    c548:	f006 fbc0 	bl	12ccc <memcpy>
    return sizeof(ie_hdr_term);
    c54c:	2102      	movs	r1, #2
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
    c54e:	f898 3000 	ldrb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c552:	4839      	ldr	r0, [pc, #228]	; (c638 <nrf_802154_enh_ack_generator_create+0x424>)
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
    c554:	4419      	add	r1, r3
    c556:	b2c9      	uxtb	r1, r1
    c558:	1c8b      	adds	r3, r1, #2
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c55a:	3103      	adds	r1, #3
    m_ack[PHR_OFFSET] += *p_bytes_written + FCS_SIZE;
    c55c:	f888 3000 	strb.w	r3, [r8]
    bool result = nrf_802154_frame_parser_valid_data_extend(&m_ack_data,
    c560:	2206      	movs	r2, #6
    c562:	b2c9      	uxtb	r1, r1
    c564:	f007 f8a4 	bl	136b0 <nrf_802154_frame_parser_valid_data_extend>
}
    c568:	e6cf      	b.n	c30a <nrf_802154_enh_ack_generator_create+0xf6>
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
    c56a:	7b23      	ldrb	r3, [r4, #12]
    c56c:	7b2a      	ldrb	r2, [r5, #12]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c56e:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c570:	bf14      	ite	ne
    c572:	18c9      	addne	r1, r1, r3
        return NULL;
    c574:	2100      	moveq	r1, #0
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c576:	2aff      	cmp	r2, #255	; 0xff
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
    c578:	7aab      	ldrb	r3, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c57a:	d127      	bne.n	c5cc <nrf_802154_enh_ack_generator_create+0x3b8>
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c57c:	2bff      	cmp	r3, #255	; 0xff
    c57e:	d02c      	beq.n	c5da <nrf_802154_enh_ack_generator_create+0x3c6>
        return NULL;
    c580:	2000      	movs	r0, #0
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
    c582:	682a      	ldr	r2, [r5, #0]
    c584:	f812 8003 	ldrb.w	r8, [r2, r3]
    c588:	f3c8 08c1 	ubfx	r8, r8, #3, #2
    c58c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c590:	2b02      	cmp	r3, #2
    c592:	d81f      	bhi.n	c5d4 <nrf_802154_enh_ack_generator_create+0x3c0>
    c594:	ea4f 0888 	mov.w	r8, r8, lsl #2
    c598:	f1a8 0803 	sub.w	r8, r8, #3
    c59c:	fa5f f888 	uxtb.w	r8, r8
    if ((p_ack_key_id != NULL) && (p_frame_key_id != NULL))
    c5a0:	b118      	cbz	r0, c5aa <nrf_802154_enh_ack_generator_create+0x396>
    c5a2:	b111      	cbz	r1, c5aa <nrf_802154_enh_ack_generator_create+0x396>
        memcpy(p_ack_key_id, p_frame_key_id, key_id_size);
    c5a4:	4642      	mov	r2, r8
    c5a6:	f006 fb91 	bl	12ccc <memcpy>
    return p_parser_data->mhr.aux_sec_hdr.frame_counter_offset;
    c5aa:	f895 900b 	ldrb.w	r9, [r5, #11]
        bytes_written           += security_key_id_set(p_frame_data, p_ack_data);
    c5ae:	f108 0801 	add.w	r8, r8, #1
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c5b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    c5b6:	fa5f f888 	uxtb.w	r8, r8
    c5ba:	d003      	beq.n	c5c4 <nrf_802154_enh_ack_generator_create+0x3b0>
    return &p_parser_data->p_frame[offset];
    c5bc:	682b      	ldr	r3, [r5, #0]
    if (p_frame_counter == NULL)
    c5be:	eb13 0909 	adds.w	r9, r3, r9
    c5c2:	d10d      	bne.n	c5e0 <nrf_802154_enh_ack_generator_create+0x3cc>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
    c5c4:	7deb      	ldrb	r3, [r5, #23]
    c5c6:	4443      	add	r3, r8
    c5c8:	b2d9      	uxtb	r1, r3
    return security_header_prepared;
    c5ca:	e777      	b.n	c4bc <nrf_802154_enh_ack_generator_create+0x2a8>
    return &p_parser_data->p_frame[offset];
    c5cc:	6828      	ldr	r0, [r5, #0]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c5ce:	2bff      	cmp	r3, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c5d0:	4410      	add	r0, r2
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c5d2:	d1d6      	bne.n	c582 <nrf_802154_enh_ack_generator_create+0x36e>
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
    c5d4:	f04f 0800 	mov.w	r8, #0
    c5d8:	e7e2      	b.n	c5a0 <nrf_802154_enh_ack_generator_create+0x38c>
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c5da:	f04f 0800 	mov.w	r8, #0
    c5de:	e7e4      	b.n	c5aa <nrf_802154_enh_ack_generator_create+0x396>
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
    c5e0:	7aaa      	ldrb	r2, [r5, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c5e2:	2aff      	cmp	r2, #255	; 0xff
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
    c5e4:	bf16      	itet	ne
    c5e6:	5c9a      	ldrbne	r2, [r3, r2]
        return 0;
    c5e8:	2200      	moveq	r2, #0
    return (p_parser_data->p_frame[offset] & KEY_ID_MODE_MASK) >> KEY_ID_MODE_BIT_OFFSET;
    c5ea:	f3c2 02c1 	ubfxne	r2, r2, #3, #2
    ack_key_id.mode     = nrf_802154_frame_parser_sec_ctrl_key_id_mode_get(p_ack_data);
    c5ee:	f88d 2010 	strb.w	r2, [sp, #16]
    return p_parser_data->mhr.aux_sec_hdr.key_id_offset;
    c5f2:	7b2a      	ldrb	r2, [r5, #12]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
    c5f4:	2aff      	cmp	r2, #255	; 0xff
    return &p_parser_data->p_frame[offset];
    c5f6:	bf14      	ite	ne
    c5f8:	189b      	addne	r3, r3, r2
        return NULL;
    c5fa:	2300      	moveq	r3, #0
        nrf_802154_security_pib_frame_counter_get_next(&new_fc_value, &ack_key_id))
    c5fc:	a904      	add	r1, sp, #16
    c5fe:	a802      	add	r0, sp, #8
    ack_key_id.p_key_id = (uint8_t *)nrf_802154_frame_parser_key_id_get(p_ack_data);
    c600:	9305      	str	r3, [sp, #20]
        nrf_802154_security_pib_frame_counter_get_next(&new_fc_value, &ack_key_id))
    c602:	f7ff fc29 	bl	be58 <nrf_802154_security_pib_frame_counter_get_next>
    if (NRF_802154_SECURITY_ERROR_NONE !=
    c606:	b118      	cbz	r0, c610 <nrf_802154_enh_ack_generator_create+0x3fc>
            if (processing_done)
    c608:	2000      	movs	r0, #0
                ack_state_set(p_ack ? ACK_STATE_COMPLETE : ACK_STATE_INVALID);
    c60a:	2301      	movs	r3, #1
    m_ack_state = state_to_set;
    c60c:	703b      	strb	r3, [r7, #0]
            return processing_done ? p_ack : NULL;
    c60e:	e614      	b.n	c23a <nrf_802154_enh_ack_generator_create+0x26>
    host_32_to_little(new_fc_value, p_frame_counter);
    c610:	9b02      	ldr	r3, [sp, #8]
    c612:	9303      	str	r3, [sp, #12]
    memcpy(p_buffer, &value, sizeof(uint32_t));
    c614:	a903      	add	r1, sp, #12
    c616:	2204      	movs	r2, #4
    c618:	4648      	mov	r0, r9
    c61a:	f006 fb57 	bl	12ccc <memcpy>
    bytes_written   += nrf_802154_frame_parser_mic_size_get(p_ack_data);
    c61e:	7deb      	ldrb	r3, [r5, #23]
    c620:	3304      	adds	r3, #4
    c622:	eb08 0103 	add.w	r1, r8, r3
    c626:	b2c9      	uxtb	r1, r1
    return security_header_prepared;
    c628:	e748      	b.n	c4bc <nrf_802154_enh_ack_generator_create+0x2a8>
    c62a:	4641      	mov	r1, r8
    c62c:	e746      	b.n	c4bc <nrf_802154_enh_ack_generator_create+0x2a8>
        return 0U;
    c62e:	2100      	movs	r1, #0
    c630:	e78d      	b.n	c54e <nrf_802154_enh_ack_generator_create+0x33a>
    switch (ack_state_get())
    c632:	4802      	ldr	r0, [pc, #8]	; (c63c <nrf_802154_enh_ack_generator_create+0x428>)
    c634:	e601      	b.n	c23a <nrf_802154_enh_ack_generator_create+0x26>
    c636:	bf00      	nop
    c638:	200021d4 	.word	0x200021d4
    c63c:	20003777 	.word	0x20003777
    c640:	200021d0 	.word	0x200021d0
    c644:	20003776 	.word	0x20003776

0000c648 <nrf_802154_imm_ack_generator_init>:
#define IMM_ACK_INITIALIZER {IMM_ACK_LENGTH, ACK_HEADER_WITH_PENDING, 0x00, 0x00, 0x00, 0x00}

static uint8_t m_ack_data[IMM_ACK_LENGTH + PHR_SIZE];

void nrf_802154_imm_ack_generator_init(void)
{
    c648:	b507      	push	{r0, r1, r2, lr}
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
    c64a:	4b07      	ldr	r3, [pc, #28]	; (c668 <nrf_802154_imm_ack_generator_init+0x20>)
    c64c:	6818      	ldr	r0, [r3, #0]
    c64e:	9000      	str	r0, [sp, #0]
    c650:	889b      	ldrh	r3, [r3, #4]

    memcpy(m_ack_data, ack_data, sizeof(ack_data));
    c652:	4806      	ldr	r0, [pc, #24]	; (c66c <nrf_802154_imm_ack_generator_init+0x24>)
    const uint8_t ack_data[] = IMM_ACK_INITIALIZER;
    c654:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(m_ack_data, ack_data, sizeof(ack_data));
    c658:	2206      	movs	r2, #6
    c65a:	4669      	mov	r1, sp
    c65c:	f006 fb36 	bl	12ccc <memcpy>
}
    c660:	b003      	add	sp, #12
    c662:	f85d fb04 	ldr.w	pc, [sp], #4
    c666:	bf00      	nop
    c668:	00014462 	.word	0x00014462
    c66c:	200037f8 	.word	0x200037f8

0000c670 <nrf_802154_imm_ack_generator_create>:
    // Intentionally empty
}

uint8_t * nrf_802154_imm_ack_generator_create(
    const nrf_802154_frame_parser_data_t * p_frame_data)
{
    c670:	b510      	push	{r4, lr}
    if (nrf_802154_frame_parser_parse_level_get(p_frame_data) < PARSE_LEVEL_FULL)
    c672:	7902      	ldrb	r2, [r0, #4]
    c674:	2a05      	cmp	r2, #5
    c676:	d90f      	bls.n	c698 <nrf_802154_imm_ack_generator_create+0x28>
    {
        // The entire frame being acknowledged is necessary to correctly generate Ack
        return NULL;
    }

    const uint8_t * frame_dsn = nrf_802154_frame_parser_dsn_get(p_frame_data);
    c678:	6803      	ldr	r3, [r0, #0]
    return (p_parser_data->p_frame[DSN_SUPPRESS_OFFSET] & DSN_SUPPRESS_BIT) ? true : false;
    c67a:	789a      	ldrb	r2, [r3, #2]
    if (nrf_802154_frame_parser_dsn_suppress_bit_is_set(p_parser_data))
    c67c:	07d2      	lsls	r2, r2, #31
    c67e:	d40b      	bmi.n	c698 <nrf_802154_imm_ack_generator_create+0x28>
    {
        return NULL;
    }

    // Set valid sequence number in ACK frame.
    m_ack_data[DSN_OFFSET] = *frame_dsn;
    c680:	4c06      	ldr	r4, [pc, #24]	; (c69c <nrf_802154_imm_ack_generator_create+0x2c>)
    c682:	78db      	ldrb	r3, [r3, #3]
    c684:	70e3      	strb	r3, [r4, #3]

    // Set pending bit in ACK frame.
    if (nrf_802154_ack_data_pending_bit_should_be_set(p_frame_data))
    c686:	f7ff fd2b 	bl	c0e0 <nrf_802154_ack_data_pending_bit_should_be_set>
    c68a:	2800      	cmp	r0, #0
    c68c:	bf0c      	ite	eq
    c68e:	2302      	moveq	r3, #2
    c690:	2312      	movne	r3, #18
    {
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITH_PENDING;
    }
    else
    {
        m_ack_data[FRAME_PENDING_OFFSET] = ACK_HEADER_WITHOUT_PENDING;
    c692:	7063      	strb	r3, [r4, #1]
    }

    return m_ack_data;
    c694:	4620      	mov	r0, r4
}
    c696:	bd10      	pop	{r4, pc}
        return NULL;
    c698:	2000      	movs	r0, #0
    c69a:	e7fc      	b.n	c696 <nrf_802154_imm_ack_generator_create+0x26>
    c69c:	200037f8 	.word	0x200037f8

0000c6a0 <ntf_push>:
/** @brief Push notification to the queue.
 *
 * @param[in]  slot_id  Identifier of the pool and a slot within.
 */
static void ntf_push(uint8_t slot_id)
{
    c6a0:	b570      	push	{r4, r5, r6, lr}
    c6a2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c6a4:	f3ef 8310 	mrs	r3, PRIMASK
    nrf_802154_mcu_critical_enter(m_mcu_cs);
    c6a8:	4d08      	ldr	r5, [pc, #32]	; (c6cc <ntf_push+0x2c>)
    c6aa:	602b      	str	r3, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    c6ac:	b672      	cpsid	i
    return nrf_802154_queue_push_begin(&m_notifications_queue);
    c6ae:	4e08      	ldr	r6, [pc, #32]	; (c6d0 <ntf_push+0x30>)
    c6b0:	4630      	mov	r0, r6
    c6b2:	f006 fe92 	bl	133da <nrf_802154_queue_push_begin>
    nrf_802154_queue_entry_t * p_entry = ntf_enter();

    p_entry->id = slot_id;
    c6b6:	7004      	strb	r4, [r0, #0]
    nrf_802154_queue_push_commit(&m_notifications_queue);
    c6b8:	4630      	mov	r0, r6
    c6ba:	f006 fe94 	bl	133e6 <nrf_802154_queue_push_commit>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
    c6be:	4b05      	ldr	r3, [pc, #20]	; (c6d4 <ntf_push+0x34>)
    c6c0:	2201      	movs	r2, #1
    c6c2:	601a      	str	r2, [r3, #0]
    nrf_802154_mcu_critical_exit(m_mcu_cs);
    c6c4:	682b      	ldr	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    c6c6:	f383 8810 	msr	PRIMASK, r3
    ntf_exit();
}
    c6ca:	bd70      	pop	{r4, r5, r6, pc}
    c6cc:	200021ec 	.word	0x200021ec
    c6d0:	200021f0 	.word	0x200021f0
    c6d4:	40017000 	.word	0x40017000

0000c6d8 <swi_notify_received>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_received(uint8_t * p_data, int8_t power, uint8_t lqi)
{
    c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c6da:	4c0d      	ldr	r4, [pc, #52]	; (c710 <swi_notify_received+0x38>)
{
    c6dc:	4607      	mov	r7, r0
    c6de:	460e      	mov	r6, r1
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c6e0:	4620      	mov	r0, r4
    c6e2:	2115      	movs	r1, #21
{
    c6e4:	4615      	mov	r5, r2
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c6e6:	f007 f833 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c6ea:	28ff      	cmp	r0, #255	; 0xff
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c6ec:	4603      	mov	r3, r0
    if (slot_id == NTF_INVALID_SLOT_ID)
    c6ee:	f04f 0000 	mov.w	r0, #0
    c6f2:	d00c      	beq.n	c70e <swi_notify_received+0x36>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                 = NTF_TYPE_RECEIVED;
    c6f4:	2228      	movs	r2, #40	; 0x28
    c6f6:	fb02 4403 	mla	r4, r2, r3, r4
    c6fa:	7060      	strb	r0, [r4, #1]
    p_slot->data.received.p_data = p_data;
    p_slot->data.received.power  = power;
    p_slot->data.received.lqi    = lqi;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c6fc:	f063 007f 	orn	r0, r3, #127	; 0x7f
    c700:	b2c0      	uxtb	r0, r0
    p_slot->data.received.p_data = p_data;
    c702:	60a7      	str	r7, [r4, #8]
    p_slot->data.received.power  = power;
    c704:	7326      	strb	r6, [r4, #12]
    p_slot->data.received.lqi    = lqi;
    c706:	7365      	strb	r5, [r4, #13]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c708:	f7ff ffca 	bl	c6a0 <ntf_push>

    return true;
    c70c:	2001      	movs	r0, #1
}
    c70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c710:	20001168 	.word	0x20001168

0000c714 <swi_notify_receive_failed>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_receive_failed(nrf_802154_rx_error_t error, uint32_t id, bool allow_drop)
{
    c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!allow_drop)
    {
        // Choose the primary pool for DRX-related errors
        p_pool          = m_primary_ntf_pool;
        pool_len        = NTF_PRIMARY_POOL_SIZE;
        pool_id_bitmask = NTF_PRIMARY_POOL_ID_MASK;
    c716:	4b11      	ldr	r3, [pc, #68]	; (c75c <swi_notify_receive_failed+0x48>)
    c718:	4c11      	ldr	r4, [pc, #68]	; (c760 <swi_notify_receive_failed+0x4c>)
    c71a:	2a00      	cmp	r2, #0
    c71c:	bf18      	it	ne
    c71e:	461c      	movne	r4, r3
{
    c720:	460d      	mov	r5, r1
    c722:	4606      	mov	r6, r0
        p_pool          = m_secondary_ntf_pool;
        pool_len        = NTF_SECONDARY_POOL_SIZE;
        pool_id_bitmask = NTF_SECONDARY_POOL_ID_MASK;
    }

    uint8_t slot_id = ntf_slot_alloc(p_pool, pool_len);
    c724:	bf14      	ite	ne
    c726:	2104      	movne	r1, #4
    c728:	2115      	moveq	r1, #21
    c72a:	4620      	mov	r0, r4
        pool_id_bitmask = NTF_PRIMARY_POOL_ID_MASK;
    c72c:	bf14      	ite	ne
    c72e:	2700      	movne	r7, #0
    c730:	2780      	moveq	r7, #128	; 0x80
    uint8_t slot_id = ntf_slot_alloc(p_pool, pool_len);
    c732:	f007 f80d 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c736:	28ff      	cmp	r0, #255	; 0xff
    c738:	d00e      	beq.n	c758 <swi_notify_receive_failed+0x44>
    {
        // No slots are available.
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &p_pool[slot_id];
    c73a:	b203      	sxth	r3, r0
    c73c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c740:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

    p_slot->type                      = NTF_TYPE_RECEIVE_FAILED;
    p_slot->data.receive_failed.error = error;
    p_slot->data.receive_failed.id    = id;

    ntf_push(slot_id | pool_id_bitmask);
    c744:	4338      	orrs	r0, r7
    p_slot->type                      = NTF_TYPE_RECEIVE_FAILED;
    c746:	2401      	movs	r4, #1
    ntf_push(slot_id | pool_id_bitmask);
    c748:	b2c0      	uxtb	r0, r0
    p_slot->type                      = NTF_TYPE_RECEIVE_FAILED;
    c74a:	705c      	strb	r4, [r3, #1]
    p_slot->data.receive_failed.error = error;
    c74c:	721e      	strb	r6, [r3, #8]
    p_slot->data.receive_failed.id    = id;
    c74e:	60dd      	str	r5, [r3, #12]
    ntf_push(slot_id | pool_id_bitmask);
    c750:	f7ff ffa6 	bl	c6a0 <ntf_push>

    return true;
    c754:	4620      	mov	r0, r4
}
    c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    c758:	2000      	movs	r0, #0
    c75a:	e7fc      	b.n	c756 <swi_notify_receive_failed+0x42>
    c75c:	200010c8 	.word	0x200010c8
    c760:	20001168 	.word	0x20001168

0000c764 <swi_notify_transmitted>:
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_transmitted(uint8_t                             * p_frame,
                            nrf_802154_transmit_done_metadata_t * p_metadata)
{
    c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c766:	4c10      	ldr	r4, [pc, #64]	; (c7a8 <swi_notify_transmitted+0x44>)
{
    c768:	4607      	mov	r7, r0
    c76a:	460d      	mov	r5, r1
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c76c:	4620      	mov	r0, r4
    c76e:	2115      	movs	r1, #21
    c770:	f006 ffee 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c774:	28ff      	cmp	r0, #255	; 0xff
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c776:	4606      	mov	r6, r0
    if (slot_id == NTF_INVALID_SLOT_ID)
    c778:	d013      	beq.n	c7a2 <swi_notify_transmitted+0x3e>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                      = NTF_TYPE_TRANSMITTED;
    c77a:	2328      	movs	r3, #40	; 0x28
    c77c:	fb03 4400 	mla	r4, r3, r0, r4
    c780:	2302      	movs	r3, #2
    c782:	7063      	strb	r3, [r4, #1]
    p_slot->data.transmitted.p_frame  = p_frame;
    c784:	60a7      	str	r7, [r4, #8]
    p_slot->data.transmitted.metadata = *p_metadata;
    c786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c788:	3410      	adds	r4, #16
    c78a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c78c:	e895 0003 	ldmia.w	r5, {r0, r1}
    c790:	e884 0003 	stmia.w	r4, {r0, r1}

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c794:	f066 007f 	orn	r0, r6, #127	; 0x7f
    c798:	b2c0      	uxtb	r0, r0
    c79a:	f7ff ff81 	bl	c6a0 <ntf_push>

    return true;
    c79e:	2001      	movs	r0, #1
}
    c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    c7a2:	2000      	movs	r0, #0
    c7a4:	e7fc      	b.n	c7a0 <swi_notify_transmitted+0x3c>
    c7a6:	bf00      	nop
    c7a8:	20001168 	.word	0x20001168

0000c7ac <swi_notify_transmit_failed>:
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_transmit_failed(uint8_t                                   * p_frame,
                                nrf_802154_tx_error_t                       error,
                                const nrf_802154_transmit_done_metadata_t * p_metadata)
{
    c7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c7b0:	4c11      	ldr	r4, [pc, #68]	; (c7f8 <swi_notify_transmit_failed+0x4c>)
{
    c7b2:	4680      	mov	r8, r0
    c7b4:	460f      	mov	r7, r1
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c7b6:	4620      	mov	r0, r4
    c7b8:	2115      	movs	r1, #21
{
    c7ba:	4615      	mov	r5, r2
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c7bc:	f006 ffc8 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c7c0:	28ff      	cmp	r0, #255	; 0xff
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c7c2:	4606      	mov	r6, r0
    if (slot_id == NTF_INVALID_SLOT_ID)
    c7c4:	d016      	beq.n	c7f4 <swi_notify_transmit_failed+0x48>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                          = NTF_TYPE_TRANSMIT_FAILED;
    c7c6:	2328      	movs	r3, #40	; 0x28
    c7c8:	fb03 4400 	mla	r4, r3, r0, r4
    c7cc:	2303      	movs	r3, #3
    c7ce:	7063      	strb	r3, [r4, #1]
    p_slot->data.transmit_failed.p_frame  = p_frame;
    c7d0:	f8c4 8008 	str.w	r8, [r4, #8]
    p_slot->data.transmit_failed.error    = error;
    c7d4:	7327      	strb	r7, [r4, #12]
    p_slot->data.transmit_failed.metadata = *p_metadata;
    c7d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c7d8:	3410      	adds	r4, #16
    c7da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c7dc:	e895 0003 	ldmia.w	r5, {r0, r1}
    c7e0:	e884 0003 	stmia.w	r4, {r0, r1}

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c7e4:	f066 007f 	orn	r0, r6, #127	; 0x7f
    c7e8:	b2c0      	uxtb	r0, r0
    c7ea:	f7ff ff59 	bl	c6a0 <ntf_push>

    return true;
    c7ee:	2001      	movs	r0, #1
}
    c7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
    c7f4:	2000      	movs	r0, #0
    c7f6:	e7fb      	b.n	c7f0 <swi_notify_transmit_failed+0x44>
    c7f8:	20001168 	.word	0x20001168

0000c7fc <swi_notify_energy_detected>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_energy_detected(uint8_t result)
{
    c7fc:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c7fe:	4c0b      	ldr	r4, [pc, #44]	; (c82c <swi_notify_energy_detected+0x30>)
{
    c800:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c802:	2115      	movs	r1, #21
    c804:	4620      	mov	r0, r4
    c806:	f006 ffa3 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c80a:	28ff      	cmp	r0, #255	; 0xff
    c80c:	d00c      	beq.n	c828 <swi_notify_energy_detected+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                        = NTF_TYPE_ENERGY_DETECTED;
    c80e:	2328      	movs	r3, #40	; 0x28
    c810:	fb03 4400 	mla	r4, r3, r0, r4
    c814:	2304      	movs	r3, #4
    p_slot->data.energy_detected.result = result;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c816:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c81a:	b2c0      	uxtb	r0, r0
    p_slot->type                        = NTF_TYPE_ENERGY_DETECTED;
    c81c:	7063      	strb	r3, [r4, #1]
    p_slot->data.energy_detected.result = result;
    c81e:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c820:	f7ff ff3e 	bl	c6a0 <ntf_push>

    return true;
    c824:	2001      	movs	r0, #1
}
    c826:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    c828:	2000      	movs	r0, #0
    c82a:	e7fc      	b.n	c826 <swi_notify_energy_detected+0x2a>
    c82c:	20001168 	.word	0x20001168

0000c830 <swi_notify_energy_detection_failed>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_energy_detection_failed(nrf_802154_ed_error_t error)
{
    c830:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c832:	4c0b      	ldr	r4, [pc, #44]	; (c860 <swi_notify_energy_detection_failed+0x30>)
{
    c834:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c836:	2115      	movs	r1, #21
    c838:	4620      	mov	r0, r4
    c83a:	f006 ff89 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c83e:	28ff      	cmp	r0, #255	; 0xff
    c840:	d00c      	beq.n	c85c <swi_notify_energy_detection_failed+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                               = NTF_TYPE_ENERGY_DETECTION_FAILED;
    c842:	2328      	movs	r3, #40	; 0x28
    c844:	fb03 4400 	mla	r4, r3, r0, r4
    c848:	2305      	movs	r3, #5
    p_slot->data.energy_detection_failed.error = error;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c84a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c84e:	b2c0      	uxtb	r0, r0
    p_slot->type                               = NTF_TYPE_ENERGY_DETECTION_FAILED;
    c850:	7063      	strb	r3, [r4, #1]
    p_slot->data.energy_detection_failed.error = error;
    c852:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c854:	f7ff ff24 	bl	c6a0 <ntf_push>

    return true;
    c858:	2001      	movs	r0, #1
}
    c85a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    c85c:	2000      	movs	r0, #0
    c85e:	e7fc      	b.n	c85a <swi_notify_energy_detection_failed+0x2a>
    c860:	20001168 	.word	0x20001168

0000c864 <swi_notify_cca>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_cca(bool channel_free)
{
    c864:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c866:	4c0b      	ldr	r4, [pc, #44]	; (c894 <swi_notify_cca+0x30>)
{
    c868:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c86a:	2115      	movs	r1, #21
    c86c:	4620      	mov	r0, r4
    c86e:	f006 ff6f 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c872:	28ff      	cmp	r0, #255	; 0xff
    c874:	d00c      	beq.n	c890 <swi_notify_cca+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type            = NTF_TYPE_CCA;
    c876:	2328      	movs	r3, #40	; 0x28
    c878:	fb03 4400 	mla	r4, r3, r0, r4
    c87c:	2306      	movs	r3, #6
    p_slot->data.cca.result = channel_free;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c87e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c882:	b2c0      	uxtb	r0, r0
    p_slot->type            = NTF_TYPE_CCA;
    c884:	7063      	strb	r3, [r4, #1]
    p_slot->data.cca.result = channel_free;
    c886:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c888:	f7ff ff0a 	bl	c6a0 <ntf_push>

    return true;
    c88c:	2001      	movs	r0, #1
}
    c88e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    c890:	2000      	movs	r0, #0
    c892:	e7fc      	b.n	c88e <swi_notify_cca+0x2a>
    c894:	20001168 	.word	0x20001168

0000c898 <swi_notify_cca_failed>:
 *
 * @retval  true   Notification enqueued successfully.
 * @retval  false  Notification could not be performed.
 */
bool swi_notify_cca_failed(nrf_802154_cca_error_t error)
{
    c898:	b538      	push	{r3, r4, r5, lr}
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c89a:	4c0b      	ldr	r4, [pc, #44]	; (c8c8 <swi_notify_cca_failed+0x30>)
{
    c89c:	4605      	mov	r5, r0
    uint8_t slot_id = ntf_slot_alloc(m_primary_ntf_pool, NTF_PRIMARY_POOL_SIZE);
    c89e:	2115      	movs	r1, #21
    c8a0:	4620      	mov	r0, r4
    c8a2:	f006 ff55 	bl	13750 <ntf_slot_alloc>

    if (slot_id == NTF_INVALID_SLOT_ID)
    c8a6:	28ff      	cmp	r0, #255	; 0xff
    c8a8:	d00c      	beq.n	c8c4 <swi_notify_cca_failed+0x2c>
        return false;
    }

    nrf_802154_ntf_data_t * p_slot = &m_primary_ntf_pool[slot_id];

    p_slot->type                  = NTF_TYPE_CCA_FAILED;
    c8aa:	2328      	movs	r3, #40	; 0x28
    c8ac:	fb03 4400 	mla	r4, r3, r0, r4
    c8b0:	2307      	movs	r3, #7
    p_slot->data.cca_failed.error = error;

    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c8b2:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c8b6:	b2c0      	uxtb	r0, r0
    p_slot->type                  = NTF_TYPE_CCA_FAILED;
    c8b8:	7063      	strb	r3, [r4, #1]
    p_slot->data.cca_failed.error = error;
    c8ba:	7225      	strb	r5, [r4, #8]
    ntf_push(slot_id | NTF_PRIMARY_POOL_ID_MASK);
    c8bc:	f7ff fef0 	bl	c6a0 <ntf_push>

    return true;
    c8c0:	2001      	movs	r0, #1
}
    c8c2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    c8c4:	2000      	movs	r0, #0
    c8c6:	e7fc      	b.n	c8c2 <swi_notify_cca_failed+0x2a>
    c8c8:	20001168 	.word	0x20001168

0000c8cc <nrf_802154_notification_init>:

void nrf_802154_notification_init(void)
{
    c8cc:	b508      	push	{r3, lr}
    nrf_802154_queue_init(&m_notifications_queue,
    c8ce:	221a      	movs	r2, #26
    c8d0:	2301      	movs	r3, #1
    c8d2:	4906      	ldr	r1, [pc, #24]	; (c8ec <nrf_802154_notification_init+0x20>)
    c8d4:	4806      	ldr	r0, [pc, #24]	; (c8f0 <nrf_802154_notification_init+0x24>)
    c8d6:	f006 fd77 	bl	133c8 <nrf_802154_queue_init>
    p_reg->INTENSET = mask;
    c8da:	4b06      	ldr	r3, [pc, #24]	; (c8f4 <nrf_802154_notification_init+0x28>)
    c8dc:	2201      	movs	r2, #1
    c8de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                          sizeof(m_notifications_queue_memory[0]));

    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, NTF_INT);

    nrf_802154_swi_init();
}
    c8e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
    c8e6:	f7fd ba5d 	b.w	9da4 <nrf_802154_swi_init>
    c8ea:	bf00      	nop
    c8ec:	200037fe 	.word	0x200037fe
    c8f0:	200021f0 	.word	0x200021f0
    c8f4:	40017000 	.word	0x40017000

0000c8f8 <nrf_802154_notification_swi_irq_handler>:

    nrf_802154_log_function_exit(NRF_802154_LOG_VERBOSITY_LOW);
}

void nrf_802154_notification_swi_irq_handler(void)
{
    c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
    c8fa:	4b2c      	ldr	r3, [pc, #176]	; (c9ac <nrf_802154_notification_swi_irq_handler+0xb4>)
    c8fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, NTF_EVENT))
    c900:	b15a      	cbz	r2, c91a <nrf_802154_notification_swi_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    c902:	2200      	movs	r2, #0
    c904:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c908:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 * @retval true             When the queue is empty
 * @retval false            When the queue is not empty.
 */
static inline bool nrf_802154_queue_is_empty(const nrf_802154_queue_t * p_queue)
{
    return (p_queue->wridx == p_queue->rdidx);
    c90c:	4d28      	ldr	r5, [pc, #160]	; (c9b0 <nrf_802154_notification_swi_irq_handler+0xb8>)
            (p_entry->id & NTF_POOL_ID_MASK) ? &m_primary_ntf_pool[slot_id] :
    c90e:	4e29      	ldr	r6, [pc, #164]	; (c9b4 <nrf_802154_notification_swi_irq_handler+0xbc>)
    c910:	4f29      	ldr	r7, [pc, #164]	; (c9b8 <nrf_802154_notification_swi_irq_handler+0xc0>)
    c912:	79aa      	ldrb	r2, [r5, #6]
    c914:	79eb      	ldrb	r3, [r5, #7]
    while (!nrf_802154_queue_is_empty(&m_notifications_queue))
    c916:	429a      	cmp	r2, r3
    c918:	d100      	bne.n	c91c <nrf_802154_notification_swi_irq_handler+0x24>
    {
        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, NTF_EVENT);

        irq_handler_ntf_event();
    }
}
    c91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            (nrf_802154_queue_entry_t *)nrf_802154_queue_pop_begin(&m_notifications_queue);
    c91c:	4628      	mov	r0, r5
    c91e:	f006 fd6b 	bl	133f8 <nrf_802154_queue_pop_begin>
        uint8_t slot_id = p_entry->id & (~NTF_POOL_ID_MASK);
    c922:	7804      	ldrb	r4, [r0, #0]
            (p_entry->id & NTF_POOL_ID_MASK) ? &m_primary_ntf_pool[slot_id] :
    c924:	f014 0f80 	tst.w	r4, #128	; 0x80
    c928:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    c92c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    c930:	bf14      	ite	ne
    c932:	eb07 04c4 	addne.w	r4, r7, r4, lsl #3
    c936:	eb06 04c4 	addeq.w	r4, r6, r4, lsl #3
        switch (p_slot->type)
    c93a:	7863      	ldrb	r3, [r4, #1]
    c93c:	2b07      	cmp	r3, #7
    c93e:	d80b      	bhi.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
    c940:	e8df f003 	tbb	[pc, r3]
    c944:	1d171204 	.word	0x1d171204
    c948:	302c2824 	.word	0x302c2824
                nrf_802154_received_raw(p_slot->data.received.p_data,
    c94c:	7b62      	ldrb	r2, [r4, #13]
    c94e:	f994 100c 	ldrsb.w	r1, [r4, #12]
    c952:	68a0      	ldr	r0, [r4, #8]
    c954:	f7fb fe78 	bl	8648 <nrf_802154_received_raw>
        nrf_802154_queue_pop_commit(&m_notifications_queue);
    c958:	4628      	mov	r0, r5
    c95a:	f006 fd53 	bl	13404 <nrf_802154_queue_pop_commit>
  __ASM volatile ("dmb 0xF":::"memory");
    c95e:	f3bf 8f5f 	dmb	sy
    p_slot->taken = false;
    c962:	2300      	movs	r3, #0
    c964:	7023      	strb	r3, [r4, #0]
}
    c966:	e7d4      	b.n	c912 <nrf_802154_notification_swi_irq_handler+0x1a>
                nrf_802154_receive_failed(p_slot->data.receive_failed.error,
    c968:	68e1      	ldr	r1, [r4, #12]
    c96a:	7a20      	ldrb	r0, [r4, #8]
    c96c:	f006 fc5e 	bl	1322c <nrf_802154_receive_failed>
                break;
    c970:	e7f2      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_transmitted_raw(p_slot->data.transmitted.p_frame,
    c972:	68a0      	ldr	r0, [r4, #8]
    c974:	f104 0110 	add.w	r1, r4, #16
    c978:	f7f7 fcac 	bl	42d4 <nrf_802154_transmitted_raw>
            break;
    c97c:	e7ec      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_transmit_failed(p_slot->data.transmit_failed.p_frame,
    c97e:	7b21      	ldrb	r1, [r4, #12]
    c980:	68a0      	ldr	r0, [r4, #8]
    c982:	f104 0210 	add.w	r2, r4, #16
    c986:	f7f7 fc75 	bl	4274 <nrf_802154_transmit_failed>
                break;
    c98a:	e7e5      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_energy_detected(p_slot->data.energy_detected.result);
    c98c:	7a20      	ldrb	r0, [r4, #8]
    c98e:	f006 fc4e 	bl	1322e <nrf_802154_energy_detected>
                break;
    c992:	e7e1      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_energy_detection_failed(
    c994:	7a20      	ldrb	r0, [r4, #8]
    c996:	f006 fc4b 	bl	13230 <nrf_802154_energy_detection_failed>
                break;
    c99a:	e7dd      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_cca_done(p_slot->data.cca.result);
    c99c:	7a20      	ldrb	r0, [r4, #8]
    c99e:	f006 fc48 	bl	13232 <nrf_802154_cca_done>
                break;
    c9a2:	e7d9      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
                nrf_802154_cca_failed(p_slot->data.cca_failed.error);
    c9a4:	7a20      	ldrb	r0, [r4, #8]
    c9a6:	f006 fc45 	bl	13234 <nrf_802154_cca_failed>
                break;
    c9aa:	e7d5      	b.n	c958 <nrf_802154_notification_swi_irq_handler+0x60>
    c9ac:	40017000 	.word	0x40017000
    c9b0:	200021f0 	.word	0x200021f0
    c9b4:	200010c8 	.word	0x200010c8
    c9b8:	20001168 	.word	0x20001168

0000c9bc <req_enter>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c9bc:	f3ef 8210 	mrs	r2, PRIMASK
 *
 * @return Pointer to an empty slot in the request queue.
 */
static nrf_802154_req_data_t * req_enter(void)
{
    nrf_802154_mcu_critical_enter(m_mcu_cs);
    c9c0:	4b02      	ldr	r3, [pc, #8]	; (c9cc <req_enter+0x10>)
    c9c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    c9c4:	b672      	cpsid	i

    assert(!nrf_802154_queue_is_full(&m_requests_queue));

    return (nrf_802154_req_data_t *)nrf_802154_queue_push_begin(&m_requests_queue);
    c9c6:	4802      	ldr	r0, [pc, #8]	; (c9d0 <req_enter+0x14>)
    c9c8:	f006 bd07 	b.w	133da <nrf_802154_queue_push_begin>
    c9cc:	200021f8 	.word	0x200021f8
    c9d0:	200021fc 	.word	0x200021fc

0000c9d4 <req_exit>:
 *
 * This is a helper function used in all request functions to end atomic slot update
 * and trigger SWI to process the request from the slot.
 */
static void req_exit(void)
{
    c9d4:	b508      	push	{r3, lr}
    nrf_802154_queue_push_commit(&m_requests_queue);
    c9d6:	4805      	ldr	r0, [pc, #20]	; (c9ec <req_exit+0x18>)
    c9d8:	f006 fd05 	bl	133e6 <nrf_802154_queue_push_commit>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
    c9dc:	4b04      	ldr	r3, [pc, #16]	; (c9f0 <req_exit+0x1c>)
    c9de:	2201      	movs	r2, #1
    c9e0:	609a      	str	r2, [r3, #8]

    nrf_egu_task_trigger(NRF_802154_EGU_INSTANCE, REQ_TASK);

    nrf_802154_mcu_critical_exit(m_mcu_cs);
    c9e2:	4b04      	ldr	r3, [pc, #16]	; (c9f4 <req_exit+0x20>)
    c9e4:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    c9e6:	f383 8810 	msr	PRIMASK, r3
}
    c9ea:	bd08      	pop	{r3, pc}
    c9ec:	200021fc 	.word	0x200021fc
    c9f0:	40017000 	.word	0x40017000
    c9f4:	200021f8 	.word	0x200021f8

0000c9f8 <nrf_802154_request_init>:
    p_slot->data.csma_ca_start.p_result   = p_result;
    req_exit();
}

void nrf_802154_request_init(void)
{
    c9f8:	b508      	push	{r3, lr}
    nrf_802154_queue_init(&m_requests_queue,
    c9fa:	2240      	movs	r2, #64	; 0x40
    c9fc:	2320      	movs	r3, #32
    c9fe:	4906      	ldr	r1, [pc, #24]	; (ca18 <nrf_802154_request_init+0x20>)
    ca00:	4806      	ldr	r0, [pc, #24]	; (ca1c <nrf_802154_request_init+0x24>)
    ca02:	f006 fce1 	bl	133c8 <nrf_802154_queue_init>
    p_reg->INTENSET = mask;
    ca06:	4b06      	ldr	r3, [pc, #24]	; (ca20 <nrf_802154_request_init+0x28>)
    ca08:	2204      	movs	r2, #4
    ca0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                          sizeof(m_requests_queue_memory[0]));

    nrf_egu_int_enable(NRF_802154_EGU_INSTANCE, REQ_INT);

    nrf_802154_swi_init();
}
    ca0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
    ca12:	f7fd b9c7 	b.w	9da4 <nrf_802154_swi_init>
    ca16:	bf00      	nop
    ca18:	200014b0 	.word	0x200014b0
    ca1c:	200021fc 	.word	0x200021fc
    ca20:	40017000 	.word	0x40017000

0000ca24 <nrf_802154_request_swi_irq_handler>:
        nrf_802154_queue_pop_commit(&m_requests_queue);
    }
}

void nrf_802154_request_swi_irq_handler(void)
{
    ca24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event);
    ca26:	4b49      	ldr	r3, [pc, #292]	; (cb4c <nrf_802154_request_swi_irq_handler+0x128>)
    ca28:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    if (nrf_egu_event_check(NRF_802154_EGU_INSTANCE, REQ_EVENT))
    ca2c:	b14a      	cbz	r2, ca42 <nrf_802154_request_swi_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    ca2e:	2200      	movs	r2, #0
    ca30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    ca34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    ca38:	4d45      	ldr	r5, [pc, #276]	; (cb50 <nrf_802154_request_swi_irq_handler+0x12c>)
    ca3a:	79aa      	ldrb	r2, [r5, #6]
    ca3c:	79eb      	ldrb	r3, [r5, #7]
    while (!nrf_802154_queue_is_empty(&m_requests_queue))
    ca3e:	429a      	cmp	r2, r3
    ca40:	d101      	bne.n	ca46 <nrf_802154_request_swi_irq_handler+0x22>
    {
        nrf_egu_event_clear(NRF_802154_EGU_INSTANCE, REQ_EVENT);

        irq_handler_req_event();
    }
}
    ca42:	b002      	add	sp, #8
    ca44:	bd70      	pop	{r4, r5, r6, pc}
            (nrf_802154_req_data_t *)nrf_802154_queue_pop_begin(&m_requests_queue);
    ca46:	4628      	mov	r0, r5
    ca48:	f006 fcd6 	bl	133f8 <nrf_802154_queue_pop_begin>
        switch (p_slot->type)
    ca4c:	7803      	ldrb	r3, [r0, #0]
            (nrf_802154_req_data_t *)nrf_802154_queue_pop_begin(&m_requests_queue);
    ca4e:	4604      	mov	r4, r0
        switch (p_slot->type)
    ca50:	2b11      	cmp	r3, #17
    ca52:	d848      	bhi.n	cae6 <nrf_802154_request_swi_irq_handler+0xc2>
    ca54:	e8df f003 	tbb	[pc, r3]
    ca58:	23190f09 	.word	0x23190f09
    ca5c:	39332e29 	.word	0x39332e29
    ca60:	4f4b433e 	.word	0x4f4b433e
    ca64:	65615854 	.word	0x65615854
    ca68:	746f      	.short	0x746f
                *(p_slot->data.sleep.p_result) =
    ca6a:	68c6      	ldr	r6, [r0, #12]
                    nrf_802154_core_sleep(p_slot->data.sleep.term_lvl);
    ca6c:	7a00      	ldrb	r0, [r0, #8]
    ca6e:	f7fc fe47 	bl	9700 <nrf_802154_core_sleep>
                *(p_slot->data.receive_at_cancel.p_result) =
    ca72:	7030      	strb	r0, [r6, #0]
                break;
    ca74:	e037      	b.n	cae6 <nrf_802154_request_swi_irq_handler+0xc2>
                    nrf_802154_core_receive(p_slot->data.receive.term_lvl,
    ca76:	6922      	ldr	r2, [r4, #16]
                *(p_slot->data.receive.p_result) =
    ca78:	6946      	ldr	r6, [r0, #20]
                    nrf_802154_core_receive(p_slot->data.receive.term_lvl,
    ca7a:	7b83      	ldrb	r3, [r0, #14]
    ca7c:	7b41      	ldrb	r1, [r0, #13]
    ca7e:	7b00      	ldrb	r0, [r0, #12]
    ca80:	9200      	str	r2, [sp, #0]
    ca82:	68a2      	ldr	r2, [r4, #8]
    ca84:	f7fc fe68 	bl	9758 <nrf_802154_core_receive>
    ca88:	e7f3      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_transmit(p_slot->data.transmit.term_lvl,
    ca8a:	68a3      	ldr	r3, [r4, #8]
                *(p_slot->data.transmit.p_result) =
    ca8c:	6986      	ldr	r6, [r0, #24]
                    nrf_802154_core_transmit(p_slot->data.transmit.term_lvl,
    ca8e:	7b41      	ldrb	r1, [r0, #13]
    ca90:	7b00      	ldrb	r0, [r0, #12]
    ca92:	9300      	str	r3, [sp, #0]
    ca94:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ca98:	f7fc fe9e 	bl	97d8 <nrf_802154_core_transmit>
    ca9c:	e7e9      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_energy_detection(
    ca9e:	e9d0 6103 	ldrd	r6, r1, [r0, #12]
    caa2:	7a00      	ldrb	r0, [r0, #8]
    caa4:	f7fc ff12 	bl	98cc <nrf_802154_core_energy_detection>
    caa8:	e7e3      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.cca.p_result) = nrf_802154_core_cca(p_slot->data.cca.term_lvl);
    caaa:	68c6      	ldr	r6, [r0, #12]
    caac:	7a00      	ldrb	r0, [r0, #8]
    caae:	f006 fc44 	bl	1333a <nrf_802154_core_cca>
    cab2:	e7de      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.continuous_carrier.p_result) =
    cab4:	68c6      	ldr	r6, [r0, #12]
                    nrf_802154_core_continuous_carrier(
    cab6:	7a00      	ldrb	r0, [r0, #8]
    cab8:	f006 fc55 	bl	13366 <nrf_802154_core_continuous_carrier>
    cabc:	e7d9      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_modulated_carrier(p_slot->data.modulated_carrier.term_lvl,
    cabe:	e9d0 1603 	ldrd	r1, r6, [r0, #12]
    cac2:	7a00      	ldrb	r0, [r0, #8]
    cac4:	f7fc ff26 	bl	9914 <nrf_802154_core_modulated_carrier>
    cac8:	e7d3      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_core_notify_buffer_free(p_slot->data.buffer_free.p_data);
    caca:	e9d0 0602 	ldrd	r0, r6, [r0, #8]
    cace:	f7fc ff3d 	bl	994c <nrf_802154_core_notify_buffer_free>
    cad2:	e7ce      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.channel_update.p_result) =
    cad4:	68c6      	ldr	r6, [r0, #12]
                    nrf_802154_core_channel_update(p_slot->data.channel_update.req_orig);
    cad6:	7a00      	ldrb	r0, [r0, #8]
    cad8:	f7fc ff54 	bl	9984 <nrf_802154_core_channel_update>
    cadc:	e7c9      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.cca_cfg_update.p_result) = nrf_802154_core_cca_cfg_update();
    cade:	6884      	ldr	r4, [r0, #8]
    cae0:	f7fc ff82 	bl	99e8 <nrf_802154_core_cca_cfg_update>
                *(p_slot->data.transmit_at_cancel.p_result) =
    cae4:	7020      	strb	r0, [r4, #0]
        nrf_802154_queue_pop_commit(&m_requests_queue);
    cae6:	4628      	mov	r0, r5
    cae8:	f006 fc8c 	bl	13404 <nrf_802154_queue_pop_commit>
    caec:	e7a5      	b.n	ca3a <nrf_802154_request_swi_irq_handler+0x16>
                *(p_slot->data.rssi_measure.p_result) = nrf_802154_core_rssi_measure();
    caee:	6884      	ldr	r4, [r0, #8]
    caf0:	f7fc ff8a 	bl	9a08 <nrf_802154_core_rssi_measure>
    caf4:	e7f6      	b.n	cae4 <nrf_802154_request_swi_irq_handler+0xc0>
                    nrf_802154_core_last_rssi_measurement_get(p_slot->data.rssi_get.p_rssi);
    caf6:	e9d0 0602 	ldrd	r0, r6, [r0, #8]
    cafa:	f7fc ffa1 	bl	9a40 <nrf_802154_core_last_rssi_measurement_get>
    cafe:	e7b8      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.antenna_update.p_result) = nrf_802154_core_antenna_update();
    cb00:	6884      	ldr	r4, [r0, #8]
    cb02:	f7fc ffbf 	bl	9a84 <nrf_802154_core_antenna_update>
    cb06:	e7ed      	b.n	cae4 <nrf_802154_request_swi_irq_handler+0xc0>
                    nrf_802154_delayed_trx_transmit(p_slot->data.transmit_at.p_data,
    cb08:	e9d0 3606 	ldrd	r3, r6, [r0, #24]
    cb0c:	9300      	str	r3, [sp, #0]
    cb0e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    cb12:	6880      	ldr	r0, [r0, #8]
    cb14:	f7fe fd58 	bl	b5c8 <nrf_802154_delayed_trx_transmit>
    cb18:	e7ab      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                *(p_slot->data.transmit_at_cancel.p_result) =
    cb1a:	6884      	ldr	r4, [r0, #8]
                    nrf_802154_delayed_trx_transmit_cancel();
    cb1c:	f7fe fdf2 	bl	b704 <nrf_802154_delayed_trx_transmit_cancel>
    cb20:	e7e0      	b.n	cae4 <nrf_802154_request_swi_irq_handler+0xc0>
                    nrf_802154_delayed_trx_receive(p_slot->data.receive_at.rx_time,
    cb22:	6982      	ldr	r2, [r0, #24]
                *(p_slot->data.receive_at.p_result) =
    cb24:	69c6      	ldr	r6, [r0, #28]
                    nrf_802154_delayed_trx_receive(p_slot->data.receive_at.rx_time,
    cb26:	7d03      	ldrb	r3, [r0, #20]
    cb28:	9200      	str	r2, [sp, #0]
    cb2a:	6902      	ldr	r2, [r0, #16]
    cb2c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
    cb30:	f7fe fda4 	bl	b67c <nrf_802154_delayed_trx_receive>
    cb34:	e79d      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_delayed_trx_receive_cancel(p_slot->data.receive_at_cancel.id);
    cb36:	e9d0 0602 	ldrd	r0, r6, [r0, #8]
    cb3a:	f7fe fdf7 	bl	b72c <nrf_802154_delayed_trx_receive_cancel>
    cb3e:	e798      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
                    nrf_802154_csma_ca_start(p_slot->data.csma_ca_start.p_data,
    cb40:	68c6      	ldr	r6, [r0, #12]
    cb42:	6880      	ldr	r0, [r0, #8]
    cb44:	4631      	mov	r1, r6
    cb46:	f7fe fb81 	bl	b24c <nrf_802154_csma_ca_start>
    cb4a:	e792      	b.n	ca72 <nrf_802154_request_swi_irq_handler+0x4e>
    cb4c:	40017000 	.word	0x40017000
    cb50:	200021fc 	.word	0x200021fc

0000cb54 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cb54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    cb58:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    cb5c:	2a08      	cmp	r2, #8
    cb5e:	d106      	bne.n	cb6e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cb60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    cb64:	2b05      	cmp	r3, #5
    cb66:	d802      	bhi.n	cb6e <nrf52_errata_103+0x1a>
    cb68:	4a02      	ldr	r2, [pc, #8]	; (cb74 <nrf52_errata_103+0x20>)
    cb6a:	5cd0      	ldrb	r0, [r2, r3]
    cb6c:	4770      	bx	lr
                        return false;
    cb6e:	2000      	movs	r0, #0
}
    cb70:	4770      	bx	lr
    cb72:	bf00      	nop
    cb74:	000151e4 	.word	0x000151e4

0000cb78 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    cb78:	4a02      	ldr	r2, [pc, #8]	; (cb84 <nvmc_wait+0xc>)
    cb7a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d0fb      	beq.n	cb7a <nvmc_wait+0x2>
}
    cb82:	4770      	bx	lr
    cb84:	4001e000 	.word	0x4001e000

0000cb88 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    cb88:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cb8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    cb8e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    cb92:	2a08      	cmp	r2, #8
    cb94:	d14e      	bne.n	cc34 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    cb96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cb9a:	2100      	movs	r1, #0
    cb9c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    cba0:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    cba4:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    cba8:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    cbac:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    cbb0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    cbb4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    cbb8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    cbbc:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    cbc0:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    cbc4:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    cbc8:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    cbcc:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    cbd0:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    cbd4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    cbd8:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    cbdc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    cbe0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    cbe4:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    cbe8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    cbec:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    cbf0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    cbf4:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    cbf8:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    cbfc:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    cc00:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    cc04:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    cc08:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    cc0c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    cc10:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    cc14:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    cc18:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    cc1c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    cc20:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    cc24:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    cc28:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    cc2c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    cc30:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    cc34:	f7ff ff8e 	bl	cb54 <nrf52_errata_103>
    cc38:	b118      	cbz	r0, cc42 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    cc3a:	4b3b      	ldr	r3, [pc, #236]	; (cd28 <SystemInit+0x1a0>)
    cc3c:	4a3b      	ldr	r2, [pc, #236]	; (cd2c <SystemInit+0x1a4>)
    cc3e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    cc42:	f7ff ff87 	bl	cb54 <nrf52_errata_103>
    cc46:	b118      	cbz	r0, cc50 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    cc48:	4b39      	ldr	r3, [pc, #228]	; (cd30 <SystemInit+0x1a8>)
    cc4a:	22fb      	movs	r2, #251	; 0xfb
    cc4c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    cc50:	f7ff ff80 	bl	cb54 <nrf52_errata_103>
    cc54:	b170      	cbz	r0, cc74 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    cc56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cc5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cc5e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    cc62:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    cc66:	f022 020f 	bic.w	r2, r2, #15
    cc6a:	f003 030f 	and.w	r3, r3, #15
    cc6e:	4313      	orrs	r3, r2
    cc70:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    cc74:	f7ff ff6e 	bl	cb54 <nrf52_errata_103>
    cc78:	b120      	cbz	r0, cc84 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    cc7a:	4b2e      	ldr	r3, [pc, #184]	; (cd34 <SystemInit+0x1ac>)
    cc7c:	f44f 7200 	mov.w	r2, #512	; 0x200
    cc80:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    cc84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    cc88:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    cc8c:	2b08      	cmp	r3, #8
    cc8e:	d11a      	bne.n	ccc6 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    cc90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cc94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    cc98:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    cc9a:	bf44      	itt	mi
    cc9c:	f06f 0201 	mvnmi.w	r2, #1
    cca0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    cca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cca8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    ccac:	2b05      	cmp	r3, #5
    ccae:	d802      	bhi.n	ccb6 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    ccb0:	4a21      	ldr	r2, [pc, #132]	; (cd38 <SystemInit+0x1b0>)
    ccb2:	5cd3      	ldrb	r3, [r2, r3]
    ccb4:	b13b      	cbz	r3, ccc6 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    ccb6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    ccba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    ccbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ccc2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    ccc6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    ccca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ccce:	2a00      	cmp	r2, #0
    ccd0:	db03      	blt.n	ccda <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    ccd2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	da22      	bge.n	cd20 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    ccda:	4918      	ldr	r1, [pc, #96]	; (cd3c <SystemInit+0x1b4>)
    ccdc:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    ccde:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    cce2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    cce6:	2412      	movs	r4, #18
    nvmc_wait();
    cce8:	f7ff ff46 	bl	cb78 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    ccec:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    ccf0:	f7ff ff42 	bl	cb78 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    ccf4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    ccf8:	f7ff ff3e 	bl	cb78 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    ccfc:	2300      	movs	r3, #0
    ccfe:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    cd02:	f7ff ff39 	bl	cb78 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    cd06:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    cd0a:	490d      	ldr	r1, [pc, #52]	; (cd40 <SystemInit+0x1b8>)
    cd0c:	4b0d      	ldr	r3, [pc, #52]	; (cd44 <SystemInit+0x1bc>)
    cd0e:	68ca      	ldr	r2, [r1, #12]
    cd10:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    cd14:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    cd16:	60cb      	str	r3, [r1, #12]
    cd18:	f3bf 8f4f 	dsb	sy
    __NOP();
    cd1c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    cd1e:	e7fd      	b.n	cd1c <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    cd20:	4b09      	ldr	r3, [pc, #36]	; (cd48 <SystemInit+0x1c0>)
    cd22:	4a0a      	ldr	r2, [pc, #40]	; (cd4c <SystemInit+0x1c4>)
    cd24:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    cd26:	bd10      	pop	{r4, pc}
    cd28:	40005000 	.word	0x40005000
    cd2c:	00038148 	.word	0x00038148
    cd30:	4000f000 	.word	0x4000f000
    cd34:	40029000 	.word	0x40029000
    cd38:	000151de 	.word	0x000151de
    cd3c:	4001e000 	.word	0x4001e000
    cd40:	e000ed00 	.word	0xe000ed00
    cd44:	05fa0004 	.word	0x05fa0004
    cd48:	200000f0 	.word	0x200000f0
    cd4c:	03d09000 	.word	0x03d09000

0000cd50 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    cd50:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    cd52:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    cd54:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    cd56:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    cd5a:	fab2 f382 	clz	r3, r2
    cd5e:	f1c3 031f 	rsb	r3, r3, #31
    cd62:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    cd64:	fa05 f403 	lsl.w	r4, r5, r3
    cd68:	ea22 0404 	bic.w	r4, r2, r4
    cd6c:	e850 6f00 	ldrex	r6, [r0]
    cd70:	4296      	cmp	r6, r2
    cd72:	d104      	bne.n	cd7e <nrfx_flag32_alloc+0x2e>
    cd74:	e840 4c00 	strex	ip, r4, [r0]
    cd78:	f1bc 0f00 	cmp.w	ip, #0
    cd7c:	d1f6      	bne.n	cd6c <nrfx_flag32_alloc+0x1c>
    cd7e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    cd82:	d1e7      	bne.n	cd54 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    cd84:	4801      	ldr	r0, [pc, #4]	; (cd8c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    cd86:	700b      	strb	r3, [r1, #0]
}
    cd88:	bd70      	pop	{r4, r5, r6, pc}
    cd8a:	bf00      	nop
    cd8c:	0bad0000 	.word	0x0bad0000

0000cd90 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    cd90:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    cd92:	6803      	ldr	r3, [r0, #0]
    cd94:	40cb      	lsrs	r3, r1
    cd96:	07db      	lsls	r3, r3, #31
    cd98:	d414      	bmi.n	cdc4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    cd9a:	2301      	movs	r3, #1
    cd9c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    cd9e:	6802      	ldr	r2, [r0, #0]
    cda0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    cda4:	ea43 0102 	orr.w	r1, r3, r2
    cda8:	e850 4f00 	ldrex	r4, [r0]
    cdac:	4294      	cmp	r4, r2
    cdae:	d104      	bne.n	cdba <nrfx_flag32_free+0x2a>
    cdb0:	e840 1c00 	strex	ip, r1, [r0]
    cdb4:	f1bc 0f00 	cmp.w	ip, #0
    cdb8:	d1f6      	bne.n	cda8 <nrfx_flag32_free+0x18>
    cdba:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    cdbe:	d1ee      	bne.n	cd9e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    cdc0:	4801      	ldr	r0, [pc, #4]	; (cdc8 <nrfx_flag32_free+0x38>)
}
    cdc2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    cdc4:	4801      	ldr	r0, [pc, #4]	; (cdcc <nrfx_flag32_free+0x3c>)
    cdc6:	e7fc      	b.n	cdc2 <nrfx_flag32_free+0x32>
    cdc8:	0bad0000 	.word	0x0bad0000
    cdcc:	0bad0004 	.word	0x0bad0004

0000cdd0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    cdd0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    cdd2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    cdd6:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    cdd8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    cdda:	6002      	str	r2, [r0, #0]
}
    cddc:	4802      	ldr	r0, [pc, #8]	; (cde8 <nrf_gpio_pin_port_decode+0x18>)
    cdde:	bf18      	it	ne
    cde0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    cde4:	4770      	bx	lr
    cde6:	bf00      	nop
    cde8:	50000300 	.word	0x50000300

0000cdec <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    cdec:	4b03      	ldr	r3, [pc, #12]	; (cdfc <pin_in_use_by_te+0x10>)
    cdee:	3008      	adds	r0, #8
    cdf0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    cdf4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cdf8:	4770      	bx	lr
    cdfa:	bf00      	nop
    cdfc:	200000f4 	.word	0x200000f4

0000ce00 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    ce00:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    ce02:	f100 0308 	add.w	r3, r0, #8
    ce06:	4c0c      	ldr	r4, [pc, #48]	; (ce38 <call_handler+0x38>)
    ce08:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    ce0c:	05da      	lsls	r2, r3, #23
{
    ce0e:	4605      	mov	r5, r0
    ce10:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    ce12:	d507      	bpl.n	ce24 <call_handler+0x24>
    ce14:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    ce18:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    ce1c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    ce20:	6852      	ldr	r2, [r2, #4]
    ce22:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    ce24:	68a3      	ldr	r3, [r4, #8]
    ce26:	b12b      	cbz	r3, ce34 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    ce28:	68e2      	ldr	r2, [r4, #12]
    ce2a:	4631      	mov	r1, r6
    ce2c:	4628      	mov	r0, r5
    }
}
    ce2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    ce32:	4718      	bx	r3
}
    ce34:	bd70      	pop	{r4, r5, r6, pc}
    ce36:	bf00      	nop
    ce38:	200000f4 	.word	0x200000f4

0000ce3c <release_handler>:
{
    ce3c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    ce3e:	4a12      	ldr	r2, [pc, #72]	; (ce88 <release_handler+0x4c>)
    ce40:	3008      	adds	r0, #8
    ce42:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    ce46:	05d9      	lsls	r1, r3, #23
    ce48:	d51b      	bpl.n	ce82 <release_handler+0x46>
    ce4a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    ce4e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    ce52:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    ce56:	f102 040e 	add.w	r4, r2, #14
    ce5a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    ce5c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    ce60:	f413 7f80 	tst.w	r3, #256	; 0x100
    ce64:	d003      	beq.n	ce6e <release_handler+0x32>
    ce66:	f3c3 2343 	ubfx	r3, r3, #9, #4
    ce6a:	4299      	cmp	r1, r3
    ce6c:	d009      	beq.n	ce82 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    ce6e:	3001      	adds	r0, #1
    ce70:	2830      	cmp	r0, #48	; 0x30
    ce72:	d1f3      	bne.n	ce5c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    ce74:	2300      	movs	r3, #0
    ce76:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    ce7a:	4804      	ldr	r0, [pc, #16]	; (ce8c <release_handler+0x50>)
}
    ce7c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    ce7e:	f7ff bf87 	b.w	cd90 <nrfx_flag32_free>
}
    ce82:	bc10      	pop	{r4}
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop
    ce88:	200000f4 	.word	0x200000f4
    ce8c:	20000168 	.word	0x20000168

0000ce90 <pin_handler_trigger_uninit>:
{
    ce90:	b538      	push	{r3, r4, r5, lr}
    ce92:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    ce94:	f7ff ffaa 	bl	cdec <pin_in_use_by_te>
    ce98:	4c09      	ldr	r4, [pc, #36]	; (cec0 <pin_handler_trigger_uninit+0x30>)
    ce9a:	f102 0508 	add.w	r5, r2, #8
    ce9e:	b140      	cbz	r0, ceb2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    cea0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    cea4:	4907      	ldr	r1, [pc, #28]	; (cec4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    cea6:	0b5b      	lsrs	r3, r3, #13
    cea8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    ceac:	2000      	movs	r0, #0
    ceae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    ceb2:	4610      	mov	r0, r2
    ceb4:	f7ff ffc2 	bl	ce3c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    ceb8:	2300      	movs	r3, #0
    ceba:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    cebe:	bd38      	pop	{r3, r4, r5, pc}
    cec0:	200000f4 	.word	0x200000f4
    cec4:	40006000 	.word	0x40006000

0000cec8 <nrfx_gpiote_input_configure>:
{
    cec8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cecc:	4604      	mov	r4, r0
    cece:	4616      	mov	r6, r2
    ced0:	461d      	mov	r5, r3
    if (p_input_config)
    ced2:	b301      	cbz	r1, cf16 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ced4:	4f4e      	ldr	r7, [pc, #312]	; (d010 <nrfx_gpiote_input_configure+0x148>)
    ced6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    ceda:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    cede:	079b      	lsls	r3, r3, #30
    cee0:	d502      	bpl.n	cee8 <nrfx_gpiote_input_configure+0x20>
    cee2:	f7ff ff83 	bl	cdec <pin_in_use_by_te>
    cee6:	bb10      	cbnz	r0, cf2e <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    cee8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    ceea:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    ceee:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    cef2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    cef6:	f10d 020f 	add.w	r2, sp, #15
    cefa:	460b      	mov	r3, r1
    cefc:	4620      	mov	r0, r4
    cefe:	f10d 010e 	add.w	r1, sp, #14
    cf02:	f006 fd13 	bl	1392c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    cf06:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    cf0a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    cf0e:	f043 0301 	orr.w	r3, r3, #1
    cf12:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    cf16:	b346      	cbz	r6, cf6a <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cf18:	4b3d      	ldr	r3, [pc, #244]	; (d010 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    cf1a:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    cf1e:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    cf20:	f104 0708 	add.w	r7, r4, #8
    cf24:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    cf28:	0788      	lsls	r0, r1, #30
    cf2a:	d502      	bpl.n	cf32 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    cf2c:	b1aa      	cbz	r2, cf5a <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    cf2e:	4839      	ldr	r0, [pc, #228]	; (d014 <nrfx_gpiote_input_configure+0x14c>)
    cf30:	e01d      	b.n	cf6e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    cf32:	f021 0120 	bic.w	r1, r1, #32
    cf36:	04c9      	lsls	r1, r1, #19
    cf38:	0cc9      	lsrs	r1, r1, #19
    cf3a:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    cf3e:	b162      	cbz	r2, cf5a <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    cf40:	f1bc 0f03 	cmp.w	ip, #3
    cf44:	d8f3      	bhi.n	cf2e <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    cf46:	6872      	ldr	r2, [r6, #4]
    cf48:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    cf4a:	f1bc 0f00 	cmp.w	ip, #0
    cf4e:	d111      	bne.n	cf74 <nrfx_gpiote_input_configure+0xac>
    cf50:	4a31      	ldr	r2, [pc, #196]	; (d018 <nrfx_gpiote_input_configure+0x150>)
    cf52:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    cf56:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    cf5a:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    cf5e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    cf62:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    cf66:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    cf6a:	bb45      	cbnz	r5, cfbe <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    cf6c:	482b      	ldr	r0, [pc, #172]	; (d01c <nrfx_gpiote_input_configure+0x154>)
}
    cf6e:	b004      	add	sp, #16
    cf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    cf74:	00b2      	lsls	r2, r6, #2
    cf76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    cf7a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    cf7e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    cf82:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    cf86:	f020 0003 	bic.w	r0, r0, #3
    cf8a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    cf8e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    cf92:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    cf96:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    cf9a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    cf9e:	0220      	lsls	r0, r4, #8
    cfa0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    cfa4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    cfa8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cfac:	ea40 000e 	orr.w	r0, r0, lr
    cfb0:	f041 0120 	orr.w	r1, r1, #32
    cfb4:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    cfb8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    cfbc:	e7cd      	b.n	cf5a <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    cfbe:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    cfc2:	4620      	mov	r0, r4
    cfc4:	f7ff ff3a 	bl	ce3c <release_handler>
    if (!handler)
    cfc8:	2e00      	cmp	r6, #0
    cfca:	d0cf      	beq.n	cf6c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    cfcc:	4d10      	ldr	r5, [pc, #64]	; (d010 <nrfx_gpiote_input_configure+0x148>)
    cfce:	e9d5 2300 	ldrd	r2, r3, [r5]
    cfd2:	4296      	cmp	r6, r2
    cfd4:	d101      	bne.n	cfda <nrfx_gpiote_input_configure+0x112>
    cfd6:	429f      	cmp	r7, r3
    cfd8:	d018      	beq.n	d00c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    cfda:	4811      	ldr	r0, [pc, #68]	; (d020 <nrfx_gpiote_input_configure+0x158>)
    cfdc:	f10d 010f 	add.w	r1, sp, #15
    cfe0:	f7ff feb6 	bl	cd50 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    cfe4:	4b0d      	ldr	r3, [pc, #52]	; (d01c <nrfx_gpiote_input_configure+0x154>)
    cfe6:	4298      	cmp	r0, r3
    cfe8:	d1c1      	bne.n	cf6e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    cfea:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    cfee:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    cff2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cff6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    cff8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    cffa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    cffe:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    d002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d006:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    d00a:	e7af      	b.n	cf6c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    d00c:	2200      	movs	r2, #0
    d00e:	e7ee      	b.n	cfee <nrfx_gpiote_input_configure+0x126>
    d010:	200000f4 	.word	0x200000f4
    d014:	0bad0004 	.word	0x0bad0004
    d018:	40006000 	.word	0x40006000
    d01c:	0bad0000 	.word	0x0bad0000
    d020:	20000168 	.word	0x20000168

0000d024 <nrfx_gpiote_output_configure>:
{
    d024:	b5f0      	push	{r4, r5, r6, r7, lr}
    d026:	4604      	mov	r4, r0
    d028:	b085      	sub	sp, #20
    d02a:	4615      	mov	r5, r2
    if (p_config)
    d02c:	b319      	cbz	r1, d076 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d02e:	4e33      	ldr	r6, [pc, #204]	; (d0fc <nrfx_gpiote_output_configure+0xd8>)
    d030:	f100 0708 	add.w	r7, r0, #8
    d034:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    d038:	0793      	lsls	r3, r2, #30
    d03a:	d403      	bmi.n	d044 <nrfx_gpiote_output_configure+0x20>
    d03c:	f7ff fed6 	bl	cdec <pin_in_use_by_te>
    d040:	2800      	cmp	r0, #0
    d042:	d158      	bne.n	d0f6 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    d044:	f012 0f1c 	tst.w	r2, #28
    d048:	d002      	beq.n	d050 <nrfx_gpiote_output_configure+0x2c>
    d04a:	784b      	ldrb	r3, [r1, #1]
    d04c:	2b01      	cmp	r3, #1
    d04e:	d052      	beq.n	d0f6 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    d050:	2301      	movs	r3, #1
    d052:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    d056:	2300      	movs	r3, #0
    d058:	e9cd 1300 	strd	r1, r3, [sp]
    d05c:	1c4a      	adds	r2, r1, #1
    d05e:	1c8b      	adds	r3, r1, #2
    d060:	4620      	mov	r0, r4
    d062:	f10d 010f 	add.w	r1, sp, #15
    d066:	f006 fc61 	bl	1392c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    d06a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    d06e:	f043 0303 	orr.w	r3, r3, #3
    d072:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    d076:	b915      	cbnz	r5, d07e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    d078:	4821      	ldr	r0, [pc, #132]	; (d100 <nrfx_gpiote_output_configure+0xdc>)
}
    d07a:	b005      	add	sp, #20
    d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d07e:	4e1f      	ldr	r6, [pc, #124]	; (d0fc <nrfx_gpiote_output_configure+0xd8>)
    d080:	f104 0708 	add.w	r7, r4, #8
    d084:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    d088:	0783      	lsls	r3, r0, #30
    d08a:	d534      	bpl.n	d0f6 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    d08c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    d090:	4661      	mov	r1, ip
    d092:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    d094:	f020 0020 	bic.w	r0, r0, #32
    d098:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    d09c:	04c0      	lsls	r0, r0, #19
    d09e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    d0a2:	0cc0      	lsrs	r0, r0, #19
    d0a4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    d0a8:	2300      	movs	r3, #0
    d0aa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    d0ae:	786a      	ldrb	r2, [r5, #1]
    d0b0:	2a00      	cmp	r2, #0
    d0b2:	d0e1      	beq.n	d078 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    d0b4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    d0b8:	78ad      	ldrb	r5, [r5, #2]
    d0ba:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    d0be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    d0c2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d0c6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    d0ca:	0223      	lsls	r3, r4, #8
    d0cc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    d0d0:	0412      	lsls	r2, r2, #16
    d0d2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d0d6:	ea43 030e 	orr.w	r3, r3, lr
    d0da:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    d0dc:	052a      	lsls	r2, r5, #20
    d0de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    d0e2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d0e6:	4313      	orrs	r3, r2
    d0e8:	f040 0020 	orr.w	r0, r0, #32
    d0ec:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    d0f0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    d0f4:	e7c0      	b.n	d078 <nrfx_gpiote_output_configure+0x54>
{
    d0f6:	4803      	ldr	r0, [pc, #12]	; (d104 <nrfx_gpiote_output_configure+0xe0>)
    d0f8:	e7bf      	b.n	d07a <nrfx_gpiote_output_configure+0x56>
    d0fa:	bf00      	nop
    d0fc:	200000f4 	.word	0x200000f4
    d100:	0bad0000 	.word	0x0bad0000
    d104:	0bad0004 	.word	0x0bad0004

0000d108 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    d108:	4b01      	ldr	r3, [pc, #4]	; (d110 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    d10a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    d10e:	4770      	bx	lr
    d110:	200000f4 	.word	0x200000f4

0000d114 <nrfx_gpiote_channel_get>:
{
    d114:	b508      	push	{r3, lr}
    d116:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    d118:	f7ff fe68 	bl	cdec <pin_in_use_by_te>
    d11c:	b138      	cbz	r0, d12e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d11e:	4b05      	ldr	r3, [pc, #20]	; (d134 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    d120:	4805      	ldr	r0, [pc, #20]	; (d138 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d122:	3208      	adds	r2, #8
    d124:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    d128:	0b5b      	lsrs	r3, r3, #13
    d12a:	700b      	strb	r3, [r1, #0]
}
    d12c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d12e:	4803      	ldr	r0, [pc, #12]	; (d13c <nrfx_gpiote_channel_get+0x28>)
    d130:	e7fc      	b.n	d12c <nrfx_gpiote_channel_get+0x18>
    d132:	bf00      	nop
    d134:	200000f4 	.word	0x200000f4
    d138:	0bad0000 	.word	0x0bad0000
    d13c:	0bad0004 	.word	0x0bad0004

0000d140 <nrfx_gpiote_init>:
{
    d140:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    d142:	4c0f      	ldr	r4, [pc, #60]	; (d180 <nrfx_gpiote_init+0x40>)
    d144:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    d148:	b9bd      	cbnz	r5, d17a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    d14a:	2260      	movs	r2, #96	; 0x60
    d14c:	4629      	mov	r1, r5
    d14e:	f104 0010 	add.w	r0, r4, #16
    d152:	f005 fdc6 	bl	12ce2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    d156:	2006      	movs	r0, #6
    d158:	f7f9 f85c 	bl	6214 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d15c:	4b09      	ldr	r3, [pc, #36]	; (d184 <nrfx_gpiote_init+0x44>)
    return err_code;
    d15e:	480a      	ldr	r0, [pc, #40]	; (d188 <nrfx_gpiote_init+0x48>)
    d160:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    d164:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    d168:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d16c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    d170:	2301      	movs	r3, #1
    d172:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    d176:	6763      	str	r3, [r4, #116]	; 0x74
}
    d178:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    d17a:	4804      	ldr	r0, [pc, #16]	; (d18c <nrfx_gpiote_init+0x4c>)
    d17c:	e7fc      	b.n	d178 <nrfx_gpiote_init+0x38>
    d17e:	bf00      	nop
    d180:	200000f4 	.word	0x200000f4
    d184:	40006000 	.word	0x40006000
    d188:	0bad0000 	.word	0x0bad0000
    d18c:	0bad0005 	.word	0x0bad0005

0000d190 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    d190:	4b03      	ldr	r3, [pc, #12]	; (d1a0 <nrfx_gpiote_is_init+0x10>)
    d192:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    d196:	3800      	subs	r0, #0
    d198:	bf18      	it	ne
    d19a:	2001      	movne	r0, #1
    d19c:	4770      	bx	lr
    d19e:	bf00      	nop
    d1a0:	200000f4 	.word	0x200000f4

0000d1a4 <nrfx_gpiote_channel_free>:
{
    d1a4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    d1a6:	4801      	ldr	r0, [pc, #4]	; (d1ac <nrfx_gpiote_channel_free+0x8>)
    d1a8:	f7ff bdf2 	b.w	cd90 <nrfx_flag32_free>
    d1ac:	20000164 	.word	0x20000164

0000d1b0 <nrfx_gpiote_channel_alloc>:
{
    d1b0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    d1b2:	4801      	ldr	r0, [pc, #4]	; (d1b8 <nrfx_gpiote_channel_alloc+0x8>)
    d1b4:	f7ff bdcc 	b.w	cd50 <nrfx_flag32_alloc>
    d1b8:	20000164 	.word	0x20000164

0000d1bc <nrfx_gpiote_trigger_enable>:
{
    d1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1be:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d1c0:	f7ff fe14 	bl	cdec <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d1c4:	f104 0208 	add.w	r2, r4, #8
    d1c8:	4b1e      	ldr	r3, [pc, #120]	; (d244 <nrfx_gpiote_trigger_enable+0x88>)
    d1ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d1ce:	b1e8      	cbz	r0, d20c <nrfx_gpiote_trigger_enable+0x50>
    d1d0:	f013 0502 	ands.w	r5, r3, #2
    d1d4:	d11a      	bne.n	d20c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d1d6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    d1d8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    d1da:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    d1de:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    d1e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d1e6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d1ea:	6005      	str	r5, [r0, #0]
    d1ec:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d1ee:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    d1f2:	f040 0001 	orr.w	r0, r0, #1
    d1f6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    d1fa:	b129      	cbz	r1, d208 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    d1fc:	2201      	movs	r2, #1
    d1fe:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    d202:	4a11      	ldr	r2, [pc, #68]	; (d248 <nrfx_gpiote_trigger_enable+0x8c>)
    d204:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    d208:	b003      	add	sp, #12
    d20a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d20c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    d210:	2b04      	cmp	r3, #4
    d212:	d012      	beq.n	d23a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    d214:	2b05      	cmp	r3, #5
    d216:	d012      	beq.n	d23e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d218:	a801      	add	r0, sp, #4
    d21a:	9401      	str	r4, [sp, #4]
    d21c:	f7ff fdd8 	bl	cdd0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d220:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    d222:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    d226:	40d9      	lsrs	r1, r3
    d228:	f001 0101 	and.w	r1, r1, #1
    d22c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d22e:	4620      	mov	r0, r4
}
    d230:	b003      	add	sp, #12
    d232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    d236:	f006 bbc2 	b.w	139be <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    d23a:	2103      	movs	r1, #3
    d23c:	e7f7      	b.n	d22e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    d23e:	2102      	movs	r1, #2
    d240:	e7f5      	b.n	d22e <nrfx_gpiote_trigger_enable+0x72>
    d242:	bf00      	nop
    d244:	200000f4 	.word	0x200000f4
    d248:	40006000 	.word	0x40006000

0000d24c <nrfx_gpiote_trigger_disable>:
{
    d24c:	b508      	push	{r3, lr}
    d24e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d250:	f7ff fdcc 	bl	cdec <pin_in_use_by_te>
    d254:	b1c0      	cbz	r0, d288 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    d256:	f102 0108 	add.w	r1, r2, #8
    d25a:	4b0e      	ldr	r3, [pc, #56]	; (d294 <nrfx_gpiote_trigger_disable+0x48>)
    d25c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    d260:	0799      	lsls	r1, r3, #30
    d262:	d411      	bmi.n	d288 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    d264:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    d266:	2201      	movs	r2, #1
    d268:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    d26a:	009b      	lsls	r3, r3, #2
    d26c:	490a      	ldr	r1, [pc, #40]	; (d298 <nrfx_gpiote_trigger_disable+0x4c>)
    d26e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d272:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    d276:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    d27a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    d27e:	f022 0203 	bic.w	r2, r2, #3
    d282:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    d286:	bd08      	pop	{r3, pc}
    d288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d28c:	2100      	movs	r1, #0
    d28e:	4610      	mov	r0, r2
    d290:	f006 bb95 	b.w	139be <nrf_gpio_cfg_sense_set>
    d294:	200000f4 	.word	0x200000f4
    d298:	40006000 	.word	0x40006000

0000d29c <nrfx_gpiote_pin_uninit>:
{
    d29c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d29e:	4b0e      	ldr	r3, [pc, #56]	; (d2d8 <nrfx_gpiote_pin_uninit+0x3c>)
    d2a0:	f100 0208 	add.w	r2, r0, #8
{
    d2a4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    d2a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    d2aa:	07db      	lsls	r3, r3, #31
    d2ac:	d511      	bpl.n	d2d2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    d2ae:	f7ff ffcd 	bl	d24c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    d2b2:	4620      	mov	r0, r4
    d2b4:	f7ff fdec 	bl	ce90 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d2b8:	a801      	add	r0, sp, #4
    d2ba:	9401      	str	r4, [sp, #4]
    d2bc:	f7ff fd88 	bl	cdd0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    d2c0:	9b01      	ldr	r3, [sp, #4]
    d2c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d2c6:	2202      	movs	r2, #2
    d2c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    d2cc:	4803      	ldr	r0, [pc, #12]	; (d2dc <nrfx_gpiote_pin_uninit+0x40>)
}
    d2ce:	b002      	add	sp, #8
    d2d0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    d2d2:	4803      	ldr	r0, [pc, #12]	; (d2e0 <nrfx_gpiote_pin_uninit+0x44>)
    d2d4:	e7fb      	b.n	d2ce <nrfx_gpiote_pin_uninit+0x32>
    d2d6:	bf00      	nop
    d2d8:	200000f4 	.word	0x200000f4
    d2dc:	0bad0000 	.word	0x0bad0000
    d2e0:	0bad0004 	.word	0x0bad0004

0000d2e4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2e8:	4b68      	ldr	r3, [pc, #416]	; (d48c <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    d2ea:	4869      	ldr	r0, [pc, #420]	; (d490 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d2ec:	4969      	ldr	r1, [pc, #420]	; (d494 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    d2ee:	2600      	movs	r6, #0
{
    d2f0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    d2f2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d2f4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d2f6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    d2f8:	b135      	cbz	r5, d308 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    d2fa:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    d2fe:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d300:	bf1e      	ittt	ne
    d302:	601c      	strne	r4, [r3, #0]
    d304:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    d306:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d308:	3304      	adds	r3, #4
    d30a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    d30c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    d310:	d1f1      	bne.n	d2f6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d312:	f8df 917c 	ldr.w	r9, [pc, #380]	; d490 <nrfx_gpiote_irq_handler+0x1ac>
    d316:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    d31a:	2b00      	cmp	r3, #0
    d31c:	f000 8099 	beq.w	d452 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    d320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    d324:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    d328:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d32a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    d32e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    d332:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    d334:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d338:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    d33c:	f10d 0a10 	add.w	sl, sp, #16
    d340:	ea4f 1348 	mov.w	r3, r8, lsl #5
    d344:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    d346:	f04f 0b01 	mov.w	fp, #1
    d34a:	e049      	b.n	d3e0 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    d34c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d34e:	4a52      	ldr	r2, [pc, #328]	; (d498 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    d350:	fa94 f4a4 	rbit	r4, r4
    d354:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    d358:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    d35a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d35c:	f104 0308 	add.w	r3, r4, #8
    d360:	9403      	str	r4, [sp, #12]
    d362:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    d366:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    d36a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    d36e:	fa0b f202 	lsl.w	r2, fp, r2
    d372:	ea23 0302 	bic.w	r3, r3, r2
    d376:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d37a:	a803      	add	r0, sp, #12
    d37c:	f7ff fd28 	bl	cdd0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d380:	9b03      	ldr	r3, [sp, #12]
    d382:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d386:	08b9      	lsrs	r1, r7, #2
    d388:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    d38c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    d390:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    d392:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    d394:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    d398:	d52c      	bpl.n	d3f4 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    d39a:	4620      	mov	r0, r4
    d39c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d39e:	b2dd      	uxtb	r5, r3
    d3a0:	f7ff fd2e 	bl	ce00 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d3a4:	a803      	add	r0, sp, #12
    d3a6:	9403      	str	r4, [sp, #12]
    d3a8:	f7ff fd12 	bl	cdd0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    d3ac:	9b03      	ldr	r3, [sp, #12]
    d3ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    d3b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    d3b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    d3ba:	429d      	cmp	r5, r3
    d3bc:	d107      	bne.n	d3ce <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    d3be:	2100      	movs	r1, #0
    d3c0:	4620      	mov	r0, r4
    d3c2:	f006 fafc 	bl	139be <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    d3c6:	4629      	mov	r1, r5
    d3c8:	4620      	mov	r0, r4
    d3ca:	f006 faf8 	bl	139be <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d3ce:	a803      	add	r0, sp, #12
    d3d0:	9403      	str	r4, [sp, #12]
    d3d2:	f7ff fcfd 	bl	cdd0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    d3d6:	9b03      	ldr	r3, [sp, #12]
    d3d8:	fa0b f303 	lsl.w	r3, fp, r3
    d3dc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    d3e0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    d3e4:	2c00      	cmp	r4, #0
    d3e6:	d1b1      	bne.n	d34c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    d3e8:	f1b8 0f00 	cmp.w	r8, #0
    d3ec:	d11d      	bne.n	d42a <nrfx_gpiote_irq_handler+0x146>
    d3ee:	f04f 0801 	mov.w	r8, #1
    d3f2:	e7a5      	b.n	d340 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    d3f4:	2b02      	cmp	r3, #2
    d3f6:	d10c      	bne.n	d412 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d3f8:	2103      	movs	r1, #3
    d3fa:	4620      	mov	r0, r4
    d3fc:	f006 fadf 	bl	139be <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d400:	f005 0305 	and.w	r3, r5, #5
    d404:	2b01      	cmp	r3, #1
    d406:	d1e2      	bne.n	d3ce <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    d408:	4639      	mov	r1, r7
    d40a:	4620      	mov	r0, r4
    d40c:	f7ff fcf8 	bl	ce00 <call_handler>
    d410:	e7dd      	b.n	d3ce <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    d412:	2102      	movs	r1, #2
    d414:	4620      	mov	r0, r4
    d416:	9301      	str	r3, [sp, #4]
    d418:	f006 fad1 	bl	139be <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    d41c:	2d03      	cmp	r5, #3
    d41e:	d0f3      	beq.n	d408 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    d420:	9b01      	ldr	r3, [sp, #4]
    d422:	2b03      	cmp	r3, #3
    d424:	d1d3      	bne.n	d3ce <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    d426:	2d02      	cmp	r5, #2
    d428:	e7ed      	b.n	d406 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    d42a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d42e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    d432:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    d436:	4919      	ldr	r1, [pc, #100]	; (d49c <nrfx_gpiote_irq_handler+0x1b8>)
    d438:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    d43c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    d43e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    d442:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    d446:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    d448:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    d44a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    d44e:	f47f af73 	bne.w	d338 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    d452:	2401      	movs	r4, #1
    while (mask)
    d454:	b916      	cbnz	r6, d45c <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    d456:	b007      	add	sp, #28
    d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    d45c:	fa96 f3a6 	rbit	r3, r6
    d460:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    d464:	fa04 f203 	lsl.w	r2, r4, r3
    d468:	009b      	lsls	r3, r3, #2
    d46a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d46e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    d472:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d476:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    d47a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    d47e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    d482:	f3c1 4101 	ubfx	r1, r1, #16, #2
    d486:	f7ff fcbb 	bl	ce00 <call_handler>
    d48a:	e7e3      	b.n	d454 <nrfx_gpiote_irq_handler+0x170>
    d48c:	40006100 	.word	0x40006100
    d490:	40006000 	.word	0x40006000
    d494:	40006120 	.word	0x40006120
    d498:	200000f4 	.word	0x200000f4
    d49c:	50000300 	.word	0x50000300

0000d4a0 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    d4a0:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    d4a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d4a6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    d4aa:	0762      	lsls	r2, r4, #29
    d4ac:	d507      	bpl.n	d4be <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    d4ae:	f44f 7084 	mov.w	r0, #264	; 0x108
    d4b2:	f006 fa93 	bl	139dc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    d4b6:	b110      	cbz	r0, d4be <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    d4b8:	4b1e      	ldr	r3, [pc, #120]	; (d534 <nrfx_power_irq_handler+0x94>)
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    d4be:	06a3      	lsls	r3, r4, #26
    d4c0:	d508      	bpl.n	d4d4 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    d4c2:	f44f 708a 	mov.w	r0, #276	; 0x114
    d4c6:	f006 fa89 	bl	139dc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    d4ca:	b118      	cbz	r0, d4d4 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    d4cc:	4b1a      	ldr	r3, [pc, #104]	; (d538 <nrfx_power_irq_handler+0x98>)
    d4ce:	2000      	movs	r0, #0
    d4d0:	681b      	ldr	r3, [r3, #0]
    d4d2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    d4d4:	0660      	lsls	r0, r4, #25
    d4d6:	d508      	bpl.n	d4ea <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    d4d8:	f44f 708c 	mov.w	r0, #280	; 0x118
    d4dc:	f006 fa7e 	bl	139dc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    d4e0:	b118      	cbz	r0, d4ea <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    d4e2:	4b15      	ldr	r3, [pc, #84]	; (d538 <nrfx_power_irq_handler+0x98>)
    d4e4:	2001      	movs	r0, #1
    d4e6:	681b      	ldr	r3, [r3, #0]
    d4e8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    d4ea:	0621      	lsls	r1, r4, #24
    d4ec:	d508      	bpl.n	d500 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    d4ee:	f44f 708e 	mov.w	r0, #284	; 0x11c
    d4f2:	f006 fa73 	bl	139dc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    d4f6:	b118      	cbz	r0, d500 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    d4f8:	4b10      	ldr	r3, [pc, #64]	; (d53c <nrfx_power_irq_handler+0x9c>)
    d4fa:	2000      	movs	r0, #0
    d4fc:	681b      	ldr	r3, [r3, #0]
    d4fe:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    d500:	05e2      	lsls	r2, r4, #23
    d502:	d508      	bpl.n	d516 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    d504:	f44f 7090 	mov.w	r0, #288	; 0x120
    d508:	f006 fa68 	bl	139dc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    d50c:	b118      	cbz	r0, d516 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    d50e:	4b0b      	ldr	r3, [pc, #44]	; (d53c <nrfx_power_irq_handler+0x9c>)
    d510:	2001      	movs	r0, #1
    d512:	681b      	ldr	r3, [r3, #0]
    d514:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    d516:	05a3      	lsls	r3, r4, #22
    d518:	d50a      	bpl.n	d530 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    d51a:	f44f 7092 	mov.w	r0, #292	; 0x124
    d51e:	f006 fa5d 	bl	139dc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    d522:	b128      	cbz	r0, d530 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    d524:	4b05      	ldr	r3, [pc, #20]	; (d53c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    d526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    d52a:	681b      	ldr	r3, [r3, #0]
    d52c:	2002      	movs	r0, #2
    d52e:	4718      	bx	r3
}
    d530:	bd10      	pop	{r4, pc}
    d532:	bf00      	nop
    d534:	2000220c 	.word	0x2000220c
    d538:	20002208 	.word	0x20002208
    d53c:	20002204 	.word	0x20002204

0000d540 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    d540:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    d542:	4801      	ldr	r0, [pc, #4]	; (d548 <nrfx_ppi_channel_alloc+0x8>)
    d544:	f7ff bc04 	b.w	cd50 <nrfx_flag32_alloc>
    d548:	20000170 	.word	0x20000170

0000d54c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    d54c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d54e:	4c11      	ldr	r4, [pc, #68]	; (d594 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d550:	4a11      	ldr	r2, [pc, #68]	; (d598 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    d552:	4912      	ldr	r1, [pc, #72]	; (d59c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d554:	2303      	movs	r3, #3
    d556:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d558:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d55a:	4b11      	ldr	r3, [pc, #68]	; (d5a0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    d55c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d55e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    d560:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d564:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    d566:	2300      	movs	r3, #0
    d568:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d56a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d56c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    d56e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d570:	4a0c      	ldr	r2, [pc, #48]	; (d5a4 <_DoInit+0x58>)
    d572:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    d574:	2210      	movs	r2, #16
    d576:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    d578:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    d57a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d57c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d57e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    d580:	f005 fb63 	bl	12c4a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    d584:	4908      	ldr	r1, [pc, #32]	; (d5a8 <_DoInit+0x5c>)
    d586:	4620      	mov	r0, r4
    d588:	f005 fb5f 	bl	12c4a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    d58c:	2320      	movs	r3, #32
    d58e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    d590:	bd10      	pop	{r4, pc}
    d592:	bf00      	nop
    d594:	20002210 	.word	0x20002210
    d598:	000151ea 	.word	0x000151ea
    d59c:	000151f3 	.word	0x000151f3
    d5a0:	20003828 	.word	0x20003828
    d5a4:	20003818 	.word	0x20003818
    d5a8:	000151f7 	.word	0x000151f7

0000d5ac <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    d5b0:	4f21      	ldr	r7, [pc, #132]	; (d638 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    d5b2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5b6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    d5b8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5bc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    d5be:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    d5c0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d5c2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5c4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d5c6:	d831      	bhi.n	d62c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    d5c8:	f8d2 a020 	ldr.w	sl, [r2, #32]
    d5cc:	ebaa 0905 	sub.w	r9, sl, r5
    d5d0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    d5d4:	4294      	cmp	r4, r2
    d5d6:	d811      	bhi.n	d5fc <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d5d8:	2318      	movs	r3, #24
    d5da:	fb06 3303 	mla	r3, r6, r3, r3
    d5de:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    d5e0:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d5e2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    d5e4:	4641      	mov	r1, r8
    d5e6:	4428      	add	r0, r5
    d5e8:	f005 fb70 	bl	12ccc <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    d5ec:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    d5ee:	2318      	movs	r3, #24
    d5f0:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    d5f4:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    d5f6:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    d5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    d5fc:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    d5fe:	429c      	cmp	r4, r3
    d600:	d818      	bhi.n	d634 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d602:	fb00 bb0b 	mla	fp, r0, fp, fp
    d606:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    d608:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d60a:	f8db 0004 	ldr.w	r0, [fp, #4]
    d60e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    d610:	4428      	add	r0, r5
    d612:	f005 fb5b 	bl	12ccc <memcpy>
      if (NumBytes) {
    d616:	ebb4 040a 	subs.w	r4, r4, sl
    d61a:	d0e8      	beq.n	d5ee <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    d61c:	f8db 0004 	ldr.w	r0, [fp, #4]
    d620:	4622      	mov	r2, r4
    d622:	eb08 0109 	add.w	r1, r8, r9
    d626:	f005 fb51 	bl	12ccc <memcpy>
      return 1;
    d62a:	e7e0      	b.n	d5ee <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    d62c:	3b01      	subs	r3, #1
    d62e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    d630:	42a3      	cmp	r3, r4
    d632:	d2d1      	bcs.n	d5d8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    d634:	2000      	movs	r0, #0
    d636:	e7df      	b.n	d5f8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    d638:	20002210 	.word	0x20002210

0000d63c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    d63c:	4b03      	ldr	r3, [pc, #12]	; (d64c <SEGGER_RTT_HasDataUp+0x10>)
    d63e:	2218      	movs	r2, #24
    d640:	fb02 3300 	mla	r3, r2, r0, r3
    d644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    d646:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    d648:	1a80      	subs	r0, r0, r2
    d64a:	4770      	bx	lr
    d64c:	20002210 	.word	0x20002210

0000d650 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    d650:	4803      	ldr	r0, [pc, #12]	; (d660 <zephyr_rtt_mutex_lock+0x10>)
    d652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d65a:	f000 ba8d 	b.w	db78 <z_impl_k_mutex_lock>
    d65e:	bf00      	nop
    d660:	2000040c 	.word	0x2000040c

0000d664 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    d664:	4801      	ldr	r0, [pc, #4]	; (d66c <zephyr_rtt_mutex_unlock+0x8>)
    d666:	f000 bb01 	b.w	dc6c <z_impl_k_mutex_unlock>
    d66a:	bf00      	nop
    d66c:	2000040c 	.word	0x2000040c

0000d670 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d674:	b086      	sub	sp, #24
    d676:	4605      	mov	r5, r0
    d678:	af00      	add	r7, sp, #0
    d67a:	460e      	mov	r6, r1
	__asm__ volatile(
    d67c:	f04f 0340 	mov.w	r3, #64	; 0x40
    d680:	f3ef 8811 	mrs	r8, BASEPRI
    d684:	f383 8812 	msr	BASEPRI_MAX, r3
    d688:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    d68c:	f000 ffe6 	bl	e65c <z_impl_z_current_get>
    d690:	2d04      	cmp	r5, #4
    d692:	bf96      	itet	ls
    d694:	4b2c      	ldrls	r3, [pc, #176]	; (d748 <z_fatal_error+0xd8>)
    d696:	4b2d      	ldrhi	r3, [pc, #180]	; (d74c <z_fatal_error+0xdc>)
    d698:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    d69c:	46e9      	mov	r9, sp
    d69e:	b08a      	sub	sp, #40	; 0x28
    d6a0:	4604      	mov	r4, r0
    d6a2:	466a      	mov	r2, sp
    d6a4:	492a      	ldr	r1, [pc, #168]	; (d750 <z_fatal_error+0xe0>)
    d6a6:	61d3      	str	r3, [r2, #28]
    d6a8:	f240 3301 	movw	r3, #769	; 0x301
    d6ac:	8493      	strh	r3, [r2, #36]	; 0x24
    d6ae:	f04f 0a00 	mov.w	sl, #0
    d6b2:	4b28      	ldr	r3, [pc, #160]	; (d754 <z_fatal_error+0xe4>)
    d6b4:	f8c2 a020 	str.w	sl, [r2, #32]
    d6b8:	e9c2 1505 	strd	r1, r5, [r2, #20]
    d6bc:	f842 3f10 	str.w	r3, [r2, #16]!
    d6c0:	4825      	ldr	r0, [pc, #148]	; (d758 <z_fatal_error+0xe8>)
    d6c2:	4653      	mov	r3, sl
    d6c4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    d6c8:	f7f7 fff6 	bl	56b8 <z_impl_z_log_msg_static_create>
    d6cc:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    d6ce:	b17e      	cbz	r6, d6f0 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    d6d0:	69f3      	ldr	r3, [r6, #28]
    d6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d6d6:	b15b      	cbz	r3, d6f0 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    d6d8:	4b20      	ldr	r3, [pc, #128]	; (d75c <z_fatal_error+0xec>)
    d6da:	617b      	str	r3, [r7, #20]
    d6dc:	2302      	movs	r3, #2
    d6de:	613b      	str	r3, [r7, #16]
    d6e0:	481d      	ldr	r0, [pc, #116]	; (d758 <z_fatal_error+0xe8>)
    d6e2:	4653      	mov	r3, sl
    d6e4:	f107 0210 	add.w	r2, r7, #16
    d6e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d6ec:	f7f7 ffe4 	bl	56b8 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    d6f0:	b12c      	cbz	r4, d6fe <z_fatal_error+0x8e>
    d6f2:	4620      	mov	r0, r4
    d6f4:	f006 f9f2 	bl	13adc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    d6f8:	b108      	cbz	r0, d6fe <z_fatal_error+0x8e>
    d6fa:	7803      	ldrb	r3, [r0, #0]
    d6fc:	b903      	cbnz	r3, d700 <z_fatal_error+0x90>
		thread_name = "unknown";
    d6fe:	4818      	ldr	r0, [pc, #96]	; (d760 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    d700:	46e9      	mov	r9, sp
    d702:	b08a      	sub	sp, #40	; 0x28
    d704:	466a      	mov	r2, sp
    d706:	4b17      	ldr	r3, [pc, #92]	; (d764 <z_fatal_error+0xf4>)
    d708:	61d0      	str	r0, [r2, #28]
    d70a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d70e:	f240 3301 	movw	r3, #769	; 0x301
    d712:	8413      	strh	r3, [r2, #32]
    d714:	4b14      	ldr	r3, [pc, #80]	; (d768 <z_fatal_error+0xf8>)
    d716:	f842 3f10 	str.w	r3, [r2, #16]!
    d71a:	2300      	movs	r3, #0
    d71c:	480e      	ldr	r0, [pc, #56]	; (d758 <z_fatal_error+0xe8>)
    d71e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    d722:	f7f7 ffc9 	bl	56b8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    d726:	4631      	mov	r1, r6
    d728:	46cd      	mov	sp, r9
    d72a:	4628      	mov	r0, r5
    d72c:	f7fa fcb2 	bl	8094 <k_sys_fatal_error_handler>
	__asm__ volatile(
    d730:	f388 8811 	msr	BASEPRI, r8
    d734:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    d738:	4620      	mov	r0, r4
    d73a:	f7f9 fa11 	bl	6b60 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    d73e:	3718      	adds	r7, #24
    d740:	46bd      	mov	sp, r7
    d742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d746:	bf00      	nop
    d748:	00014734 	.word	0x00014734
    d74c:	000151fe 	.word	0x000151fe
    d750:	00015214 	.word	0x00015214
    d754:	01000005 	.word	0x01000005
    d758:	00014410 	.word	0x00014410
    d75c:	0001523c 	.word	0x0001523c
    d760:	0001520c 	.word	0x0001520c
    d764:	0001525d 	.word	0x0001525d
    d768:	01000004 	.word	0x01000004

0000d76c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d76c:	4b0f      	ldr	r3, [pc, #60]	; (d7ac <z_sys_init_run_level+0x40>)
{
    d76e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d770:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    d774:	3001      	adds	r0, #1
    d776:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    d77a:	42a6      	cmp	r6, r4
    d77c:	d800      	bhi.n	d780 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    d77e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    d780:	e9d4 3500 	ldrd	r3, r5, [r4]
    d784:	4628      	mov	r0, r5
    d786:	4798      	blx	r3
		if (dev != NULL) {
    d788:	b16d      	cbz	r5, d7a6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    d78a:	b138      	cbz	r0, d79c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    d78c:	2800      	cmp	r0, #0
    d78e:	bfb8      	it	lt
    d790:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    d792:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    d794:	28ff      	cmp	r0, #255	; 0xff
    d796:	bfa8      	it	ge
    d798:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    d79a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    d79c:	68ea      	ldr	r2, [r5, #12]
    d79e:	7853      	ldrb	r3, [r2, #1]
    d7a0:	f043 0301 	orr.w	r3, r3, #1
    d7a4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d7a6:	3408      	adds	r4, #8
    d7a8:	e7e7      	b.n	d77a <z_sys_init_run_level+0xe>
    d7aa:	bf00      	nop
    d7ac:	00014748 	.word	0x00014748

0000d7b0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    d7b0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    d7b2:	4b0a      	ldr	r3, [pc, #40]	; (d7dc <bg_thread_main+0x2c>)
    d7b4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    d7b6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    d7b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    d7ba:	f7ff ffd7 	bl	d76c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    d7be:	f001 f9d5 	bl	eb6c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    d7c2:	2004      	movs	r0, #4
    d7c4:	f7ff ffd2 	bl	d76c <z_sys_init_run_level>

	z_init_static_threads();
    d7c8:	f000 f95e 	bl	da88 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    d7cc:	f7f6 fd94 	bl	42f8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    d7d0:	4a03      	ldr	r2, [pc, #12]	; (d7e0 <bg_thread_main+0x30>)
    d7d2:	7b13      	ldrb	r3, [r2, #12]
    d7d4:	f023 0301 	bic.w	r3, r3, #1
    d7d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    d7da:	bd08      	pop	{r3, pc}
    d7dc:	20003c28 	.word	0x20003c28
    d7e0:	20001570 	.word	0x20001570

0000d7e4 <z_bss_zero>:
{
    d7e4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    d7e6:	4803      	ldr	r0, [pc, #12]	; (d7f4 <z_bss_zero+0x10>)
    d7e8:	4a03      	ldr	r2, [pc, #12]	; (d7f8 <z_bss_zero+0x14>)
    d7ea:	2100      	movs	r1, #0
    d7ec:	1a12      	subs	r2, r2, r0
    d7ee:	f006 f91b 	bl	13a28 <z_early_memset>
}
    d7f2:	bd08      	pop	{r3, pc}
    d7f4:	20000448 	.word	0x20000448
    d7f8:	20003c40 	.word	0x20003c40

0000d7fc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    d7fc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    d7fe:	2300      	movs	r3, #0
{
    d800:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    d802:	2201      	movs	r2, #1
    d804:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    d808:	4e13      	ldr	r6, [pc, #76]	; (d858 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d80a:	4d14      	ldr	r5, [pc, #80]	; (d85c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    d80c:	9301      	str	r3, [sp, #4]
    d80e:	220f      	movs	r2, #15
    d810:	e9cd 3202 	strd	r3, r2, [sp, #8]
    d814:	4912      	ldr	r1, [pc, #72]	; (d860 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d816:	2318      	movs	r3, #24
    d818:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    d81c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    d820:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    d822:	f44f 70c0 	mov.w	r0, #384	; 0x180
    d826:	fb00 1104 	mla	r1, r0, r4, r1
    d82a:	4b0e      	ldr	r3, [pc, #56]	; (d864 <z_init_cpu+0x68>)
    d82c:	9500      	str	r5, [sp, #0]
    d82e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    d832:	4630      	mov	r0, r6
    d834:	f000 f8ca 	bl	d9cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d838:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    d83a:	4a0b      	ldr	r2, [pc, #44]	; (d868 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    d83c:	60ee      	str	r6, [r5, #12]
    d83e:	f023 0304 	bic.w	r3, r3, #4
    d842:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    d844:	f44f 6304 	mov.w	r3, #2112	; 0x840
    d848:	fb04 3303 	mla	r3, r4, r3, r3
    d84c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    d84e:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    d850:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    d852:	b006      	add	sp, #24
    d854:	bd70      	pop	{r4, r5, r6, pc}
    d856:	bf00      	nop
    d858:	200014f0 	.word	0x200014f0
    d85c:	200022b8 	.word	0x200022b8
    d860:	20004c00 	.word	0x20004c00
    d864:	0000db41 	.word	0x0000db41
    d868:	200043c0 	.word	0x200043c0

0000d86c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    d86c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d86e:	2000      	movs	r0, #0
{
    d870:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    d872:	f7ff ff7b 	bl	d76c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    d876:	4b2e      	ldr	r3, [pc, #184]	; (d930 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    d878:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    d87c:	4d2d      	ldr	r5, [pc, #180]	; (d934 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    d87e:	4e2e      	ldr	r6, [pc, #184]	; (d938 <z_cstart+0xcc>)
    d880:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d882:	4f2e      	ldr	r7, [pc, #184]	; (d93c <z_cstart+0xd0>)
    d884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d888:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d88a:	23e0      	movs	r3, #224	; 0xe0
    d88c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    d890:	2400      	movs	r4, #0
    d892:	2320      	movs	r3, #32
    d894:	77eb      	strb	r3, [r5, #31]
    d896:	762c      	strb	r4, [r5, #24]
    d898:	766c      	strb	r4, [r5, #25]
    d89a:	76ac      	strb	r4, [r5, #26]
    d89c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    d8a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d8a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    d8a6:	626b      	str	r3, [r5, #36]	; 0x24
    d8a8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    d8ac:	f7f9 f8cc 	bl	6a48 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    d8b0:	f7f8 fc2c 	bl	610c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    d8b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d8b8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    d8ba:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    d8bc:	f7f9 fa20 	bl	6d00 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d8c0:	f7f9 f964 	bl	6b8c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    d8c4:	f7f7 fd88 	bl	53d8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    d8c8:	f240 1301 	movw	r3, #257	; 0x101
    d8cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    d8d0:	ab06      	add	r3, sp, #24
    d8d2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    d8d4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    d8d8:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    d8da:	f006 f899 	bl	13a10 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    d8de:	2001      	movs	r0, #1
    d8e0:	f7ff ff44 	bl	d76c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    d8e4:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    d8e6:	4d16      	ldr	r5, [pc, #88]	; (d940 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    d8e8:	f7ff ff40 	bl	d76c <z_sys_init_run_level>
	z_sched_init();
    d8ec:	f000 fe0e 	bl	e50c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d8f0:	4b14      	ldr	r3, [pc, #80]	; (d944 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    d8f2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d8f4:	9305      	str	r3, [sp, #20]
    d8f6:	2301      	movs	r3, #1
    d8f8:	4913      	ldr	r1, [pc, #76]	; (d948 <z_cstart+0xdc>)
    d8fa:	9400      	str	r4, [sp, #0]
    d8fc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d900:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d904:	463b      	mov	r3, r7
    d906:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d90a:	4628      	mov	r0, r5
    d90c:	f000 f85e 	bl	d9cc <z_setup_new_thread>
    d910:	7b6a      	ldrb	r2, [r5, #13]
    d912:	4606      	mov	r6, r0
    d914:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    d918:	4628      	mov	r0, r5
    d91a:	736a      	strb	r2, [r5, #13]
    d91c:	f006 f9d9 	bl	13cd2 <z_ready_thread>
	z_init_cpu(0);
    d920:	4620      	mov	r0, r4
    d922:	f7ff ff6b 	bl	d7fc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    d926:	463a      	mov	r2, r7
    d928:	4631      	mov	r1, r6
    d92a:	4628      	mov	r0, r5
    d92c:	f7f8 fd70 	bl	6410 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    d930:	20004c00 	.word	0x20004c00
    d934:	e000ed00 	.word	0xe000ed00
    d938:	200022b8 	.word	0x200022b8
    d93c:	0000d7b1 	.word	0x0000d7b1
    d940:	20001570 	.word	0x20001570
    d944:	000152bf 	.word	0x000152bf
    d948:	20004d80 	.word	0x20004d80

0000d94c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    d94c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    d94e:	4c06      	ldr	r4, [pc, #24]	; (d968 <init_mem_slab_module+0x1c>)
    d950:	4d06      	ldr	r5, [pc, #24]	; (d96c <init_mem_slab_module+0x20>)
	int rc = 0;
    d952:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    d954:	42ac      	cmp	r4, r5
    d956:	d300      	bcc.n	d95a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    d958:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    d95a:	4620      	mov	r0, r4
    d95c:	f006 f868 	bl	13a30 <create_free_list>
		if (rc < 0) {
    d960:	2800      	cmp	r0, #0
    d962:	dbf9      	blt.n	d958 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    d964:	341c      	adds	r4, #28
    d966:	e7f5      	b.n	d954 <init_mem_slab_module+0x8>
    d968:	200003bc 	.word	0x200003bc
    d96c:	200003bc 	.word	0x200003bc

0000d970 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    d970:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d972:	460c      	mov	r4, r1
	__asm__ volatile(
    d974:	f04f 0540 	mov.w	r5, #64	; 0x40
    d978:	f3ef 8111 	mrs	r1, BASEPRI
    d97c:	f385 8812 	msr	BASEPRI_MAX, r5
    d980:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    d984:	6945      	ldr	r5, [r0, #20]
    d986:	b15d      	cbz	r5, d9a0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    d988:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    d98a:	682b      	ldr	r3, [r5, #0]
    d98c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    d98e:	6983      	ldr	r3, [r0, #24]
    d990:	3301      	adds	r3, #1
    d992:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    d994:	2000      	movs	r0, #0
	__asm__ volatile(
    d996:	f381 8811 	msr	BASEPRI, r1
    d99a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    d99e:	e011      	b.n	d9c4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    d9a0:	ea52 0603 	orrs.w	r6, r2, r3
    d9a4:	d103      	bne.n	d9ae <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    d9a6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    d9a8:	f06f 000b 	mvn.w	r0, #11
    d9ac:	e7f3      	b.n	d996 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    d9ae:	e9cd 2300 	strd	r2, r3, [sp]
    d9b2:	4602      	mov	r2, r0
    d9b4:	3008      	adds	r0, #8
    d9b6:	f000 fcb3 	bl	e320 <z_pend_curr>
		if (result == 0) {
    d9ba:	b918      	cbnz	r0, d9c4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    d9bc:	4b02      	ldr	r3, [pc, #8]	; (d9c8 <k_mem_slab_alloc+0x58>)
    d9be:	689b      	ldr	r3, [r3, #8]
    d9c0:	695b      	ldr	r3, [r3, #20]
    d9c2:	6023      	str	r3, [r4, #0]
}
    d9c4:	b002      	add	sp, #8
    d9c6:	bd70      	pop	{r4, r5, r6, pc}
    d9c8:	200022b8 	.word	0x200022b8

0000d9cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    d9cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    d9d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    d9d2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    d9d4:	2604      	movs	r6, #4
    d9d6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    d9d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d9da:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    d9dc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    d9e0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d9e2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    d9e4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    d9ea:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d9ec:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    d9f0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    d9f2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    d9f6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    d9fa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    d9fc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    d9fe:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    da00:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    da04:	9202      	str	r2, [sp, #8]
    da06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    da08:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    da0a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    da0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    da0e:	9200      	str	r2, [sp, #0]
    da10:	4642      	mov	r2, r8
{
    da12:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    da14:	f7f8 fcca 	bl	63ac <arch_new_thread>
	if (!_current) {
    da18:	4b04      	ldr	r3, [pc, #16]	; (da2c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    da1a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    da1c:	689b      	ldr	r3, [r3, #8]
    da1e:	b103      	cbz	r3, da22 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    da20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    da22:	6723      	str	r3, [r4, #112]	; 0x70
}
    da24:	4640      	mov	r0, r8
    da26:	b004      	add	sp, #16
    da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da2c:	200022b8 	.word	0x200022b8

0000da30 <z_impl_k_thread_create>:
{
    da30:	b5f0      	push	{r4, r5, r6, r7, lr}
    da32:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    da34:	2500      	movs	r5, #0
    da36:	9505      	str	r5, [sp, #20]
    da38:	9d10      	ldr	r5, [sp, #64]	; 0x40
    da3a:	9504      	str	r5, [sp, #16]
    da3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    da3e:	9503      	str	r5, [sp, #12]
    da40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    da42:	9502      	str	r5, [sp, #8]
{
    da44:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    da48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    da4a:	9501      	str	r5, [sp, #4]
    da4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    da4e:	9500      	str	r5, [sp, #0]
{
    da50:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    da52:	f7ff ffbb 	bl	d9cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    da56:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    da5a:	bf08      	it	eq
    da5c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    da60:	d005      	beq.n	da6e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    da62:	ea56 0307 	orrs.w	r3, r6, r7
    da66:	d105      	bne.n	da74 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    da68:	4620      	mov	r0, r4
    da6a:	f000 fccf 	bl	e40c <z_sched_start>
}
    da6e:	4620      	mov	r0, r4
    da70:	b007      	add	sp, #28
    da72:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    da74:	4903      	ldr	r1, [pc, #12]	; (da84 <z_impl_k_thread_create+0x54>)
    da76:	463a      	mov	r2, r7
    da78:	4633      	mov	r3, r6
    da7a:	f104 0018 	add.w	r0, r4, #24
    da7e:	f000 fecd 	bl	e81c <z_add_timeout>
    da82:	e7f4      	b.n	da6e <z_impl_k_thread_create+0x3e>
    da84:	00013c3f 	.word	0x00013c3f

0000da88 <z_init_static_threads>:
{
    da88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da8c:	4c29      	ldr	r4, [pc, #164]	; (db34 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    da8e:	4d2a      	ldr	r5, [pc, #168]	; (db38 <z_init_static_threads+0xb0>)
{
    da90:	b087      	sub	sp, #28
    da92:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    da94:	42ae      	cmp	r6, r5
    da96:	f104 0430 	add.w	r4, r4, #48	; 0x30
    da9a:	d30f      	bcc.n	dabc <z_init_static_threads+0x34>
	k_sched_lock();
    da9c:	f000 fd06 	bl	e4ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    daa0:	4c24      	ldr	r4, [pc, #144]	; (db34 <z_init_static_threads+0xac>)
    daa2:	f8df 9098 	ldr.w	r9, [pc, #152]	; db3c <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    daa6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    daaa:	f240 37e7 	movw	r7, #999	; 0x3e7
    daae:	42ac      	cmp	r4, r5
    dab0:	d320      	bcc.n	daf4 <z_init_static_threads+0x6c>
}
    dab2:	b007      	add	sp, #28
    dab4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    dab8:	f000 bd0c 	b.w	e4d4 <k_sched_unlock>
		z_setup_new_thread(
    dabc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    dac0:	9305      	str	r3, [sp, #20]
    dac2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    dac6:	9304      	str	r3, [sp, #16]
    dac8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    dacc:	9303      	str	r3, [sp, #12]
    dace:	f854 3c18 	ldr.w	r3, [r4, #-24]
    dad2:	9302      	str	r3, [sp, #8]
    dad4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    dad8:	9301      	str	r3, [sp, #4]
    dada:	f854 3c20 	ldr.w	r3, [r4, #-32]
    dade:	9300      	str	r3, [sp, #0]
    dae0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    dae4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    dae8:	f7ff ff70 	bl	d9cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    daec:	f854 3c30 	ldr.w	r3, [r4, #-48]
    daf0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    daf2:	e7ce      	b.n	da92 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    daf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    daf6:	1c5a      	adds	r2, r3, #1
    daf8:	d00d      	beq.n	db16 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    dafa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dafe:	2100      	movs	r1, #0
    db00:	4638      	mov	r0, r7
    db02:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    db06:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    db0a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    db0e:	d104      	bne.n	db1a <z_init_static_threads+0x92>
	z_sched_start(thread);
    db10:	4640      	mov	r0, r8
    db12:	f000 fc7b 	bl	e40c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    db16:	3430      	adds	r4, #48	; 0x30
    db18:	e7c9      	b.n	daae <z_init_static_threads+0x26>
    db1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    db1e:	2300      	movs	r3, #0
    db20:	f7f2 fb3e 	bl	1a0 <__aeabi_uldivmod>
    db24:	4602      	mov	r2, r0
    db26:	460b      	mov	r3, r1
    db28:	f108 0018 	add.w	r0, r8, #24
    db2c:	4649      	mov	r1, r9
    db2e:	f000 fe75 	bl	e81c <z_add_timeout>
    db32:	e7f0      	b.n	db16 <z_init_static_threads+0x8e>
    db34:	00014398 	.word	0x00014398
    db38:	00014398 	.word	0x00014398
    db3c:	00013c3f 	.word	0x00013c3f

0000db40 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    db40:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    db42:	4c0b      	ldr	r4, [pc, #44]	; (db70 <idle+0x30>)
	return !z_sys_post_kernel;
    db44:	4d0b      	ldr	r5, [pc, #44]	; (db74 <idle+0x34>)
	__asm__ volatile(
    db46:	f04f 0240 	mov.w	r2, #64	; 0x40
    db4a:	f3ef 8311 	mrs	r3, BASEPRI
    db4e:	f382 8812 	msr	BASEPRI_MAX, r2
    db52:	f3bf 8f6f 	isb	sy
    db56:	f006 f95e 	bl	13e16 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    db5a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    db5c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    db5e:	b913      	cbnz	r3, db66 <idle+0x26>
	arch_cpu_idle();
    db60:	f7f8 fada 	bl	6118 <arch_cpu_idle>
}
    db64:	e7ef      	b.n	db46 <idle+0x6>
    db66:	f7f8 f90d 	bl	5d84 <pm_system_suspend>
    db6a:	2800      	cmp	r0, #0
    db6c:	d1eb      	bne.n	db46 <idle+0x6>
    db6e:	e7f7      	b.n	db60 <idle+0x20>
    db70:	200022b8 	.word	0x200022b8
    db74:	20003c28 	.word	0x20003c28

0000db78 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    db78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    db7c:	4604      	mov	r4, r0
    db7e:	4617      	mov	r7, r2
    db80:	461e      	mov	r6, r3
    db82:	f04f 0340 	mov.w	r3, #64	; 0x40
    db86:	f3ef 8811 	mrs	r8, BASEPRI
    db8a:	f383 8812 	msr	BASEPRI_MAX, r3
    db8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    db92:	68c3      	ldr	r3, [r0, #12]
    db94:	4a33      	ldr	r2, [pc, #204]	; (dc64 <z_impl_k_mutex_lock+0xec>)
    db96:	b17b      	cbz	r3, dbb8 <z_impl_k_mutex_lock+0x40>
    db98:	6880      	ldr	r0, [r0, #8]
    db9a:	6891      	ldr	r1, [r2, #8]
    db9c:	4288      	cmp	r0, r1
    db9e:	d019      	beq.n	dbd4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    dba0:	ea57 0306 	orrs.w	r3, r7, r6
    dba4:	d118      	bne.n	dbd8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    dba6:	f388 8811 	msr	BASEPRI, r8
    dbaa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    dbae:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    dbb2:	b002      	add	sp, #8
    dbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    dbb8:	6891      	ldr	r1, [r2, #8]
    dbba:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    dbbe:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    dbc0:	3301      	adds	r3, #1
    dbc2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    dbc4:	6893      	ldr	r3, [r2, #8]
    dbc6:	60a3      	str	r3, [r4, #8]
    dbc8:	f388 8811 	msr	BASEPRI, r8
    dbcc:	f3bf 8f6f 	isb	sy
		return 0;
    dbd0:	2000      	movs	r0, #0
    dbd2:	e7ee      	b.n	dbb2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    dbd4:	6921      	ldr	r1, [r4, #16]
    dbd6:	e7f2      	b.n	dbbe <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    dbd8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    dbdc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    dbe0:	4299      	cmp	r1, r3
    dbe2:	bfa8      	it	ge
    dbe4:	4619      	movge	r1, r3
    dbe6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    dbea:	4291      	cmp	r1, r2
    dbec:	bfb8      	it	lt
    dbee:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    dbf0:	428b      	cmp	r3, r1
    dbf2:	dd2e      	ble.n	dc52 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    dbf4:	f005 ff7d 	bl	13af2 <adjust_owner_prio.isra.0>
    dbf8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    dbfa:	e9cd 7600 	strd	r7, r6, [sp]
    dbfe:	481a      	ldr	r0, [pc, #104]	; (dc68 <z_impl_k_mutex_lock+0xf0>)
    dc00:	4622      	mov	r2, r4
    dc02:	4641      	mov	r1, r8
    dc04:	f000 fb8c 	bl	e320 <z_pend_curr>
	if (got_mutex == 0) {
    dc08:	2800      	cmp	r0, #0
    dc0a:	d0e1      	beq.n	dbd0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    dc0c:	f04f 0340 	mov.w	r3, #64	; 0x40
    dc10:	f3ef 8611 	mrs	r6, BASEPRI
    dc14:	f383 8812 	msr	BASEPRI_MAX, r3
    dc18:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    dc1c:	68a0      	ldr	r0, [r4, #8]
    dc1e:	b1d0      	cbz	r0, dc56 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    dc20:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    dc22:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dc24:	429c      	cmp	r4, r3
    dc26:	d00a      	beq.n	dc3e <z_impl_k_mutex_lock+0xc6>
    dc28:	b14b      	cbz	r3, dc3e <z_impl_k_mutex_lock+0xc6>
    dc2a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    dc2e:	4299      	cmp	r1, r3
    dc30:	bfa8      	it	ge
    dc32:	4619      	movge	r1, r3
    dc34:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    dc38:	4299      	cmp	r1, r3
    dc3a:	bfb8      	it	lt
    dc3c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    dc3e:	f005 ff58 	bl	13af2 <adjust_owner_prio.isra.0>
    dc42:	b140      	cbz	r0, dc56 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    dc44:	4808      	ldr	r0, [pc, #32]	; (dc68 <z_impl_k_mutex_lock+0xf0>)
    dc46:	4631      	mov	r1, r6
    dc48:	f000 fbce 	bl	e3e8 <z_reschedule>
	return -EAGAIN;
    dc4c:	f06f 000a 	mvn.w	r0, #10
    dc50:	e7af      	b.n	dbb2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    dc52:	2500      	movs	r5, #0
    dc54:	e7d1      	b.n	dbfa <z_impl_k_mutex_lock+0x82>
	if (resched) {
    dc56:	2d00      	cmp	r5, #0
    dc58:	d1f4      	bne.n	dc44 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    dc5a:	f386 8811 	msr	BASEPRI, r6
    dc5e:	f3bf 8f6f 	isb	sy
    dc62:	e7f3      	b.n	dc4c <z_impl_k_mutex_lock+0xd4>
    dc64:	200022b8 	.word	0x200022b8
    dc68:	20003c29 	.word	0x20003c29

0000dc6c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    dc6c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    dc6e:	6883      	ldr	r3, [r0, #8]
{
    dc70:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    dc72:	b36b      	cbz	r3, dcd0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    dc74:	4a19      	ldr	r2, [pc, #100]	; (dcdc <z_impl_k_mutex_unlock+0x70>)
    dc76:	6892      	ldr	r2, [r2, #8]
    dc78:	4293      	cmp	r3, r2
    dc7a:	d12c      	bne.n	dcd6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    dc7c:	68c3      	ldr	r3, [r0, #12]
    dc7e:	2b01      	cmp	r3, #1
    dc80:	d903      	bls.n	dc8a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    dc82:	3b01      	subs	r3, #1
    dc84:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    dc86:	2000      	movs	r0, #0
}
    dc88:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    dc8a:	f04f 0340 	mov.w	r3, #64	; 0x40
    dc8e:	f3ef 8511 	mrs	r5, BASEPRI
    dc92:	f383 8812 	msr	BASEPRI_MAX, r3
    dc96:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    dc9a:	6901      	ldr	r1, [r0, #16]
    dc9c:	6880      	ldr	r0, [r0, #8]
    dc9e:	f005 ff28 	bl	13af2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    dca2:	4620      	mov	r0, r4
    dca4:	f006 f84c 	bl	13d40 <z_unpend_first_thread>
	mutex->owner = new_owner;
    dca8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    dcaa:	b158      	cbz	r0, dcc4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    dcac:	f990 200e 	ldrsb.w	r2, [r0, #14]
    dcb0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    dcb2:	2200      	movs	r2, #0
    dcb4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    dcb6:	f006 f80c 	bl	13cd2 <z_ready_thread>
		z_reschedule(&lock, key);
    dcba:	4809      	ldr	r0, [pc, #36]	; (dce0 <z_impl_k_mutex_unlock+0x74>)
    dcbc:	4629      	mov	r1, r5
    dcbe:	f000 fb93 	bl	e3e8 <z_reschedule>
    dcc2:	e7e0      	b.n	dc86 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    dcc4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    dcc6:	f385 8811 	msr	BASEPRI, r5
    dcca:	f3bf 8f6f 	isb	sy
    dcce:	e7da      	b.n	dc86 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    dcd0:	f06f 0015 	mvn.w	r0, #21
    dcd4:	e7d8      	b.n	dc88 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    dcd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dcda:	e7d5      	b.n	dc88 <z_impl_k_mutex_unlock+0x1c>
    dcdc:	200022b8 	.word	0x200022b8
    dce0:	20003c29 	.word	0x20003c29

0000dce4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    dce4:	b538      	push	{r3, r4, r5, lr}
    dce6:	4604      	mov	r4, r0
	__asm__ volatile(
    dce8:	f04f 0340 	mov.w	r3, #64	; 0x40
    dcec:	f3ef 8511 	mrs	r5, BASEPRI
    dcf0:	f383 8812 	msr	BASEPRI_MAX, r3
    dcf4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    dcf8:	f006 f822 	bl	13d40 <z_unpend_first_thread>

	if (thread != NULL) {
    dcfc:	b148      	cbz	r0, dd12 <z_impl_k_sem_give+0x2e>
    dcfe:	2200      	movs	r2, #0
    dd00:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    dd02:	f005 ffe6 	bl	13cd2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    dd06:	4629      	mov	r1, r5
    dd08:	4805      	ldr	r0, [pc, #20]	; (dd20 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    dd0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    dd0e:	f000 bb6b 	b.w	e3e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    dd12:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    dd16:	429a      	cmp	r2, r3
    dd18:	bf18      	it	ne
    dd1a:	3301      	addne	r3, #1
    dd1c:	60a3      	str	r3, [r4, #8]
}
    dd1e:	e7f2      	b.n	dd06 <z_impl_k_sem_give+0x22>
    dd20:	20003c29 	.word	0x20003c29

0000dd24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    dd24:	b513      	push	{r0, r1, r4, lr}
    dd26:	f04f 0440 	mov.w	r4, #64	; 0x40
    dd2a:	f3ef 8111 	mrs	r1, BASEPRI
    dd2e:	f384 8812 	msr	BASEPRI_MAX, r4
    dd32:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    dd36:	6884      	ldr	r4, [r0, #8]
    dd38:	b144      	cbz	r4, dd4c <z_impl_k_sem_take+0x28>
		sem->count--;
    dd3a:	3c01      	subs	r4, #1
    dd3c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    dd3e:	f381 8811 	msr	BASEPRI, r1
    dd42:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    dd46:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    dd48:	b002      	add	sp, #8
    dd4a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    dd4c:	ea52 0403 	orrs.w	r4, r2, r3
    dd50:	d106      	bne.n	dd60 <z_impl_k_sem_take+0x3c>
    dd52:	f381 8811 	msr	BASEPRI, r1
    dd56:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    dd5a:	f06f 000f 	mvn.w	r0, #15
    dd5e:	e7f3      	b.n	dd48 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    dd60:	e9cd 2300 	strd	r2, r3, [sp]
    dd64:	4602      	mov	r2, r0
    dd66:	4802      	ldr	r0, [pc, #8]	; (dd70 <z_impl_k_sem_take+0x4c>)
    dd68:	f000 fada 	bl	e320 <z_pend_curr>
	return ret;
    dd6c:	e7ec      	b.n	dd48 <z_impl_k_sem_take+0x24>
    dd6e:	bf00      	nop
    dd70:	20003c29 	.word	0x20003c29

0000dd74 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    dd78:	4e4a      	ldr	r6, [pc, #296]	; (dea4 <work_queue_main+0x130>)
    dd7a:	b085      	sub	sp, #20
    dd7c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    dd7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    dd82:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    dd86:	f04f 0340 	mov.w	r3, #64	; 0x40
    dd8a:	f3ef 8711 	mrs	r7, BASEPRI
    dd8e:	f383 8812 	msr	BASEPRI_MAX, r3
    dd92:	f3bf 8f6f 	isb	sy
    dd96:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    dd9a:	b98d      	cbnz	r5, ddc0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    dd9c:	2102      	movs	r1, #2
    dd9e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    dda2:	f005 fec1 	bl	13b28 <flag_test_and_clear>
    dda6:	2800      	cmp	r0, #0
    dda8:	d143      	bne.n	de32 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    ddaa:	2300      	movs	r3, #0
    ddac:	e9cd 8900 	strd	r8, r9, [sp]
    ddb0:	9302      	str	r3, [sp, #8]
    ddb2:	f104 0288 	add.w	r2, r4, #136	; 0x88
    ddb6:	4639      	mov	r1, r7
    ddb8:	483b      	ldr	r0, [pc, #236]	; (dea8 <work_queue_main+0x134>)
    ddba:	f000 fcb5 	bl	e728 <z_sched_wait>
			continue;
    ddbe:	e7e2      	b.n	dd86 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ddc0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    ddc4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    ddc6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ddca:	4295      	cmp	r5, r2
	list->tail = node;
    ddcc:	bf08      	it	eq
    ddce:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    ddd2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ddd6:	f043 0302 	orr.w	r3, r3, #2
    ddda:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    ddde:	68eb      	ldr	r3, [r5, #12]
    dde0:	f023 0304 	bic.w	r3, r3, #4
    dde4:	f043 0301 	orr.w	r3, r3, #1
    dde8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    ddea:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    ddec:	f387 8811 	msr	BASEPRI, r7
    ddf0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    ddf4:	4628      	mov	r0, r5
    ddf6:	4798      	blx	r3
	__asm__ volatile(
    ddf8:	f04f 0340 	mov.w	r3, #64	; 0x40
    ddfc:	f3ef 8b11 	mrs	fp, BASEPRI
    de00:	f383 8812 	msr	BASEPRI_MAX, r3
    de04:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    de08:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    de0a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    de0c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    de10:	d419      	bmi.n	de46 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    de12:	60ea      	str	r2, [r5, #12]
    de14:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    de18:	f023 0302 	bic.w	r3, r3, #2
    de1c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    de20:	f38b 8811 	msr	BASEPRI, fp
    de24:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    de28:	05db      	lsls	r3, r3, #23
    de2a:	d4ac      	bmi.n	dd86 <work_queue_main+0x12>
	z_impl_k_yield();
    de2c:	f000 fb7a 	bl	e524 <z_impl_k_yield>
}
    de30:	e7a9      	b.n	dd86 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    de32:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    de36:	2200      	movs	r2, #0
    de38:	2101      	movs	r1, #1
    de3a:	4628      	mov	r0, r5
    de3c:	f005 ffb2 	bl	13da4 <z_sched_wake>
    de40:	2800      	cmp	r0, #0
    de42:	d1f8      	bne.n	de36 <work_queue_main+0xc2>
    de44:	e7b1      	b.n	ddaa <work_queue_main+0x36>
	return list->head;
    de46:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    de48:	f023 0303 	bic.w	r3, r3, #3
    de4c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    de4e:	2800      	cmp	r0, #0
    de50:	d0e0      	beq.n	de14 <work_queue_main+0xa0>
	return node->next;
    de52:	2700      	movs	r7, #0
    de54:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    de58:	463b      	mov	r3, r7
    de5a:	2800      	cmp	r0, #0
    de5c:	d0da      	beq.n	de14 <work_queue_main+0xa0>
		if (wc->work == work) {
    de5e:	6842      	ldr	r2, [r0, #4]
    de60:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    de62:	4601      	mov	r1, r0
		if (wc->work == work) {
    de64:	d10c      	bne.n	de80 <work_queue_main+0x10c>
	return node->next;
    de66:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    de68:	b99f      	cbnz	r7, de92 <work_queue_main+0x11e>
    de6a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    de6c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    de6e:	4282      	cmp	r2, r0
    de70:	d100      	bne.n	de74 <work_queue_main+0x100>
	list->tail = node;
    de72:	6071      	str	r1, [r6, #4]
	parent->next = child;
    de74:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    de78:	f7ff ff34 	bl	dce4 <z_impl_k_sem_give>
}
    de7c:	4639      	mov	r1, r7
    de7e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    de80:	f1ba 0f00 	cmp.w	sl, #0
    de84:	d00b      	beq.n	de9e <work_queue_main+0x12a>
	return node->next;
    de86:	f8da 2000 	ldr.w	r2, [sl]
    de8a:	4650      	mov	r0, sl
    de8c:	460f      	mov	r7, r1
    de8e:	4692      	mov	sl, r2
    de90:	e7e3      	b.n	de5a <work_queue_main+0xe6>
	parent->next = child;
    de92:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    de94:	6872      	ldr	r2, [r6, #4]
    de96:	4282      	cmp	r2, r0
	list->tail = node;
    de98:	bf08      	it	eq
    de9a:	6077      	streq	r7, [r6, #4]
}
    de9c:	e7ea      	b.n	de74 <work_queue_main+0x100>
    de9e:	4652      	mov	r2, sl
    dea0:	e7f3      	b.n	de8a <work_queue_main+0x116>
    dea2:	bf00      	nop
    dea4:	200022e0 	.word	0x200022e0
    dea8:	20003c29 	.word	0x20003c29

0000deac <submit_to_queue_locked>:
{
    deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    deae:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    deb0:	079a      	lsls	r2, r3, #30
{
    deb2:	4604      	mov	r4, r0
    deb4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    deb6:	f3c3 0640 	ubfx	r6, r3, #1, #1
    deba:	d42c      	bmi.n	df16 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    debc:	075b      	lsls	r3, r3, #29
    debe:	d41a      	bmi.n	def6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    dec0:	680b      	ldr	r3, [r1, #0]
    dec2:	b90b      	cbnz	r3, dec8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    dec4:	6883      	ldr	r3, [r0, #8]
    dec6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    dec8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    deca:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    decc:	bf44      	itt	mi
    dece:	68a3      	ldrmi	r3, [r4, #8]
    ded0:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    ded2:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    ded4:	bf4c      	ite	mi
    ded6:	2602      	movmi	r6, #2
		ret = 1;
    ded8:	2601      	movpl	r6, #1
	if (queue == NULL) {
    deda:	2d00      	cmp	r5, #0
    dedc:	d03a      	beq.n	df54 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    dede:	4b1f      	ldr	r3, [pc, #124]	; (df5c <submit_to_queue_locked+0xb0>)
    dee0:	689b      	ldr	r3, [r3, #8]
    dee2:	42ab      	cmp	r3, r5
    dee4:	d00a      	beq.n	defc <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    dee6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    deea:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    deec:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    def0:	d414      	bmi.n	df1c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    def2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    def6:	2300      	movs	r3, #0
    def8:	603b      	str	r3, [r7, #0]
	return ret;
    defa:	e025      	b.n	df48 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    defc:	f005 fde5 	bl	13aca <k_is_in_isr>
    df00:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    df04:	2800      	cmp	r0, #0
    df06:	d1f0      	bne.n	deea <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    df08:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    df0a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    df0e:	d5f0      	bpl.n	def2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    df10:	b152      	cbz	r2, df28 <submit_to_queue_locked+0x7c>
    df12:	075b      	lsls	r3, r3, #29
    df14:	d408      	bmi.n	df28 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    df16:	f06f 060f 	mvn.w	r6, #15
    df1a:	e7ec      	b.n	def6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    df1c:	2a00      	cmp	r2, #0
    df1e:	d1fa      	bne.n	df16 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    df20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    df24:	2b00      	cmp	r3, #0
    df26:	d1f6      	bne.n	df16 <submit_to_queue_locked+0x6a>
	parent->next = child;
    df28:	2300      	movs	r3, #0
    df2a:	6023      	str	r3, [r4, #0]
	return list->tail;
    df2c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    df30:	b963      	cbnz	r3, df4c <submit_to_queue_locked+0xa0>
	list->head = node;
    df32:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    df36:	4628      	mov	r0, r5
    df38:	f005 fe0f 	bl	13b5a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    df3c:	68e3      	ldr	r3, [r4, #12]
    df3e:	f043 0304 	orr.w	r3, r3, #4
    df42:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    df44:	683b      	ldr	r3, [r7, #0]
    df46:	60a3      	str	r3, [r4, #8]
}
    df48:	4630      	mov	r0, r6
    df4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    df4c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    df4e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    df52:	e7f0      	b.n	df36 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    df54:	f06f 0615 	mvn.w	r6, #21
    df58:	e7cd      	b.n	def6 <submit_to_queue_locked+0x4a>
    df5a:	bf00      	nop
    df5c:	200022b8 	.word	0x200022b8

0000df60 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    df60:	b5f0      	push	{r4, r5, r6, r7, lr}
    df62:	b089      	sub	sp, #36	; 0x24
    df64:	4604      	mov	r4, r0
	list->head = NULL;
    df66:	2000      	movs	r0, #0
	list->tail = NULL;
    df68:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    df6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    df6e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    df72:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    df76:	f104 0090 	add.w	r0, r4, #144	; 0x90
    df7a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    df7e:	b31d      	cbz	r5, dfc8 <k_work_queue_start+0x68>
    df80:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    df82:	2800      	cmp	r0, #0
    df84:	f240 1001 	movw	r0, #257	; 0x101
    df88:	bf08      	it	eq
    df8a:	2001      	moveq	r0, #1
	*flagp = flags;
    df8c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    df90:	2000      	movs	r0, #0
    df92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    df96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    df9a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    df9e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    dfa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    dfa6:	4b09      	ldr	r3, [pc, #36]	; (dfcc <k_work_queue_start+0x6c>)
    dfa8:	9400      	str	r4, [sp, #0]
    dfaa:	4620      	mov	r0, r4
    dfac:	f7ff fd40 	bl	da30 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    dfb0:	b125      	cbz	r5, dfbc <k_work_queue_start+0x5c>
    dfb2:	6829      	ldr	r1, [r5, #0]
    dfb4:	b111      	cbz	r1, dfbc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    dfb6:	4620      	mov	r0, r4
    dfb8:	f005 fd8d 	bl	13ad6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    dfbc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    dfbe:	b009      	add	sp, #36	; 0x24
    dfc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    dfc4:	f005 bd8c 	b.w	13ae0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    dfc8:	2001      	movs	r0, #1
    dfca:	e7df      	b.n	df8c <k_work_queue_start+0x2c>
    dfcc:	0000dd75 	.word	0x0000dd75

0000dfd0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    dfd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dfd2:	9001      	str	r0, [sp, #4]
    dfd4:	4608      	mov	r0, r1
	__asm__ volatile(
    dfd6:	f04f 0140 	mov.w	r1, #64	; 0x40
    dfda:	f3ef 8411 	mrs	r4, BASEPRI
    dfde:	f381 8812 	msr	BASEPRI_MAX, r1
    dfe2:	f3bf 8f6f 	isb	sy
	return *flagp;
    dfe6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    dfe8:	f011 0f0e 	tst.w	r1, #14
    dfec:	d116      	bne.n	e01c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    dfee:	ea53 0502 	orrs.w	r5, r3, r2
    dff2:	d108      	bne.n	e006 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    dff4:	a901      	add	r1, sp, #4
    dff6:	f7ff ff59 	bl	deac <submit_to_queue_locked>
	__asm__ volatile(
    dffa:	f384 8811 	msr	BASEPRI, r4
    dffe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    e002:	b003      	add	sp, #12
    e004:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    e006:	f041 0108 	orr.w	r1, r1, #8
    e00a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    e00c:	9901      	ldr	r1, [sp, #4]
    e00e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    e010:	3010      	adds	r0, #16
    e012:	4903      	ldr	r1, [pc, #12]	; (e020 <k_work_schedule_for_queue+0x50>)
    e014:	f000 fc02 	bl	e81c <z_add_timeout>
	return ret;
    e018:	2001      	movs	r0, #1
    e01a:	e7ee      	b.n	dffa <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    e01c:	2000      	movs	r0, #0
    e01e:	e7ec      	b.n	dffa <k_work_schedule_for_queue+0x2a>
    e020:	00013b69 	.word	0x00013b69

0000e024 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    e024:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    e026:	4801      	ldr	r0, [pc, #4]	; (e02c <k_work_schedule+0x8>)
    e028:	f7ff bfd2 	b.w	dfd0 <k_work_schedule_for_queue>
    e02c:	200015f8 	.word	0x200015f8

0000e030 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
    e030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e032:	460c      	mov	r4, r1
    e034:	9001      	str	r0, [sp, #4]
    e036:	4616      	mov	r6, r2
    e038:	461d      	mov	r5, r3
	__asm__ volatile(
    e03a:	f04f 0340 	mov.w	r3, #64	; 0x40
    e03e:	f3ef 8711 	mrs	r7, BASEPRI
    e042:	f383 8812 	msr	BASEPRI_MAX, r3
    e046:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
    e04a:	4608      	mov	r0, r1
    e04c:	f005 fd77 	bl	13b3e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    e050:	ea55 0306 	orrs.w	r3, r5, r6
    e054:	d109      	bne.n	e06a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
    e056:	a901      	add	r1, sp, #4
    e058:	4620      	mov	r0, r4
    e05a:	f7ff ff27 	bl	deac <submit_to_queue_locked>
	__asm__ volatile(
    e05e:	f387 8811 	msr	BASEPRI, r7
    e062:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    e066:	b003      	add	sp, #12
    e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
    e06a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    e06c:	4906      	ldr	r1, [pc, #24]	; (e088 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
    e06e:	f043 0308 	orr.w	r3, r3, #8
    e072:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
    e074:	9b01      	ldr	r3, [sp, #4]
    e076:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    e078:	f104 0010 	add.w	r0, r4, #16
    e07c:	4632      	mov	r2, r6
    e07e:	462b      	mov	r3, r5
    e080:	f000 fbcc 	bl	e81c <z_add_timeout>
	return ret;
    e084:	2001      	movs	r0, #1
    e086:	e7ea      	b.n	e05e <k_work_reschedule_for_queue+0x2e>
    e088:	00013b69 	.word	0x00013b69

0000e08c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    e08c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    e08e:	4801      	ldr	r0, [pc, #4]	; (e094 <k_work_reschedule+0x8>)
    e090:	f7ff bfce 	b.w	e030 <k_work_reschedule_for_queue>
    e094:	200015f8 	.word	0x200015f8

0000e098 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    e098:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    e09a:	4d07      	ldr	r5, [pc, #28]	; (e0b8 <z_reset_time_slice+0x20>)
    e09c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    e09e:	b154      	cbz	r4, e0b6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    e0a0:	f7f9 ff26 	bl	7ef0 <sys_clock_elapsed>
    e0a4:	4b05      	ldr	r3, [pc, #20]	; (e0bc <z_reset_time_slice+0x24>)
    e0a6:	4404      	add	r4, r0
    e0a8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    e0aa:	6828      	ldr	r0, [r5, #0]
    e0ac:	2100      	movs	r1, #0
	}
}
    e0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    e0b2:	f005 bec0 	b.w	13e36 <z_set_timeout_expiry>
}
    e0b6:	bd38      	pop	{r3, r4, r5, pc}
    e0b8:	200022f0 	.word	0x200022f0
    e0bc:	200022b8 	.word	0x200022b8

0000e0c0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    e0c0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    e0c2:	4d0d      	ldr	r5, [pc, #52]	; (e0f8 <update_cache+0x38>)
    e0c4:	462b      	mov	r3, r5
    e0c6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e0ca:	429c      	cmp	r4, r3
    e0cc:	d000      	beq.n	e0d0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    e0ce:	b904      	cbnz	r4, e0d2 <update_cache+0x12>
    e0d0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    e0d2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    e0d4:	b938      	cbnz	r0, e0e6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    e0d6:	7b5a      	ldrb	r2, [r3, #13]
    e0d8:	06d2      	lsls	r2, r2, #27
    e0da:	d104      	bne.n	e0e6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    e0dc:	69a2      	ldr	r2, [r4, #24]
    e0de:	b912      	cbnz	r2, e0e6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    e0e0:	89da      	ldrh	r2, [r3, #14]
    e0e2:	2a7f      	cmp	r2, #127	; 0x7f
    e0e4:	d805      	bhi.n	e0f2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    e0e6:	429c      	cmp	r4, r3
    e0e8:	d002      	beq.n	e0f0 <update_cache+0x30>
			z_reset_time_slice(thread);
    e0ea:	4620      	mov	r0, r4
    e0ec:	f7ff ffd4 	bl	e098 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    e0f0:	4623      	mov	r3, r4
    e0f2:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    e0f4:	bd38      	pop	{r3, r4, r5, pc}
    e0f6:	bf00      	nop
    e0f8:	200022b8 	.word	0x200022b8

0000e0fc <move_thread_to_end_of_prio_q>:
{
    e0fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    e0fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    e102:	7b43      	ldrb	r3, [r0, #13]
    e104:	2a00      	cmp	r2, #0
{
    e106:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    e108:	da04      	bge.n	e114 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e10e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    e110:	f005 fd83 	bl	13c1a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    e114:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    e116:	4a15      	ldr	r2, [pc, #84]	; (e16c <move_thread_to_end_of_prio_q+0x70>)
    e118:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e11c:	4610      	mov	r0, r2
    e11e:	734b      	strb	r3, [r1, #13]
    e120:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    e124:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e126:	4283      	cmp	r3, r0
    e128:	bf08      	it	eq
    e12a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e12c:	b923      	cbnz	r3, e138 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    e12e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    e132:	6021      	str	r1, [r4, #0]
	list->tail = node;
    e134:	6251      	str	r1, [r2, #36]	; 0x24
}
    e136:	e00c      	b.n	e152 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    e138:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    e13c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    e140:	42b5      	cmp	r5, r6
    e142:	d00e      	beq.n	e162 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e144:	42ae      	cmp	r6, r5
    e146:	dd0c      	ble.n	e162 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    e148:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    e14a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    e14e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    e150:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    e152:	6890      	ldr	r0, [r2, #8]
    e154:	1a43      	subs	r3, r0, r1
    e156:	4258      	negs	r0, r3
}
    e158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    e15c:	4158      	adcs	r0, r3
    e15e:	f7ff bfaf 	b.w	e0c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    e162:	429c      	cmp	r4, r3
    e164:	d0e3      	beq.n	e12e <move_thread_to_end_of_prio_q+0x32>
    e166:	681b      	ldr	r3, [r3, #0]
    e168:	e7e0      	b.n	e12c <move_thread_to_end_of_prio_q+0x30>
    e16a:	bf00      	nop
    e16c:	200022b8 	.word	0x200022b8

0000e170 <ready_thread>:
{
    e170:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    e172:	f990 300d 	ldrsb.w	r3, [r0, #13]
    e176:	7b42      	ldrb	r2, [r0, #13]
    e178:	2b00      	cmp	r3, #0
    e17a:	db29      	blt.n	e1d0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e17c:	06d3      	lsls	r3, r2, #27
    e17e:	d127      	bne.n	e1d0 <ready_thread+0x60>
	return node->next != NULL;
    e180:	6983      	ldr	r3, [r0, #24]
    e182:	bb2b      	cbnz	r3, e1d0 <ready_thread+0x60>
	return list->head == list;
    e184:	4913      	ldr	r1, [pc, #76]	; (e1d4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    e186:	f062 027f 	orn	r2, r2, #127	; 0x7f
    e18a:	7342      	strb	r2, [r0, #13]
    e18c:	460a      	mov	r2, r1
    e18e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e192:	4294      	cmp	r4, r2
    e194:	bf18      	it	ne
    e196:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    e198:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e19a:	b923      	cbnz	r3, e1a6 <ready_thread+0x36>
	node->prev = tail;
    e19c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    e1a0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    e1a2:	6248      	str	r0, [r1, #36]	; 0x24
}
    e1a4:	e00c      	b.n	e1c0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    e1a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    e1aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    e1ae:	42b5      	cmp	r5, r6
    e1b0:	d00a      	beq.n	e1c8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e1b2:	42ae      	cmp	r6, r5
    e1b4:	dd08      	ble.n	e1c8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    e1b6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e1b8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    e1bc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    e1be:	6058      	str	r0, [r3, #4]
}
    e1c0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    e1c2:	2000      	movs	r0, #0
    e1c4:	f7ff bf7c 	b.w	e0c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    e1c8:	42a3      	cmp	r3, r4
    e1ca:	d0e7      	beq.n	e19c <ready_thread+0x2c>
    e1cc:	681b      	ldr	r3, [r3, #0]
    e1ce:	e7e4      	b.n	e19a <ready_thread+0x2a>
}
    e1d0:	bc70      	pop	{r4, r5, r6}
    e1d2:	4770      	bx	lr
    e1d4:	200022b8 	.word	0x200022b8

0000e1d8 <unready_thread>:
{
    e1d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    e1da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    e1de:	7b43      	ldrb	r3, [r0, #13]
    e1e0:	2a00      	cmp	r2, #0
{
    e1e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    e1e4:	da04      	bge.n	e1f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e1ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e1ec:	f005 fd15 	bl	13c1a <sys_dlist_remove>
	update_cache(thread == _current);
    e1f0:	4b04      	ldr	r3, [pc, #16]	; (e204 <unready_thread+0x2c>)
    e1f2:	6898      	ldr	r0, [r3, #8]
    e1f4:	1a43      	subs	r3, r0, r1
    e1f6:	4258      	negs	r0, r3
    e1f8:	4158      	adcs	r0, r3
}
    e1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    e1fe:	f7ff bf5f 	b.w	e0c0 <update_cache>
    e202:	bf00      	nop
    e204:	200022b8 	.word	0x200022b8

0000e208 <pend_locked>:
{
    e208:	b570      	push	{r4, r5, r6, lr}
    e20a:	4615      	mov	r5, r2
    e20c:	461c      	mov	r4, r3
    e20e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    e210:	f005 fd37 	bl	13c82 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e214:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e218:	bf08      	it	eq
    e21a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    e21e:	d008      	beq.n	e232 <pend_locked+0x2a>
    e220:	462a      	mov	r2, r5
    e222:	4623      	mov	r3, r4
    e224:	f106 0018 	add.w	r0, r6, #24
    e228:	4902      	ldr	r1, [pc, #8]	; (e234 <pend_locked+0x2c>)
}
    e22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e22e:	f000 baf5 	b.w	e81c <z_add_timeout>
    e232:	bd70      	pop	{r4, r5, r6, pc}
    e234:	00013c3f 	.word	0x00013c3f

0000e238 <k_sched_time_slice_set>:
{
    e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e23a:	4604      	mov	r4, r0
    e23c:	460d      	mov	r5, r1
	__asm__ volatile(
    e23e:	f04f 0340 	mov.w	r3, #64	; 0x40
    e242:	f3ef 8711 	mrs	r7, BASEPRI
    e246:	f383 8812 	msr	BASEPRI_MAX, r3
    e24a:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    e24e:	2600      	movs	r6, #0
    e250:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    e254:	f240 30e7 	movw	r0, #999	; 0x3e7
    e258:	4631      	mov	r1, r6
    e25a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e25e:	2300      	movs	r3, #0
    e260:	fbe4 010c 	umlal	r0, r1, r4, ip
    e264:	f7f1 ff9c 	bl	1a0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    e268:	42b4      	cmp	r4, r6
    e26a:	dd02      	ble.n	e272 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    e26c:	2802      	cmp	r0, #2
    e26e:	bfb8      	it	lt
    e270:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    e272:	4a07      	ldr	r2, [pc, #28]	; (e290 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    e274:	4b07      	ldr	r3, [pc, #28]	; (e294 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    e276:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    e278:	4a07      	ldr	r2, [pc, #28]	; (e298 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    e27a:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    e27c:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    e27e:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    e280:	f7ff ff0a 	bl	e098 <z_reset_time_slice>
	__asm__ volatile(
    e284:	f387 8811 	msr	BASEPRI, r7
    e288:	f3bf 8f6f 	isb	sy
}
    e28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e28e:	bf00      	nop
    e290:	200022f0 	.word	0x200022f0
    e294:	200022b8 	.word	0x200022b8
    e298:	200022ec 	.word	0x200022ec

0000e29c <z_time_slice>:
{
    e29c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e29e:	f04f 0340 	mov.w	r3, #64	; 0x40
    e2a2:	f3ef 8511 	mrs	r5, BASEPRI
    e2a6:	f383 8812 	msr	BASEPRI_MAX, r3
    e2aa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    e2ae:	4b17      	ldr	r3, [pc, #92]	; (e30c <z_time_slice+0x70>)
    e2b0:	4a17      	ldr	r2, [pc, #92]	; (e310 <z_time_slice+0x74>)
    e2b2:	689c      	ldr	r4, [r3, #8]
    e2b4:	6811      	ldr	r1, [r2, #0]
    e2b6:	428c      	cmp	r4, r1
    e2b8:	d107      	bne.n	e2ca <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    e2ba:	4620      	mov	r0, r4
    e2bc:	f7ff feec 	bl	e098 <z_reset_time_slice>
	__asm__ volatile(
    e2c0:	f385 8811 	msr	BASEPRI, r5
    e2c4:	f3bf 8f6f 	isb	sy
}
    e2c8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    e2ca:	2100      	movs	r1, #0
    e2cc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    e2ce:	4a11      	ldr	r2, [pc, #68]	; (e314 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    e2d0:	6812      	ldr	r2, [r2, #0]
    e2d2:	b1c2      	cbz	r2, e306 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    e2d4:	89e2      	ldrh	r2, [r4, #14]
    e2d6:	2a7f      	cmp	r2, #127	; 0x7f
    e2d8:	d815      	bhi.n	e306 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    e2da:	7b62      	ldrb	r2, [r4, #13]
    e2dc:	06d2      	lsls	r2, r2, #27
    e2de:	d112      	bne.n	e306 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    e2e0:	4a0d      	ldr	r2, [pc, #52]	; (e318 <z_time_slice+0x7c>)
    e2e2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    e2e6:	6812      	ldr	r2, [r2, #0]
    e2e8:	4291      	cmp	r1, r2
    e2ea:	db0c      	blt.n	e306 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    e2ec:	4a0b      	ldr	r2, [pc, #44]	; (e31c <z_time_slice+0x80>)
    e2ee:	4294      	cmp	r4, r2
    e2f0:	d009      	beq.n	e306 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    e2f2:	691a      	ldr	r2, [r3, #16]
    e2f4:	4282      	cmp	r2, r0
    e2f6:	dc03      	bgt.n	e300 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    e2f8:	4620      	mov	r0, r4
    e2fa:	f7ff feff 	bl	e0fc <move_thread_to_end_of_prio_q>
    e2fe:	e7dc      	b.n	e2ba <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    e300:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    e302:	611a      	str	r2, [r3, #16]
    e304:	e7dc      	b.n	e2c0 <z_time_slice+0x24>
    e306:	2200      	movs	r2, #0
    e308:	e7fb      	b.n	e302 <z_time_slice+0x66>
    e30a:	bf00      	nop
    e30c:	200022b8 	.word	0x200022b8
    e310:	200022e8 	.word	0x200022e8
    e314:	200022f0 	.word	0x200022f0
    e318:	200022ec 	.word	0x200022ec
    e31c:	200014f0 	.word	0x200014f0

0000e320 <z_pend_curr>:
{
    e320:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    e322:	480c      	ldr	r0, [pc, #48]	; (e354 <z_pend_curr+0x34>)
    e324:	4d0c      	ldr	r5, [pc, #48]	; (e358 <z_pend_curr+0x38>)
    e326:	6886      	ldr	r6, [r0, #8]
    e328:	602e      	str	r6, [r5, #0]
{
    e32a:	460c      	mov	r4, r1
    e32c:	4611      	mov	r1, r2
    e32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    e332:	f04f 0640 	mov.w	r6, #64	; 0x40
    e336:	f3ef 8511 	mrs	r5, BASEPRI
    e33a:	f386 8812 	msr	BASEPRI_MAX, r6
    e33e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    e342:	6880      	ldr	r0, [r0, #8]
    e344:	f7ff ff60 	bl	e208 <pend_locked>
	ret = arch_swap(key);
    e348:	4620      	mov	r0, r4
}
    e34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e34e:	f7f7 bfd9 	b.w	6304 <arch_swap>
    e352:	bf00      	nop
    e354:	200022b8 	.word	0x200022b8
    e358:	200022e8 	.word	0x200022e8

0000e35c <z_set_prio>:
{
    e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e35e:	4604      	mov	r4, r0
    e360:	f04f 0340 	mov.w	r3, #64	; 0x40
    e364:	f3ef 8611 	mrs	r6, BASEPRI
    e368:	f383 8812 	msr	BASEPRI_MAX, r3
    e36c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    e370:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e372:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    e374:	b249      	sxtb	r1, r1
    e376:	d119      	bne.n	e3ac <z_set_prio+0x50>
	return node->next != NULL;
    e378:	6985      	ldr	r5, [r0, #24]
    e37a:	b9bd      	cbnz	r5, e3ac <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e380:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e382:	f005 fc4a 	bl	13c1a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    e386:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    e388:	4a16      	ldr	r2, [pc, #88]	; (e3e4 <z_set_prio+0x88>)
				thread->base.prio = prio;
    e38a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    e38c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e390:	7343      	strb	r3, [r0, #13]
    e392:	4613      	mov	r3, r2
    e394:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e398:	4298      	cmp	r0, r3
    e39a:	bf18      	it	ne
    e39c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    e39e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e3a0:	b95d      	cbnz	r5, e3ba <z_set_prio+0x5e>
	node->prev = tail;
    e3a2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    e3a6:	6004      	str	r4, [r0, #0]
	list->tail = node;
    e3a8:	6254      	str	r4, [r2, #36]	; 0x24
}
    e3aa:	e011      	b.n	e3d0 <z_set_prio+0x74>
			thread->base.prio = prio;
    e3ac:	73a1      	strb	r1, [r4, #14]
    e3ae:	2000      	movs	r0, #0
	__asm__ volatile(
    e3b0:	f386 8811 	msr	BASEPRI, r6
    e3b4:	f3bf 8f6f 	isb	sy
}
    e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    e3ba:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    e3be:	42b9      	cmp	r1, r7
    e3c0:	d00b      	beq.n	e3da <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e3c2:	428f      	cmp	r7, r1
    e3c4:	dd09      	ble.n	e3da <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    e3c6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    e3c8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    e3cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e3ce:	606c      	str	r4, [r5, #4]
			update_cache(1);
    e3d0:	2001      	movs	r0, #1
    e3d2:	f7ff fe75 	bl	e0c0 <update_cache>
    e3d6:	2001      	movs	r0, #1
    e3d8:	e7ea      	b.n	e3b0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    e3da:	42a8      	cmp	r0, r5
    e3dc:	d0e1      	beq.n	e3a2 <z_set_prio+0x46>
    e3de:	682d      	ldr	r5, [r5, #0]
    e3e0:	e7de      	b.n	e3a0 <z_set_prio+0x44>
    e3e2:	bf00      	nop
    e3e4:	200022b8 	.word	0x200022b8

0000e3e8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e3e8:	b949      	cbnz	r1, e3fe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e3ea:	f3ef 8005 	mrs	r0, IPSR
    e3ee:	b930      	cbnz	r0, e3fe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    e3f0:	4b05      	ldr	r3, [pc, #20]	; (e408 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    e3f2:	69da      	ldr	r2, [r3, #28]
    e3f4:	689b      	ldr	r3, [r3, #8]
    e3f6:	429a      	cmp	r2, r3
    e3f8:	d001      	beq.n	e3fe <z_reschedule+0x16>
    e3fa:	f7f7 bf83 	b.w	6304 <arch_swap>
    e3fe:	f381 8811 	msr	BASEPRI, r1
    e402:	f3bf 8f6f 	isb	sy
}
    e406:	4770      	bx	lr
    e408:	200022b8 	.word	0x200022b8

0000e40c <z_sched_start>:
{
    e40c:	b510      	push	{r4, lr}
	__asm__ volatile(
    e40e:	f04f 0240 	mov.w	r2, #64	; 0x40
    e412:	f3ef 8411 	mrs	r4, BASEPRI
    e416:	f382 8812 	msr	BASEPRI_MAX, r2
    e41a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    e41e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    e420:	0751      	lsls	r1, r2, #29
    e422:	d404      	bmi.n	e42e <z_sched_start+0x22>
	__asm__ volatile(
    e424:	f384 8811 	msr	BASEPRI, r4
    e428:	f3bf 8f6f 	isb	sy
}
    e42c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e42e:	f022 0204 	bic.w	r2, r2, #4
    e432:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    e434:	f7ff fe9c 	bl	e170 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    e438:	4621      	mov	r1, r4
    e43a:	4802      	ldr	r0, [pc, #8]	; (e444 <z_sched_start+0x38>)
}
    e43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    e440:	f7ff bfd2 	b.w	e3e8 <z_reschedule>
    e444:	20003c29 	.word	0x20003c29

0000e448 <z_impl_k_thread_suspend>:
{
    e448:	b570      	push	{r4, r5, r6, lr}
    e44a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    e44c:	3018      	adds	r0, #24
    e44e:	f005 fccc 	bl	13dea <z_abort_timeout>
	__asm__ volatile(
    e452:	f04f 0340 	mov.w	r3, #64	; 0x40
    e456:	f3ef 8611 	mrs	r6, BASEPRI
    e45a:	f383 8812 	msr	BASEPRI_MAX, r3
    e45e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    e462:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    e466:	7b63      	ldrb	r3, [r4, #13]
    e468:	2a00      	cmp	r2, #0
    e46a:	da05      	bge.n	e478 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e46c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e470:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e472:	4620      	mov	r0, r4
    e474:	f005 fbd1 	bl	13c1a <sys_dlist_remove>
		update_cache(thread == _current);
    e478:	4d0b      	ldr	r5, [pc, #44]	; (e4a8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e47a:	7b63      	ldrb	r3, [r4, #13]
    e47c:	68a8      	ldr	r0, [r5, #8]
    e47e:	f043 0310 	orr.w	r3, r3, #16
    e482:	7363      	strb	r3, [r4, #13]
    e484:	1b03      	subs	r3, r0, r4
    e486:	4258      	negs	r0, r3
    e488:	4158      	adcs	r0, r3
    e48a:	f7ff fe19 	bl	e0c0 <update_cache>
	__asm__ volatile(
    e48e:	f386 8811 	msr	BASEPRI, r6
    e492:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    e496:	68ab      	ldr	r3, [r5, #8]
    e498:	42a3      	cmp	r3, r4
    e49a:	d103      	bne.n	e4a4 <z_impl_k_thread_suspend+0x5c>
}
    e49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    e4a0:	f005 bc76 	b.w	13d90 <z_reschedule_unlocked>
}
    e4a4:	bd70      	pop	{r4, r5, r6, pc}
    e4a6:	bf00      	nop
    e4a8:	200022b8 	.word	0x200022b8

0000e4ac <k_sched_lock>:
	__asm__ volatile(
    e4ac:	f04f 0340 	mov.w	r3, #64	; 0x40
    e4b0:	f3ef 8111 	mrs	r1, BASEPRI
    e4b4:	f383 8812 	msr	BASEPRI_MAX, r3
    e4b8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    e4bc:	4b04      	ldr	r3, [pc, #16]	; (e4d0 <k_sched_lock+0x24>)
    e4be:	689a      	ldr	r2, [r3, #8]
    e4c0:	7bd3      	ldrb	r3, [r2, #15]
    e4c2:	3b01      	subs	r3, #1
    e4c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    e4c6:	f381 8811 	msr	BASEPRI, r1
    e4ca:	f3bf 8f6f 	isb	sy
}
    e4ce:	4770      	bx	lr
    e4d0:	200022b8 	.word	0x200022b8

0000e4d4 <k_sched_unlock>:
{
    e4d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    e4d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    e4da:	f3ef 8411 	mrs	r4, BASEPRI
    e4de:	f383 8812 	msr	BASEPRI_MAX, r3
    e4e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    e4e6:	4b08      	ldr	r3, [pc, #32]	; (e508 <k_sched_unlock+0x34>)
    e4e8:	689a      	ldr	r2, [r3, #8]
    e4ea:	7bd3      	ldrb	r3, [r2, #15]
    e4ec:	3301      	adds	r3, #1
    e4ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    e4f0:	2000      	movs	r0, #0
    e4f2:	f7ff fde5 	bl	e0c0 <update_cache>
	__asm__ volatile(
    e4f6:	f384 8811 	msr	BASEPRI, r4
    e4fa:	f3bf 8f6f 	isb	sy
}
    e4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    e502:	f005 bc45 	b.w	13d90 <z_reschedule_unlocked>
    e506:	bf00      	nop
    e508:	200022b8 	.word	0x200022b8

0000e50c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    e50c:	4b04      	ldr	r3, [pc, #16]	; (e520 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e50e:	2100      	movs	r1, #0
    e510:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    e514:	e9c3 2208 	strd	r2, r2, [r3, #32]
    e518:	4608      	mov	r0, r1
    e51a:	f7ff be8d 	b.w	e238 <k_sched_time_slice_set>
    e51e:	bf00      	nop
    e520:	200022b8 	.word	0x200022b8

0000e524 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    e526:	f04f 0340 	mov.w	r3, #64	; 0x40
    e52a:	f3ef 8511 	mrs	r5, BASEPRI
    e52e:	f383 8812 	msr	BASEPRI_MAX, r3
    e532:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    e536:	4919      	ldr	r1, [pc, #100]	; (e59c <z_impl_k_yield+0x78>)
    e538:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e53a:	7b43      	ldrb	r3, [r0, #13]
    e53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e540:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e542:	f005 fb6a 	bl	13c1a <sys_dlist_remove>
	}
	queue_thread(_current);
    e546:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    e548:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    e54a:	4608      	mov	r0, r1
    e54c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    e550:	735a      	strb	r2, [r3, #13]
    e552:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    e556:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e558:	4282      	cmp	r2, r0
    e55a:	bf08      	it	eq
    e55c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e55e:	b922      	cbnz	r2, e56a <z_impl_k_yield+0x46>
	node->prev = tail;
    e560:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    e564:	6023      	str	r3, [r4, #0]
	list->tail = node;
    e566:	624b      	str	r3, [r1, #36]	; 0x24
}
    e568:	e00c      	b.n	e584 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    e56a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    e56e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    e572:	42be      	cmp	r6, r7
    e574:	d00e      	beq.n	e594 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e576:	42b7      	cmp	r7, r6
    e578:	dd0c      	ble.n	e594 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    e57a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    e57c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    e580:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    e582:	6053      	str	r3, [r2, #4]
	update_cache(1);
    e584:	2001      	movs	r0, #1
    e586:	f7ff fd9b 	bl	e0c0 <update_cache>
    e58a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    e58c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e590:	f7f7 beb8 	b.w	6304 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    e594:	42a2      	cmp	r2, r4
    e596:	d0e3      	beq.n	e560 <z_impl_k_yield+0x3c>
    e598:	6812      	ldr	r2, [r2, #0]
    e59a:	e7e0      	b.n	e55e <z_impl_k_yield+0x3a>
    e59c:	200022b8 	.word	0x200022b8

0000e5a0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    e5a0:	ea50 0301 	orrs.w	r3, r0, r1
{
    e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5a8:	4605      	mov	r5, r0
    e5aa:	460e      	mov	r6, r1
	if (ticks == 0) {
    e5ac:	d103      	bne.n	e5b6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    e5ae:	f7ff ffb9 	bl	e524 <z_impl_k_yield>
		k_yield();
		return 0;
    e5b2:	2000      	movs	r0, #0
    e5b4:	e02c      	b.n	e610 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    e5b6:	1c83      	adds	r3, r0, #2
    e5b8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    e5bc:	db2a      	blt.n	e614 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    e5be:	f005 fc56 	bl	13e6e <sys_clock_tick_get_32>
    e5c2:	1944      	adds	r4, r0, r5
    e5c4:	f04f 0340 	mov.w	r3, #64	; 0x40
    e5c8:	f3ef 8811 	mrs	r8, BASEPRI
    e5cc:	f383 8812 	msr	BASEPRI_MAX, r3
    e5d0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    e5d4:	4f11      	ldr	r7, [pc, #68]	; (e61c <z_tick_sleep+0x7c>)
    e5d6:	4b12      	ldr	r3, [pc, #72]	; (e620 <z_tick_sleep+0x80>)
    e5d8:	68b8      	ldr	r0, [r7, #8]
    e5da:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    e5dc:	f7ff fdfc 	bl	e1d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    e5e0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    e5e2:	4910      	ldr	r1, [pc, #64]	; (e624 <z_tick_sleep+0x84>)
    e5e4:	462a      	mov	r2, r5
    e5e6:	4633      	mov	r3, r6
    e5e8:	3018      	adds	r0, #24
    e5ea:	f000 f917 	bl	e81c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    e5ee:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e5f0:	7b53      	ldrb	r3, [r2, #13]
    e5f2:	f043 0310 	orr.w	r3, r3, #16
    e5f6:	7353      	strb	r3, [r2, #13]
    e5f8:	4640      	mov	r0, r8
    e5fa:	f7f7 fe83 	bl	6304 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    e5fe:	f005 fc36 	bl	13e6e <sys_clock_tick_get_32>
    e602:	1a20      	subs	r0, r4, r0
    e604:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    e608:	2801      	cmp	r0, #1
    e60a:	f173 0300 	sbcs.w	r3, r3, #0
    e60e:	dbd0      	blt.n	e5b2 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    e614:	f06f 0401 	mvn.w	r4, #1
    e618:	1a24      	subs	r4, r4, r0
    e61a:	e7d3      	b.n	e5c4 <z_tick_sleep+0x24>
    e61c:	200022b8 	.word	0x200022b8
    e620:	200022e8 	.word	0x200022e8
    e624:	00013c3f 	.word	0x00013c3f

0000e628 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e628:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e62c:	bf08      	it	eq
    e62e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    e632:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e634:	d106      	bne.n	e644 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    e636:	4b08      	ldr	r3, [pc, #32]	; (e658 <z_impl_k_sleep+0x30>)
    e638:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    e63a:	f7ff ff05 	bl	e448 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    e63e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    e642:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    e644:	f7ff ffac 	bl	e5a0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    e648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e64c:	fb80 0303 	smull	r0, r3, r0, r3
    e650:	0bc0      	lsrs	r0, r0, #15
    e652:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    e656:	e7f4      	b.n	e642 <z_impl_k_sleep+0x1a>
    e658:	200022b8 	.word	0x200022b8

0000e65c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    e65c:	4b01      	ldr	r3, [pc, #4]	; (e664 <z_impl_z_current_get+0x8>)
    e65e:	6898      	ldr	r0, [r3, #8]
    e660:	4770      	bx	lr
    e662:	bf00      	nop
    e664:	200022b8 	.word	0x200022b8

0000e668 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    e668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e66c:	4604      	mov	r4, r0
    e66e:	f04f 0340 	mov.w	r3, #64	; 0x40
    e672:	f3ef 8611 	mrs	r6, BASEPRI
    e676:	f383 8812 	msr	BASEPRI_MAX, r3
    e67a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    e67e:	7b03      	ldrb	r3, [r0, #12]
    e680:	07d9      	lsls	r1, r3, #31
    e682:	d50b      	bpl.n	e69c <z_thread_abort+0x34>
	__asm__ volatile(
    e684:	f386 8811 	msr	BASEPRI, r6
    e688:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    e68c:	4040      	eors	r0, r0
    e68e:	f380 8811 	msr	BASEPRI, r0
    e692:	f04f 0004 	mov.w	r0, #4
    e696:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    e698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    e69c:	7b43      	ldrb	r3, [r0, #13]
    e69e:	071a      	lsls	r2, r3, #28
    e6a0:	d504      	bpl.n	e6ac <z_thread_abort+0x44>
    e6a2:	f386 8811 	msr	BASEPRI, r6
    e6a6:	f3bf 8f6f 	isb	sy
    e6aa:	e7f5      	b.n	e698 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e6ac:	f023 0220 	bic.w	r2, r3, #32
    e6b0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    e6b4:	09d2      	lsrs	r2, r2, #7
    e6b6:	d120      	bne.n	e6fa <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e6b8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    e6ba:	68a3      	ldr	r3, [r4, #8]
    e6bc:	b113      	cbz	r3, e6c4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    e6be:	4620      	mov	r0, r4
    e6c0:	f005 fab3 	bl	13c2a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    e6c4:	f104 0018 	add.w	r0, r4, #24
    e6c8:	f005 fb8f 	bl	13dea <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    e6cc:	f104 0758 	add.w	r7, r4, #88	; 0x58
    e6d0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    e6d4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e6d6:	42bd      	cmp	r5, r7
    e6d8:	d000      	beq.n	e6dc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e6da:	b9b5      	cbnz	r5, e70a <z_thread_abort+0xa2>
		update_cache(1);
    e6dc:	2001      	movs	r0, #1
    e6de:	f7ff fcef 	bl	e0c0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    e6e2:	4b10      	ldr	r3, [pc, #64]	; (e724 <z_thread_abort+0xbc>)
    e6e4:	689b      	ldr	r3, [r3, #8]
    e6e6:	42a3      	cmp	r3, r4
    e6e8:	d1db      	bne.n	e6a2 <z_thread_abort+0x3a>
    e6ea:	f3ef 8305 	mrs	r3, IPSR
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d1d7      	bne.n	e6a2 <z_thread_abort+0x3a>
    e6f2:	4630      	mov	r0, r6
    e6f4:	f7f7 fe06 	bl	6304 <arch_swap>
	return ret;
    e6f8:	e7d3      	b.n	e6a2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e6fa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    e6fe:	f043 0308 	orr.w	r3, r3, #8
    e702:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    e704:	f005 fa89 	bl	13c1a <sys_dlist_remove>
}
    e708:	e7d7      	b.n	e6ba <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    e70a:	4628      	mov	r0, r5
    e70c:	f005 fa8d 	bl	13c2a <unpend_thread_no_timeout>
    e710:	f105 0018 	add.w	r0, r5, #24
    e714:	f005 fb69 	bl	13dea <z_abort_timeout>
    e718:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    e71c:	4628      	mov	r0, r5
    e71e:	f7ff fd27 	bl	e170 <ready_thread>
    e722:	e7d7      	b.n	e6d4 <z_thread_abort+0x6c>
    e724:	200022b8 	.word	0x200022b8

0000e728 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    e728:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    e72a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    e72e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    e730:	e9cd 6700 	strd	r6, r7, [sp]
    e734:	f7ff fdf4 	bl	e320 <z_pend_curr>

	if (data != NULL) {
    e738:	b11c      	cbz	r4, e742 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    e73a:	4b03      	ldr	r3, [pc, #12]	; (e748 <z_sched_wait+0x20>)
    e73c:	689b      	ldr	r3, [r3, #8]
    e73e:	695b      	ldr	r3, [r3, #20]
    e740:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    e742:	b002      	add	sp, #8
    e744:	bdd0      	pop	{r4, r6, r7, pc}
    e746:	bf00      	nop
    e748:	200022b8 	.word	0x200022b8

0000e74c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    e74c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    e74e:	4806      	ldr	r0, [pc, #24]	; (e768 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    e750:	4a06      	ldr	r2, [pc, #24]	; (e76c <z_data_copy+0x20>)
    e752:	4907      	ldr	r1, [pc, #28]	; (e770 <z_data_copy+0x24>)
    e754:	1a12      	subs	r2, r2, r0
    e756:	f005 f969 	bl	13a2c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    e75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    e75e:	4a05      	ldr	r2, [pc, #20]	; (e774 <z_data_copy+0x28>)
    e760:	4905      	ldr	r1, [pc, #20]	; (e778 <z_data_copy+0x2c>)
    e762:	4806      	ldr	r0, [pc, #24]	; (e77c <z_data_copy+0x30>)
    e764:	f005 b962 	b.w	13a2c <z_early_memcpy>
    e768:	20000000 	.word	0x20000000
    e76c:	20000444 	.word	0x20000444
    e770:	00015300 	.word	0x00015300
    e774:	00000000 	.word	0x00000000
    e778:	00015300 	.word	0x00015300
    e77c:	20000000 	.word	0x20000000

0000e780 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    e780:	4b03      	ldr	r3, [pc, #12]	; (e790 <elapsed+0x10>)
    e782:	681b      	ldr	r3, [r3, #0]
    e784:	b90b      	cbnz	r3, e78a <elapsed+0xa>
    e786:	f7f9 bbb3 	b.w	7ef0 <sys_clock_elapsed>
}
    e78a:	2000      	movs	r0, #0
    e78c:	4770      	bx	lr
    e78e:	bf00      	nop
    e790:	200022f4 	.word	0x200022f4

0000e794 <next_timeout>:

static int32_t next_timeout(void)
{
    e794:	b510      	push	{r4, lr}
	return list->head == list;
    e796:	4b11      	ldr	r3, [pc, #68]	; (e7dc <next_timeout+0x48>)
    e798:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e79a:	429c      	cmp	r4, r3
    e79c:	d10a      	bne.n	e7b4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    e79e:	f7ff ffef 	bl	e780 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    e7a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    e7a6:	4b0e      	ldr	r3, [pc, #56]	; (e7e0 <next_timeout+0x4c>)
    e7a8:	691b      	ldr	r3, [r3, #16]
    e7aa:	b113      	cbz	r3, e7b2 <next_timeout+0x1e>
    e7ac:	4298      	cmp	r0, r3
    e7ae:	bfa8      	it	ge
    e7b0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    e7b2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    e7b4:	f7ff ffe4 	bl	e780 <elapsed>
	if ((to == NULL) ||
    e7b8:	2c00      	cmp	r4, #0
    e7ba:	d0f2      	beq.n	e7a2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    e7bc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    e7c0:	1a1b      	subs	r3, r3, r0
    e7c2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    e7c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    e7ca:	f172 0100 	sbcs.w	r1, r2, #0
    e7ce:	dae8      	bge.n	e7a2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    e7d0:	2a00      	cmp	r2, #0
    e7d2:	bfac      	ite	ge
    e7d4:	4618      	movge	r0, r3
    e7d6:	2000      	movlt	r0, #0
    e7d8:	e7e5      	b.n	e7a6 <next_timeout+0x12>
    e7da:	bf00      	nop
    e7dc:	20000174 	.word	0x20000174
    e7e0:	200022b8 	.word	0x200022b8

0000e7e4 <remove_timeout>:
{
    e7e4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e7e6:	b170      	cbz	r0, e806 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    e7e8:	4b0b      	ldr	r3, [pc, #44]	; (e818 <remove_timeout+0x34>)
    e7ea:	685b      	ldr	r3, [r3, #4]
    e7ec:	4298      	cmp	r0, r3
    e7ee:	d00a      	beq.n	e806 <remove_timeout+0x22>
    e7f0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    e7f2:	b143      	cbz	r3, e806 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    e7f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    e7f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    e7fc:	1912      	adds	r2, r2, r4
    e7fe:	eb41 0105 	adc.w	r1, r1, r5
    e802:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    e806:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    e80a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e80c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e80e:	2300      	movs	r3, #0
	node->prev = NULL;
    e810:	e9c0 3300 	strd	r3, r3, [r0]
}
    e814:	bd30      	pop	{r4, r5, pc}
    e816:	bf00      	nop
    e818:	20000174 	.word	0x20000174

0000e81c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e820:	bf08      	it	eq
    e822:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    e826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e828:	4604      	mov	r4, r0
    e82a:	461d      	mov	r5, r3
    e82c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e82e:	d061      	beq.n	e8f4 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    e830:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    e832:	f04f 0340 	mov.w	r3, #64	; 0x40
    e836:	f3ef 8711 	mrs	r7, BASEPRI
    e83a:	f383 8812 	msr	BASEPRI_MAX, r3
    e83e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    e842:	3201      	adds	r2, #1
    e844:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    e848:	da24      	bge.n	e894 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    e84a:	4930      	ldr	r1, [pc, #192]	; (e90c <z_add_timeout+0xf0>)
    e84c:	e9d1 2000 	ldrd	r2, r0, [r1]
    e850:	f06f 0301 	mvn.w	r3, #1
    e854:	1a9b      	subs	r3, r3, r2
    e856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e85a:	eb62 0000 	sbc.w	r0, r2, r0
    e85e:	1b9e      	subs	r6, r3, r6
    e860:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    e864:	2e01      	cmp	r6, #1
    e866:	f170 0300 	sbcs.w	r3, r0, #0
    e86a:	da01      	bge.n	e870 <z_add_timeout+0x54>
    e86c:	2601      	movs	r6, #1
    e86e:	2000      	movs	r0, #0
    e870:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    e874:	4e26      	ldr	r6, [pc, #152]	; (e910 <z_add_timeout+0xf4>)
    e876:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    e87a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e87c:	45b4      	cmp	ip, r6
    e87e:	bf08      	it	eq
    e880:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    e884:	f1bc 0f00 	cmp.w	ip, #0
    e888:	d10d      	bne.n	e8a6 <z_add_timeout+0x8a>
	node->prev = tail;
    e88a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    e88e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    e890:	6074      	str	r4, [r6, #4]
}
    e892:	e01c      	b.n	e8ce <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    e894:	f7ff ff74 	bl	e780 <elapsed>
    e898:	3601      	adds	r6, #1
    e89a:	f145 0500 	adc.w	r5, r5, #0
    e89e:	1836      	adds	r6, r6, r0
    e8a0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    e8a4:	e7e4      	b.n	e870 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    e8a6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    e8aa:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    e8ae:	4293      	cmp	r3, r2
    e8b0:	eb71 0e00 	sbcs.w	lr, r1, r0
    e8b4:	da1f      	bge.n	e8f6 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    e8b6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    e8b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e8bc:	eb60 0001 	sbc.w	r0, r0, r1
    e8c0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    e8c4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    e8c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e8ca:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    e8ce:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e8d0:	42b3      	cmp	r3, r6
    e8d2:	d00b      	beq.n	e8ec <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    e8d4:	429c      	cmp	r4, r3
    e8d6:	d109      	bne.n	e8ec <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    e8d8:	f7ff ff5c 	bl	e794 <next_timeout>

			if (next_time == 0 ||
    e8dc:	b118      	cbz	r0, e8e6 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    e8de:	4b0d      	ldr	r3, [pc, #52]	; (e914 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    e8e0:	691b      	ldr	r3, [r3, #16]
    e8e2:	4283      	cmp	r3, r0
    e8e4:	d002      	beq.n	e8ec <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    e8e6:	2100      	movs	r1, #0
    e8e8:	f7f9 fad0 	bl	7e8c <sys_clock_set_timeout>
	__asm__ volatile(
    e8ec:	f387 8811 	msr	BASEPRI, r7
    e8f0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    e8f6:	1a9b      	subs	r3, r3, r2
    e8f8:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    e8fc:	45ac      	cmp	ip, r5
    e8fe:	e9c4 3104 	strd	r3, r1, [r4, #16]
    e902:	d0c2      	beq.n	e88a <z_add_timeout+0x6e>
    e904:	f8dc c000 	ldr.w	ip, [ip]
    e908:	e7bc      	b.n	e884 <z_add_timeout+0x68>
    e90a:	bf00      	nop
    e90c:	200015f0 	.word	0x200015f0
    e910:	20000174 	.word	0x20000174
    e914:	200022b8 	.word	0x200022b8

0000e918 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e91c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    e91e:	f7ff fcbd 	bl	e29c <z_time_slice>
	__asm__ volatile(
    e922:	f04f 0340 	mov.w	r3, #64	; 0x40
    e926:	f3ef 8611 	mrs	r6, BASEPRI
    e92a:	f383 8812 	msr	BASEPRI_MAX, r3
    e92e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    e932:	4f23      	ldr	r7, [pc, #140]	; (e9c0 <sys_clock_announce+0xa8>)
	return list->head == list;
    e934:	f8df 808c 	ldr.w	r8, [pc, #140]	; e9c4 <sys_clock_announce+0xac>
    e938:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    e93c:	4a22      	ldr	r2, [pc, #136]	; (e9c8 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    e93e:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e940:	4540      	cmp	r0, r8
		curr_tick += dt;
    e942:	e9d2 3e00 	ldrd	r3, lr, [r2]
    e946:	ea4f 71e4 	mov.w	r1, r4, asr #31
    e94a:	d00b      	beq.n	e964 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    e94c:	b150      	cbz	r0, e964 <sys_clock_announce+0x4c>
    e94e:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    e952:	42ac      	cmp	r4, r5
    e954:	eb71 090c 	sbcs.w	r9, r1, ip
    e958:	da16      	bge.n	e988 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    e95a:	1b2d      	subs	r5, r5, r4
    e95c:	eb6c 0c01 	sbc.w	ip, ip, r1
    e960:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    e964:	18e3      	adds	r3, r4, r3
    e966:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    e96a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    e96c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    e970:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    e972:	f7ff ff0f 	bl	e794 <next_timeout>
    e976:	4621      	mov	r1, r4
    e978:	f7f9 fa88 	bl	7e8c <sys_clock_set_timeout>
	__asm__ volatile(
    e97c:	f386 8811 	msr	BASEPRI, r6
    e980:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    e984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    e988:	18eb      	adds	r3, r5, r3
    e98a:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    e98e:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    e992:	2200      	movs	r2, #0
    e994:	2300      	movs	r3, #0
    e996:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    e99a:	f7ff ff23 	bl	e7e4 <remove_timeout>
    e99e:	f386 8811 	msr	BASEPRI, r6
    e9a2:	f3bf 8f6f 	isb	sy
		t->fn(t);
    e9a6:	6883      	ldr	r3, [r0, #8]
    e9a8:	4798      	blx	r3
	__asm__ volatile(
    e9aa:	f04f 0340 	mov.w	r3, #64	; 0x40
    e9ae:	f3ef 8611 	mrs	r6, BASEPRI
    e9b2:	f383 8812 	msr	BASEPRI_MAX, r3
    e9b6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    e9ba:	683c      	ldr	r4, [r7, #0]
    e9bc:	1b64      	subs	r4, r4, r5
    e9be:	e7bb      	b.n	e938 <sys_clock_announce+0x20>
    e9c0:	200022f4 	.word	0x200022f4
    e9c4:	20000174 	.word	0x20000174
    e9c8:	200015f0 	.word	0x200015f0

0000e9cc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    e9cc:	b510      	push	{r4, lr}
    e9ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    e9d2:	f3ef 8411 	mrs	r4, BASEPRI
    e9d6:	f383 8812 	msr	BASEPRI_MAX, r3
    e9da:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    e9de:	f7ff fecf 	bl	e780 <elapsed>
    e9e2:	4a06      	ldr	r2, [pc, #24]	; (e9fc <sys_clock_tick_get+0x30>)
    e9e4:	4603      	mov	r3, r0
    e9e6:	e9d2 0100 	ldrd	r0, r1, [r2]
    e9ea:	1818      	adds	r0, r3, r0
    e9ec:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    e9f0:	f384 8811 	msr	BASEPRI, r4
    e9f4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    e9f8:	bd10      	pop	{r4, pc}
    e9fa:	bf00      	nop
    e9fc:	200015f0 	.word	0x200015f0

0000ea00 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    ea00:	b570      	push	{r4, r5, r6, lr}
    ea02:	4604      	mov	r4, r0
	__asm__ volatile(
    ea04:	f04f 0340 	mov.w	r3, #64	; 0x40
    ea08:	f3ef 8511 	mrs	r5, BASEPRI
    ea0c:	f383 8812 	msr	BASEPRI_MAX, r3
    ea10:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    ea14:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    ea18:	3301      	adds	r3, #1
    ea1a:	f142 0200 	adc.w	r2, r2, #0
    ea1e:	2b02      	cmp	r3, #2
    ea20:	f172 0200 	sbcs.w	r2, r2, #0
    ea24:	d322      	bcc.n	ea6c <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0xc>
	return z_impl_k_uptime_ticks();
    ea26:	f005 fa26 	bl	13e76 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    ea2a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    ea2e:	3001      	adds	r0, #1
    ea30:	f141 0100 	adc.w	r1, r1, #0
    ea34:	18c0      	adds	r0, r0, r3
    ea36:	eb41 0102 	adc.w	r1, r1, r2
    ea3a:	2801      	cmp	r0, #1
    ea3c:	f171 0100 	sbcs.w	r1, r1, #0
    ea40:	db32      	blt.n	eaa8 <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0x48>
    ea42:	f005 fa18 	bl	13e76 <z_impl_k_uptime_ticks>
    ea46:	3001      	adds	r0, #1
    ea48:	f141 0300 	adc.w	r3, r1, #0
    ea4c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    ea50:	1880      	adds	r0, r0, r2
    ea52:	f06f 0201 	mvn.w	r2, #1
    ea56:	eb43 0301 	adc.w	r3, r3, r1
    ea5a:	1a12      	subs	r2, r2, r0
    ea5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ea60:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ea64:	491a      	ldr	r1, [pc, #104]	; (ead0 <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0x70>)
    ea66:	4620      	mov	r0, r4
    ea68:	f7ff fed8 	bl	e81c <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    ea6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ea6e:	3301      	adds	r3, #1
    ea70:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    ea72:	6a23      	ldr	r3, [r4, #32]
    ea74:	b173      	cbz	r3, ea94 <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0x34>
	__asm__ volatile(
    ea76:	f385 8811 	msr	BASEPRI, r5
    ea7a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    ea7e:	6a23      	ldr	r3, [r4, #32]
    ea80:	4620      	mov	r0, r4
    ea82:	4798      	blx	r3
	__asm__ volatile(
    ea84:	f04f 0340 	mov.w	r3, #64	; 0x40
    ea88:	f3ef 8511 	mrs	r5, BASEPRI
    ea8c:	f383 8812 	msr	BASEPRI_MAX, r3
    ea90:	f3bf 8f6f 	isb	sy
	return list->head == list;
    ea94:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ea98:	42a6      	cmp	r6, r4
    ea9a:	d000      	beq.n	ea9e <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0x3e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    ea9c:	b94e      	cbnz	r6, eab2 <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0x52>
	__asm__ volatile(
    ea9e:	f385 8811 	msr	BASEPRI, r5
    eaa2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    eaa6:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    eaa8:	f06f 0201 	mvn.w	r2, #1
    eaac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eab0:	e7d8      	b.n	ea64 <CONFIG_NRF_802154_TEMPERATURE_UPDATE_PERIOD+0x4>
	z_unpend_thread_no_timeout(thread);
    eab2:	4630      	mov	r0, r6
    eab4:	f005 f91d 	bl	13cf2 <z_unpend_thread_no_timeout>
    eab8:	2300      	movs	r3, #0
    eaba:	67b3      	str	r3, [r6, #120]	; 0x78
    eabc:	f385 8811 	msr	BASEPRI, r5
    eac0:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    eac4:	4630      	mov	r0, r6
}
    eac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    eaca:	f005 b902 	b.w	13cd2 <z_ready_thread>
    eace:	bf00      	nop
    ead0:	0000ea01 	.word	0x0000ea01

0000ead4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    ead4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    ead8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eadc:	bf08      	it	eq
    eade:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    eae2:	4605      	mov	r5, r0
    eae4:	4614      	mov	r4, r2
    eae6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    eaea:	4619      	mov	r1, r3
    eaec:	4691      	mov	r9, r2
    eaee:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    eaf0:	d037      	beq.n	eb62 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    eaf2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    eaf6:	bf08      	it	eq
    eaf8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    eafc:	4637      	mov	r7, r6
    eafe:	4682      	mov	sl, r0
    eb00:	d011      	beq.n	eb26 <z_impl_k_timer_start+0x52>
    eb02:	ea50 0306 	orrs.w	r3, r0, r6
    eb06:	d00e      	beq.n	eb26 <z_impl_k_timer_start+0x52>
    eb08:	1c72      	adds	r2, r6, #1
    eb0a:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    eb0e:	db0a      	blt.n	eb26 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    eb10:	2e02      	cmp	r6, #2
    eb12:	4684      	mov	ip, r0
    eb14:	f170 0000 	sbcs.w	r0, r0, #0
    eb18:	bfbc      	itt	lt
    eb1a:	2702      	movlt	r7, #2
    eb1c:	f04f 0c00 	movlt.w	ip, #0
    eb20:	3f01      	subs	r7, #1
    eb22:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    eb26:	1c63      	adds	r3, r4, #1
    eb28:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    eb2c:	db0a      	blt.n	eb44 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    eb2e:	2c01      	cmp	r4, #1
    eb30:	f171 0300 	sbcs.w	r3, r1, #0
    eb34:	4622      	mov	r2, r4
    eb36:	bfbc      	itt	lt
    eb38:	2201      	movlt	r2, #1
    eb3a:	2100      	movlt	r1, #0
    eb3c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    eb40:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    eb44:	4628      	mov	r0, r5
    eb46:	f005 f950 	bl	13dea <z_abort_timeout>
	timer->period = period;
    eb4a:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    eb4e:	2300      	movs	r3, #0
    eb50:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    eb52:	464a      	mov	r2, r9
    eb54:	4643      	mov	r3, r8
    eb56:	4628      	mov	r0, r5
    eb58:	4903      	ldr	r1, [pc, #12]	; (eb68 <z_impl_k_timer_start+0x94>)
		     duration);
}
    eb5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    eb5e:	f7ff be5d 	b.w	e81c <z_add_timeout>
}
    eb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb66:	bf00      	nop
    eb68:	0000ea01 	.word	0x0000ea01

0000eb6c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    eb6c:	4801      	ldr	r0, [pc, #4]	; (eb74 <boot_banner+0x8>)
    eb6e:	f003 bbf5 	b.w	1235c <printk>
    eb72:	bf00      	nop
    eb74:	000152c7 	.word	0x000152c7

0000eb78 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    eb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    eb7a:	4b09      	ldr	r3, [pc, #36]	; (eba0 <k_sys_work_q_init+0x28>)
    eb7c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    eb7e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    eb80:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    eb82:	9300      	str	r3, [sp, #0]
    eb84:	4907      	ldr	r1, [pc, #28]	; (eba4 <k_sys_work_q_init+0x2c>)
    eb86:	4808      	ldr	r0, [pc, #32]	; (eba8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    eb88:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    eb8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb90:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eb94:	f7ff f9e4 	bl	df60 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    eb98:	4620      	mov	r0, r4
    eb9a:	b004      	add	sp, #16
    eb9c:	bd10      	pop	{r4, pc}
    eb9e:	bf00      	nop
    eba0:	000152f5 	.word	0x000152f5
    eba4:	200055c0 	.word	0x200055c0
    eba8:	200015f8 	.word	0x200015f8

0000ebac <nrf_gpio_pin_port_decode>:
    ebac:	6803      	ldr	r3, [r0, #0]
    ebae:	f003 021f 	and.w	r2, r3, #31
    ebb2:	095b      	lsrs	r3, r3, #5
    ebb4:	2b01      	cmp	r3, #1
    ebb6:	6002      	str	r2, [r0, #0]
    ebb8:	4802      	ldr	r0, [pc, #8]	; (ebc4 <nrf_gpio_pin_port_decode+0x18>)
    ebba:	bf18      	it	ne
    ebbc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    ebc0:	4770      	bx	lr
    ebc2:	bf00      	nop
    ebc4:	50000300 	.word	0x50000300

0000ebc8 <ad_timer_rssi_configure>:
    ebc8:	6843      	ldr	r3, [r0, #4]
    ebca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ebce:	b510      	push	{r4, lr}
    ebd0:	f042 0201 	orr.w	r2, r2, #1
    ebd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ebd8:	220f      	movs	r2, #15
    ebda:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    ebde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ebe2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ebe6:	4b05      	ldr	r3, [pc, #20]	; (ebfc <ad_timer_rssi_configure+0x34>)
    ebe8:	4604      	mov	r4, r0
    ebea:	f993 0000 	ldrsb.w	r0, [r3]
    ebee:	f004 facb 	bl	13188 <nrf_802154_irq_enable>
    ebf2:	6863      	ldr	r3, [r4, #4]
    ebf4:	2201      	movs	r2, #1
    ebf6:	60da      	str	r2, [r3, #12]
    ebf8:	601a      	str	r2, [r3, #0]
    ebfa:	bd10      	pop	{r4, pc}
    ebfc:	20003c2b 	.word	0x20003c2b

0000ec00 <ad_schedule_energy_detection>:
    ec00:	b410      	push	{r4}
    ec02:	4c09      	ldr	r4, [pc, #36]	; (ec28 <ad_schedule_energy_detection+0x28>)
    ec04:	6823      	ldr	r3, [r4, #0]
    ec06:	b133      	cbz	r3, ec16 <ad_schedule_energy_detection+0x16>
    ec08:	600b      	str	r3, [r1, #0]
    ec0a:	2300      	movs	r3, #0
    ec0c:	6023      	str	r3, [r4, #0]
    ec0e:	7800      	ldrb	r0, [r0, #0]
    ec10:	bc10      	pop	{r4}
    ec12:	f005 b960 	b.w	13ed6 <nrf_gpio_pin_toggle>
    ec16:	680b      	ldr	r3, [r1, #0]
    ec18:	f3c3 220f 	ubfx	r2, r3, #8, #16
    ec1c:	01d2      	lsls	r2, r2, #7
    ec1e:	1a9b      	subs	r3, r3, r2
    ec20:	6022      	str	r2, [r4, #0]
    ec22:	600b      	str	r3, [r1, #0]
    ec24:	bc10      	pop	{r4}
    ec26:	4770      	bx	lr
    ec28:	200022f8 	.word	0x200022f8

0000ec2c <ad_timer_toggle_configure>:
    ec2c:	6842      	ldr	r2, [r0, #4]
    ec2e:	7843      	ldrb	r3, [r0, #1]
    ec30:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    ec34:	f041 0101 	orr.w	r1, r1, #1
    ec38:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    ec3c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    ec40:	78c3      	ldrb	r3, [r0, #3]
    ec42:	009b      	lsls	r3, r3, #2
    ec44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ec48:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    ec4c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    ec50:	f041 0103 	orr.w	r1, r1, #3
    ec54:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    ec58:	7881      	ldrb	r1, [r0, #2]
    ec5a:	4804      	ldr	r0, [pc, #16]	; (ec6c <ad_timer_toggle_configure+0x40>)
    ec5c:	2301      	movs	r3, #1
    ec5e:	fa03 f101 	lsl.w	r1, r3, r1
    ec62:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    ec66:	60d3      	str	r3, [r2, #12]
    ec68:	6013      	str	r3, [r2, #0]
    ec6a:	4770      	bx	lr
    ec6c:	4001f000 	.word	0x4001f000

0000ec70 <ad_timer_rssi_deconfigure.isra.0>:
    ec70:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    ec74:	f023 0301 	bic.w	r3, r3, #1
    ec78:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    ec7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ec80:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    ec84:	2301      	movs	r3, #1
    ec86:	6103      	str	r3, [r0, #16]
    ec88:	4b02      	ldr	r3, [pc, #8]	; (ec94 <ad_timer_rssi_deconfigure.isra.0+0x24>)
    ec8a:	f993 0000 	ldrsb.w	r0, [r3]
    ec8e:	f004 ba7d 	b.w	1318c <nrf_802154_irq_disable>
    ec92:	bf00      	nop
    ec94:	20003c2b 	.word	0x20003c2b

0000ec98 <ad_timer_toggle_deconfigure>:
    ec98:	6843      	ldr	r3, [r0, #4]
    ec9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ec9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    eca0:	f022 0201 	bic.w	r2, r2, #1
    eca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    eca8:	2501      	movs	r5, #1
    ecaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ecae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    ecb2:	611d      	str	r5, [r3, #16]
    ecb4:	7806      	ldrb	r6, [r0, #0]
    ecb6:	4604      	mov	r4, r0
    ecb8:	f005 f943 	bl	13f42 <nrf_802154_sl_ant_div_antenna_get>
    ecbc:	9601      	str	r6, [sp, #4]
    ecbe:	b9d8      	cbnz	r0, ecf8 <ad_timer_toggle_deconfigure+0x60>
    ecc0:	a801      	add	r0, sp, #4
    ecc2:	f7ff ff73 	bl	ebac <nrf_gpio_pin_port_decode>
    ecc6:	9b01      	ldr	r3, [sp, #4]
    ecc8:	fa05 f303 	lsl.w	r3, r5, r3
    eccc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    ecd0:	78e3      	ldrb	r3, [r4, #3]
    ecd2:	009b      	lsls	r3, r3, #2
    ecd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ecd8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    ecdc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    ece0:	f022 0203 	bic.w	r2, r2, #3
    ece4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    ece8:	78a2      	ldrb	r2, [r4, #2]
    ecea:	2301      	movs	r3, #1
    ecec:	4093      	lsls	r3, r2
    ecee:	4a06      	ldr	r2, [pc, #24]	; (ed08 <ad_timer_toggle_deconfigure+0x70>)
    ecf0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    ecf4:	b002      	add	sp, #8
    ecf6:	bd70      	pop	{r4, r5, r6, pc}
    ecf8:	a801      	add	r0, sp, #4
    ecfa:	f7ff ff57 	bl	ebac <nrf_gpio_pin_port_decode>
    ecfe:	9b01      	ldr	r3, [sp, #4]
    ed00:	409d      	lsls	r5, r3
    ed02:	f8c0 5508 	str.w	r5, [r0, #1288]	; 0x508
    ed06:	e7e3      	b.n	ecd0 <ad_timer_toggle_deconfigure+0x38>
    ed08:	4001f000 	.word	0x4001f000

0000ed0c <nrf_802154_sl_ant_div_rx_started_notify>:
    ed0c:	b510      	push	{r4, lr}
    ed0e:	f000 f8f1 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
    ed12:	b150      	cbz	r0, ed2a <nrf_802154_sl_ant_div_rx_started_notify+0x1e>
    ed14:	4c05      	ldr	r4, [pc, #20]	; (ed2c <nrf_802154_sl_ant_div_rx_started_notify+0x20>)
    ed16:	7823      	ldrb	r3, [r4, #0]
    ed18:	2b01      	cmp	r3, #1
    ed1a:	d106      	bne.n	ed2a <nrf_802154_sl_ant_div_rx_started_notify+0x1e>
    ed1c:	4b04      	ldr	r3, [pc, #16]	; (ed30 <nrf_802154_sl_ant_div_rx_started_notify+0x24>)
    ed1e:	2200      	movs	r2, #0
    ed20:	701a      	strb	r2, [r3, #0]
    ed22:	f7ff ff83 	bl	ec2c <ad_timer_toggle_configure>
    ed26:	2302      	movs	r3, #2
    ed28:	7023      	strb	r3, [r4, #0]
    ed2a:	bd10      	pop	{r4, pc}
    ed2c:	20003c29 	.word	0x20003c29
    ed30:	20003c2a 	.word	0x20003c2a

0000ed34 <nrf_802154_sl_ant_div_rx_aborted_notify>:
    ed34:	b510      	push	{r4, lr}
    ed36:	f000 f8dd 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
    ed3a:	b130      	cbz	r0, ed4a <nrf_802154_sl_ant_div_rx_aborted_notify+0x16>
    ed3c:	4c0c      	ldr	r4, [pc, #48]	; (ed70 <nrf_802154_sl_ant_div_rx_aborted_notify+0x3c>)
    ed3e:	7823      	ldrb	r3, [r4, #0]
    ed40:	2b02      	cmp	r3, #2
    ed42:	d00f      	beq.n	ed64 <nrf_802154_sl_ant_div_rx_aborted_notify+0x30>
    ed44:	d802      	bhi.n	ed4c <nrf_802154_sl_ant_div_rx_aborted_notify+0x18>
    ed46:	2b01      	cmp	r3, #1
    ed48:	d008      	beq.n	ed5c <nrf_802154_sl_ant_div_rx_aborted_notify+0x28>
    ed4a:	bd10      	pop	{r4, pc}
    ed4c:	3b03      	subs	r3, #3
    ed4e:	2b01      	cmp	r3, #1
    ed50:	d8fb      	bhi.n	ed4a <nrf_802154_sl_ant_div_rx_aborted_notify+0x16>
    ed52:	6840      	ldr	r0, [r0, #4]
    ed54:	f7ff ff8c 	bl	ec70 <ad_timer_rssi_deconfigure.isra.0>
    ed58:	2301      	movs	r3, #1
    ed5a:	7023      	strb	r3, [r4, #0]
    ed5c:	4b05      	ldr	r3, [pc, #20]	; (ed74 <nrf_802154_sl_ant_div_rx_aborted_notify+0x40>)
    ed5e:	2200      	movs	r2, #0
    ed60:	701a      	strb	r2, [r3, #0]
    ed62:	e7f2      	b.n	ed4a <nrf_802154_sl_ant_div_rx_aborted_notify+0x16>
    ed64:	f7ff ff98 	bl	ec98 <ad_timer_toggle_deconfigure>
    ed68:	2301      	movs	r3, #1
    ed6a:	7023      	strb	r3, [r4, #0]
    ed6c:	e7ed      	b.n	ed4a <nrf_802154_sl_ant_div_rx_aborted_notify+0x16>
    ed6e:	bf00      	nop
    ed70:	20003c29 	.word	0x20003c29
    ed74:	20003c2a 	.word	0x20003c2a

0000ed78 <nrf_802154_sl_ant_div_rx_preamble_detected_notify>:
    ed78:	b538      	push	{r3, r4, r5, lr}
    ed7a:	f000 f8bb 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
    ed7e:	4604      	mov	r4, r0
    ed80:	b150      	cbz	r0, ed98 <nrf_802154_sl_ant_div_rx_preamble_detected_notify+0x20>
    ed82:	4d06      	ldr	r5, [pc, #24]	; (ed9c <nrf_802154_sl_ant_div_rx_preamble_detected_notify+0x24>)
    ed84:	782b      	ldrb	r3, [r5, #0]
    ed86:	2b02      	cmp	r3, #2
    ed88:	d106      	bne.n	ed98 <nrf_802154_sl_ant_div_rx_preamble_detected_notify+0x20>
    ed8a:	f7ff ff85 	bl	ec98 <ad_timer_toggle_deconfigure>
    ed8e:	4620      	mov	r0, r4
    ed90:	f7ff ff1a 	bl	ebc8 <ad_timer_rssi_configure>
    ed94:	2303      	movs	r3, #3
    ed96:	702b      	strb	r3, [r5, #0]
    ed98:	bd38      	pop	{r3, r4, r5, pc}
    ed9a:	bf00      	nop
    ed9c:	20003c29 	.word	0x20003c29

0000eda0 <nrf_802154_sl_ant_div_rx_frame_started_notify>:
    eda0:	b510      	push	{r4, lr}
    eda2:	f000 f8a7 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
    eda6:	b130      	cbz	r0, edb6 <nrf_802154_sl_ant_div_rx_frame_started_notify+0x16>
    eda8:	4c0b      	ldr	r4, [pc, #44]	; (edd8 <nrf_802154_sl_ant_div_rx_frame_started_notify+0x38>)
    edaa:	7822      	ldrb	r2, [r4, #0]
    edac:	2a02      	cmp	r2, #2
    edae:	d00e      	beq.n	edce <nrf_802154_sl_ant_div_rx_frame_started_notify+0x2e>
    edb0:	d803      	bhi.n	edba <nrf_802154_sl_ant_div_rx_frame_started_notify+0x1a>
    edb2:	2a01      	cmp	r2, #1
    edb4:	d008      	beq.n	edc8 <nrf_802154_sl_ant_div_rx_frame_started_notify+0x28>
    edb6:	2000      	movs	r0, #0
    edb8:	e008      	b.n	edcc <nrf_802154_sl_ant_div_rx_frame_started_notify+0x2c>
    edba:	3a03      	subs	r2, #3
    edbc:	2a01      	cmp	r2, #1
    edbe:	d8fa      	bhi.n	edb6 <nrf_802154_sl_ant_div_rx_frame_started_notify+0x16>
    edc0:	6840      	ldr	r0, [r0, #4]
    edc2:	f7ff ff55 	bl	ec70 <ad_timer_rssi_deconfigure.isra.0>
    edc6:	e004      	b.n	edd2 <nrf_802154_sl_ant_div_rx_frame_started_notify+0x32>
    edc8:	4b04      	ldr	r3, [pc, #16]	; (eddc <nrf_802154_sl_ant_div_rx_frame_started_notify+0x3c>)
    edca:	7818      	ldrb	r0, [r3, #0]
    edcc:	bd10      	pop	{r4, pc}
    edce:	f7ff ff63 	bl	ec98 <ad_timer_toggle_deconfigure>
    edd2:	2301      	movs	r3, #1
    edd4:	7023      	strb	r3, [r4, #0]
    edd6:	e7ee      	b.n	edb6 <nrf_802154_sl_ant_div_rx_frame_started_notify+0x16>
    edd8:	20003c29 	.word	0x20003c29
    eddc:	20003c2a 	.word	0x20003c2a

0000ede0 <nrf_802154_sl_ant_div_rx_frame_received_notify>:
    ede0:	b510      	push	{r4, lr}
    ede2:	4b0a      	ldr	r3, [pc, #40]	; (ee0c <nrf_802154_sl_ant_div_rx_frame_received_notify+0x2c>)
    ede4:	781b      	ldrb	r3, [r3, #0]
    ede6:	b113      	cbz	r3, edee <nrf_802154_sl_ant_div_rx_frame_received_notify+0xe>
    ede8:	2b01      	cmp	r3, #1
    edea:	d004      	beq.n	edf6 <nrf_802154_sl_ant_div_rx_frame_received_notify+0x16>
    edec:	bd10      	pop	{r4, pc}
    edee:	4b08      	ldr	r3, [pc, #32]	; (ee10 <nrf_802154_sl_ant_div_rx_frame_received_notify+0x30>)
    edf0:	2202      	movs	r2, #2
    edf2:	701a      	strb	r2, [r3, #0]
    edf4:	e7fa      	b.n	edec <nrf_802154_sl_ant_div_rx_frame_received_notify+0xc>
    edf6:	4b07      	ldr	r3, [pc, #28]	; (ee14 <nrf_802154_sl_ant_div_rx_frame_received_notify+0x34>)
    edf8:	4c05      	ldr	r4, [pc, #20]	; (ee10 <nrf_802154_sl_ant_div_rx_frame_received_notify+0x30>)
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	b11b      	cbz	r3, ee06 <nrf_802154_sl_ant_div_rx_frame_received_notify+0x26>
    edfe:	f005 f8a0 	bl	13f42 <nrf_802154_sl_ant_div_antenna_get>
    ee02:	7020      	strb	r0, [r4, #0]
    ee04:	e7f2      	b.n	edec <nrf_802154_sl_ant_div_rx_frame_received_notify+0xc>
    ee06:	2302      	movs	r3, #2
    ee08:	7023      	strb	r3, [r4, #0]
    ee0a:	e7ef      	b.n	edec <nrf_802154_sl_ant_div_rx_frame_received_notify+0xc>
    ee0c:	20003c29 	.word	0x20003c29
    ee10:	200001ed 	.word	0x200001ed
    ee14:	20003c2a 	.word	0x20003c2a

0000ee18 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify>:
    ee18:	b538      	push	{r3, r4, r5, lr}
    ee1a:	f000 f86b 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
    ee1e:	4604      	mov	r4, r0
    ee20:	b188      	cbz	r0, ee46 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x2e>
    ee22:	4d0d      	ldr	r5, [pc, #52]	; (ee58 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x40>)
    ee24:	782b      	ldrb	r3, [r5, #0]
    ee26:	2b01      	cmp	r3, #1
    ee28:	d00e      	beq.n	ee48 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x30>
    ee2a:	3b03      	subs	r3, #3
    ee2c:	2b01      	cmp	r3, #1
    ee2e:	d80a      	bhi.n	ee46 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x2e>
    ee30:	6840      	ldr	r0, [r0, #4]
    ee32:	f7ff ff1d 	bl	ec70 <ad_timer_rssi_deconfigure.isra.0>
    ee36:	4b09      	ldr	r3, [pc, #36]	; (ee5c <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x44>)
    ee38:	2200      	movs	r2, #0
    ee3a:	701a      	strb	r2, [r3, #0]
    ee3c:	4620      	mov	r0, r4
    ee3e:	f7ff fef5 	bl	ec2c <ad_timer_toggle_configure>
    ee42:	2302      	movs	r3, #2
    ee44:	702b      	strb	r3, [r5, #0]
    ee46:	bd38      	pop	{r3, r4, r5, pc}
    ee48:	4b04      	ldr	r3, [pc, #16]	; (ee5c <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x44>)
    ee4a:	781a      	ldrb	r2, [r3, #0]
    ee4c:	2a00      	cmp	r2, #0
    ee4e:	d0fa      	beq.n	ee46 <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x2e>
    ee50:	2200      	movs	r2, #0
    ee52:	701a      	strb	r2, [r3, #0]
    ee54:	e7f3      	b.n	ee3e <nrf_802154_sl_ant_div_rx_preamble_timeout_notify+0x26>
    ee56:	bf00      	nop
    ee58:	20003c29 	.word	0x20003c29
    ee5c:	20003c2a 	.word	0x20003c2a

0000ee60 <nrf_802154_sl_ant_div_energy_detection_requested_notify>:
    ee60:	b570      	push	{r4, r5, r6, lr}
    ee62:	4605      	mov	r5, r0
    ee64:	f000 f846 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
    ee68:	4604      	mov	r4, r0
    ee6a:	b130      	cbz	r0, ee7a <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x1a>
    ee6c:	4e10      	ldr	r6, [pc, #64]	; (eeb0 <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x50>)
    ee6e:	7833      	ldrb	r3, [r6, #0]
    ee70:	2b02      	cmp	r3, #2
    ee72:	d019      	beq.n	eea8 <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x48>
    ee74:	d802      	bhi.n	ee7c <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x1c>
    ee76:	2b01      	cmp	r3, #1
    ee78:	d00e      	beq.n	ee98 <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x38>
    ee7a:	bd70      	pop	{r4, r5, r6, pc}
    ee7c:	3b03      	subs	r3, #3
    ee7e:	2b01      	cmp	r3, #1
    ee80:	d8fb      	bhi.n	ee7a <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x1a>
    ee82:	6840      	ldr	r0, [r0, #4]
    ee84:	f7ff fef4 	bl	ec70 <ad_timer_rssi_deconfigure.isra.0>
    ee88:	4b0a      	ldr	r3, [pc, #40]	; (eeb4 <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x54>)
    ee8a:	2200      	movs	r2, #0
    ee8c:	701a      	strb	r2, [r3, #0]
    ee8e:	2301      	movs	r3, #1
    ee90:	7033      	strb	r3, [r6, #0]
    ee92:	4629      	mov	r1, r5
    ee94:	4620      	mov	r0, r4
    ee96:	e003      	b.n	eea0 <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x40>
    ee98:	4b06      	ldr	r3, [pc, #24]	; (eeb4 <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x54>)
    ee9a:	2200      	movs	r2, #0
    ee9c:	701a      	strb	r2, [r3, #0]
    ee9e:	4629      	mov	r1, r5
    eea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eea4:	f7ff beac 	b.w	ec00 <ad_schedule_energy_detection>
    eea8:	f7ff fef6 	bl	ec98 <ad_timer_toggle_deconfigure>
    eeac:	e7ef      	b.n	ee8e <nrf_802154_sl_ant_div_energy_detection_requested_notify+0x2e>
    eeae:	bf00      	nop
    eeb0:	20003c29 	.word	0x20003c29
    eeb4:	20003c2a 	.word	0x20003c2a

0000eeb8 <nrf_802154_sl_ant_div_energy_detection_finished_notify>:
    eeb8:	4b02      	ldr	r3, [pc, #8]	; (eec4 <nrf_802154_sl_ant_div_energy_detection_finished_notify+0xc>)
    eeba:	6818      	ldr	r0, [r3, #0]
    eebc:	3800      	subs	r0, #0
    eebe:	bf18      	it	ne
    eec0:	2001      	movne	r0, #1
    eec2:	4770      	bx	lr
    eec4:	200022f8 	.word	0x200022f8

0000eec8 <nrf_802154_sl_ant_div_energy_detection_aborted_notify>:
    eec8:	4b01      	ldr	r3, [pc, #4]	; (eed0 <nrf_802154_sl_ant_div_energy_detection_aborted_notify+0x8>)
    eeca:	2200      	movs	r2, #0
    eecc:	601a      	str	r2, [r3, #0]
    eece:	4770      	bx	lr
    eed0:	200022f8 	.word	0x200022f8

0000eed4 <nrf_802154_sl_ant_div_txack_notify>:
    eed4:	4b05      	ldr	r3, [pc, #20]	; (eeec <nrf_802154_sl_ant_div_txack_notify+0x18>)
    eed6:	781b      	ldrb	r3, [r3, #0]
    eed8:	2b01      	cmp	r3, #1
    eeda:	d105      	bne.n	eee8 <nrf_802154_sl_ant_div_txack_notify+0x14>
    eedc:	4b04      	ldr	r3, [pc, #16]	; (eef0 <nrf_802154_sl_ant_div_txack_notify+0x1c>)
    eede:	7818      	ldrb	r0, [r3, #0]
    eee0:	2802      	cmp	r0, #2
    eee2:	d001      	beq.n	eee8 <nrf_802154_sl_ant_div_txack_notify+0x14>
    eee4:	f005 b80b 	b.w	13efe <nrf_802154_sl_ant_div_antenna_set>
    eee8:	4770      	bx	lr
    eeea:	bf00      	nop
    eeec:	20003c29 	.word	0x20003c29
    eef0:	200001ed 	.word	0x200001ed

0000eef4 <nrf_802154_sl_ant_div_internal_cfg_get>:
    eef4:	4b03      	ldr	r3, [pc, #12]	; (ef04 <nrf_802154_sl_ant_div_internal_cfg_get+0x10>)
    eef6:	4804      	ldr	r0, [pc, #16]	; (ef08 <nrf_802154_sl_ant_div_internal_cfg_get+0x14>)
    eef8:	781b      	ldrb	r3, [r3, #0]
    eefa:	2b00      	cmp	r3, #0
    eefc:	bf08      	it	eq
    eefe:	2000      	moveq	r0, #0
    ef00:	4770      	bx	lr
    ef02:	bf00      	nop
    ef04:	20003c2c 	.word	0x20003c2c
    ef08:	200022fc 	.word	0x200022fc

0000ef0c <nrf_802154_sl_ant_div_cfg_mode_get>:
    ef0c:	b118      	cbz	r0, ef16 <nrf_802154_sl_ant_div_cfg_mode_get+0xa>
    ef0e:	2801      	cmp	r0, #1
    ef10:	d004      	beq.n	ef1c <nrf_802154_sl_ant_div_cfg_mode_get+0x10>
    ef12:	2000      	movs	r0, #0
    ef14:	4770      	bx	lr
    ef16:	4b02      	ldr	r3, [pc, #8]	; (ef20 <nrf_802154_sl_ant_div_cfg_mode_get+0x14>)
    ef18:	7818      	ldrb	r0, [r3, #0]
    ef1a:	4770      	bx	lr
    ef1c:	4b01      	ldr	r3, [pc, #4]	; (ef24 <nrf_802154_sl_ant_div_cfg_mode_get+0x18>)
    ef1e:	e7fb      	b.n	ef18 <nrf_802154_sl_ant_div_cfg_mode_get+0xc>
    ef20:	20003c2e 	.word	0x20003c2e
    ef24:	20003c30 	.word	0x20003c30

0000ef28 <nrf_802154_sl_ant_div_cfg_antenna_get>:
    ef28:	b118      	cbz	r0, ef32 <nrf_802154_sl_ant_div_cfg_antenna_get+0xa>
    ef2a:	2801      	cmp	r0, #1
    ef2c:	d004      	beq.n	ef38 <nrf_802154_sl_ant_div_cfg_antenna_get+0x10>
    ef2e:	2002      	movs	r0, #2
    ef30:	4770      	bx	lr
    ef32:	4b02      	ldr	r3, [pc, #8]	; (ef3c <nrf_802154_sl_ant_div_cfg_antenna_get+0x14>)
    ef34:	7818      	ldrb	r0, [r3, #0]
    ef36:	4770      	bx	lr
    ef38:	4b01      	ldr	r3, [pc, #4]	; (ef40 <nrf_802154_sl_ant_div_cfg_antenna_get+0x18>)
    ef3a:	e7fb      	b.n	ef34 <nrf_802154_sl_ant_div_cfg_antenna_get+0xc>
    ef3c:	20003c2d 	.word	0x20003c2d
    ef40:	20003c2f 	.word	0x20003c2f

0000ef44 <nrf_802154_sl_crit_sect_init>:
    ef44:	4b01      	ldr	r3, [pc, #4]	; (ef4c <nrf_802154_sl_crit_sect_init+0x8>)
    ef46:	6018      	str	r0, [r3, #0]
    ef48:	4770      	bx	lr
    ef4a:	bf00      	nop
    ef4c:	20002304 	.word	0x20002304

0000ef50 <dly_ts_by_id_search>:
    ef50:	b510      	push	{r4, lr}
    ef52:	4906      	ldr	r1, [pc, #24]	; (ef6c <dly_ts_by_id_search+0x1c>)
    ef54:	4602      	mov	r2, r0
    ef56:	2300      	movs	r3, #0
    ef58:	f851 0b04 	ldr.w	r0, [r1], #4
    ef5c:	6b84      	ldr	r4, [r0, #56]	; 0x38
    ef5e:	4294      	cmp	r4, r2
    ef60:	d003      	beq.n	ef6a <dly_ts_by_id_search+0x1a>
    ef62:	3301      	adds	r3, #1
    ef64:	2b04      	cmp	r3, #4
    ef66:	d1f7      	bne.n	ef58 <dly_ts_by_id_search+0x8>
    ef68:	2000      	movs	r0, #0
    ef6a:	bd10      	pop	{r4, pc}
    ef6c:	20002310 	.word	0x20002310

0000ef70 <all_prec_update>:
    ef70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef74:	4d2a      	ldr	r5, [pc, #168]	; (f020 <all_prec_update+0xb0>)
    ef76:	4e2b      	ldr	r6, [pc, #172]	; (f024 <all_prec_update+0xb4>)
    ef78:	4628      	mov	r0, r5
    ef7a:	f005 f928 	bl	141ce <nrf_802154_sl_mutex_try_acquire>
    ef7e:	2800      	cmp	r0, #0
    ef80:	d044      	beq.n	f00c <all_prec_update+0x9c>
    ef82:	7837      	ldrb	r7, [r6, #0]
    ef84:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f028 <all_prec_update+0xb8>
    ef88:	f005 f8a3 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    ef8c:	4684      	mov	ip, r0
    ef8e:	2000      	movs	r0, #0
    ef90:	4604      	mov	r4, r0
    ef92:	f859 2b04 	ldr.w	r2, [r9], #4
    ef96:	e9d2 3e0a 	ldrd	r3, lr, [r2, #40]	; 0x28
    ef9a:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    ef9e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
    efa2:	2a01      	cmp	r2, #1
    efa4:	d109      	bne.n	efba <all_prec_update+0x4a>
    efa6:	f5b3 73f0 	subs.w	r3, r3, #480	; 0x1e0
    efaa:	f14e 32ff 	adc.w	r2, lr, #4294967295	; 0xffffffff
    efae:	459c      	cmp	ip, r3
    efb0:	eb71 0302 	sbcs.w	r3, r1, r2
    efb4:	bf38      	it	cc
    efb6:	f04f 0800 	movcc.w	r8, #0
    efba:	4540      	cmp	r0, r8
    efbc:	f104 0401 	add.w	r4, r4, #1
    efc0:	bf38      	it	cc
    efc2:	4640      	movcc	r0, r8
    efc4:	2c04      	cmp	r4, #4
    efc6:	d1e4      	bne.n	ef92 <all_prec_update+0x22>
    efc8:	4b18      	ldr	r3, [pc, #96]	; (f02c <all_prec_update+0xbc>)
    efca:	f8df 8064 	ldr.w	r8, [pc, #100]	; f030 <all_prec_update+0xc0>
    efce:	781c      	ldrb	r4, [r3, #0]
    efd0:	4284      	cmp	r4, r0
    efd2:	bf38      	it	cc
    efd4:	4604      	movcc	r4, r0
    efd6:	b2e4      	uxtb	r4, r4
    efd8:	42a7      	cmp	r7, r4
    efda:	d00c      	beq.n	eff6 <all_prec_update+0x86>
    efdc:	7034      	strb	r4, [r6, #0]
    efde:	b9bc      	cbnz	r4, f010 <all_prec_update+0xa0>
    efe0:	f7f9 f956 	bl	8290 <nrf_802154_clock_hfclk_stop>
    efe4:	4620      	mov	r0, r4
    efe6:	f888 4000 	strb.w	r4, [r8]
    efea:	f000 fc41 	bl	f870 <nrf_802154_wifi_coex_prio_request>
    efee:	f7f4 f9ef 	bl	33d0 <nrf_raal_continuous_mode_exit>
    eff2:	f888 4001 	strb.w	r4, [r8, #1]
    eff6:	f898 3001 	ldrb.w	r3, [r8, #1]
    effa:	b113      	cbz	r3, f002 <all_prec_update+0x92>
    effc:	4620      	mov	r0, r4
    effe:	f000 fc37 	bl	f870 <nrf_802154_wifi_coex_prio_request>
    f002:	4628      	mov	r0, r5
    f004:	f005 f8f2 	bl	141ec <nrf_802154_sl_mutex_release>
    f008:	2800      	cmp	r0, #0
    f00a:	d1b5      	bne.n	ef78 <all_prec_update+0x8>
    f00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f010:	2f00      	cmp	r7, #0
    f012:	d1f0      	bne.n	eff6 <all_prec_update+0x86>
    f014:	f7f9 f928 	bl	8268 <nrf_802154_clock_hfclk_start>
    f018:	f7f4 f9b2 	bl	3380 <nrf_raal_continuous_mode_enter>
    f01c:	e7eb      	b.n	eff6 <all_prec_update+0x86>
    f01e:	bf00      	nop
    f020:	2000230c 	.word	0x2000230c
    f024:	20003c36 	.word	0x20003c36
    f028:	20002310 	.word	0x20002310
    f02c:	20003c34 	.word	0x20003c34
    f030:	20003c31 	.word	0x20003c31

0000f034 <delayed_timeslot_prec_request>:
    f034:	b510      	push	{r4, lr}
    f036:	6984      	ldr	r4, [r0, #24]
    f038:	f7ff ff9a 	bl	ef70 <all_prec_update>
    f03c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    f040:	e9c4 2304 	strd	r2, r3, [r4, #16]
    f044:	2301      	movs	r3, #1
    f046:	7723      	strb	r3, [r4, #28]
    f048:	4b03      	ldr	r3, [pc, #12]	; (f058 <delayed_timeslot_prec_request+0x24>)
    f04a:	61a4      	str	r4, [r4, #24]
    f04c:	6223      	str	r3, [r4, #32]
    f04e:	4620      	mov	r0, r4
    f050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f054:	f000 b9fa 	b.w	f44c <nrf_802154_sl_timer_add>
    f058:	0001400b 	.word	0x0001400b

0000f05c <nrf_802154_rsch_init>:
    f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f05e:	f7f4 f9d7 	bl	3410 <nrf_raal_init>
    f062:	4820      	ldr	r0, [pc, #128]	; (f0e4 <nrf_802154_rsch_init+0x88>)
    f064:	4d20      	ldr	r5, [pc, #128]	; (f0e8 <nrf_802154_rsch_init+0x8c>)
    f066:	4e21      	ldr	r6, [pc, #132]	; (f0ec <nrf_802154_rsch_init+0x90>)
    f068:	f005 f8ae 	bl	141c8 <nrf_802154_sl_mutex_init>
    f06c:	4820      	ldr	r0, [pc, #128]	; (f0f0 <nrf_802154_rsch_init+0x94>)
    f06e:	f005 f8ab 	bl	141c8 <nrf_802154_sl_mutex_init>
    f072:	4b20      	ldr	r3, [pc, #128]	; (f0f4 <nrf_802154_rsch_init+0x98>)
    f074:	4820      	ldr	r0, [pc, #128]	; (f0f8 <nrf_802154_rsch_init+0x9c>)
    f076:	6030      	str	r0, [r6, #0]
    f078:	2400      	movs	r4, #0
    f07a:	701c      	strb	r4, [r3, #0]
    f07c:	4b1f      	ldr	r3, [pc, #124]	; (f0fc <nrf_802154_rsch_init+0xa0>)
    f07e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    f082:	701c      	strb	r4, [r3, #0]
    f084:	4b1e      	ldr	r3, [pc, #120]	; (f100 <nrf_802154_rsch_init+0xa4>)
    f086:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    f08a:	701c      	strb	r4, [r3, #0]
    f08c:	4b1d      	ldr	r3, [pc, #116]	; (f104 <nrf_802154_rsch_init+0xa8>)
    f08e:	2202      	movs	r2, #2
    f090:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f094:	701c      	strb	r4, [r3, #0]
    f096:	6387      	str	r7, [r0, #56]	; 0x38
    f098:	705c      	strb	r4, [r3, #1]
    f09a:	709a      	strb	r2, [r3, #2]
    f09c:	f005 f820 	bl	140e0 <nrf_802154_sl_timer_init>
    f0a0:	4628      	mov	r0, r5
    f0a2:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    f0a6:	63af      	str	r7, [r5, #56]	; 0x38
    f0a8:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
    f0ac:	6075      	str	r5, [r6, #4]
    f0ae:	f005 f817 	bl	140e0 <nrf_802154_sl_timer_init>
    f0b2:	f105 0048 	add.w	r0, r5, #72	; 0x48
    f0b6:	60b0      	str	r0, [r6, #8]
    f0b8:	f885 4078 	strb.w	r4, [r5, #120]	; 0x78
    f0bc:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
    f0c0:	f885 4088 	strb.w	r4, [r5, #136]	; 0x88
    f0c4:	f005 f80c 	bl	140e0 <nrf_802154_sl_timer_init>
    f0c8:	480f      	ldr	r0, [pc, #60]	; (f108 <nrf_802154_rsch_init+0xac>)
    f0ca:	60f0      	str	r0, [r6, #12]
    f0cc:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
    f0d0:	6387      	str	r7, [r0, #56]	; 0x38
    f0d2:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    f0d6:	f005 f803 	bl	140e0 <nrf_802154_sl_timer_init>
    f0da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f0de:	f000 bbbb 	b.w	f858 <nrf_802154_wifi_coex_init>
    f0e2:	bf00      	nop
    f0e4:	20002308 	.word	0x20002308
    f0e8:	200016e0 	.word	0x200016e0
    f0ec:	20002310 	.word	0x20002310
    f0f0:	2000230c 	.word	0x2000230c
    f0f4:	20003c35 	.word	0x20003c35
    f0f8:	20001770 	.word	0x20001770
    f0fc:	20003c34 	.word	0x20003c34
    f100:	20003c36 	.word	0x20003c36
    f104:	20003c31 	.word	0x20003c31
    f108:	20001698 	.word	0x20001698

0000f10c <nrf_802154_rsch_continuous_ended>:
    f10c:	4b04      	ldr	r3, [pc, #16]	; (f120 <nrf_802154_rsch_continuous_ended+0x14>)
    f10e:	2200      	movs	r2, #0
    f110:	701a      	strb	r2, [r3, #0]
    f112:	4b04      	ldr	r3, [pc, #16]	; (f124 <nrf_802154_rsch_continuous_ended+0x18>)
    f114:	7819      	ldrb	r1, [r3, #0]
    f116:	b111      	cbz	r1, f11e <nrf_802154_rsch_continuous_ended+0x12>
    f118:	701a      	strb	r2, [r3, #0]
    f11a:	f7f4 b917 	b.w	334c <nrf_raal_continuous_ended>
    f11e:	4770      	bx	lr
    f120:	20003c38 	.word	0x20003c38
    f124:	20003c37 	.word	0x20003c37

0000f128 <notify_core>:
    f128:	b538      	push	{r3, r4, r5, lr}
    f12a:	4d1c      	ldr	r5, [pc, #112]	; (f19c <notify_core+0x74>)
    f12c:	4c1c      	ldr	r4, [pc, #112]	; (f1a0 <notify_core+0x78>)
    f12e:	4628      	mov	r0, r5
    f130:	f005 f84d 	bl	141ce <nrf_802154_sl_mutex_try_acquire>
    f134:	b318      	cbz	r0, f17e <notify_core+0x56>
    f136:	7823      	ldrb	r3, [r4, #0]
    f138:	2b03      	cmp	r3, #3
    f13a:	bf98      	it	ls
    f13c:	7820      	ldrbls	r0, [r4, #0]
    f13e:	7863      	ldrb	r3, [r4, #1]
    f140:	bf8c      	ite	hi
    f142:	2004      	movhi	r0, #4
    f144:	b2c0      	uxtbls	r0, r0
    f146:	4298      	cmp	r0, r3
    f148:	bf88      	it	hi
    f14a:	7860      	ldrbhi	r0, [r4, #1]
    f14c:	78a3      	ldrb	r3, [r4, #2]
    f14e:	bf88      	it	hi
    f150:	b2c0      	uxtbhi	r0, r0
    f152:	4283      	cmp	r3, r0
    f154:	4b13      	ldr	r3, [pc, #76]	; (f1a4 <notify_core+0x7c>)
    f156:	bf38      	it	cc
    f158:	78a0      	ldrbcc	r0, [r4, #2]
    f15a:	781a      	ldrb	r2, [r3, #0]
    f15c:	bf38      	it	cc
    f15e:	b2c0      	uxtbcc	r0, r0
    f160:	4282      	cmp	r2, r0
    f162:	d00d      	beq.n	f180 <notify_core+0x58>
    f164:	7018      	strb	r0, [r3, #0]
    f166:	4a10      	ldr	r2, [pc, #64]	; (f1a8 <notify_core+0x80>)
    f168:	fab0 f380 	clz	r3, r0
    f16c:	095b      	lsrs	r3, r3, #5
    f16e:	7013      	strb	r3, [r2, #0]
    f170:	f000 f902 	bl	f378 <nrf_802154_rsch_continuous_prio_changed>
    f174:	4628      	mov	r0, r5
    f176:	f005 f839 	bl	141ec <nrf_802154_sl_mutex_release>
    f17a:	2800      	cmp	r0, #0
    f17c:	d1d7      	bne.n	f12e <notify_core+0x6>
    f17e:	bd38      	pop	{r3, r4, r5, pc}
    f180:	781b      	ldrb	r3, [r3, #0]
    f182:	2b00      	cmp	r3, #0
    f184:	d1f6      	bne.n	f174 <notify_core+0x4c>
    f186:	4b08      	ldr	r3, [pc, #32]	; (f1a8 <notify_core+0x80>)
    f188:	781b      	ldrb	r3, [r3, #0]
    f18a:	2b00      	cmp	r3, #0
    f18c:	d1f2      	bne.n	f174 <notify_core+0x4c>
    f18e:	4b07      	ldr	r3, [pc, #28]	; (f1ac <notify_core+0x84>)
    f190:	781b      	ldrb	r3, [r3, #0]
    f192:	2b00      	cmp	r3, #0
    f194:	d0ee      	beq.n	f174 <notify_core+0x4c>
    f196:	f7ff ffb9 	bl	f10c <nrf_802154_rsch_continuous_ended>
    f19a:	e7eb      	b.n	f174 <notify_core+0x4c>
    f19c:	20002308 	.word	0x20002308
    f1a0:	20003c31 	.word	0x20003c31
    f1a4:	20003c35 	.word	0x20003c35
    f1a8:	20003c38 	.word	0x20003c38
    f1ac:	20003c37 	.word	0x20003c37

0000f1b0 <nrf_802154_rsch_continuous_mode_priority_set>:
    f1b0:	b508      	push	{r3, lr}
    f1b2:	4b05      	ldr	r3, [pc, #20]	; (f1c8 <nrf_802154_rsch_continuous_mode_priority_set+0x18>)
    f1b4:	7018      	strb	r0, [r3, #0]
    f1b6:	f3bf 8f5f 	dmb	sy
    f1ba:	f7ff fed9 	bl	ef70 <all_prec_update>
    f1be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f1c2:	f7ff bfb1 	b.w	f128 <notify_core>
    f1c6:	bf00      	nop
    f1c8:	20003c34 	.word	0x20003c34

0000f1cc <nrf_802154_rsch_delayed_timeslot_request>:
    f1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1d0:	7a43      	ldrb	r3, [r0, #9]
    f1d2:	2b01      	cmp	r3, #1
    f1d4:	4605      	mov	r5, r0
    f1d6:	d034      	beq.n	f242 <nrf_802154_rsch_delayed_timeslot_request+0x76>
    f1d8:	2b02      	cmp	r3, #2
    f1da:	d035      	beq.n	f248 <nrf_802154_rsch_delayed_timeslot_request+0x7c>
    f1dc:	2b00      	cmp	r3, #0
    f1de:	d167      	bne.n	f2b0 <nrf_802154_rsch_delayed_timeslot_request+0xe4>
    f1e0:	4834      	ldr	r0, [pc, #208]	; (f2b4 <nrf_802154_rsch_delayed_timeslot_request+0xe8>)
    f1e2:	2101      	movs	r1, #1
    f1e4:	f004 fed8 	bl	13f98 <dly_ts_from_pool_alloc>
    f1e8:	4604      	mov	r4, r0
    f1ea:	b340      	cbz	r0, f23e <nrf_802154_rsch_delayed_timeslot_request+0x72>
    f1ec:	f895 800a 	ldrb.w	r8, [r5, #10]
    f1f0:	f1b8 0f00 	cmp.w	r8, #0
    f1f4:	d047      	beq.n	f286 <nrf_802154_rsch_delayed_timeslot_request+0xba>
    f1f6:	f1b8 0f01 	cmp.w	r8, #1
    f1fa:	d155      	bne.n	f2a8 <nrf_802154_rsch_delayed_timeslot_request+0xdc>
    f1fc:	f004 ff69 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    f200:	e9d5 3200 	ldrd	r3, r2, [r5]
    f204:	f5b3 7cf0 	subs.w	ip, r3, #480	; 0x1e0
    f208:	f142 37ff 	adc.w	r7, r2, #4294967295	; 0xffffffff
    f20c:	4560      	cmp	r0, ip
    f20e:	eb71 0607 	sbcs.w	r6, r1, r7
    f212:	d21c      	bcs.n	f24e <nrf_802154_rsch_delayed_timeslot_request+0x82>
    f214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f216:	f104 0628 	add.w	r6, r4, #40	; 0x28
    f21a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    f21c:	e895 0003 	ldmia.w	r5, {r0, r1}
    f220:	e886 0003 	stmia.w	r6, {r0, r1}
    f224:	e9c4 c704 	strd	ip, r7, [r4, #16]
    f228:	4b23      	ldr	r3, [pc, #140]	; (f2b8 <nrf_802154_rsch_delayed_timeslot_request+0xec>)
    f22a:	61a4      	str	r4, [r4, #24]
    f22c:	f884 801c 	strb.w	r8, [r4, #28]
    f230:	6223      	str	r3, [r4, #32]
    f232:	4620      	mov	r0, r4
    f234:	f000 f90a 	bl	f44c <nrf_802154_sl_timer_add>
    f238:	2800      	cmp	r0, #0
    f23a:	d135      	bne.n	f2a8 <nrf_802154_rsch_delayed_timeslot_request+0xdc>
    f23c:	2001      	movs	r0, #1
    f23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f242:	481e      	ldr	r0, [pc, #120]	; (f2bc <nrf_802154_rsch_delayed_timeslot_request+0xf0>)
    f244:	2102      	movs	r1, #2
    f246:	e7cd      	b.n	f1e4 <nrf_802154_rsch_delayed_timeslot_request+0x18>
    f248:	481d      	ldr	r0, [pc, #116]	; (f2c0 <nrf_802154_rsch_delayed_timeslot_request+0xf4>)
    f24a:	2101      	movs	r1, #1
    f24c:	e7ca      	b.n	f1e4 <nrf_802154_rsch_delayed_timeslot_request+0x18>
    f24e:	4e1d      	ldr	r6, [pc, #116]	; (f2c4 <nrf_802154_rsch_delayed_timeslot_request+0xf8>)
    f250:	7836      	ldrb	r6, [r6, #0]
    f252:	b34e      	cbz	r6, f2a8 <nrf_802154_rsch_delayed_timeslot_request+0xdc>
    f254:	4298      	cmp	r0, r3
    f256:	eb71 0302 	sbcs.w	r3, r1, r2
    f25a:	d225      	bcs.n	f2a8 <nrf_802154_rsch_delayed_timeslot_request+0xdc>
    f25c:	462f      	mov	r7, r5
    f25e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    f260:	f104 0628 	add.w	r6, r4, #40	; 0x28
    f264:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    f266:	e897 0003 	ldmia.w	r7, {r0, r1}
    f26a:	e9d5 2300 	ldrd	r2, r3, [r5]
    f26e:	e886 0003 	stmia.w	r6, {r0, r1}
    f272:	e9c4 2304 	strd	r2, r3, [r4, #16]
    f276:	61a4      	str	r4, [r4, #24]
    f278:	f884 801c 	strb.w	r8, [r4, #28]
    f27c:	4b12      	ldr	r3, [pc, #72]	; (f2c8 <nrf_802154_rsch_delayed_timeslot_request+0xfc>)
    f27e:	6223      	str	r3, [r4, #32]
    f280:	f7ff fe76 	bl	ef70 <all_prec_update>
    f284:	e7d5      	b.n	f232 <nrf_802154_rsch_delayed_timeslot_request+0x66>
    f286:	462f      	mov	r7, r5
    f288:	f100 0628 	add.w	r6, r0, #40	; 0x28
    f28c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    f28e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    f290:	e897 0003 	ldmia.w	r7, {r0, r1}
    f294:	e9d5 2300 	ldrd	r2, r3, [r5]
    f298:	e886 0003 	stmia.w	r6, {r0, r1}
    f29c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    f2a0:	2301      	movs	r3, #1
    f2a2:	61a4      	str	r4, [r4, #24]
    f2a4:	7723      	strb	r3, [r4, #28]
    f2a6:	e7e9      	b.n	f27c <nrf_802154_rsch_delayed_timeslot_request+0xb0>
    f2a8:	2101      	movs	r1, #1
    f2aa:	4620      	mov	r0, r4
    f2ac:	f004 fe92 	bl	13fd4 <dly_ts_release>
    f2b0:	2000      	movs	r0, #0
    f2b2:	e7c4      	b.n	f23e <nrf_802154_rsch_delayed_timeslot_request+0x72>
    f2b4:	20001770 	.word	0x20001770
    f2b8:	0000f035 	.word	0x0000f035
    f2bc:	200016e0 	.word	0x200016e0
    f2c0:	20001698 	.word	0x20001698
    f2c4:	20003c36 	.word	0x20003c36
    f2c8:	0001400b 	.word	0x0001400b

0000f2cc <nrf_802154_rsch_prec_is_approved>:
    f2cc:	4b03      	ldr	r3, [pc, #12]	; (f2dc <nrf_802154_rsch_prec_is_approved+0x10>)
    f2ce:	5c18      	ldrb	r0, [r3, r0]
    f2d0:	4288      	cmp	r0, r1
    f2d2:	bf34      	ite	cc
    f2d4:	2000      	movcc	r0, #0
    f2d6:	2001      	movcs	r0, #1
    f2d8:	4770      	bx	lr
    f2da:	bf00      	nop
    f2dc:	20003c31 	.word	0x20003c31

0000f2e0 <nrf_raal_timeslot_started>:
    f2e0:	b508      	push	{r3, lr}
    f2e2:	f000 faed 	bl	f8c0 <nrf_802154_wifi_coex_on_raal_timeslot_started>
    f2e6:	4b05      	ldr	r3, [pc, #20]	; (f2fc <nrf_raal_timeslot_started+0x1c>)
    f2e8:	2204      	movs	r2, #4
    f2ea:	705a      	strb	r2, [r3, #1]
    f2ec:	f7ff fe40 	bl	ef70 <all_prec_update>
    f2f0:	f7ff ff1a 	bl	f128 <notify_core>
    f2f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f2f8:	f7ff be3a 	b.w	ef70 <all_prec_update>
    f2fc:	20003c31 	.word	0x20003c31

0000f300 <nrf_raal_timeslot_ended>:
    f300:	b508      	push	{r3, lr}
    f302:	4b06      	ldr	r3, [pc, #24]	; (f31c <nrf_raal_timeslot_ended+0x1c>)
    f304:	2201      	movs	r2, #1
    f306:	701a      	strb	r2, [r3, #0]
    f308:	f004 feed 	bl	140e6 <nrf_802154_wifi_coex_on_raal_timeslot_ended>
    f30c:	4b04      	ldr	r3, [pc, #16]	; (f320 <nrf_raal_timeslot_ended+0x20>)
    f30e:	2200      	movs	r2, #0
    f310:	705a      	strb	r2, [r3, #1]
    f312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f316:	f7ff bf07 	b.w	f128 <notify_core>
    f31a:	bf00      	nop
    f31c:	20003c37 	.word	0x20003c37
    f320:	20003c31 	.word	0x20003c31

0000f324 <nrf_802154_clock_hfclk_ready>:
    f324:	b508      	push	{r3, lr}
    f326:	4b04      	ldr	r3, [pc, #16]	; (f338 <nrf_802154_clock_hfclk_ready+0x14>)
    f328:	2204      	movs	r2, #4
    f32a:	701a      	strb	r2, [r3, #0]
    f32c:	f7ff fe20 	bl	ef70 <all_prec_update>
    f330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f334:	f7ff bef8 	b.w	f128 <notify_core>
    f338:	20003c31 	.word	0x20003c31

0000f33c <nrf_802154_wifi_coex_granted>:
    f33c:	b508      	push	{r3, lr}
    f33e:	4b04      	ldr	r3, [pc, #16]	; (f350 <nrf_802154_wifi_coex_granted+0x14>)
    f340:	2204      	movs	r2, #4
    f342:	709a      	strb	r2, [r3, #2]
    f344:	f7ff fe14 	bl	ef70 <all_prec_update>
    f348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f34c:	f7ff beec 	b.w	f128 <notify_core>
    f350:	20003c31 	.word	0x20003c31

0000f354 <nrf_802154_wifi_coex_denied>:
    f354:	b508      	push	{r3, lr}
    f356:	4b04      	ldr	r3, [pc, #16]	; (f368 <nrf_802154_wifi_coex_denied+0x14>)
    f358:	2202      	movs	r2, #2
    f35a:	709a      	strb	r2, [r3, #2]
    f35c:	f7ff fe08 	bl	ef70 <all_prec_update>
    f360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f364:	f7ff bee0 	b.w	f128 <notify_core>
    f368:	20003c31 	.word	0x20003c31

0000f36c <nrf_802154_rsch_crit_sect_init>:
    f36c:	4b01      	ldr	r3, [pc, #4]	; (f374 <nrf_802154_rsch_crit_sect_init+0x8>)
    f36e:	22ff      	movs	r2, #255	; 0xff
    f370:	701a      	strb	r2, [r3, #0]
    f372:	4770      	bx	lr
    f374:	20003c39 	.word	0x20003c39

0000f378 <nrf_802154_rsch_continuous_prio_changed>:
    f378:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f37a:	4d11      	ldr	r5, [pc, #68]	; (f3c0 <nrf_802154_rsch_continuous_prio_changed+0x48>)
    f37c:	682b      	ldr	r3, [r5, #0]
    f37e:	681b      	ldr	r3, [r3, #0]
    f380:	4604      	mov	r4, r0
    f382:	4798      	blx	r3
    f384:	4b0f      	ldr	r3, [pc, #60]	; (f3c4 <nrf_802154_rsch_continuous_prio_changed+0x4c>)
    f386:	b158      	cbz	r0, f3a0 <nrf_802154_rsch_continuous_prio_changed+0x28>
    f388:	781a      	ldrb	r2, [r3, #0]
    f38a:	2aff      	cmp	r2, #255	; 0xff
    f38c:	d108      	bne.n	f3a0 <nrf_802154_rsch_continuous_prio_changed+0x28>
    f38e:	4620      	mov	r0, r4
    f390:	f7f9 fc7a 	bl	8c88 <nrf_802154_rsch_crit_sect_prio_changed>
    f394:	682b      	ldr	r3, [r5, #0]
    f396:	685b      	ldr	r3, [r3, #4]
    f398:	b003      	add	sp, #12
    f39a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f39e:	4718      	bx	r3
    f3a0:	e8d3 2f4f 	ldrexb	r2, [r3]
    f3a4:	b2d2      	uxtb	r2, r2
    f3a6:	f88d 2007 	strb.w	r2, [sp, #7]
    f3aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f3ae:	e8c3 4f42 	strexb	r2, r4, [r3]
    f3b2:	2a00      	cmp	r2, #0
    f3b4:	d1f4      	bne.n	f3a0 <nrf_802154_rsch_continuous_prio_changed+0x28>
    f3b6:	2800      	cmp	r0, #0
    f3b8:	d1ec      	bne.n	f394 <nrf_802154_rsch_continuous_prio_changed+0x1c>
    f3ba:	b003      	add	sp, #12
    f3bc:	bd30      	pop	{r4, r5, pc}
    f3be:	bf00      	nop
    f3c0:	20002304 	.word	0x20002304
    f3c4:	20003c39 	.word	0x20003c39

0000f3c8 <nrf_802154_critical_section_rsch_process_pending>:
    f3c8:	4a06      	ldr	r2, [pc, #24]	; (f3e4 <nrf_802154_critical_section_rsch_process_pending+0x1c>)
    f3ca:	23ff      	movs	r3, #255	; 0xff
    f3cc:	e8d2 0f4f 	ldrexb	r0, [r2]
    f3d0:	e8c2 3f41 	strexb	r1, r3, [r2]
    f3d4:	2900      	cmp	r1, #0
    f3d6:	d1f9      	bne.n	f3cc <nrf_802154_critical_section_rsch_process_pending+0x4>
    f3d8:	b2c0      	uxtb	r0, r0
    f3da:	28ff      	cmp	r0, #255	; 0xff
    f3dc:	d001      	beq.n	f3e2 <nrf_802154_critical_section_rsch_process_pending+0x1a>
    f3de:	f7f9 bc53 	b.w	8c88 <nrf_802154_rsch_crit_sect_prio_changed>
    f3e2:	4770      	bx	lr
    f3e4:	20003c39 	.word	0x20003c39

0000f3e8 <nrf_802154_critical_section_rsch_event_is_pending>:
    f3e8:	4b02      	ldr	r3, [pc, #8]	; (f3f4 <nrf_802154_critical_section_rsch_event_is_pending+0xc>)
    f3ea:	7818      	ldrb	r0, [r3, #0]
    f3ec:	38ff      	subs	r0, #255	; 0xff
    f3ee:	bf18      	it	ne
    f3f0:	2001      	movne	r0, #1
    f3f2:	4770      	bx	lr
    f3f4:	20003c39 	.word	0x20003c39

0000f3f8 <lptimer_schedule_at_head.constprop.0>:
    f3f8:	b538      	push	{r3, r4, r5, lr}
    f3fa:	4d0b      	ldr	r5, [pc, #44]	; (f428 <lptimer_schedule_at_head.constprop.0+0x30>)
    f3fc:	f105 0408 	add.w	r4, r5, #8
    f400:	4620      	mov	r0, r4
    f402:	f004 fee4 	bl	141ce <nrf_802154_sl_mutex_try_acquire>
    f406:	b150      	cbz	r0, f41e <lptimer_schedule_at_head.constprop.0+0x26>
    f408:	682b      	ldr	r3, [r5, #0]
    f40a:	b14b      	cbz	r3, f420 <lptimer_schedule_at_head.constprop.0+0x28>
    f40c:	e9d3 0100 	ldrd	r0, r1, [r3]
    f410:	f7f9 f84c 	bl	84ac <nrf_802154_platform_sl_lptimer_schedule_at>
    f414:	4620      	mov	r0, r4
    f416:	f004 fee9 	bl	141ec <nrf_802154_sl_mutex_release>
    f41a:	2800      	cmp	r0, #0
    f41c:	d1f0      	bne.n	f400 <lptimer_schedule_at_head.constprop.0+0x8>
    f41e:	bd38      	pop	{r3, r4, r5, pc}
    f420:	f7f9 f84c 	bl	84bc <nrf_802154_platform_sl_lptimer_disable>
    f424:	e7f6      	b.n	f414 <lptimer_schedule_at_head.constprop.0+0x1c>
    f426:	bf00      	nop
    f428:	20002320 	.word	0x20002320

0000f42c <nrf_802154_sl_timer_module_init>:
    f42c:	b510      	push	{r4, lr}
    f42e:	4c06      	ldr	r4, [pc, #24]	; (f448 <nrf_802154_sl_timer_module_init+0x1c>)
    f430:	4620      	mov	r0, r4
    f432:	f004 fe5a 	bl	140ea <nrf_802154_sl_atomic_list_init>
    f436:	f104 0008 	add.w	r0, r4, #8
    f43a:	f004 fec5 	bl	141c8 <nrf_802154_sl_mutex_init>
    f43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f442:	f7f9 b815 	b.w	8470 <nrf_802154_platform_sl_lp_timer_init>
    f446:	bf00      	nop
    f448:	20002320 	.word	0x20002320

0000f44c <nrf_802154_sl_timer_add>:
    f44c:	b510      	push	{r4, lr}
    f44e:	4604      	mov	r4, r0
    f450:	b1a0      	cbz	r0, f47c <nrf_802154_sl_timer_add+0x30>
    f452:	7f02      	ldrb	r2, [r0, #28]
    f454:	2a01      	cmp	r2, #1
    f456:	d111      	bne.n	f47c <nrf_802154_sl_timer_add+0x30>
    f458:	6a03      	ldr	r3, [r0, #32]
    f45a:	b18b      	cbz	r3, f480 <nrf_802154_sl_timer_add+0x34>
    f45c:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
    f460:	f003 feb4 	bl	131cc <nrf_802154_platform_sl_lptimer_us_to_lpticks_convert>
    f464:	4b07      	ldr	r3, [pc, #28]	; (f484 <nrf_802154_sl_timer_add+0x38>)
    f466:	e9c4 0100 	strd	r0, r1, [r4]
    f46a:	2208      	movs	r2, #8
    f46c:	4806      	ldr	r0, [pc, #24]	; (f488 <nrf_802154_sl_timer_add+0x3c>)
    f46e:	4621      	mov	r1, r4
    f470:	f004 fe3f 	bl	140f2 <nrf_802154_sl_atomic_list_insert_ordered>
    f474:	f7ff ffc0 	bl	f3f8 <lptimer_schedule_at_head.constprop.0>
    f478:	2000      	movs	r0, #0
    f47a:	bd10      	pop	{r4, pc}
    f47c:	2001      	movs	r0, #1
    f47e:	e7fc      	b.n	f47a <nrf_802154_sl_timer_add+0x2e>
    f480:	4610      	mov	r0, r2
    f482:	e7fa      	b.n	f47a <nrf_802154_sl_timer_add+0x2e>
    f484:	00014095 	.word	0x00014095
    f488:	20002320 	.word	0x20002320

0000f48c <nrf_802154_sl_timer_remove>:
    f48c:	b508      	push	{r3, lr}
    f48e:	4601      	mov	r1, r0
    f490:	b140      	cbz	r0, f4a4 <nrf_802154_sl_timer_remove+0x18>
    f492:	4806      	ldr	r0, [pc, #24]	; (f4ac <nrf_802154_sl_timer_remove+0x20>)
    f494:	2208      	movs	r2, #8
    f496:	f004 fe54 	bl	14142 <nrf_802154_sl_atomic_list_remove>
    f49a:	b128      	cbz	r0, f4a8 <nrf_802154_sl_timer_remove+0x1c>
    f49c:	f7ff ffac 	bl	f3f8 <lptimer_schedule_at_head.constprop.0>
    f4a0:	2000      	movs	r0, #0
    f4a2:	bd08      	pop	{r3, pc}
    f4a4:	2001      	movs	r0, #1
    f4a6:	e7fc      	b.n	f4a2 <nrf_802154_sl_timer_remove+0x16>
    f4a8:	2004      	movs	r0, #4
    f4aa:	e7fa      	b.n	f4a2 <nrf_802154_sl_timer_remove+0x16>
    f4ac:	20002320 	.word	0x20002320

0000f4b0 <nrf_802154_sl_timer_handler>:
    f4b0:	b513      	push	{r0, r1, r4, lr}
    f4b2:	4a0a      	ldr	r2, [pc, #40]	; (f4dc <nrf_802154_sl_timer_handler+0x2c>)
    f4b4:	e9cd 0100 	strd	r0, r1, [sp]
    f4b8:	466b      	mov	r3, sp
    f4ba:	4809      	ldr	r0, [pc, #36]	; (f4e0 <nrf_802154_sl_timer_handler+0x30>)
    f4bc:	2108      	movs	r1, #8
    f4be:	f004 fe60 	bl	14182 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met>
    f4c2:	4604      	mov	r4, r0
    f4c4:	f7ff ff98 	bl	f3f8 <lptimer_schedule_at_head.constprop.0>
    f4c8:	b12c      	cbz	r4, f4d6 <nrf_802154_sl_timer_handler+0x26>
    f4ca:	7f23      	ldrb	r3, [r4, #28]
    f4cc:	07db      	lsls	r3, r3, #31
    f4ce:	d502      	bpl.n	f4d6 <nrf_802154_sl_timer_handler+0x26>
    f4d0:	6a23      	ldr	r3, [r4, #32]
    f4d2:	4620      	mov	r0, r4
    f4d4:	4798      	blx	r3
    f4d6:	b002      	add	sp, #8
    f4d8:	bd10      	pop	{r4, pc}
    f4da:	bf00      	nop
    f4dc:	000140bb 	.word	0x000140bb
    f4e0:	20002320 	.word	0x20002320

0000f4e4 <NRF_802154_SL_US_TO_RTC_TICKS>:
    f4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4e6:	0b43      	lsrs	r3, r0, #13
    f4e8:	4c16      	ldr	r4, [pc, #88]	; (f544 <NRF_802154_SL_US_TO_RTC_TICKS+0x60>)
    f4ea:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
    f4ee:	0b4e      	lsrs	r6, r1, #13
    f4f0:	fba3 3504 	umull	r3, r5, r3, r4
    f4f4:	fb04 5506 	mla	r5, r4, r6, r5
    f4f8:	0f1b      	lsrs	r3, r3, #28
    f4fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    f4fe:	0f2d      	lsrs	r5, r5, #28
    f500:	026e      	lsls	r6, r5, #9
    f502:	f643 5c09 	movw	ip, #15625	; 0x3d09
    f506:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    f50a:	025f      	lsls	r7, r3, #9
    f50c:	fba3 340c 	umull	r3, r4, r3, ip
    f510:	1ac3      	subs	r3, r0, r3
    f512:	fb0c 4505 	mla	r5, ip, r5, r4
    f516:	f240 4031 	movw	r0, #1073	; 0x431
    f51a:	4c0b      	ldr	r4, [pc, #44]	; (f548 <NRF_802154_SL_US_TO_RTC_TICKS+0x64>)
    f51c:	fb03 f000 	mul.w	r0, r3, r0
    f520:	eb61 0105 	sbc.w	r1, r1, r5
    f524:	fb04 0101 	mla	r1, r4, r1, r0
    f528:	fba3 3404 	umull	r3, r4, r3, r4
    f52c:	440c      	add	r4, r1
    f52e:	b122      	cbz	r2, f53a <NRF_802154_SL_US_TO_RTC_TICKS+0x56>
    f530:	3b01      	subs	r3, #1
    f532:	f647 73ff 	movw	r3, #32767	; 0x7fff
    f536:	eb44 0403 	adc.w	r4, r4, r3
    f53a:	0be4      	lsrs	r4, r4, #15
    f53c:	19e0      	adds	r0, r4, r7
    f53e:	f146 0100 	adc.w	r1, r6, #0
    f542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f544:	08637bd0 	.word	0x08637bd0
    f548:	bde82d7b 	.word	0xbde82d7b

0000f54c <nrf_802154_timer_coord_init>:
    f54c:	4a08      	ldr	r2, [pc, #32]	; (f570 <nrf_802154_timer_coord_init+0x24>)
    f54e:	b508      	push	{r3, lr}
    f550:	2300      	movs	r3, #0
    f552:	7013      	strb	r3, [r2, #0]
    f554:	4a07      	ldr	r2, [pc, #28]	; (f574 <nrf_802154_timer_coord_init+0x28>)
    f556:	6013      	str	r3, [r2, #0]
    f558:	4a07      	ldr	r2, [pc, #28]	; (f578 <nrf_802154_timer_coord_init+0x2c>)
    f55a:	7013      	strb	r3, [r2, #0]
    f55c:	f7f8 ff28 	bl	83b0 <nrf_802154_hp_timer_init>
    f560:	4a06      	ldr	r2, [pc, #24]	; (f57c <nrf_802154_timer_coord_init+0x30>)
    f562:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
    f566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f56a:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
    f56e:	bd08      	pop	{r3, pc}
    f570:	20003c3b 	.word	0x20003c3b
    f574:	2000232c 	.word	0x2000232c
    f578:	20003c3a 	.word	0x20003c3a
    f57c:	4001f000 	.word	0x4001f000

0000f580 <nrf_802154_timer_coord_start>:
    f580:	b510      	push	{r4, lr}
    f582:	f7f8 fff9 	bl	8578 <nrf_802154_platform_sl_lptimer_sync_event_get>
    f586:	4604      	mov	r4, r0
    f588:	f7f8 ff32 	bl	83f0 <nrf_802154_hp_timer_sync_task_get>
    f58c:	4b0a      	ldr	r3, [pc, #40]	; (f5b8 <nrf_802154_timer_coord_start+0x38>)
    f58e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    f592:	f8c3 4578 	str.w	r4, [r3, #1400]	; 0x578
    f596:	f8c3 057c 	str.w	r0, [r3, #1404]	; 0x57c
    f59a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f59e:	4b07      	ldr	r3, [pc, #28]	; (f5bc <nrf_802154_timer_coord_start+0x3c>)
    f5a0:	2200      	movs	r2, #0
    f5a2:	701a      	strb	r2, [r3, #0]
    f5a4:	f7f8 ff18 	bl	83d8 <nrf_802154_hp_timer_start>
    f5a8:	f7f8 ff26 	bl	83f8 <nrf_802154_hp_timer_sync_prepare>
    f5ac:	f7f8 ffc8 	bl	8540 <nrf_802154_platform_sl_lptimer_sync_schedule_now>
    f5b0:	4b03      	ldr	r3, [pc, #12]	; (f5c0 <nrf_802154_timer_coord_start+0x40>)
    f5b2:	2201      	movs	r2, #1
    f5b4:	701a      	strb	r2, [r3, #0]
    f5b6:	bd10      	pop	{r4, pc}
    f5b8:	4001f000 	.word	0x4001f000
    f5bc:	20003c3c 	.word	0x20003c3c
    f5c0:	20003c3b 	.word	0x20003c3b

0000f5c4 <nrf_802154_timer_coord_stop>:
    f5c4:	b510      	push	{r4, lr}
    f5c6:	4b0b      	ldr	r3, [pc, #44]	; (f5f4 <nrf_802154_timer_coord_stop+0x30>)
    f5c8:	2400      	movs	r4, #0
    f5ca:	701c      	strb	r4, [r3, #0]
    f5cc:	f7f8 ff0a 	bl	83e4 <nrf_802154_hp_timer_stop>
    f5d0:	f7f8 ffcc 	bl	856c <nrf_802154_platform_sl_lptimer_sync_abort>
    f5d4:	4b08      	ldr	r3, [pc, #32]	; (f5f8 <nrf_802154_timer_coord_stop+0x34>)
    f5d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    f5da:	f8c3 4580 	str.w	r4, [r3, #1408]	; 0x580
    f5de:	f8c3 4584 	str.w	r4, [r3, #1412]	; 0x584
    f5e2:	f8c3 4948 	str.w	r4, [r3, #2376]	; 0x948
    f5e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    f5ea:	f8c3 4578 	str.w	r4, [r3, #1400]	; 0x578
    f5ee:	f8c3 457c 	str.w	r4, [r3, #1404]	; 0x57c
    f5f2:	bd10      	pop	{r4, pc}
    f5f4:	20003c3b 	.word	0x20003c3b
    f5f8:	4001f000 	.word	0x4001f000

0000f5fc <nrf_802154_timer_coord_timestamp_prepare>:
    f5fc:	b510      	push	{r4, lr}
    f5fe:	6804      	ldr	r4, [r0, #0]
    f600:	f7f8 ff1a 	bl	8438 <nrf_802154_hp_timer_timestamp_task_get>
    f604:	4b05      	ldr	r3, [pc, #20]	; (f61c <nrf_802154_timer_coord_timestamp_prepare+0x20>)
    f606:	4a06      	ldr	r2, [pc, #24]	; (f620 <nrf_802154_timer_coord_timestamp_prepare+0x24>)
    f608:	f8c3 4580 	str.w	r4, [r3, #1408]	; 0x580
    f60c:	f8c3 0584 	str.w	r0, [r3, #1412]	; 0x584
    f610:	f8c3 2948 	str.w	r2, [r3, #2376]	; 0x948
    f614:	2201      	movs	r2, #1
    f616:	611a      	str	r2, [r3, #16]
    f618:	bd10      	pop	{r4, pc}
    f61a:	bf00      	nop
    f61c:	4001f000 	.word	0x4001f000
    f620:	4001f014 	.word	0x4001f014

0000f624 <nrf_802154_timer_coord_timestamp_get>:
    f624:	4b26      	ldr	r3, [pc, #152]	; (f6c0 <nrf_802154_timer_coord_timestamp_get+0x9c>)
    f626:	781b      	ldrb	r3, [r3, #0]
    f628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f62c:	4606      	mov	r6, r0
    f62e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    f632:	2b00      	cmp	r3, #0
    f634:	d036      	beq.n	f6a4 <nrf_802154_timer_coord_timestamp_get+0x80>
    f636:	4f23      	ldr	r7, [pc, #140]	; (f6c4 <nrf_802154_timer_coord_timestamp_get+0xa0>)
    f638:	f7f8 ff02 	bl	8440 <nrf_802154_hp_timer_timestamp_get>
    f63c:	68bb      	ldr	r3, [r7, #8]
    f63e:	1ac5      	subs	r5, r0, r3
    f640:	4b21      	ldr	r3, [pc, #132]	; (f6c8 <nrf_802154_timer_coord_timestamp_get+0xa4>)
    f642:	7818      	ldrb	r0, [r3, #0]
    f644:	b320      	cbz	r0, f690 <nrf_802154_timer_coord_timestamp_get+0x6c>
    f646:	4b21      	ldr	r3, [pc, #132]	; (f6cc <nrf_802154_timer_coord_timestamp_get+0xa8>)
    f648:	6819      	ldr	r1, [r3, #0]
    f64a:	17cb      	asrs	r3, r1, #31
    f64c:	f511 0280 	adds.w	r2, r1, #4194304	; 0x400000
    f650:	fba5 0c01 	umull	r0, ip, r5, r1
    f654:	fb05 cc03 	mla	ip, r5, r3, ip
    f658:	f143 0300 	adc.w	r3, r3, #0
    f65c:	f511 0f80 	cmn.w	r1, #4194304	; 0x400000
    f660:	bfac      	ite	ge
    f662:	2100      	movge	r1, #0
    f664:	2101      	movlt	r1, #1
    f666:	ebb1 7fdc 	cmp.w	r1, ip, lsr #31
    f66a:	ea4f 74d3 	mov.w	r4, r3, lsr #31
    f66e:	d01c      	beq.n	f6aa <nrf_802154_timer_coord_timestamp_get+0x86>
    f670:	18a4      	adds	r4, r4, r2
    f672:	f143 0100 	adc.w	r1, r3, #0
    f676:	0864      	lsrs	r4, r4, #1
    f678:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
    f67c:	4264      	negs	r4, r4
    f67e:	ea4f 0161 	mov.w	r1, r1, asr #1
    f682:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f686:	1820      	adds	r0, r4, r0
    f688:	eb4c 0101 	adc.w	r1, ip, r1
    f68c:	f7f0 fd38 	bl	100 <__aeabi_ldivmod>
    f690:	e9d7 2300 	ldrd	r2, r3, [r7]
    f694:	18ad      	adds	r5, r5, r2
    f696:	f143 0300 	adc.w	r3, r3, #0
    f69a:	1a2d      	subs	r5, r5, r0
    f69c:	eb63 70e0 	sbc.w	r0, r3, r0, asr #31
    f6a0:	e9c6 5000 	strd	r5, r0, [r6]
    f6a4:	4640      	mov	r0, r8
    f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6aa:	18a4      	adds	r4, r4, r2
    f6ac:	f143 0100 	adc.w	r1, r3, #0
    f6b0:	0864      	lsrs	r4, r4, #1
    f6b2:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
    f6b6:	1820      	adds	r0, r4, r0
    f6b8:	eb4c 0161 	adc.w	r1, ip, r1, asr #1
    f6bc:	e7e6      	b.n	f68c <nrf_802154_timer_coord_timestamp_get+0x68>
    f6be:	bf00      	nop
    f6c0:	20003c3c 	.word	0x20003c3c
    f6c4:	200017b8 	.word	0x200017b8
    f6c8:	20003c3a 	.word	0x20003c3a
    f6cc:	2000232c 	.word	0x2000232c

0000f6d0 <nrf_802154_sl_timestamper_synchronized>:
    f6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f6d4:	466d      	mov	r5, sp
    f6d6:	2210      	movs	r2, #16
    f6d8:	2100      	movs	r1, #0
    f6da:	4628      	mov	r0, r5
    f6dc:	f003 fb01 	bl	12ce2 <memset>
    f6e0:	4b40      	ldr	r3, [pc, #256]	; (f7e4 <nrf_802154_sl_timestamper_synchronized+0x114>)
    f6e2:	781b      	ldrb	r3, [r3, #0]
    f6e4:	2b00      	cmp	r3, #0
    f6e6:	d077      	beq.n	f7d8 <nrf_802154_sl_timestamper_synchronized+0x108>
    f6e8:	a802      	add	r0, sp, #8
    f6ea:	f7f8 fe95 	bl	8418 <nrf_802154_hp_timer_sync_time_get>
    f6ee:	2800      	cmp	r0, #0
    f6f0:	d075      	beq.n	f7de <nrf_802154_sl_timestamper_synchronized+0x10e>
    f6f2:	4e3d      	ldr	r6, [pc, #244]	; (f7e8 <nrf_802154_sl_timestamper_synchronized+0x118>)
    f6f4:	4c3d      	ldr	r4, [pc, #244]	; (f7ec <nrf_802154_sl_timestamper_synchronized+0x11c>)
    f6f6:	7833      	ldrb	r3, [r6, #0]
    f6f8:	2b00      	cmp	r3, #0
    f6fa:	bf14      	ite	ne
    f6fc:	f04f 7780 	movne.w	r7, #16777216	; 0x1000000
    f700:	f44f 0780 	moveq.w	r7, #4194304	; 0x400000
    f704:	f7f8 ff3e 	bl	8584 <nrf_802154_platform_sl_lptimer_sync_lpticks_get>
    f708:	f003 fd62 	bl	131d0 <nrf_802154_platform_sl_lptimer_lpticks_to_us_convert>
    f70c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; f7f0 <nrf_802154_sl_timestamper_synchronized+0x120>
    f710:	f89c 3000 	ldrb.w	r3, [ip]
    f714:	e9cd 0100 	strd	r0, r1, [sp]
    f718:	b313      	cbz	r3, f760 <nrf_802154_sl_timestamper_synchronized+0x90>
    f71a:	6822      	ldr	r2, [r4, #0]
    f71c:	68a1      	ldr	r1, [r4, #8]
    f71e:	f5c2 1e00 	rsb	lr, r2, #2097152	; 0x200000
    f722:	1a52      	subs	r2, r2, r1
    f724:	9902      	ldr	r1, [sp, #8]
    f726:	4486      	add	lr, r0
    f728:	440a      	add	r2, r1
    f72a:	1a10      	subs	r0, r2, r0
    f72c:	ea4f 52de 	mov.w	r2, lr, lsr #23
    f730:	ea4f 539e 	mov.w	r3, lr, lsr #22
    f734:	bf4b      	itete	mi
    f736:	1a80      	submi	r0, r0, r2
    f738:	1880      	addpl	r0, r0, r2
    f73a:	fb90 f0f3 	sdivmi	r0, r0, r3
    f73e:	fbb0 f0f3 	udivpl	r0, r0, r3
    f742:	7833      	ldrb	r3, [r6, #0]
    f744:	492b      	ldr	r1, [pc, #172]	; (f7f4 <nrf_802154_sl_timestamper_synchronized+0x124>)
    f746:	b3a3      	cbz	r3, f7b2 <nrf_802154_sl_timestamper_synchronized+0xe2>
    f748:	680b      	ldr	r3, [r1, #0]
    f74a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    f74e:	181b      	adds	r3, r3, r0
    f750:	d52a      	bpl.n	f7a8 <nrf_802154_sl_timestamper_synchronized+0xd8>
    f752:	1f1a      	subs	r2, r3, #4
    f754:	d500      	bpl.n	f758 <nrf_802154_sl_timestamper_synchronized+0x88>
    f756:	1cda      	adds	r2, r3, #3
    f758:	10d2      	asrs	r2, r2, #3
    f75a:	600a      	str	r2, [r1, #0]
    f75c:	2301      	movs	r3, #1
    f75e:	7033      	strb	r3, [r6, #0]
    f760:	f04f 0800 	mov.w	r8, #0
    f764:	f88c 8000 	strb.w	r8, [ip]
    f768:	f3bf 8f5f 	dmb	sy
    f76c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f774:	f3bf 8f5f 	dmb	sy
    f778:	f04f 0901 	mov.w	r9, #1
    f77c:	f88c 9000 	strb.w	r9, [ip]
    f780:	f7f8 fe3a 	bl	83f8 <nrf_802154_hp_timer_sync_prepare>
    f784:	f004 fca5 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    f788:	e9d4 5300 	ldrd	r5, r3, [r4]
    f78c:	1b45      	subs	r5, r0, r5
    f78e:	eb61 0a03 	sbc.w	sl, r1, r3
    f792:	f003 fd2d 	bl	131f0 <nrf_802154_platform_sl_lptimer_granularity_get>
    f796:	eba7 0740 	sub.w	r7, r7, r0, lsl #1
    f79a:	42af      	cmp	r7, r5
    f79c:	eb78 030a 	sbcs.w	r3, r8, sl
    f7a0:	d209      	bcs.n	f7b6 <nrf_802154_sl_timestamper_synchronized+0xe6>
    f7a2:	f7f8 fecd 	bl	8540 <nrf_802154_platform_sl_lptimer_sync_schedule_now>
    f7a6:	e017      	b.n	f7d8 <nrf_802154_sl_timestamper_synchronized+0x108>
    f7a8:	1d1a      	adds	r2, r3, #4
    f7aa:	bf48      	it	mi
    f7ac:	f103 020b 	addmi.w	r2, r3, #11
    f7b0:	e7d2      	b.n	f758 <nrf_802154_sl_timestamper_synchronized+0x88>
    f7b2:	6008      	str	r0, [r1, #0]
    f7b4:	e7d2      	b.n	f75c <nrf_802154_sl_timestamper_synchronized+0x8c>
    f7b6:	7833      	ldrb	r3, [r6, #0]
    f7b8:	e9d4 0100 	ldrd	r0, r1, [r4]
    f7bc:	2b00      	cmp	r3, #0
    f7be:	bf14      	ite	ne
    f7c0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
    f7c4:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
    f7c8:	18c0      	adds	r0, r0, r3
    f7ca:	464a      	mov	r2, r9
    f7cc:	f141 0100 	adc.w	r1, r1, #0
    f7d0:	f003 fcfc 	bl	131cc <nrf_802154_platform_sl_lptimer_us_to_lpticks_convert>
    f7d4:	f7f8 fec2 	bl	855c <nrf_802154_platform_sl_lptimer_sync_schedule_at>
    f7d8:	b004      	add	sp, #16
    f7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7de:	f7f8 fe0b 	bl	83f8 <nrf_802154_hp_timer_sync_prepare>
    f7e2:	e7de      	b.n	f7a2 <nrf_802154_sl_timestamper_synchronized+0xd2>
    f7e4:	20003c3b 	.word	0x20003c3b
    f7e8:	20003c3a 	.word	0x20003c3a
    f7ec:	200017b8 	.word	0x200017b8
    f7f0:	20003c3c 	.word	0x20003c3c
    f7f4:	2000232c 	.word	0x2000232c

0000f7f8 <cb>:
    f7f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f7fa:	2300      	movs	r3, #0
    f7fc:	4d13      	ldr	r5, [pc, #76]	; (f84c <cb+0x54>)
    f7fe:	4c14      	ldr	r4, [pc, #80]	; (f850 <cb+0x58>)
    f800:	4e14      	ldr	r6, [pc, #80]	; (f854 <cb+0x5c>)
    f802:	f88d 3007 	strb.w	r3, [sp, #7]
    f806:	4628      	mov	r0, r5
    f808:	f004 fce1 	bl	141ce <nrf_802154_sl_mutex_try_acquire>
    f80c:	b1a0      	cbz	r0, f838 <cb+0x40>
    f80e:	f10d 0007 	add.w	r0, sp, #7
    f812:	f7f3 fd63 	bl	32dc <mpsl_cx_granted_ops_get>
    f816:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f81a:	f013 0304 	ands.w	r3, r3, #4
    f81e:	d00d      	beq.n	f83c <cb+0x44>
    f820:	7823      	ldrb	r3, [r4, #0]
    f822:	b923      	cbnz	r3, f82e <cb+0x36>
    f824:	2301      	movs	r3, #1
    f826:	7830      	ldrb	r0, [r6, #0]
    f828:	7023      	strb	r3, [r4, #0]
    f82a:	f7ff fd87 	bl	f33c <nrf_802154_wifi_coex_granted>
    f82e:	4628      	mov	r0, r5
    f830:	f004 fcdc 	bl	141ec <nrf_802154_sl_mutex_release>
    f834:	2800      	cmp	r0, #0
    f836:	d1e6      	bne.n	f806 <cb+0xe>
    f838:	b002      	add	sp, #8
    f83a:	bd70      	pop	{r4, r5, r6, pc}
    f83c:	7822      	ldrb	r2, [r4, #0]
    f83e:	2a00      	cmp	r2, #0
    f840:	d0f5      	beq.n	f82e <cb+0x36>
    f842:	7830      	ldrb	r0, [r6, #0]
    f844:	7023      	strb	r3, [r4, #0]
    f846:	f7ff fd85 	bl	f354 <nrf_802154_wifi_coex_denied>
    f84a:	e7f0      	b.n	f82e <cb+0x36>
    f84c:	20002330 	.word	0x20002330
    f850:	20003c3d 	.word	0x20003c3d
    f854:	20003c3e 	.word	0x20003c3e

0000f858 <nrf_802154_wifi_coex_init>:
    f858:	b508      	push	{r3, lr}
    f85a:	4803      	ldr	r0, [pc, #12]	; (f868 <nrf_802154_wifi_coex_init+0x10>)
    f85c:	f004 fcb4 	bl	141c8 <nrf_802154_sl_mutex_init>
    f860:	4b02      	ldr	r3, [pc, #8]	; (f86c <nrf_802154_wifi_coex_init+0x14>)
    f862:	2000      	movs	r0, #0
    f864:	7018      	strb	r0, [r3, #0]
    f866:	bd08      	pop	{r3, pc}
    f868:	20002330 	.word	0x20002330
    f86c:	20003c3d 	.word	0x20003c3d

0000f870 <nrf_802154_wifi_coex_prio_request>:
    f870:	2803      	cmp	r0, #3
    f872:	b507      	push	{r0, r1, r2, lr}
    f874:	4b11      	ldr	r3, [pc, #68]	; (f8bc <nrf_802154_wifi_coex_prio_request+0x4c>)
    f876:	d809      	bhi.n	f88c <nrf_802154_wifi_coex_prio_request+0x1c>
    f878:	2801      	cmp	r0, #1
    f87a:	d81b      	bhi.n	f8b4 <nrf_802154_wifi_coex_prio_request+0x44>
    f87c:	d00b      	beq.n	f896 <nrf_802154_wifi_coex_prio_request+0x26>
    f87e:	2200      	movs	r2, #0
    f880:	701a      	strb	r2, [r3, #0]
    f882:	b003      	add	sp, #12
    f884:	f85d eb04 	ldr.w	lr, [sp], #4
    f888:	f7f3 bd34 	b.w	32f4 <mpsl_cx_release>
    f88c:	2804      	cmp	r0, #4
    f88e:	d1f6      	bne.n	f87e <nrf_802154_wifi_coex_prio_request+0xe>
    f890:	2202      	movs	r2, #2
    f892:	701a      	strb	r2, [r3, #0]
    f894:	e000      	b.n	f898 <nrf_802154_wifi_coex_prio_request+0x28>
    f896:	7018      	strb	r0, [r3, #0]
    f898:	2301      	movs	r3, #1
    f89a:	f88d 0004 	strb.w	r0, [sp, #4]
    f89e:	f88d 3005 	strb.w	r3, [sp, #5]
    f8a2:	a801      	add	r0, sp, #4
    f8a4:	2300      	movs	r3, #0
    f8a6:	f88d 3006 	strb.w	r3, [sp, #6]
    f8aa:	f7f3 fd29 	bl	3300 <mpsl_cx_request>
    f8ae:	b003      	add	sp, #12
    f8b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f8b4:	2201      	movs	r2, #1
    f8b6:	701a      	strb	r2, [r3, #0]
    f8b8:	2002      	movs	r0, #2
    f8ba:	e7ed      	b.n	f898 <nrf_802154_wifi_coex_prio_request+0x28>
    f8bc:	20003c3e 	.word	0x20003c3e

0000f8c0 <nrf_802154_wifi_coex_on_raal_timeslot_started>:
    f8c0:	b508      	push	{r3, lr}
    f8c2:	4804      	ldr	r0, [pc, #16]	; (f8d4 <nrf_802154_wifi_coex_on_raal_timeslot_started+0x14>)
    f8c4:	f7f3 fd10 	bl	32e8 <mpsl_cx_register_callback>
    f8c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f8cc:	2000      	movs	r0, #0
    f8ce:	f7ff bf93 	b.w	f7f8 <cb>
    f8d2:	bf00      	nop
    f8d4:	0000f7f9 	.word	0x0000f7f9

0000f8d8 <nrf_cc3xx_platform_init>:
    f8d8:	b510      	push	{r4, lr}
    f8da:	4c0c      	ldr	r4, [pc, #48]	; (f90c <nrf_cc3xx_platform_init+0x34>)
    f8dc:	6823      	ldr	r3, [r4, #0]
    f8de:	b113      	cbz	r3, f8e6 <nrf_cc3xx_platform_init+0xe>
    f8e0:	4b0b      	ldr	r3, [pc, #44]	; (f910 <nrf_cc3xx_platform_init+0x38>)
    f8e2:	681b      	ldr	r3, [r3, #0]
    f8e4:	b92b      	cbnz	r3, f8f2 <nrf_cc3xx_platform_init+0x1a>
    f8e6:	f000 fe99 	bl	1061c <CC_LibInit>
    f8ea:	b930      	cbnz	r0, f8fa <nrf_cc3xx_platform_init+0x22>
    f8ec:	4b08      	ldr	r3, [pc, #32]	; (f910 <nrf_cc3xx_platform_init+0x38>)
    f8ee:	2201      	movs	r2, #1
    f8f0:	601a      	str	r2, [r3, #0]
    f8f2:	2301      	movs	r3, #1
    f8f4:	6023      	str	r3, [r4, #0]
    f8f6:	2000      	movs	r0, #0
    f8f8:	bd10      	pop	{r4, pc}
    f8fa:	3801      	subs	r0, #1
    f8fc:	2806      	cmp	r0, #6
    f8fe:	d901      	bls.n	f904 <nrf_cc3xx_platform_init+0x2c>
    f900:	4804      	ldr	r0, [pc, #16]	; (f914 <nrf_cc3xx_platform_init+0x3c>)
    f902:	bd10      	pop	{r4, pc}
    f904:	4b04      	ldr	r3, [pc, #16]	; (f918 <nrf_cc3xx_platform_init+0x40>)
    f906:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f90a:	bd10      	pop	{r4, pc}
    f90c:	20002334 	.word	0x20002334
    f910:	20002338 	.word	0x20002338
    f914:	ffff8ffe 	.word	0xffff8ffe
    f918:	00014760 	.word	0x00014760

0000f91c <nrf_cc3xx_platform_abort>:
    f91c:	f3bf 8f4f 	dsb	sy
    f920:	4905      	ldr	r1, [pc, #20]	; (f938 <nrf_cc3xx_platform_abort+0x1c>)
    f922:	4b06      	ldr	r3, [pc, #24]	; (f93c <nrf_cc3xx_platform_abort+0x20>)
    f924:	68ca      	ldr	r2, [r1, #12]
    f926:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f92a:	4313      	orrs	r3, r2
    f92c:	60cb      	str	r3, [r1, #12]
    f92e:	f3bf 8f4f 	dsb	sy
    f932:	bf00      	nop
    f934:	e7fd      	b.n	f932 <nrf_cc3xx_platform_abort+0x16>
    f936:	bf00      	nop
    f938:	e000ed00 	.word	0xe000ed00
    f93c:	05fa0004 	.word	0x05fa0004

0000f940 <CC_PalAbort>:
    f940:	b410      	push	{r4}
    f942:	4b09      	ldr	r3, [pc, #36]	; (f968 <CC_PalAbort+0x28>)
    f944:	4909      	ldr	r1, [pc, #36]	; (f96c <CC_PalAbort+0x2c>)
    f946:	4c0a      	ldr	r4, [pc, #40]	; (f970 <CC_PalAbort+0x30>)
    f948:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    f94c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f950:	6849      	ldr	r1, [r1, #4]
    f952:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    f956:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    f95a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    f95e:	2300      	movs	r3, #0
    f960:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    f964:	bc10      	pop	{r4}
    f966:	4708      	bx	r1
    f968:	5002b000 	.word	0x5002b000
    f96c:	2000017c 	.word	0x2000017c
    f970:	5002a000 	.word	0x5002a000

0000f974 <nrf_cc3xx_platform_set_abort>:
    f974:	e9d0 1200 	ldrd	r1, r2, [r0]
    f978:	4b01      	ldr	r3, [pc, #4]	; (f980 <nrf_cc3xx_platform_set_abort+0xc>)
    f97a:	e9c3 1200 	strd	r1, r2, [r3]
    f97e:	4770      	bx	lr
    f980:	2000017c 	.word	0x2000017c

0000f984 <nrf_cc3xx_platform_ctr_drbg_init>:
    f984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f988:	4c14      	ldr	r4, [pc, #80]	; (f9dc <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
    f98a:	4e15      	ldr	r6, [pc, #84]	; (f9e0 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    f98c:	2800      	cmp	r0, #0
    f98e:	bf18      	it	ne
    f990:	4604      	movne	r4, r0
    f992:	b083      	sub	sp, #12
    f994:	6823      	ldr	r3, [r4, #0]
    f996:	42b3      	cmp	r3, r6
    f998:	d01c      	beq.n	f9d4 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
    f99a:	460d      	mov	r5, r1
    f99c:	4620      	mov	r0, r4
    f99e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    f9a2:	f104 0904 	add.w	r9, r4, #4
    f9a6:	4617      	mov	r7, r2
    f9a8:	f504 788e 	add.w	r8, r4, #284	; 0x11c
    f9ac:	f000 f8e8 	bl	fb80 <mbedtls_platform_zeroize>
    f9b0:	4648      	mov	r0, r9
    f9b2:	f000 fd1d 	bl	103f0 <cc_mbedtls_entropy_init>
    f9b6:	4640      	mov	r0, r8
    f9b8:	f000 fb4a 	bl	10050 <cc_mbedtls_ctr_drbg_init>
    f9bc:	4909      	ldr	r1, [pc, #36]	; (f9e4 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    f9be:	9700      	str	r7, [sp, #0]
    f9c0:	462b      	mov	r3, r5
    f9c2:	464a      	mov	r2, r9
    f9c4:	4640      	mov	r0, r8
    f9c6:	f000 fb59 	bl	1007c <cc_mbedtls_ctr_drbg_seed>
    f9ca:	b900      	cbnz	r0, f9ce <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
    f9cc:	6026      	str	r6, [r4, #0]
    f9ce:	b003      	add	sp, #12
    f9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f9d4:	2000      	movs	r0, #0
    f9d6:	b003      	add	sp, #12
    f9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f9dc:	2000233c 	.word	0x2000233c
    f9e0:	5ac9bca5 	.word	0x5ac9bca5
    f9e4:	00010479 	.word	0x00010479

0000f9e8 <nrf_cc3xx_platform_ctr_drbg_get>:
    f9e8:	b570      	push	{r4, r5, r6, lr}
    f9ea:	4d0d      	ldr	r5, [pc, #52]	; (fa20 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    f9ec:	2800      	cmp	r0, #0
    f9ee:	bf18      	it	ne
    f9f0:	4605      	movne	r5, r0
    f9f2:	461e      	mov	r6, r3
    f9f4:	6828      	ldr	r0, [r5, #0]
    f9f6:	4b0b      	ldr	r3, [pc, #44]	; (fa24 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    f9f8:	4298      	cmp	r0, r3
    f9fa:	b082      	sub	sp, #8
    f9fc:	d10d      	bne.n	fa1a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    f9fe:	f505 708e 	add.w	r0, r5, #284	; 0x11c
    fa02:	2500      	movs	r5, #0
    fa04:	9500      	str	r5, [sp, #0]
    fa06:	462b      	mov	r3, r5
    fa08:	4614      	mov	r4, r2
    fa0a:	f000 fb85 	bl	10118 <cc_mbedtls_ctr_drbg_random_with_add>
    fa0e:	2800      	cmp	r0, #0
    fa10:	bf18      	it	ne
    fa12:	462c      	movne	r4, r5
    fa14:	6034      	str	r4, [r6, #0]
    fa16:	b002      	add	sp, #8
    fa18:	bd70      	pop	{r4, r5, r6, pc}
    fa1a:	4803      	ldr	r0, [pc, #12]	; (fa28 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    fa1c:	e7fb      	b.n	fa16 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    fa1e:	bf00      	nop
    fa20:	2000233c 	.word	0x2000233c
    fa24:	5ac9bca5 	.word	0x5ac9bca5
    fa28:	ffff8fe8 	.word	0xffff8fe8

0000fa2c <mutex_free>:
    fa2c:	b510      	push	{r4, lr}
    fa2e:	4604      	mov	r4, r0
    fa30:	b150      	cbz	r0, fa48 <mutex_free+0x1c>
    fa32:	6863      	ldr	r3, [r4, #4]
    fa34:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    fa38:	d005      	beq.n	fa46 <mutex_free+0x1a>
    fa3a:	4a06      	ldr	r2, [pc, #24]	; (fa54 <mutex_free+0x28>)
    fa3c:	4293      	cmp	r3, r2
    fa3e:	d002      	beq.n	fa46 <mutex_free+0x1a>
    fa40:	2300      	movs	r3, #0
    fa42:	6023      	str	r3, [r4, #0]
    fa44:	6062      	str	r2, [r4, #4]
    fa46:	bd10      	pop	{r4, pc}
    fa48:	4b03      	ldr	r3, [pc, #12]	; (fa58 <mutex_free+0x2c>)
    fa4a:	4804      	ldr	r0, [pc, #16]	; (fa5c <mutex_free+0x30>)
    fa4c:	685b      	ldr	r3, [r3, #4]
    fa4e:	4798      	blx	r3
    fa50:	e7ef      	b.n	fa32 <mutex_free+0x6>
    fa52:	bf00      	nop
    fa54:	a95c5f2c 	.word	0xa95c5f2c
    fa58:	2000017c 	.word	0x2000017c
    fa5c:	0001477c 	.word	0x0001477c

0000fa60 <mutex_lock>:
    fa60:	b1c8      	cbz	r0, fa96 <mutex_lock+0x36>
    fa62:	6843      	ldr	r3, [r0, #4]
    fa64:	4a0d      	ldr	r2, [pc, #52]	; (fa9c <mutex_lock+0x3c>)
    fa66:	4293      	cmp	r3, r2
    fa68:	d013      	beq.n	fa92 <mutex_lock+0x32>
    fa6a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    fa6e:	d00e      	beq.n	fa8e <mutex_lock+0x2e>
    fa70:	2301      	movs	r3, #1
    fa72:	e850 2f00 	ldrex	r2, [r0]
    fa76:	4619      	mov	r1, r3
    fa78:	e840 1c00 	strex	ip, r1, [r0]
    fa7c:	f09c 0f00 	teq	ip, #0
    fa80:	d1f7      	bne.n	fa72 <mutex_lock+0x12>
    fa82:	2a01      	cmp	r2, #1
    fa84:	d0f5      	beq.n	fa72 <mutex_lock+0x12>
    fa86:	f3bf 8f5f 	dmb	sy
    fa8a:	2000      	movs	r0, #0
    fa8c:	4770      	bx	lr
    fa8e:	4804      	ldr	r0, [pc, #16]	; (faa0 <mutex_lock+0x40>)
    fa90:	4770      	bx	lr
    fa92:	4804      	ldr	r0, [pc, #16]	; (faa4 <mutex_lock+0x44>)
    fa94:	4770      	bx	lr
    fa96:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    fa9a:	4770      	bx	lr
    fa9c:	a95c5f2c 	.word	0xa95c5f2c
    faa0:	ffff8fe9 	.word	0xffff8fe9
    faa4:	ffff8fea 	.word	0xffff8fea

0000faa8 <mutex_unlock>:
    faa8:	b180      	cbz	r0, facc <mutex_unlock+0x24>
    faaa:	6843      	ldr	r3, [r0, #4]
    faac:	4a09      	ldr	r2, [pc, #36]	; (fad4 <mutex_unlock+0x2c>)
    faae:	4293      	cmp	r3, r2
    fab0:	d00a      	beq.n	fac8 <mutex_unlock+0x20>
    fab2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    fab6:	d005      	beq.n	fac4 <mutex_unlock+0x1c>
    fab8:	f3bf 8f5f 	dmb	sy
    fabc:	2300      	movs	r3, #0
    fabe:	6003      	str	r3, [r0, #0]
    fac0:	4618      	mov	r0, r3
    fac2:	4770      	bx	lr
    fac4:	4804      	ldr	r0, [pc, #16]	; (fad8 <mutex_unlock+0x30>)
    fac6:	4770      	bx	lr
    fac8:	4804      	ldr	r0, [pc, #16]	; (fadc <mutex_unlock+0x34>)
    faca:	4770      	bx	lr
    facc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    fad0:	4770      	bx	lr
    fad2:	bf00      	nop
    fad4:	a95c5f2c 	.word	0xa95c5f2c
    fad8:	ffff8fe9 	.word	0xffff8fe9
    fadc:	ffff8fea 	.word	0xffff8fea

0000fae0 <mutex_init>:
    fae0:	b510      	push	{r4, lr}
    fae2:	4604      	mov	r4, r0
    fae4:	b120      	cbz	r0, faf0 <mutex_init+0x10>
    fae6:	4b04      	ldr	r3, [pc, #16]	; (faf8 <mutex_init+0x18>)
    fae8:	6063      	str	r3, [r4, #4]
    faea:	2200      	movs	r2, #0
    faec:	6022      	str	r2, [r4, #0]
    faee:	bd10      	pop	{r4, pc}
    faf0:	4802      	ldr	r0, [pc, #8]	; (fafc <mutex_init+0x1c>)
    faf2:	f7ff ff25 	bl	f940 <CC_PalAbort>
    faf6:	e7f6      	b.n	fae6 <mutex_init+0x6>
    faf8:	3a00003a 	.word	0x3a00003a
    fafc:	000147a4 	.word	0x000147a4

0000fb00 <nrf_cc3xx_platform_set_mutexes>:
    fb00:	b570      	push	{r4, r5, r6, lr}
    fb02:	e9d0 2300 	ldrd	r2, r3, [r0]
    fb06:	4c15      	ldr	r4, [pc, #84]	; (fb5c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    fb08:	4d15      	ldr	r5, [pc, #84]	; (fb60 <nrf_cc3xx_platform_set_mutexes+0x60>)
    fb0a:	6063      	str	r3, [r4, #4]
    fb0c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    fb10:	e9c4 3002 	strd	r3, r0, [r4, #8]
    fb14:	6022      	str	r2, [r4, #0]
    fb16:	4b13      	ldr	r3, [pc, #76]	; (fb64 <nrf_cc3xx_platform_set_mutexes+0x64>)
    fb18:	6808      	ldr	r0, [r1, #0]
    fb1a:	6018      	str	r0, [r3, #0]
    fb1c:	6848      	ldr	r0, [r1, #4]
    fb1e:	6058      	str	r0, [r3, #4]
    fb20:	6888      	ldr	r0, [r1, #8]
    fb22:	6098      	str	r0, [r3, #8]
    fb24:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    fb28:	60d8      	str	r0, [r3, #12]
    fb2a:	6119      	str	r1, [r3, #16]
    fb2c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    fb30:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    fb34:	d010      	beq.n	fb58 <nrf_cc3xx_platform_set_mutexes+0x58>
    fb36:	490c      	ldr	r1, [pc, #48]	; (fb68 <nrf_cc3xx_platform_set_mutexes+0x68>)
    fb38:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    fb3c:	2300      	movs	r3, #0
    fb3e:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    fb42:	f505 708a 	add.w	r0, r5, #276	; 0x114
    fb46:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    fb4a:	4790      	blx	r2
    fb4c:	6823      	ldr	r3, [r4, #0]
    fb4e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    fb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fb56:	4718      	bx	r3
    fb58:	bd70      	pop	{r4, r5, r6, pc}
    fb5a:	bf00      	nop
    fb5c:	2000018c 	.word	0x2000018c
    fb60:	2000233c 	.word	0x2000233c
    fb64:	2000019c 	.word	0x2000019c
    fb68:	a95c5f2c 	.word	0xa95c5f2c

0000fb6c <mbedtls_zeroize_internal>:
    fb6c:	b138      	cbz	r0, fb7e <mbedtls_zeroize_internal+0x12>
    fb6e:	b131      	cbz	r1, fb7e <mbedtls_zeroize_internal+0x12>
    fb70:	4401      	add	r1, r0
    fb72:	2200      	movs	r2, #0
    fb74:	4603      	mov	r3, r0
    fb76:	3001      	adds	r0, #1
    fb78:	4281      	cmp	r1, r0
    fb7a:	701a      	strb	r2, [r3, #0]
    fb7c:	d1fa      	bne.n	fb74 <mbedtls_zeroize_internal+0x8>
    fb7e:	4770      	bx	lr

0000fb80 <mbedtls_platform_zeroize>:
    fb80:	b138      	cbz	r0, fb92 <mbedtls_platform_zeroize+0x12>
    fb82:	b131      	cbz	r1, fb92 <mbedtls_platform_zeroize+0x12>
    fb84:	4401      	add	r1, r0
    fb86:	2200      	movs	r2, #0
    fb88:	4603      	mov	r3, r0
    fb8a:	3001      	adds	r0, #1
    fb8c:	4288      	cmp	r0, r1
    fb8e:	701a      	strb	r2, [r3, #0]
    fb90:	d1fa      	bne.n	fb88 <mbedtls_platform_zeroize+0x8>
    fb92:	4770      	bx	lr

0000fb94 <block_cipher_df>:
    fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb98:	b0b7      	sub	sp, #220	; 0xdc
    fb9a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    fb9e:	9005      	str	r0, [sp, #20]
    fba0:	f200 8147 	bhi.w	fe32 <block_cipher_df+0x29e>
    fba4:	4614      	mov	r4, r2
    fba6:	460d      	mov	r5, r1
    fba8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    fbac:	2100      	movs	r1, #0
    fbae:	48a2      	ldr	r0, [pc, #648]	; (fe38 <block_cipher_df+0x2a4>)
    fbb0:	f003 f897 	bl	12ce2 <memset>
    fbb4:	a819      	add	r0, sp, #100	; 0x64
    fbb6:	f001 f9cf 	bl	10f58 <cc_mbedtls_aes_init>
    fbba:	489f      	ldr	r0, [pc, #636]	; (fe38 <block_cipher_df+0x2a4>)
    fbbc:	2300      	movs	r3, #0
    fbbe:	8203      	strh	r3, [r0, #16]
    fbc0:	ba63      	rev16	r3, r4
    fbc2:	8243      	strh	r3, [r0, #18]
    fbc4:	2320      	movs	r3, #32
    fbc6:	4629      	mov	r1, r5
    fbc8:	75c3      	strb	r3, [r0, #23]
    fbca:	4605      	mov	r5, r0
    fbcc:	4622      	mov	r2, r4
    fbce:	3018      	adds	r0, #24
    fbd0:	f003 f87c 	bl	12ccc <memcpy>
    fbd4:	462b      	mov	r3, r5
    fbd6:	4423      	add	r3, r4
    fbd8:	2280      	movs	r2, #128	; 0x80
    fbda:	761a      	strb	r2, [r3, #24]
    fbdc:	4b97      	ldr	r3, [pc, #604]	; (fe3c <block_cipher_df+0x2a8>)
    fbde:	930d      	str	r3, [sp, #52]	; 0x34
    fbe0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
    fbe4:	930e      	str	r3, [sp, #56]	; 0x38
    fbe6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
    fbea:	930f      	str	r3, [sp, #60]	; 0x3c
    fbec:	a90d      	add	r1, sp, #52	; 0x34
    fbee:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
    fbf2:	a819      	add	r0, sp, #100	; 0x64
    fbf4:	9310      	str	r3, [sp, #64]	; 0x40
    fbf6:	f001 f9c5 	bl	10f84 <cc_mbedtls_aes_setkey_enc>
    fbfa:	4605      	mov	r5, r0
    fbfc:	2800      	cmp	r0, #0
    fbfe:	f040 80f4 	bne.w	fdea <block_cipher_df+0x256>
    fc02:	f104 0319 	add.w	r3, r4, #25
    fc06:	9306      	str	r3, [sp, #24]
    fc08:	f10d 0820 	add.w	r8, sp, #32
    fc0c:	ab11      	add	r3, sp, #68	; 0x44
    fc0e:	9304      	str	r3, [sp, #16]
    fc10:	9307      	str	r3, [sp, #28]
    fc12:	46c1      	mov	r9, r8
    fc14:	2210      	movs	r2, #16
    fc16:	2100      	movs	r1, #0
    fc18:	4648      	mov	r0, r9
    fc1a:	f003 f862 	bl	12ce2 <memset>
    fc1e:	f8df a220 	ldr.w	sl, [pc, #544]	; fe40 <block_cipher_df+0x2ac>
    fc22:	9b06      	ldr	r3, [sp, #24]
    fc24:	9300      	str	r3, [sp, #0]
    fc26:	f8cd 900c 	str.w	r9, [sp, #12]
    fc2a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
    fc2e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
    fc32:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
    fc36:	f89d 5020 	ldrb.w	r5, [sp, #32]
    fc3a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
    fc3e:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
    fc42:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
    fc46:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
    fc4a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    fc4e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
    fc52:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
    fc56:	406a      	eors	r2, r5
    fc58:	ea8e 0e00 	eor.w	lr, lr, r0
    fc5c:	9d00      	ldr	r5, [sp, #0]
    fc5e:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
    fc62:	9202      	str	r2, [sp, #8]
    fc64:	ea8c 0c03 	eor.w	ip, ip, r3
    fc68:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
    fc6c:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
    fc70:	2d10      	cmp	r5, #16
    fc72:	ea80 0003 	eor.w	r0, r0, r3
    fc76:	462b      	mov	r3, r5
    fc78:	bf8c      	ite	hi
    fc7a:	3b10      	subhi	r3, #16
    fc7c:	1b6b      	subls	r3, r5, r5
    fc7e:	9300      	str	r3, [sp, #0]
    fc80:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
    fc84:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
    fc88:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
    fc8c:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
    fc90:	4061      	eors	r1, r4
    fc92:	405f      	eors	r7, r3
    fc94:	2400      	movs	r4, #0
    fc96:	406a      	eors	r2, r5
    fc98:	ea8b 0b06 	eor.w	fp, fp, r6
    fc9c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
    fca0:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
    fca4:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
    fca8:	9601      	str	r6, [sp, #4]
    fcaa:	4626      	mov	r6, r4
    fcac:	406b      	eors	r3, r5
    fcae:	f36b 0607 	bfi	r6, fp, #0, #8
    fcb2:	4625      	mov	r5, r4
    fcb4:	f367 260f 	bfi	r6, r7, #8, #8
    fcb8:	462f      	mov	r7, r5
    fcba:	f361 0707 	bfi	r7, r1, #0, #8
    fcbe:	9902      	ldr	r1, [sp, #8]
    fcc0:	f361 0507 	bfi	r5, r1, #0, #8
    fcc4:	f362 250f 	bfi	r5, r2, #8, #8
    fcc8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    fccc:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
    fcd0:	f363 270f 	bfi	r7, r3, #8, #8
    fcd4:	ea82 0909 	eor.w	r9, r2, r9
    fcd8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    fcdc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    fce0:	ea83 0808 	eor.w	r8, r3, r8
    fce4:	404a      	eors	r2, r1
    fce6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    fcea:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
    fcee:	f36e 0407 	bfi	r4, lr, #0, #8
    fcf2:	404b      	eors	r3, r1
    fcf4:	f368 4717 	bfi	r7, r8, #16, #8
    fcf8:	f36c 240f 	bfi	r4, ip, #8, #8
    fcfc:	f363 671f 	bfi	r7, r3, #24, #8
    fd00:	9b03      	ldr	r3, [sp, #12]
    fd02:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
    fd06:	f8dd e004 	ldr.w	lr, [sp, #4]
    fd0a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
    fd0e:	ea8c 0c0e 	eor.w	ip, ip, lr
    fd12:	f36c 4617 	bfi	r6, ip, #16, #8
    fd16:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
    fd1a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
    fd1e:	ea8c 0c08 	eor.w	ip, ip, r8
    fd22:	f36c 661f 	bfi	r6, ip, #24, #8
    fd26:	f369 4517 	bfi	r5, r9, #16, #8
    fd2a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
    fd2e:	960b      	str	r6, [sp, #44]	; 0x2c
    fd30:	f362 651f 	bfi	r5, r2, #24, #8
    fd34:	f360 4417 	bfi	r4, r0, #16, #8
    fd38:	9508      	str	r5, [sp, #32]
    fd3a:	ea8c 050e 	eor.w	r5, ip, lr
    fd3e:	f365 641f 	bfi	r4, r5, #24, #8
    fd42:	461a      	mov	r2, r3
    fd44:	2101      	movs	r1, #1
    fd46:	a819      	add	r0, sp, #100	; 0x64
    fd48:	f10a 0a10 	add.w	sl, sl, #16
    fd4c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
    fd50:	f001 f932 	bl	10fb8 <cc_mbedtls_aes_crypt_ecb>
    fd54:	2800      	cmp	r0, #0
    fd56:	d168      	bne.n	fe2a <block_cipher_df+0x296>
    fd58:	9b00      	ldr	r3, [sp, #0]
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	f47f af65 	bne.w	fc2a <block_cipher_df+0x96>
    fd60:	9c07      	ldr	r4, [sp, #28]
    fd62:	f8dd 900c 	ldr.w	r9, [sp, #12]
    fd66:	4620      	mov	r0, r4
    fd68:	2210      	movs	r2, #16
    fd6a:	3410      	adds	r4, #16
    fd6c:	4649      	mov	r1, r9
    fd6e:	9407      	str	r4, [sp, #28]
    fd70:	f002 ffac 	bl	12ccc <memcpy>
    fd74:	4a30      	ldr	r2, [pc, #192]	; (fe38 <block_cipher_df+0x2a4>)
    fd76:	78d3      	ldrb	r3, [r2, #3]
    fd78:	3301      	adds	r3, #1
    fd7a:	70d3      	strb	r3, [r2, #3]
    fd7c:	ab19      	add	r3, sp, #100	; 0x64
    fd7e:	429c      	cmp	r4, r3
    fd80:	f47f af48 	bne.w	fc14 <block_cipher_df+0x80>
    fd84:	9904      	ldr	r1, [sp, #16]
    fd86:	2280      	movs	r2, #128	; 0x80
    fd88:	4618      	mov	r0, r3
    fd8a:	f001 f8fb 	bl	10f84 <cc_mbedtls_aes_setkey_enc>
    fd8e:	46c8      	mov	r8, r9
    fd90:	4605      	mov	r5, r0
    fd92:	bb70      	cbnz	r0, fdf2 <block_cipher_df+0x25e>
    fd94:	9c05      	ldr	r4, [sp, #20]
    fd96:	f104 0620 	add.w	r6, r4, #32
    fd9a:	ab15      	add	r3, sp, #84	; 0x54
    fd9c:	461a      	mov	r2, r3
    fd9e:	2101      	movs	r1, #1
    fda0:	a819      	add	r0, sp, #100	; 0x64
    fda2:	f001 f909 	bl	10fb8 <cc_mbedtls_aes_crypt_ecb>
    fda6:	2210      	movs	r2, #16
    fda8:	4605      	mov	r5, r0
    fdaa:	bb10      	cbnz	r0, fdf2 <block_cipher_df+0x25e>
    fdac:	4620      	mov	r0, r4
    fdae:	a915      	add	r1, sp, #84	; 0x54
    fdb0:	3410      	adds	r4, #16
    fdb2:	f002 ff8b 	bl	12ccc <memcpy>
    fdb6:	42b4      	cmp	r4, r6
    fdb8:	d1ef      	bne.n	fd9a <block_cipher_df+0x206>
    fdba:	a819      	add	r0, sp, #100	; 0x64
    fdbc:	f001 f8dc 	bl	10f78 <cc_mbedtls_aes_free>
    fdc0:	481d      	ldr	r0, [pc, #116]	; (fe38 <block_cipher_df+0x2a4>)
    fdc2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    fdc6:	f7ff fedb 	bl	fb80 <mbedtls_platform_zeroize>
    fdca:	9804      	ldr	r0, [sp, #16]
    fdcc:	2120      	movs	r1, #32
    fdce:	f7ff fed7 	bl	fb80 <mbedtls_platform_zeroize>
    fdd2:	a80d      	add	r0, sp, #52	; 0x34
    fdd4:	2110      	movs	r1, #16
    fdd6:	f7ff fed3 	bl	fb80 <mbedtls_platform_zeroize>
    fdda:	4640      	mov	r0, r8
    fddc:	2110      	movs	r1, #16
    fdde:	f7ff fecf 	bl	fb80 <mbedtls_platform_zeroize>
    fde2:	4628      	mov	r0, r5
    fde4:	b037      	add	sp, #220	; 0xdc
    fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdea:	ab11      	add	r3, sp, #68	; 0x44
    fdec:	9304      	str	r3, [sp, #16]
    fdee:	f10d 0820 	add.w	r8, sp, #32
    fdf2:	a819      	add	r0, sp, #100	; 0x64
    fdf4:	f001 f8c0 	bl	10f78 <cc_mbedtls_aes_free>
    fdf8:	480f      	ldr	r0, [pc, #60]	; (fe38 <block_cipher_df+0x2a4>)
    fdfa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    fdfe:	f7ff febf 	bl	fb80 <mbedtls_platform_zeroize>
    fe02:	9804      	ldr	r0, [sp, #16]
    fe04:	2120      	movs	r1, #32
    fe06:	f7ff febb 	bl	fb80 <mbedtls_platform_zeroize>
    fe0a:	a80d      	add	r0, sp, #52	; 0x34
    fe0c:	2110      	movs	r1, #16
    fe0e:	f7ff feb7 	bl	fb80 <mbedtls_platform_zeroize>
    fe12:	4640      	mov	r0, r8
    fe14:	2110      	movs	r1, #16
    fe16:	f7ff feb3 	bl	fb80 <mbedtls_platform_zeroize>
    fe1a:	9805      	ldr	r0, [sp, #20]
    fe1c:	2120      	movs	r1, #32
    fe1e:	f7ff feaf 	bl	fb80 <mbedtls_platform_zeroize>
    fe22:	4628      	mov	r0, r5
    fe24:	b037      	add	sp, #220	; 0xdc
    fe26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    fe2e:	4605      	mov	r5, r0
    fe30:	e7df      	b.n	fdf2 <block_cipher_df+0x25e>
    fe32:	f06f 0537 	mvn.w	r5, #55	; 0x37
    fe36:	e7f4      	b.n	fe22 <block_cipher_df+0x28e>
    fe38:	2000250c 	.word	0x2000250c
    fe3c:	03020100 	.word	0x03020100
    fe40:	2000251c 	.word	0x2000251c

0000fe44 <ctr_drbg_update_internal>:
    fe44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe48:	b088      	sub	sp, #32
    fe4a:	4604      	mov	r4, r0
    fe4c:	460d      	mov	r5, r1
    fe4e:	2220      	movs	r2, #32
    fe50:	2100      	movs	r1, #0
    fe52:	4668      	mov	r0, sp
    fe54:	f002 ff45 	bl	12ce2 <memset>
    fe58:	f104 0620 	add.w	r6, r4, #32
    fe5c:	466f      	mov	r7, sp
    fe5e:	7be2      	ldrb	r2, [r4, #15]
    fe60:	3201      	adds	r2, #1
    fe62:	b2d2      	uxtb	r2, r2
    fe64:	73e2      	strb	r2, [r4, #15]
    fe66:	2a00      	cmp	r2, #0
    fe68:	d14d      	bne.n	ff06 <ctr_drbg_update_internal+0xc2>
    fe6a:	7ba2      	ldrb	r2, [r4, #14]
    fe6c:	3201      	adds	r2, #1
    fe6e:	b2d2      	uxtb	r2, r2
    fe70:	73a2      	strb	r2, [r4, #14]
    fe72:	2a00      	cmp	r2, #0
    fe74:	d147      	bne.n	ff06 <ctr_drbg_update_internal+0xc2>
    fe76:	7b63      	ldrb	r3, [r4, #13]
    fe78:	3301      	adds	r3, #1
    fe7a:	b2db      	uxtb	r3, r3
    fe7c:	7363      	strb	r3, [r4, #13]
    fe7e:	2b00      	cmp	r3, #0
    fe80:	d141      	bne.n	ff06 <ctr_drbg_update_internal+0xc2>
    fe82:	7b23      	ldrb	r3, [r4, #12]
    fe84:	3301      	adds	r3, #1
    fe86:	b2db      	uxtb	r3, r3
    fe88:	7323      	strb	r3, [r4, #12]
    fe8a:	2b00      	cmp	r3, #0
    fe8c:	d13b      	bne.n	ff06 <ctr_drbg_update_internal+0xc2>
    fe8e:	7ae3      	ldrb	r3, [r4, #11]
    fe90:	3301      	adds	r3, #1
    fe92:	b2db      	uxtb	r3, r3
    fe94:	72e3      	strb	r3, [r4, #11]
    fe96:	2b00      	cmp	r3, #0
    fe98:	d135      	bne.n	ff06 <ctr_drbg_update_internal+0xc2>
    fe9a:	7aa3      	ldrb	r3, [r4, #10]
    fe9c:	3301      	adds	r3, #1
    fe9e:	b2db      	uxtb	r3, r3
    fea0:	72a3      	strb	r3, [r4, #10]
    fea2:	2b00      	cmp	r3, #0
    fea4:	d12f      	bne.n	ff06 <ctr_drbg_update_internal+0xc2>
    fea6:	7a63      	ldrb	r3, [r4, #9]
    fea8:	3301      	adds	r3, #1
    feaa:	b2db      	uxtb	r3, r3
    feac:	7263      	strb	r3, [r4, #9]
    feae:	bb53      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    feb0:	7a23      	ldrb	r3, [r4, #8]
    feb2:	3301      	adds	r3, #1
    feb4:	b2db      	uxtb	r3, r3
    feb6:	7223      	strb	r3, [r4, #8]
    feb8:	bb2b      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    feba:	79e3      	ldrb	r3, [r4, #7]
    febc:	3301      	adds	r3, #1
    febe:	b2db      	uxtb	r3, r3
    fec0:	71e3      	strb	r3, [r4, #7]
    fec2:	bb03      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    fec4:	79a3      	ldrb	r3, [r4, #6]
    fec6:	3301      	adds	r3, #1
    fec8:	b2db      	uxtb	r3, r3
    feca:	71a3      	strb	r3, [r4, #6]
    fecc:	b9db      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    fece:	7963      	ldrb	r3, [r4, #5]
    fed0:	3301      	adds	r3, #1
    fed2:	b2db      	uxtb	r3, r3
    fed4:	7163      	strb	r3, [r4, #5]
    fed6:	b9b3      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    fed8:	7923      	ldrb	r3, [r4, #4]
    feda:	3301      	adds	r3, #1
    fedc:	b2db      	uxtb	r3, r3
    fede:	7123      	strb	r3, [r4, #4]
    fee0:	b98b      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    fee2:	78e3      	ldrb	r3, [r4, #3]
    fee4:	3301      	adds	r3, #1
    fee6:	b2db      	uxtb	r3, r3
    fee8:	70e3      	strb	r3, [r4, #3]
    feea:	b963      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    feec:	78a3      	ldrb	r3, [r4, #2]
    feee:	3301      	adds	r3, #1
    fef0:	b2db      	uxtb	r3, r3
    fef2:	70a3      	strb	r3, [r4, #2]
    fef4:	b93b      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    fef6:	7863      	ldrb	r3, [r4, #1]
    fef8:	3301      	adds	r3, #1
    fefa:	b2db      	uxtb	r3, r3
    fefc:	7063      	strb	r3, [r4, #1]
    fefe:	b913      	cbnz	r3, ff06 <ctr_drbg_update_internal+0xc2>
    ff00:	7823      	ldrb	r3, [r4, #0]
    ff02:	3301      	adds	r3, #1
    ff04:	7023      	strb	r3, [r4, #0]
    ff06:	463b      	mov	r3, r7
    ff08:	4622      	mov	r2, r4
    ff0a:	2101      	movs	r1, #1
    ff0c:	4630      	mov	r0, r6
    ff0e:	f001 f853 	bl	10fb8 <cc_mbedtls_aes_crypt_ecb>
    ff12:	4680      	mov	r8, r0
    ff14:	bb50      	cbnz	r0, ff6c <ctr_drbg_update_internal+0x128>
    ff16:	3710      	adds	r7, #16
    ff18:	ab08      	add	r3, sp, #32
    ff1a:	429f      	cmp	r7, r3
    ff1c:	d19f      	bne.n	fe5e <ctr_drbg_update_internal+0x1a>
    ff1e:	9a00      	ldr	r2, [sp, #0]
    ff20:	682b      	ldr	r3, [r5, #0]
    ff22:	9906      	ldr	r1, [sp, #24]
    ff24:	4053      	eors	r3, r2
    ff26:	9300      	str	r3, [sp, #0]
    ff28:	9a01      	ldr	r2, [sp, #4]
    ff2a:	686b      	ldr	r3, [r5, #4]
    ff2c:	4053      	eors	r3, r2
    ff2e:	9301      	str	r3, [sp, #4]
    ff30:	9a02      	ldr	r2, [sp, #8]
    ff32:	68ab      	ldr	r3, [r5, #8]
    ff34:	4053      	eors	r3, r2
    ff36:	9302      	str	r3, [sp, #8]
    ff38:	9a03      	ldr	r2, [sp, #12]
    ff3a:	68eb      	ldr	r3, [r5, #12]
    ff3c:	4053      	eors	r3, r2
    ff3e:	9303      	str	r3, [sp, #12]
    ff40:	9a04      	ldr	r2, [sp, #16]
    ff42:	692b      	ldr	r3, [r5, #16]
    ff44:	4053      	eors	r3, r2
    ff46:	9304      	str	r3, [sp, #16]
    ff48:	9a05      	ldr	r2, [sp, #20]
    ff4a:	696b      	ldr	r3, [r5, #20]
    ff4c:	4053      	eors	r3, r2
    ff4e:	69aa      	ldr	r2, [r5, #24]
    ff50:	9305      	str	r3, [sp, #20]
    ff52:	404a      	eors	r2, r1
    ff54:	69eb      	ldr	r3, [r5, #28]
    ff56:	9206      	str	r2, [sp, #24]
    ff58:	9a07      	ldr	r2, [sp, #28]
    ff5a:	4630      	mov	r0, r6
    ff5c:	4053      	eors	r3, r2
    ff5e:	4669      	mov	r1, sp
    ff60:	2280      	movs	r2, #128	; 0x80
    ff62:	9307      	str	r3, [sp, #28]
    ff64:	f001 f80e 	bl	10f84 <cc_mbedtls_aes_setkey_enc>
    ff68:	4680      	mov	r8, r0
    ff6a:	b138      	cbz	r0, ff7c <ctr_drbg_update_internal+0x138>
    ff6c:	4668      	mov	r0, sp
    ff6e:	2120      	movs	r1, #32
    ff70:	f7ff fe06 	bl	fb80 <mbedtls_platform_zeroize>
    ff74:	4640      	mov	r0, r8
    ff76:	b008      	add	sp, #32
    ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff7c:	2210      	movs	r2, #16
    ff7e:	eb0d 0102 	add.w	r1, sp, r2
    ff82:	4620      	mov	r0, r4
    ff84:	f002 fea2 	bl	12ccc <memcpy>
    ff88:	e7f0      	b.n	ff6c <ctr_drbg_update_internal+0x128>
    ff8a:	bf00      	nop

0000ff8c <mbedtls_ctr_drbg_reseed_internal>:
    ff8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff90:	4604      	mov	r4, r0
    ff92:	6980      	ldr	r0, [r0, #24]
    ff94:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    ff98:	d852      	bhi.n	10040 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    ff9a:	461d      	mov	r5, r3
    ff9c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    ffa0:	42ab      	cmp	r3, r5
    ffa2:	d34d      	bcc.n	10040 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    ffa4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    ffa8:	1a18      	subs	r0, r3, r0
    ffaa:	4290      	cmp	r0, r2
    ffac:	4616      	mov	r6, r2
    ffae:	d347      	bcc.n	10040 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    ffb0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1004c <mbedtls_ctr_drbg_reseed_internal+0xc0>
    ffb4:	f44f 72c0 	mov.w	r2, #384	; 0x180
    ffb8:	460f      	mov	r7, r1
    ffba:	4648      	mov	r0, r9
    ffbc:	2100      	movs	r1, #0
    ffbe:	f002 fe90 	bl	12ce2 <memset>
    ffc2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    ffc6:	69a2      	ldr	r2, [r4, #24]
    ffc8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ffcc:	4649      	mov	r1, r9
    ffce:	4798      	blx	r3
    ffd0:	2800      	cmp	r0, #0
    ffd2:	d138      	bne.n	10046 <mbedtls_ctr_drbg_reseed_internal+0xba>
    ffd4:	f8d4 8018 	ldr.w	r8, [r4, #24]
    ffd8:	b13d      	cbz	r5, ffea <mbedtls_ctr_drbg_reseed_internal+0x5e>
    ffda:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
    ffde:	462a      	mov	r2, r5
    ffe0:	eb09 0108 	add.w	r1, r9, r8
    ffe4:	4798      	blx	r3
    ffe6:	bb70      	cbnz	r0, 10046 <mbedtls_ctr_drbg_reseed_internal+0xba>
    ffe8:	44a8      	add	r8, r5
    ffea:	b107      	cbz	r7, ffee <mbedtls_ctr_drbg_reseed_internal+0x62>
    ffec:	b9c6      	cbnz	r6, 10020 <mbedtls_ctr_drbg_reseed_internal+0x94>
    ffee:	4917      	ldr	r1, [pc, #92]	; (1004c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    fff0:	4642      	mov	r2, r8
    fff2:	4608      	mov	r0, r1
    fff4:	f7ff fdce 	bl	fb94 <block_cipher_df>
    fff8:	4605      	mov	r5, r0
    fffa:	b138      	cbz	r0, 1000c <mbedtls_ctr_drbg_reseed_internal+0x80>
    fffc:	4813      	ldr	r0, [pc, #76]	; (1004c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    fffe:	f44f 71c0 	mov.w	r1, #384	; 0x180
   10002:	f7ff fdbd 	bl	fb80 <mbedtls_platform_zeroize>
   10006:	4628      	mov	r0, r5
   10008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1000c:	490f      	ldr	r1, [pc, #60]	; (1004c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1000e:	4620      	mov	r0, r4
   10010:	f7ff ff18 	bl	fe44 <ctr_drbg_update_internal>
   10014:	4605      	mov	r5, r0
   10016:	2800      	cmp	r0, #0
   10018:	d1f0      	bne.n	fffc <mbedtls_ctr_drbg_reseed_internal+0x70>
   1001a:	2301      	movs	r3, #1
   1001c:	6123      	str	r3, [r4, #16]
   1001e:	e7ed      	b.n	fffc <mbedtls_ctr_drbg_reseed_internal+0x70>
   10020:	eb09 0008 	add.w	r0, r9, r8
   10024:	4639      	mov	r1, r7
   10026:	4632      	mov	r2, r6
   10028:	f002 fe50 	bl	12ccc <memcpy>
   1002c:	4907      	ldr	r1, [pc, #28]	; (1004c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1002e:	44b0      	add	r8, r6
   10030:	4642      	mov	r2, r8
   10032:	4608      	mov	r0, r1
   10034:	f7ff fdae 	bl	fb94 <block_cipher_df>
   10038:	4605      	mov	r5, r0
   1003a:	2800      	cmp	r0, #0
   1003c:	d1de      	bne.n	fffc <mbedtls_ctr_drbg_reseed_internal+0x70>
   1003e:	e7e5      	b.n	1000c <mbedtls_ctr_drbg_reseed_internal+0x80>
   10040:	f06f 0537 	mvn.w	r5, #55	; 0x37
   10044:	e7df      	b.n	10006 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   10046:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1004a:	e7dc      	b.n	10006 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1004c:	200026ac 	.word	0x200026ac

00010050 <cc_mbedtls_ctr_drbg_init>:
   10050:	b510      	push	{r4, lr}
   10052:	22a4      	movs	r2, #164	; 0xa4
   10054:	4604      	mov	r4, r0
   10056:	2100      	movs	r1, #0
   10058:	f002 fe43 	bl	12ce2 <memset>
   1005c:	4b06      	ldr	r3, [pc, #24]	; (10078 <cc_mbedtls_ctr_drbg_init+0x28>)
   1005e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10062:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   10066:	6121      	str	r1, [r4, #16]
   10068:	61e2      	str	r2, [r4, #28]
   1006a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1006e:	681b      	ldr	r3, [r3, #0]
   10070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10074:	4718      	bx	r3
   10076:	bf00      	nop
   10078:	200001e0 	.word	0x200001e0

0001007c <cc_mbedtls_ctr_drbg_seed>:
   1007c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10080:	b085      	sub	sp, #20
   10082:	4605      	mov	r5, r0
   10084:	460f      	mov	r7, r1
   10086:	4616      	mov	r6, r2
   10088:	2100      	movs	r1, #0
   1008a:	2210      	movs	r2, #16
   1008c:	4668      	mov	r0, sp
   1008e:	4699      	mov	r9, r3
   10090:	f002 fe27 	bl	12ce2 <memset>
   10094:	4b1e      	ldr	r3, [pc, #120]	; (10110 <cc_mbedtls_ctr_drbg_seed+0x94>)
   10096:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1009a:	681b      	ldr	r3, [r3, #0]
   1009c:	4640      	mov	r0, r8
   1009e:	4798      	blx	r3
   100a0:	b120      	cbz	r0, 100ac <cc_mbedtls_ctr_drbg_seed+0x30>
   100a2:	4604      	mov	r4, r0
   100a4:	4620      	mov	r0, r4
   100a6:	b005      	add	sp, #20
   100a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   100ac:	f105 0420 	add.w	r4, r5, #32
   100b0:	4620      	mov	r0, r4
   100b2:	f000 ff51 	bl	10f58 <cc_mbedtls_aes_init>
   100b6:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   100ba:	69ae      	ldr	r6, [r5, #24]
   100bc:	692b      	ldr	r3, [r5, #16]
   100be:	b9ee      	cbnz	r6, 100fc <cc_mbedtls_ctr_drbg_seed+0x80>
   100c0:	2220      	movs	r2, #32
   100c2:	2b00      	cmp	r3, #0
   100c4:	61aa      	str	r2, [r5, #24]
   100c6:	db20      	blt.n	1010a <cc_mbedtls_ctr_drbg_seed+0x8e>
   100c8:	461e      	mov	r6, r3
   100ca:	4620      	mov	r0, r4
   100cc:	4669      	mov	r1, sp
   100ce:	2280      	movs	r2, #128	; 0x80
   100d0:	f000 ff58 	bl	10f84 <cc_mbedtls_aes_setkey_enc>
   100d4:	4604      	mov	r4, r0
   100d6:	b930      	cbnz	r0, 100e6 <cc_mbedtls_ctr_drbg_seed+0x6a>
   100d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   100da:	4633      	mov	r3, r6
   100dc:	4649      	mov	r1, r9
   100de:	4628      	mov	r0, r5
   100e0:	f7ff ff54 	bl	ff8c <mbedtls_ctr_drbg_reseed_internal>
   100e4:	4604      	mov	r4, r0
   100e6:	4b0b      	ldr	r3, [pc, #44]	; (10114 <cc_mbedtls_ctr_drbg_seed+0x98>)
   100e8:	4640      	mov	r0, r8
   100ea:	681b      	ldr	r3, [r3, #0]
   100ec:	4798      	blx	r3
   100ee:	2800      	cmp	r0, #0
   100f0:	bf18      	it	ne
   100f2:	4604      	movne	r4, r0
   100f4:	4620      	mov	r0, r4
   100f6:	b005      	add	sp, #20
   100f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   100fc:	2b00      	cmp	r3, #0
   100fe:	dae3      	bge.n	100c8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   10100:	2e17      	cmp	r6, #23
   10102:	d802      	bhi.n	1010a <cc_mbedtls_ctr_drbg_seed+0x8e>
   10104:	3601      	adds	r6, #1
   10106:	0876      	lsrs	r6, r6, #1
   10108:	e7df      	b.n	100ca <cc_mbedtls_ctr_drbg_seed+0x4e>
   1010a:	2600      	movs	r6, #0
   1010c:	e7dd      	b.n	100ca <cc_mbedtls_ctr_drbg_seed+0x4e>
   1010e:	bf00      	nop
   10110:	200001e4 	.word	0x200001e4
   10114:	200001e8 	.word	0x200001e8

00010118 <cc_mbedtls_ctr_drbg_random_with_add>:
   10118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1011c:	b08d      	sub	sp, #52	; 0x34
   1011e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   10122:	9f16      	ldr	r7, [sp, #88]	; 0x58
   10124:	f200 80e3 	bhi.w	102ee <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   10128:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1012c:	f200 80dc 	bhi.w	102e8 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   10130:	4604      	mov	r4, r0
   10132:	4615      	mov	r5, r2
   10134:	460e      	mov	r6, r1
   10136:	2220      	movs	r2, #32
   10138:	2100      	movs	r1, #0
   1013a:	a804      	add	r0, sp, #16
   1013c:	4698      	mov	r8, r3
   1013e:	f002 fdd0 	bl	12ce2 <memset>
   10142:	4b6c      	ldr	r3, [pc, #432]	; (102f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   10144:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   10148:	681b      	ldr	r3, [r3, #0]
   1014a:	4648      	mov	r0, r9
   1014c:	4798      	blx	r3
   1014e:	4683      	mov	fp, r0
   10150:	2800      	cmp	r0, #0
   10152:	f040 8092 	bne.w	1027a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   10156:	6922      	ldr	r2, [r4, #16]
   10158:	69e3      	ldr	r3, [r4, #28]
   1015a:	429a      	cmp	r2, r3
   1015c:	f300 8091 	bgt.w	10282 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   10160:	6963      	ldr	r3, [r4, #20]
   10162:	2b00      	cmp	r3, #0
   10164:	f040 808d 	bne.w	10282 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   10168:	2f00      	cmp	r7, #0
   1016a:	f040 80a9 	bne.w	102c0 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1016e:	f8df a188 	ldr.w	sl, [pc, #392]	; 102f8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   10172:	466f      	mov	r7, sp
   10174:	2d00      	cmp	r5, #0
   10176:	f000 8098 	beq.w	102aa <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1017a:	f104 0820 	add.w	r8, r4, #32
   1017e:	466f      	mov	r7, sp
   10180:	e00e      	b.n	101a0 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   10182:	2d10      	cmp	r5, #16
   10184:	46ab      	mov	fp, r5
   10186:	bf28      	it	cs
   10188:	f04f 0b10 	movcs.w	fp, #16
   1018c:	4630      	mov	r0, r6
   1018e:	465a      	mov	r2, fp
   10190:	4639      	mov	r1, r7
   10192:	f002 fd9b 	bl	12ccc <memcpy>
   10196:	ebb5 050b 	subs.w	r5, r5, fp
   1019a:	445e      	add	r6, fp
   1019c:	f000 8085 	beq.w	102aa <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   101a0:	7be3      	ldrb	r3, [r4, #15]
   101a2:	3301      	adds	r3, #1
   101a4:	b2db      	uxtb	r3, r3
   101a6:	73e3      	strb	r3, [r4, #15]
   101a8:	2b00      	cmp	r3, #0
   101aa:	d14d      	bne.n	10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101ac:	7ba3      	ldrb	r3, [r4, #14]
   101ae:	3301      	adds	r3, #1
   101b0:	b2db      	uxtb	r3, r3
   101b2:	73a3      	strb	r3, [r4, #14]
   101b4:	2b00      	cmp	r3, #0
   101b6:	d147      	bne.n	10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101b8:	7b63      	ldrb	r3, [r4, #13]
   101ba:	3301      	adds	r3, #1
   101bc:	b2db      	uxtb	r3, r3
   101be:	7363      	strb	r3, [r4, #13]
   101c0:	2b00      	cmp	r3, #0
   101c2:	d141      	bne.n	10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101c4:	7b23      	ldrb	r3, [r4, #12]
   101c6:	3301      	adds	r3, #1
   101c8:	b2db      	uxtb	r3, r3
   101ca:	7323      	strb	r3, [r4, #12]
   101cc:	2b00      	cmp	r3, #0
   101ce:	d13b      	bne.n	10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101d0:	7ae3      	ldrb	r3, [r4, #11]
   101d2:	3301      	adds	r3, #1
   101d4:	b2db      	uxtb	r3, r3
   101d6:	72e3      	strb	r3, [r4, #11]
   101d8:	2b00      	cmp	r3, #0
   101da:	d135      	bne.n	10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101dc:	7aa3      	ldrb	r3, [r4, #10]
   101de:	3301      	adds	r3, #1
   101e0:	b2db      	uxtb	r3, r3
   101e2:	72a3      	strb	r3, [r4, #10]
   101e4:	2b00      	cmp	r3, #0
   101e6:	d12f      	bne.n	10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101e8:	7a63      	ldrb	r3, [r4, #9]
   101ea:	3301      	adds	r3, #1
   101ec:	b2db      	uxtb	r3, r3
   101ee:	7263      	strb	r3, [r4, #9]
   101f0:	bb53      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101f2:	7a23      	ldrb	r3, [r4, #8]
   101f4:	3301      	adds	r3, #1
   101f6:	b2db      	uxtb	r3, r3
   101f8:	7223      	strb	r3, [r4, #8]
   101fa:	bb2b      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   101fc:	79e3      	ldrb	r3, [r4, #7]
   101fe:	3301      	adds	r3, #1
   10200:	b2db      	uxtb	r3, r3
   10202:	71e3      	strb	r3, [r4, #7]
   10204:	bb03      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   10206:	79a3      	ldrb	r3, [r4, #6]
   10208:	3301      	adds	r3, #1
   1020a:	b2db      	uxtb	r3, r3
   1020c:	71a3      	strb	r3, [r4, #6]
   1020e:	b9db      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   10210:	7963      	ldrb	r3, [r4, #5]
   10212:	3301      	adds	r3, #1
   10214:	b2db      	uxtb	r3, r3
   10216:	7163      	strb	r3, [r4, #5]
   10218:	b9b3      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1021a:	7923      	ldrb	r3, [r4, #4]
   1021c:	3301      	adds	r3, #1
   1021e:	b2db      	uxtb	r3, r3
   10220:	7123      	strb	r3, [r4, #4]
   10222:	b98b      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   10224:	78e3      	ldrb	r3, [r4, #3]
   10226:	3301      	adds	r3, #1
   10228:	b2db      	uxtb	r3, r3
   1022a:	70e3      	strb	r3, [r4, #3]
   1022c:	b963      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1022e:	78a3      	ldrb	r3, [r4, #2]
   10230:	3301      	adds	r3, #1
   10232:	b2db      	uxtb	r3, r3
   10234:	70a3      	strb	r3, [r4, #2]
   10236:	b93b      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   10238:	7863      	ldrb	r3, [r4, #1]
   1023a:	3301      	adds	r3, #1
   1023c:	b2db      	uxtb	r3, r3
   1023e:	7063      	strb	r3, [r4, #1]
   10240:	b913      	cbnz	r3, 10248 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   10242:	7823      	ldrb	r3, [r4, #0]
   10244:	3301      	adds	r3, #1
   10246:	7023      	strb	r3, [r4, #0]
   10248:	463b      	mov	r3, r7
   1024a:	4622      	mov	r2, r4
   1024c:	2101      	movs	r1, #1
   1024e:	4640      	mov	r0, r8
   10250:	f000 feb2 	bl	10fb8 <cc_mbedtls_aes_crypt_ecb>
   10254:	4683      	mov	fp, r0
   10256:	2800      	cmp	r0, #0
   10258:	d093      	beq.n	10182 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1025a:	f8da 3000 	ldr.w	r3, [sl]
   1025e:	4648      	mov	r0, r9
   10260:	4798      	blx	r3
   10262:	2120      	movs	r1, #32
   10264:	4603      	mov	r3, r0
   10266:	a804      	add	r0, sp, #16
   10268:	2b00      	cmp	r3, #0
   1026a:	bf18      	it	ne
   1026c:	469b      	movne	fp, r3
   1026e:	f7ff fc87 	bl	fb80 <mbedtls_platform_zeroize>
   10272:	2110      	movs	r1, #16
   10274:	4638      	mov	r0, r7
   10276:	f7ff fc83 	bl	fb80 <mbedtls_platform_zeroize>
   1027a:	4658      	mov	r0, fp
   1027c:	b00d      	add	sp, #52	; 0x34
   1027e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10282:	463a      	mov	r2, r7
   10284:	4641      	mov	r1, r8
   10286:	2300      	movs	r3, #0
   10288:	4620      	mov	r0, r4
   1028a:	f7ff fe7f 	bl	ff8c <mbedtls_ctr_drbg_reseed_internal>
   1028e:	f8df a068 	ldr.w	sl, [pc, #104]	; 102f8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   10292:	2800      	cmp	r0, #0
   10294:	f43f af6d 	beq.w	10172 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   10298:	f8da 3000 	ldr.w	r3, [sl]
   1029c:	4648      	mov	r0, r9
   1029e:	4798      	blx	r3
   102a0:	4683      	mov	fp, r0
   102a2:	2800      	cmp	r0, #0
   102a4:	f43f af65 	beq.w	10172 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   102a8:	e7e7      	b.n	1027a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   102aa:	a904      	add	r1, sp, #16
   102ac:	4620      	mov	r0, r4
   102ae:	f7ff fdc9 	bl	fe44 <ctr_drbg_update_internal>
   102b2:	4683      	mov	fp, r0
   102b4:	2800      	cmp	r0, #0
   102b6:	d1d0      	bne.n	1025a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   102b8:	6923      	ldr	r3, [r4, #16]
   102ba:	3301      	adds	r3, #1
   102bc:	6123      	str	r3, [r4, #16]
   102be:	e7cc      	b.n	1025a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   102c0:	463a      	mov	r2, r7
   102c2:	4641      	mov	r1, r8
   102c4:	a804      	add	r0, sp, #16
   102c6:	f7ff fc65 	bl	fb94 <block_cipher_df>
   102ca:	4683      	mov	fp, r0
   102cc:	b118      	cbz	r0, 102d6 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   102ce:	f8df a028 	ldr.w	sl, [pc, #40]	; 102f8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   102d2:	466f      	mov	r7, sp
   102d4:	e7c1      	b.n	1025a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   102d6:	a904      	add	r1, sp, #16
   102d8:	4620      	mov	r0, r4
   102da:	f7ff fdb3 	bl	fe44 <ctr_drbg_update_internal>
   102de:	4683      	mov	fp, r0
   102e0:	2800      	cmp	r0, #0
   102e2:	f43f af44 	beq.w	1016e <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   102e6:	e7f2      	b.n	102ce <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   102e8:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   102ec:	e7c5      	b.n	1027a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   102ee:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   102f2:	e7c2      	b.n	1027a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   102f4:	200001e4 	.word	0x200001e4
   102f8:	200001e8 	.word	0x200001e8

000102fc <entropy_update>:
   102fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10300:	2b20      	cmp	r3, #32
   10302:	b08b      	sub	sp, #44	; 0x2c
   10304:	461d      	mov	r5, r3
   10306:	4606      	mov	r6, r0
   10308:	4688      	mov	r8, r1
   1030a:	4691      	mov	r9, r2
   1030c:	d826      	bhi.n	1035c <entropy_update+0x60>
   1030e:	b2db      	uxtb	r3, r3
   10310:	af02      	add	r7, sp, #8
   10312:	f88d 8004 	strb.w	r8, [sp, #4]
   10316:	46b0      	mov	r8, r6
   10318:	f88d 3005 	strb.w	r3, [sp, #5]
   1031c:	f858 1b04 	ldr.w	r1, [r8], #4
   10320:	b921      	cbnz	r1, 1032c <entropy_update+0x30>
   10322:	4640      	mov	r0, r8
   10324:	f000 fe8c 	bl	11040 <cc_mbedtls_sha256_starts>
   10328:	4604      	mov	r4, r0
   1032a:	b940      	cbnz	r0, 1033e <entropy_update+0x42>
   1032c:	2301      	movs	r3, #1
   1032e:	6033      	str	r3, [r6, #0]
   10330:	2202      	movs	r2, #2
   10332:	a901      	add	r1, sp, #4
   10334:	4640      	mov	r0, r8
   10336:	f000 fe97 	bl	11068 <cc_mbedtls_sha256_update>
   1033a:	4604      	mov	r4, r0
   1033c:	b138      	cbz	r0, 1034e <entropy_update+0x52>
   1033e:	4638      	mov	r0, r7
   10340:	2120      	movs	r1, #32
   10342:	f7ff fc1d 	bl	fb80 <mbedtls_platform_zeroize>
   10346:	4620      	mov	r0, r4
   10348:	b00b      	add	sp, #44	; 0x2c
   1034a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1034e:	462a      	mov	r2, r5
   10350:	4649      	mov	r1, r9
   10352:	4640      	mov	r0, r8
   10354:	f000 fe88 	bl	11068 <cc_mbedtls_sha256_update>
   10358:	4604      	mov	r4, r0
   1035a:	e7f0      	b.n	1033e <entropy_update+0x42>
   1035c:	af02      	add	r7, sp, #8
   1035e:	4619      	mov	r1, r3
   10360:	4610      	mov	r0, r2
   10362:	2300      	movs	r3, #0
   10364:	463a      	mov	r2, r7
   10366:	f001 f807 	bl	11378 <cc_mbedtls_sha256>
   1036a:	4604      	mov	r4, r0
   1036c:	2800      	cmp	r0, #0
   1036e:	d1e6      	bne.n	1033e <entropy_update+0x42>
   10370:	2320      	movs	r3, #32
   10372:	46b9      	mov	r9, r7
   10374:	461d      	mov	r5, r3
   10376:	e7cc      	b.n	10312 <entropy_update+0x16>

00010378 <entropy_gather_internal.part.0>:
   10378:	b5f0      	push	{r4, r5, r6, r7, lr}
   1037a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1037e:	b0a7      	sub	sp, #156	; 0x9c
   10380:	2b00      	cmp	r3, #0
   10382:	bfd8      	it	le
   10384:	ae02      	addle	r6, sp, #8
   10386:	dd2c      	ble.n	103e2 <entropy_gather_internal.part.0+0x6a>
   10388:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1038c:	4605      	mov	r5, r0
   1038e:	2300      	movs	r3, #0
   10390:	ae02      	add	r6, sp, #8
   10392:	9301      	str	r3, [sp, #4]
   10394:	f1a4 0701 	sub.w	r7, r4, #1
   10398:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1039c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   103a0:	ab01      	add	r3, sp, #4
   103a2:	2290      	movs	r2, #144	; 0x90
   103a4:	4631      	mov	r1, r6
   103a6:	47a0      	blx	r4
   103a8:	fab7 f787 	clz	r7, r7
   103ac:	097f      	lsrs	r7, r7, #5
   103ae:	4604      	mov	r4, r0
   103b0:	b910      	cbnz	r0, 103b8 <entropy_gather_internal.part.0+0x40>
   103b2:	9b01      	ldr	r3, [sp, #4]
   103b4:	b93b      	cbnz	r3, 103c6 <entropy_gather_internal.part.0+0x4e>
   103b6:	b1a7      	cbz	r7, 103e2 <entropy_gather_internal.part.0+0x6a>
   103b8:	4630      	mov	r0, r6
   103ba:	2190      	movs	r1, #144	; 0x90
   103bc:	f7ff fbe0 	bl	fb80 <mbedtls_platform_zeroize>
   103c0:	4620      	mov	r0, r4
   103c2:	b027      	add	sp, #156	; 0x9c
   103c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103c6:	4601      	mov	r1, r0
   103c8:	4632      	mov	r2, r6
   103ca:	4628      	mov	r0, r5
   103cc:	f7ff ff96 	bl	102fc <entropy_update>
   103d0:	b950      	cbnz	r0, 103e8 <entropy_gather_internal.part.0+0x70>
   103d2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   103d6:	9a01      	ldr	r2, [sp, #4]
   103d8:	4413      	add	r3, r2
   103da:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   103de:	2f00      	cmp	r7, #0
   103e0:	d1ea      	bne.n	103b8 <entropy_gather_internal.part.0+0x40>
   103e2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   103e6:	e7e7      	b.n	103b8 <entropy_gather_internal.part.0+0x40>
   103e8:	4604      	mov	r4, r0
   103ea:	4620      	mov	r0, r4
   103ec:	b027      	add	sp, #156	; 0x9c
   103ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000103f0 <cc_mbedtls_entropy_init>:
   103f0:	b570      	push	{r4, r5, r6, lr}
   103f2:	2500      	movs	r5, #0
   103f4:	4604      	mov	r4, r0
   103f6:	f504 7688 	add.w	r6, r4, #272	; 0x110
   103fa:	2214      	movs	r2, #20
   103fc:	4629      	mov	r1, r5
   103fe:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   10402:	30fc      	adds	r0, #252	; 0xfc
   10404:	f002 fc6d 	bl	12ce2 <memset>
   10408:	2208      	movs	r2, #8
   1040a:	4629      	mov	r1, r5
   1040c:	4630      	mov	r0, r6
   1040e:	f002 fc68 	bl	12ce2 <memset>
   10412:	4b15      	ldr	r3, [pc, #84]	; (10468 <cc_mbedtls_entropy_init+0x78>)
   10414:	4630      	mov	r0, r6
   10416:	681b      	ldr	r3, [r3, #0]
   10418:	4798      	blx	r3
   1041a:	4620      	mov	r0, r4
   1041c:	f840 5b04 	str.w	r5, [r0], #4
   10420:	f000 fdf4 	bl	1100c <cc_mbedtls_sha256_init>
   10424:	4b11      	ldr	r3, [pc, #68]	; (1046c <cc_mbedtls_entropy_init+0x7c>)
   10426:	4630      	mov	r0, r6
   10428:	681b      	ldr	r3, [r3, #0]
   1042a:	4798      	blx	r3
   1042c:	b9d8      	cbnz	r0, 10466 <cc_mbedtls_entropy_init+0x76>
   1042e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   10432:	42ab      	cmp	r3, r5
   10434:	dc11      	bgt.n	1045a <cc_mbedtls_entropy_init+0x6a>
   10436:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1043a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1043e:	2120      	movs	r1, #32
   10440:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   10444:	2101      	movs	r1, #1
   10446:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1044a:	3301      	adds	r3, #1
   1044c:	4908      	ldr	r1, [pc, #32]	; (10470 <cc_mbedtls_entropy_init+0x80>)
   1044e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   10452:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   10456:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1045a:	4b06      	ldr	r3, [pc, #24]	; (10474 <cc_mbedtls_entropy_init+0x84>)
   1045c:	4630      	mov	r0, r6
   1045e:	681b      	ldr	r3, [r3, #0]
   10460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10464:	4718      	bx	r3
   10466:	bd70      	pop	{r4, r5, r6, pc}
   10468:	200001e0 	.word	0x200001e0
   1046c:	200001e4 	.word	0x200001e4
   10470:	00010e5d 	.word	0x00010e5d
   10474:	200001e8 	.word	0x200001e8

00010478 <cc_mbedtls_entropy_func>:
   10478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1047c:	2a20      	cmp	r2, #32
   1047e:	b088      	sub	sp, #32
   10480:	d876      	bhi.n	10570 <cc_mbedtls_entropy_func+0xf8>
   10482:	4b3d      	ldr	r3, [pc, #244]	; (10578 <cc_mbedtls_entropy_func+0x100>)
   10484:	f500 7988 	add.w	r9, r0, #272	; 0x110
   10488:	681b      	ldr	r3, [r3, #0]
   1048a:	4604      	mov	r4, r0
   1048c:	4648      	mov	r0, r9
   1048e:	4617      	mov	r7, r2
   10490:	4688      	mov	r8, r1
   10492:	4798      	blx	r3
   10494:	4605      	mov	r5, r0
   10496:	bba0      	cbnz	r0, 10502 <cc_mbedtls_entropy_func+0x8a>
   10498:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1049c:	f240 1601 	movw	r6, #257	; 0x101
   104a0:	e001      	b.n	104a6 <cc_mbedtls_entropy_func+0x2e>
   104a2:	3e01      	subs	r6, #1
   104a4:	d060      	beq.n	10568 <cc_mbedtls_entropy_func+0xf0>
   104a6:	4620      	mov	r0, r4
   104a8:	b37b      	cbz	r3, 1050a <cc_mbedtls_entropy_func+0x92>
   104aa:	f7ff ff65 	bl	10378 <entropy_gather_internal.part.0>
   104ae:	4605      	mov	r5, r0
   104b0:	bb68      	cbnz	r0, 1050e <cc_mbedtls_entropy_func+0x96>
   104b2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   104b6:	2b00      	cmp	r3, #0
   104b8:	ddf3      	ble.n	104a2 <cc_mbedtls_entropy_func+0x2a>
   104ba:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   104be:	4290      	cmp	r0, r2
   104c0:	d3ef      	bcc.n	104a2 <cc_mbedtls_entropy_func+0x2a>
   104c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   104c6:	2a01      	cmp	r2, #1
   104c8:	d1eb      	bne.n	104a2 <cc_mbedtls_entropy_func+0x2a>
   104ca:	281f      	cmp	r0, #31
   104cc:	d9e9      	bls.n	104a2 <cc_mbedtls_entropy_func+0x2a>
   104ce:	466e      	mov	r6, sp
   104d0:	4629      	mov	r1, r5
   104d2:	2220      	movs	r2, #32
   104d4:	4630      	mov	r0, r6
   104d6:	f104 0a04 	add.w	sl, r4, #4
   104da:	f002 fc02 	bl	12ce2 <memset>
   104de:	4631      	mov	r1, r6
   104e0:	4650      	mov	r0, sl
   104e2:	f000 fdeb 	bl	110bc <cc_mbedtls_sha256_finish>
   104e6:	4605      	mov	r5, r0
   104e8:	b198      	cbz	r0, 10512 <cc_mbedtls_entropy_func+0x9a>
   104ea:	2120      	movs	r1, #32
   104ec:	4630      	mov	r0, r6
   104ee:	f7ff fb47 	bl	fb80 <mbedtls_platform_zeroize>
   104f2:	4b22      	ldr	r3, [pc, #136]	; (1057c <cc_mbedtls_entropy_func+0x104>)
   104f4:	4648      	mov	r0, r9
   104f6:	681b      	ldr	r3, [r3, #0]
   104f8:	4798      	blx	r3
   104fa:	2800      	cmp	r0, #0
   104fc:	bf18      	it	ne
   104fe:	f06f 051d 	mvnne.w	r5, #29
   10502:	4628      	mov	r0, r5
   10504:	b008      	add	sp, #32
   10506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1050a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1050e:	466e      	mov	r6, sp
   10510:	e7eb      	b.n	104ea <cc_mbedtls_entropy_func+0x72>
   10512:	4650      	mov	r0, sl
   10514:	f000 fd8e 	bl	11034 <cc_mbedtls_sha256_free>
   10518:	4650      	mov	r0, sl
   1051a:	f000 fd77 	bl	1100c <cc_mbedtls_sha256_init>
   1051e:	4629      	mov	r1, r5
   10520:	4650      	mov	r0, sl
   10522:	f000 fd8d 	bl	11040 <cc_mbedtls_sha256_starts>
   10526:	4605      	mov	r5, r0
   10528:	2800      	cmp	r0, #0
   1052a:	d1de      	bne.n	104ea <cc_mbedtls_entropy_func+0x72>
   1052c:	4650      	mov	r0, sl
   1052e:	2220      	movs	r2, #32
   10530:	4631      	mov	r1, r6
   10532:	f000 fd99 	bl	11068 <cc_mbedtls_sha256_update>
   10536:	4605      	mov	r5, r0
   10538:	2800      	cmp	r0, #0
   1053a:	d1d6      	bne.n	104ea <cc_mbedtls_entropy_func+0x72>
   1053c:	4603      	mov	r3, r0
   1053e:	4632      	mov	r2, r6
   10540:	2120      	movs	r1, #32
   10542:	4630      	mov	r0, r6
   10544:	f000 ff18 	bl	11378 <cc_mbedtls_sha256>
   10548:	4605      	mov	r5, r0
   1054a:	2800      	cmp	r0, #0
   1054c:	d1cd      	bne.n	104ea <cc_mbedtls_entropy_func+0x72>
   1054e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   10552:	2b00      	cmp	r3, #0
   10554:	bfc4      	itt	gt
   10556:	2300      	movgt	r3, #0
   10558:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1055c:	463a      	mov	r2, r7
   1055e:	4640      	mov	r0, r8
   10560:	4631      	mov	r1, r6
   10562:	f002 fbb3 	bl	12ccc <memcpy>
   10566:	e7c0      	b.n	104ea <cc_mbedtls_entropy_func+0x72>
   10568:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1056c:	466e      	mov	r6, sp
   1056e:	e7bc      	b.n	104ea <cc_mbedtls_entropy_func+0x72>
   10570:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   10574:	e7c5      	b.n	10502 <cc_mbedtls_entropy_func+0x8a>
   10576:	bf00      	nop
   10578:	200001e4 	.word	0x200001e4
   1057c:	200001e8 	.word	0x200001e8

00010580 <RndStartupTest.constprop.0>:
   10580:	b530      	push	{r4, r5, lr}
   10582:	b08d      	sub	sp, #52	; 0x34
   10584:	2100      	movs	r1, #0
   10586:	2228      	movs	r2, #40	; 0x28
   10588:	a802      	add	r0, sp, #8
   1058a:	9101      	str	r1, [sp, #4]
   1058c:	f002 fba9 	bl	12ce2 <memset>
   10590:	a802      	add	r0, sp, #8
   10592:	f000 ff19 	bl	113c8 <RNG_PLAT_SetUserRngParameters>
   10596:	4604      	mov	r4, r0
   10598:	b110      	cbz	r0, 105a0 <RndStartupTest.constprop.0+0x20>
   1059a:	4620      	mov	r0, r4
   1059c:	b00d      	add	sp, #52	; 0x34
   1059e:	bd30      	pop	{r4, r5, pc}
   105a0:	4d18      	ldr	r5, [pc, #96]	; (10604 <RndStartupTest.constprop.0+0x84>)
   105a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   105a6:	6828      	ldr	r0, [r5, #0]
   105a8:	f000 f946 	bl	10838 <CC_PalMutexLock>
   105ac:	4604      	mov	r4, r0
   105ae:	b9c0      	cbnz	r0, 105e2 <RndStartupTest.constprop.0+0x62>
   105b0:	2000      	movs	r0, #0
   105b2:	f000 f971 	bl	10898 <CC_PalPowerSaveModeSelect>
   105b6:	bb00      	cbnz	r0, 105fa <RndStartupTest.constprop.0+0x7a>
   105b8:	4a13      	ldr	r2, [pc, #76]	; (10608 <RndStartupTest.constprop.0+0x88>)
   105ba:	a902      	add	r1, sp, #8
   105bc:	a801      	add	r0, sp, #4
   105be:	f000 fc3f 	bl	10e40 <LLF_RND_RunTrngStartupTest>
   105c2:	4604      	mov	r4, r0
   105c4:	2001      	movs	r0, #1
   105c6:	f000 f967 	bl	10898 <CC_PalPowerSaveModeSelect>
   105ca:	b990      	cbnz	r0, 105f2 <RndStartupTest.constprop.0+0x72>
   105cc:	6828      	ldr	r0, [r5, #0]
   105ce:	f000 f93b 	bl	10848 <CC_PalMutexUnlock>
   105d2:	2800      	cmp	r0, #0
   105d4:	d0e1      	beq.n	1059a <RndStartupTest.constprop.0+0x1a>
   105d6:	480d      	ldr	r0, [pc, #52]	; (1060c <RndStartupTest.constprop.0+0x8c>)
   105d8:	f7ff f9b2 	bl	f940 <CC_PalAbort>
   105dc:	4620      	mov	r0, r4
   105de:	b00d      	add	sp, #52	; 0x34
   105e0:	bd30      	pop	{r4, r5, pc}
   105e2:	480b      	ldr	r0, [pc, #44]	; (10610 <RndStartupTest.constprop.0+0x90>)
   105e4:	f7ff f9ac 	bl	f940 <CC_PalAbort>
   105e8:	2c01      	cmp	r4, #1
   105ea:	bf08      	it	eq
   105ec:	2405      	moveq	r4, #5
   105ee:	d0ed      	beq.n	105cc <RndStartupTest.constprop.0+0x4c>
   105f0:	e7de      	b.n	105b0 <RndStartupTest.constprop.0+0x30>
   105f2:	4808      	ldr	r0, [pc, #32]	; (10614 <RndStartupTest.constprop.0+0x94>)
   105f4:	f7ff f9a4 	bl	f940 <CC_PalAbort>
   105f8:	e7e8      	b.n	105cc <RndStartupTest.constprop.0+0x4c>
   105fa:	4807      	ldr	r0, [pc, #28]	; (10618 <RndStartupTest.constprop.0+0x98>)
   105fc:	f7ff f9a0 	bl	f940 <CC_PalAbort>
   10600:	e7da      	b.n	105b8 <RndStartupTest.constprop.0+0x38>
   10602:	bf00      	nop
   10604:	200001dc 	.word	0x200001dc
   10608:	20002898 	.word	0x20002898
   1060c:	00014820 	.word	0x00014820
   10610:	000147c8 	.word	0x000147c8
   10614:	00014800 	.word	0x00014800
   10618:	000147e0 	.word	0x000147e0

0001061c <CC_LibInit>:
   1061c:	b530      	push	{r4, r5, lr}
   1061e:	b083      	sub	sp, #12
   10620:	f000 f85c 	bl	106dc <CC_HalInit>
   10624:	b128      	cbz	r0, 10632 <CC_LibInit+0x16>
   10626:	f000 f8ab 	bl	10780 <CC_PalTerminate>
   1062a:	2403      	movs	r4, #3
   1062c:	4620      	mov	r0, r4
   1062e:	b003      	add	sp, #12
   10630:	bd30      	pop	{r4, r5, pc}
   10632:	f000 f877 	bl	10724 <CC_PalInit>
   10636:	b9d8      	cbnz	r0, 10670 <CC_LibInit+0x54>
   10638:	f000 f92e 	bl	10898 <CC_PalPowerSaveModeSelect>
   1063c:	b9e0      	cbnz	r0, 10678 <CC_LibInit+0x5c>
   1063e:	4c22      	ldr	r4, [pc, #136]	; (106c8 <CC_LibInit+0xac>)
   10640:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   10644:	0e1b      	lsrs	r3, r3, #24
   10646:	2bf0      	cmp	r3, #240	; 0xf0
   10648:	d10a      	bne.n	10660 <CC_LibInit+0x44>
   1064a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1064e:	4b1f      	ldr	r3, [pc, #124]	; (106cc <CC_LibInit+0xb0>)
   10650:	429a      	cmp	r2, r3
   10652:	d031      	beq.n	106b8 <CC_LibInit+0x9c>
   10654:	f000 f844 	bl	106e0 <CC_HalTerminate>
   10658:	2407      	movs	r4, #7
   1065a:	f000 f891 	bl	10780 <CC_PalTerminate>
   1065e:	e7e5      	b.n	1062c <CC_LibInit+0x10>
   10660:	f000 f83e 	bl	106e0 <CC_HalTerminate>
   10664:	f000 f88c 	bl	10780 <CC_PalTerminate>
   10668:	2406      	movs	r4, #6
   1066a:	4620      	mov	r0, r4
   1066c:	b003      	add	sp, #12
   1066e:	bd30      	pop	{r4, r5, pc}
   10670:	2404      	movs	r4, #4
   10672:	4620      	mov	r0, r4
   10674:	b003      	add	sp, #12
   10676:	bd30      	pop	{r4, r5, pc}
   10678:	f000 f832 	bl	106e0 <CC_HalTerminate>
   1067c:	f000 f880 	bl	10780 <CC_PalTerminate>
   10680:	f7ff ff7e 	bl	10580 <RndStartupTest.constprop.0>
   10684:	4604      	mov	r4, r0
   10686:	b998      	cbnz	r0, 106b0 <CC_LibInit+0x94>
   10688:	4d11      	ldr	r5, [pc, #68]	; (106d0 <CC_LibInit+0xb4>)
   1068a:	682b      	ldr	r3, [r5, #0]
   1068c:	2b00      	cmp	r3, #0
   1068e:	d1cd      	bne.n	1062c <CC_LibInit+0x10>
   10690:	4602      	mov	r2, r0
   10692:	4601      	mov	r1, r0
   10694:	f7ff f976 	bl	f984 <nrf_cc3xx_platform_ctr_drbg_init>
   10698:	b950      	cbnz	r0, 106b0 <CC_LibInit+0x94>
   1069a:	490e      	ldr	r1, [pc, #56]	; (106d4 <CC_LibInit+0xb8>)
   1069c:	ab01      	add	r3, sp, #4
   1069e:	2268      	movs	r2, #104	; 0x68
   106a0:	f7ff f9a2 	bl	f9e8 <nrf_cc3xx_platform_ctr_drbg_get>
   106a4:	b920      	cbnz	r0, 106b0 <CC_LibInit+0x94>
   106a6:	4b0c      	ldr	r3, [pc, #48]	; (106d8 <CC_LibInit+0xbc>)
   106a8:	602b      	str	r3, [r5, #0]
   106aa:	4620      	mov	r0, r4
   106ac:	b003      	add	sp, #12
   106ae:	bd30      	pop	{r4, r5, pc}
   106b0:	2405      	movs	r4, #5
   106b2:	4620      	mov	r0, r4
   106b4:	b003      	add	sp, #12
   106b6:	bd30      	pop	{r4, r5, pc}
   106b8:	2001      	movs	r0, #1
   106ba:	f000 f8ed 	bl	10898 <CC_PalPowerSaveModeSelect>
   106be:	2800      	cmp	r0, #0
   106c0:	d1da      	bne.n	10678 <CC_LibInit+0x5c>
   106c2:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   106c6:	e7db      	b.n	10680 <CC_LibInit+0x64>
   106c8:	5002b000 	.word	0x5002b000
   106cc:	20e00000 	.word	0x20e00000
   106d0:	20002894 	.word	0x20002894
   106d4:	2000282c 	.word	0x2000282c
   106d8:	5a5aea5a 	.word	0x5a5aea5a

000106dc <CC_HalInit>:
   106dc:	2000      	movs	r0, #0
   106de:	4770      	bx	lr

000106e0 <CC_HalTerminate>:
   106e0:	2000      	movs	r0, #0
   106e2:	4770      	bx	lr

000106e4 <CC_HalClearInterruptBit>:
   106e4:	0543      	lsls	r3, r0, #21
   106e6:	d504      	bpl.n	106f2 <CC_HalClearInterruptBit+0xe>
   106e8:	4b04      	ldr	r3, [pc, #16]	; (106fc <CC_HalClearInterruptBit+0x18>)
   106ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   106ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   106f2:	4b02      	ldr	r3, [pc, #8]	; (106fc <CC_HalClearInterruptBit+0x18>)
   106f4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   106f8:	4770      	bx	lr
   106fa:	bf00      	nop
   106fc:	5002b000 	.word	0x5002b000

00010700 <CC_HalMaskInterrupt>:
   10700:	4b01      	ldr	r3, [pc, #4]	; (10708 <CC_HalMaskInterrupt+0x8>)
   10702:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   10706:	4770      	bx	lr
   10708:	5002b000 	.word	0x5002b000

0001070c <CC_HalWaitInterrupt>:
   1070c:	b108      	cbz	r0, 10712 <CC_HalWaitInterrupt+0x6>
   1070e:	f000 b86b 	b.w	107e8 <CC_PalWaitInterrupt>
   10712:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   10716:	4770      	bx	lr

00010718 <CC_HalWaitInterruptRND>:
   10718:	b108      	cbz	r0, 1071e <CC_HalWaitInterruptRND+0x6>
   1071a:	f000 b84f 	b.w	107bc <CC_PalWaitInterruptRND>
   1071e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   10722:	4770      	bx	lr

00010724 <CC_PalInit>:
   10724:	b510      	push	{r4, lr}
   10726:	4811      	ldr	r0, [pc, #68]	; (1076c <CC_PalInit+0x48>)
   10728:	f000 f872 	bl	10810 <CC_PalMutexCreate>
   1072c:	b100      	cbz	r0, 10730 <CC_PalInit+0xc>
   1072e:	bd10      	pop	{r4, pc}
   10730:	480f      	ldr	r0, [pc, #60]	; (10770 <CC_PalInit+0x4c>)
   10732:	f000 f86d 	bl	10810 <CC_PalMutexCreate>
   10736:	2800      	cmp	r0, #0
   10738:	d1f9      	bne.n	1072e <CC_PalInit+0xa>
   1073a:	4c0e      	ldr	r4, [pc, #56]	; (10774 <CC_PalInit+0x50>)
   1073c:	4620      	mov	r0, r4
   1073e:	f000 f867 	bl	10810 <CC_PalMutexCreate>
   10742:	2800      	cmp	r0, #0
   10744:	d1f3      	bne.n	1072e <CC_PalInit+0xa>
   10746:	4b0c      	ldr	r3, [pc, #48]	; (10778 <CC_PalInit+0x54>)
   10748:	480c      	ldr	r0, [pc, #48]	; (1077c <CC_PalInit+0x58>)
   1074a:	601c      	str	r4, [r3, #0]
   1074c:	f000 f860 	bl	10810 <CC_PalMutexCreate>
   10750:	4601      	mov	r1, r0
   10752:	2800      	cmp	r0, #0
   10754:	d1eb      	bne.n	1072e <CC_PalInit+0xa>
   10756:	f000 f82d 	bl	107b4 <CC_PalDmaInit>
   1075a:	4604      	mov	r4, r0
   1075c:	b108      	cbz	r0, 10762 <CC_PalInit+0x3e>
   1075e:	4620      	mov	r0, r4
   10760:	bd10      	pop	{r4, pc}
   10762:	f000 f87b 	bl	1085c <CC_PalPowerSaveModeInit>
   10766:	4620      	mov	r0, r4
   10768:	e7fa      	b.n	10760 <CC_PalInit+0x3c>
   1076a:	bf00      	nop
   1076c:	200001d8 	.word	0x200001d8
   10770:	200001cc 	.word	0x200001cc
   10774:	200001d4 	.word	0x200001d4
   10778:	200001dc 	.word	0x200001dc
   1077c:	200001d0 	.word	0x200001d0

00010780 <CC_PalTerminate>:
   10780:	b508      	push	{r3, lr}
   10782:	4808      	ldr	r0, [pc, #32]	; (107a4 <CC_PalTerminate+0x24>)
   10784:	f000 f84e 	bl	10824 <CC_PalMutexDestroy>
   10788:	4807      	ldr	r0, [pc, #28]	; (107a8 <CC_PalTerminate+0x28>)
   1078a:	f000 f84b 	bl	10824 <CC_PalMutexDestroy>
   1078e:	4807      	ldr	r0, [pc, #28]	; (107ac <CC_PalTerminate+0x2c>)
   10790:	f000 f848 	bl	10824 <CC_PalMutexDestroy>
   10794:	4806      	ldr	r0, [pc, #24]	; (107b0 <CC_PalTerminate+0x30>)
   10796:	f000 f845 	bl	10824 <CC_PalMutexDestroy>
   1079a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1079e:	f000 b80b 	b.w	107b8 <CC_PalDmaTerminate>
   107a2:	bf00      	nop
   107a4:	200001d8 	.word	0x200001d8
   107a8:	200001cc 	.word	0x200001cc
   107ac:	200001d4 	.word	0x200001d4
   107b0:	200001d0 	.word	0x200001d0

000107b4 <CC_PalDmaInit>:
   107b4:	2000      	movs	r0, #0
   107b6:	4770      	bx	lr

000107b8 <CC_PalDmaTerminate>:
   107b8:	4770      	bx	lr
   107ba:	bf00      	nop

000107bc <CC_PalWaitInterruptRND>:
   107bc:	b410      	push	{r4}
   107be:	4c09      	ldr	r4, [pc, #36]	; (107e4 <CC_PalWaitInterruptRND+0x28>)
   107c0:	4602      	mov	r2, r0
   107c2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   107c6:	4213      	tst	r3, r2
   107c8:	d0fb      	beq.n	107c2 <CC_PalWaitInterruptRND+0x6>
   107ca:	b121      	cbz	r1, 107d6 <CC_PalWaitInterruptRND+0x1a>
   107cc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   107d0:	600b      	str	r3, [r1, #0]
   107d2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   107d6:	4b03      	ldr	r3, [pc, #12]	; (107e4 <CC_PalWaitInterruptRND+0x28>)
   107d8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   107dc:	2000      	movs	r0, #0
   107de:	bc10      	pop	{r4}
   107e0:	4770      	bx	lr
   107e2:	bf00      	nop
   107e4:	5002b000 	.word	0x5002b000

000107e8 <CC_PalWaitInterrupt>:
   107e8:	4a04      	ldr	r2, [pc, #16]	; (107fc <CC_PalWaitInterrupt+0x14>)
   107ea:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   107ee:	4218      	tst	r0, r3
   107f0:	d0fb      	beq.n	107ea <CC_PalWaitInterrupt+0x2>
   107f2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   107f6:	2000      	movs	r0, #0
   107f8:	4770      	bx	lr
   107fa:	bf00      	nop
   107fc:	5002b000 	.word	0x5002b000

00010800 <CC_PalMemCopyPlat>:
   10800:	f002 ba4d 	b.w	12c9e <memmove>

00010804 <CC_PalMemSetPlat>:
   10804:	f002 ba6d 	b.w	12ce2 <memset>

00010808 <CC_PalMemSetZeroPlat>:
   10808:	460a      	mov	r2, r1
   1080a:	2100      	movs	r1, #0
   1080c:	f002 ba69 	b.w	12ce2 <memset>

00010810 <CC_PalMutexCreate>:
   10810:	b508      	push	{r3, lr}
   10812:	4b03      	ldr	r3, [pc, #12]	; (10820 <CC_PalMutexCreate+0x10>)
   10814:	6802      	ldr	r2, [r0, #0]
   10816:	681b      	ldr	r3, [r3, #0]
   10818:	6810      	ldr	r0, [r2, #0]
   1081a:	4798      	blx	r3
   1081c:	2000      	movs	r0, #0
   1081e:	bd08      	pop	{r3, pc}
   10820:	2000018c 	.word	0x2000018c

00010824 <CC_PalMutexDestroy>:
   10824:	b508      	push	{r3, lr}
   10826:	4b03      	ldr	r3, [pc, #12]	; (10834 <CC_PalMutexDestroy+0x10>)
   10828:	6802      	ldr	r2, [r0, #0]
   1082a:	685b      	ldr	r3, [r3, #4]
   1082c:	6810      	ldr	r0, [r2, #0]
   1082e:	4798      	blx	r3
   10830:	2000      	movs	r0, #0
   10832:	bd08      	pop	{r3, pc}
   10834:	2000018c 	.word	0x2000018c

00010838 <CC_PalMutexLock>:
   10838:	4b02      	ldr	r3, [pc, #8]	; (10844 <CC_PalMutexLock+0xc>)
   1083a:	6802      	ldr	r2, [r0, #0]
   1083c:	689b      	ldr	r3, [r3, #8]
   1083e:	6810      	ldr	r0, [r2, #0]
   10840:	4718      	bx	r3
   10842:	bf00      	nop
   10844:	2000018c 	.word	0x2000018c

00010848 <CC_PalMutexUnlock>:
   10848:	b508      	push	{r3, lr}
   1084a:	4b03      	ldr	r3, [pc, #12]	; (10858 <CC_PalMutexUnlock+0x10>)
   1084c:	6802      	ldr	r2, [r0, #0]
   1084e:	68db      	ldr	r3, [r3, #12]
   10850:	6810      	ldr	r0, [r2, #0]
   10852:	4798      	blx	r3
   10854:	2000      	movs	r0, #0
   10856:	bd08      	pop	{r3, pc}
   10858:	2000018c 	.word	0x2000018c

0001085c <CC_PalPowerSaveModeInit>:
   1085c:	b570      	push	{r4, r5, r6, lr}
   1085e:	4c09      	ldr	r4, [pc, #36]	; (10884 <CC_PalPowerSaveModeInit+0x28>)
   10860:	4d09      	ldr	r5, [pc, #36]	; (10888 <CC_PalPowerSaveModeInit+0x2c>)
   10862:	6920      	ldr	r0, [r4, #16]
   10864:	68ab      	ldr	r3, [r5, #8]
   10866:	4798      	blx	r3
   10868:	b118      	cbz	r0, 10872 <CC_PalPowerSaveModeInit+0x16>
   1086a:	4b08      	ldr	r3, [pc, #32]	; (1088c <CC_PalPowerSaveModeInit+0x30>)
   1086c:	4808      	ldr	r0, [pc, #32]	; (10890 <CC_PalPowerSaveModeInit+0x34>)
   1086e:	685b      	ldr	r3, [r3, #4]
   10870:	4798      	blx	r3
   10872:	4a08      	ldr	r2, [pc, #32]	; (10894 <CC_PalPowerSaveModeInit+0x38>)
   10874:	68eb      	ldr	r3, [r5, #12]
   10876:	6920      	ldr	r0, [r4, #16]
   10878:	2100      	movs	r1, #0
   1087a:	6011      	str	r1, [r2, #0]
   1087c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10880:	4718      	bx	r3
   10882:	bf00      	nop
   10884:	2000019c 	.word	0x2000019c
   10888:	2000018c 	.word	0x2000018c
   1088c:	2000017c 	.word	0x2000017c
   10890:	00014838 	.word	0x00014838
   10894:	20002ab8 	.word	0x20002ab8

00010898 <CC_PalPowerSaveModeSelect>:
   10898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1089a:	4d1a      	ldr	r5, [pc, #104]	; (10904 <CC_PalPowerSaveModeSelect+0x6c>)
   1089c:	4e1a      	ldr	r6, [pc, #104]	; (10908 <CC_PalPowerSaveModeSelect+0x70>)
   1089e:	4604      	mov	r4, r0
   108a0:	68b2      	ldr	r2, [r6, #8]
   108a2:	6928      	ldr	r0, [r5, #16]
   108a4:	4790      	blx	r2
   108a6:	b9e8      	cbnz	r0, 108e4 <CC_PalPowerSaveModeSelect+0x4c>
   108a8:	4f18      	ldr	r7, [pc, #96]	; (1090c <CC_PalPowerSaveModeSelect+0x74>)
   108aa:	683b      	ldr	r3, [r7, #0]
   108ac:	b14c      	cbz	r4, 108c2 <CC_PalPowerSaveModeSelect+0x2a>
   108ae:	b1a3      	cbz	r3, 108da <CC_PalPowerSaveModeSelect+0x42>
   108b0:	2b01      	cmp	r3, #1
   108b2:	d019      	beq.n	108e8 <CC_PalPowerSaveModeSelect+0x50>
   108b4:	3b01      	subs	r3, #1
   108b6:	603b      	str	r3, [r7, #0]
   108b8:	6928      	ldr	r0, [r5, #16]
   108ba:	68f3      	ldr	r3, [r6, #12]
   108bc:	4798      	blx	r3
   108be:	2000      	movs	r0, #0
   108c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108c2:	b943      	cbnz	r3, 108d6 <CC_PalPowerSaveModeSelect+0x3e>
   108c4:	4a12      	ldr	r2, [pc, #72]	; (10910 <CC_PalPowerSaveModeSelect+0x78>)
   108c6:	2101      	movs	r1, #1
   108c8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   108cc:	4911      	ldr	r1, [pc, #68]	; (10914 <CC_PalPowerSaveModeSelect+0x7c>)
   108ce:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   108d2:	2a00      	cmp	r2, #0
   108d4:	d1fb      	bne.n	108ce <CC_PalPowerSaveModeSelect+0x36>
   108d6:	3301      	adds	r3, #1
   108d8:	603b      	str	r3, [r7, #0]
   108da:	68f3      	ldr	r3, [r6, #12]
   108dc:	6928      	ldr	r0, [r5, #16]
   108de:	4798      	blx	r3
   108e0:	2000      	movs	r0, #0
   108e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108e4:	480c      	ldr	r0, [pc, #48]	; (10918 <CC_PalPowerSaveModeSelect+0x80>)
   108e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108e8:	4a0a      	ldr	r2, [pc, #40]	; (10914 <CC_PalPowerSaveModeSelect+0x7c>)
   108ea:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   108ee:	2b00      	cmp	r3, #0
   108f0:	d1fb      	bne.n	108ea <CC_PalPowerSaveModeSelect+0x52>
   108f2:	4a07      	ldr	r2, [pc, #28]	; (10910 <CC_PalPowerSaveModeSelect+0x78>)
   108f4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   108f8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   108fc:	f7ff ff00 	bl	10700 <CC_HalMaskInterrupt>
   10900:	683b      	ldr	r3, [r7, #0]
   10902:	e7d7      	b.n	108b4 <CC_PalPowerSaveModeSelect+0x1c>
   10904:	2000019c 	.word	0x2000019c
   10908:	2000018c 	.word	0x2000018c
   1090c:	20002ab8 	.word	0x20002ab8
   10910:	5002a000 	.word	0x5002a000
   10914:	5002b000 	.word	0x5002b000
   10918:	ffff8fe9 	.word	0xffff8fe9

0001091c <mutex_init>:
   1091c:	4b01      	ldr	r3, [pc, #4]	; (10924 <mutex_init+0x8>)
   1091e:	681b      	ldr	r3, [r3, #0]
   10920:	4718      	bx	r3
   10922:	bf00      	nop
   10924:	2000018c 	.word	0x2000018c

00010928 <mutex_lock>:
   10928:	4b01      	ldr	r3, [pc, #4]	; (10930 <mutex_lock+0x8>)
   1092a:	689b      	ldr	r3, [r3, #8]
   1092c:	4718      	bx	r3
   1092e:	bf00      	nop
   10930:	2000018c 	.word	0x2000018c

00010934 <mutex_unlock>:
   10934:	4b01      	ldr	r3, [pc, #4]	; (1093c <mutex_unlock+0x8>)
   10936:	68db      	ldr	r3, [r3, #12]
   10938:	4718      	bx	r3
   1093a:	bf00      	nop
   1093c:	2000018c 	.word	0x2000018c

00010940 <startTrngHW>:
   10940:	2800      	cmp	r0, #0
   10942:	f000 8084 	beq.w	10a4e <startTrngHW+0x10e>
   10946:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1094a:	460c      	mov	r4, r1
   1094c:	b083      	sub	sp, #12
   1094e:	2900      	cmp	r1, #0
   10950:	d078      	beq.n	10a44 <startTrngHW+0x104>
   10952:	461d      	mov	r5, r3
   10954:	2b00      	cmp	r3, #0
   10956:	d075      	beq.n	10a44 <startTrngHW+0x104>
   10958:	4607      	mov	r7, r0
   1095a:	b11a      	cbz	r2, 10964 <startTrngHW+0x24>
   1095c:	2201      	movs	r2, #1
   1095e:	2300      	movs	r3, #0
   10960:	602a      	str	r2, [r5, #0]
   10962:	6003      	str	r3, [r0, #0]
   10964:	682b      	ldr	r3, [r5, #0]
   10966:	2b00      	cmp	r3, #0
   10968:	d067      	beq.n	10a3a <startTrngHW+0xfa>
   1096a:	4629      	mov	r1, r5
   1096c:	4620      	mov	r0, r4
   1096e:	f000 fde9 	bl	11544 <LLF_RND_GetFastestRosc>
   10972:	4603      	mov	r3, r0
   10974:	2800      	cmp	r0, #0
   10976:	d161      	bne.n	10a3c <startTrngHW+0xfc>
   10978:	6828      	ldr	r0, [r5, #0]
   1097a:	4621      	mov	r1, r4
   1097c:	f000 fdc4 	bl	11508 <LLF_RND_GetRoscSampleCnt>
   10980:	4603      	mov	r3, r0
   10982:	2800      	cmp	r0, #0
   10984:	d15a      	bne.n	10a3c <startTrngHW+0xfc>
   10986:	682a      	ldr	r2, [r5, #0]
   10988:	2a08      	cmp	r2, #8
   1098a:	d072      	beq.n	10a72 <startTrngHW+0x132>
   1098c:	2a04      	cmp	r2, #4
   1098e:	d073      	beq.n	10a78 <startTrngHW+0x138>
   10990:	f1a2 0802 	sub.w	r8, r2, #2
   10994:	fab8 f888 	clz	r8, r8
   10998:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1099c:	4e38      	ldr	r6, [pc, #224]	; (10a80 <startTrngHW+0x140>)
   1099e:	2001      	movs	r0, #1
   109a0:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   109a4:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   109a8:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   109ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
   109ae:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   109b2:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   109b6:	428a      	cmp	r2, r1
   109b8:	d1f6      	bne.n	109a8 <startTrngHW+0x68>
   109ba:	f04f 0900 	mov.w	r9, #0
   109be:	9301      	str	r3, [sp, #4]
   109c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109c4:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   109c8:	f7ff fe8c 	bl	106e4 <CC_HalClearInterruptBit>
   109cc:	f06f 021b 	mvn.w	r2, #27
   109d0:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   109d4:	4648      	mov	r0, r9
   109d6:	f7ff fe93 	bl	10700 <CC_HalMaskInterrupt>
   109da:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   109de:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   109e2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   109e6:	f7ff fe8b 	bl	10700 <CC_HalMaskInterrupt>
   109ea:	220a      	movs	r2, #10
   109ec:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   109f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   109f2:	2b01      	cmp	r3, #1
   109f4:	9b01      	ldr	r3, [sp, #4]
   109f6:	d02d      	beq.n	10a54 <startTrngHW+0x114>
   109f8:	6922      	ldr	r2, [r4, #16]
   109fa:	4922      	ldr	r1, [pc, #136]	; (10a84 <startTrngHW+0x144>)
   109fc:	fba1 1202 	umull	r1, r2, r1, r2
   10a00:	0912      	lsrs	r2, r2, #4
   10a02:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10a04:	fb01 f202 	mul.w	r2, r1, r2
   10a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10a0c:	491c      	ldr	r1, [pc, #112]	; (10a80 <startTrngHW+0x140>)
   10a0e:	03d2      	lsls	r2, r2, #15
   10a10:	0992      	lsrs	r2, r2, #6
   10a12:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   10a16:	2201      	movs	r2, #1
   10a18:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   10a1c:	683a      	ldr	r2, [r7, #0]
   10a1e:	6829      	ldr	r1, [r5, #0]
   10a20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10a24:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   10a28:	603a      	str	r2, [r7, #0]
   10a2a:	6829      	ldr	r1, [r5, #0]
   10a2c:	4618      	mov	r0, r3
   10a2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10a32:	603a      	str	r2, [r7, #0]
   10a34:	b003      	add	sp, #12
   10a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10a3a:	4b13      	ldr	r3, [pc, #76]	; (10a88 <startTrngHW+0x148>)
   10a3c:	4618      	mov	r0, r3
   10a3e:	b003      	add	sp, #12
   10a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10a44:	4b11      	ldr	r3, [pc, #68]	; (10a8c <startTrngHW+0x14c>)
   10a46:	4618      	mov	r0, r3
   10a48:	b003      	add	sp, #12
   10a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10a4e:	4b0f      	ldr	r3, [pc, #60]	; (10a8c <startTrngHW+0x14c>)
   10a50:	4618      	mov	r0, r3
   10a52:	4770      	bx	lr
   10a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10a58:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   10a5c:	3101      	adds	r1, #1
   10a5e:	d006      	beq.n	10a6e <startTrngHW+0x12e>
   10a60:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   10a64:	4907      	ldr	r1, [pc, #28]	; (10a84 <startTrngHW+0x144>)
   10a66:	fba1 1202 	umull	r1, r2, r1, r2
   10a6a:	0912      	lsrs	r2, r2, #4
   10a6c:	e7c9      	b.n	10a02 <startTrngHW+0xc2>
   10a6e:	2216      	movs	r2, #22
   10a70:	e7c7      	b.n	10a02 <startTrngHW+0xc2>
   10a72:	f04f 0803 	mov.w	r8, #3
   10a76:	e791      	b.n	1099c <startTrngHW+0x5c>
   10a78:	f04f 0802 	mov.w	r8, #2
   10a7c:	e78e      	b.n	1099c <startTrngHW+0x5c>
   10a7e:	bf00      	nop
   10a80:	5002b000 	.word	0x5002b000
   10a84:	aaaaaaab 	.word	0xaaaaaaab
   10a88:	00f10c31 	.word	0x00f10c31
   10a8c:	00f10c35 	.word	0x00f10c35

00010a90 <LLF_RND_RepetitionCounterTest.part.0>:
   10a90:	b570      	push	{r4, r5, r6, lr}
   10a92:	00c9      	lsls	r1, r1, #3
   10a94:	2400      	movs	r4, #0
   10a96:	1e4e      	subs	r6, r1, #1
   10a98:	f04f 0c01 	mov.w	ip, #1
   10a9c:	4625      	mov	r5, r4
   10a9e:	46a6      	mov	lr, r4
   10aa0:	e008      	b.n	10ab4 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   10aa2:	459e      	cmp	lr, r3
   10aa4:	d015      	beq.n	10ad2 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   10aa6:	2501      	movs	r5, #1
   10aa8:	45b4      	cmp	ip, r6
   10aaa:	d817      	bhi.n	10adc <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   10aac:	3401      	adds	r4, #1
   10aae:	f10c 0c01 	add.w	ip, ip, #1
   10ab2:	469e      	mov	lr, r3
   10ab4:	0963      	lsrs	r3, r4, #5
   10ab6:	f004 011f 	and.w	r1, r4, #31
   10aba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   10abe:	291f      	cmp	r1, #31
   10ac0:	fa23 f301 	lsr.w	r3, r3, r1
   10ac4:	bf18      	it	ne
   10ac6:	f003 0301 	andne.w	r3, r3, #1
   10aca:	2c00      	cmp	r4, #0
   10acc:	d1e9      	bne.n	10aa2 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   10ace:	2501      	movs	r5, #1
   10ad0:	e7ec      	b.n	10aac <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   10ad2:	3501      	adds	r5, #1
   10ad4:	4295      	cmp	r5, r2
   10ad6:	d1e7      	bne.n	10aa8 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   10ad8:	4801      	ldr	r0, [pc, #4]	; (10ae0 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   10ada:	bd70      	pop	{r4, r5, r6, pc}
   10adc:	2000      	movs	r0, #0
   10ade:	bd70      	pop	{r4, r5, r6, pc}
   10ae0:	00f10c36 	.word	0x00f10c36

00010ae4 <LLF_RND_AdaptiveProportionTest>:
   10ae4:	2800      	cmp	r0, #0
   10ae6:	d03f      	beq.n	10b68 <LLF_RND_AdaptiveProportionTest+0x84>
   10ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10aec:	1e4c      	subs	r4, r1, #1
   10aee:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   10af2:	d228      	bcs.n	10b46 <LLF_RND_AdaptiveProportionTest+0x62>
   10af4:	b33b      	cbz	r3, 10b46 <LLF_RND_AdaptiveProportionTest+0x62>
   10af6:	b332      	cbz	r2, 10b46 <LLF_RND_AdaptiveProportionTest+0x62>
   10af8:	f04f 0e00 	mov.w	lr, #0
   10afc:	00cf      	lsls	r7, r1, #3
   10afe:	4676      	mov	r6, lr
   10b00:	4675      	mov	r5, lr
   10b02:	4674      	mov	r4, lr
   10b04:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   10b08:	0961      	lsrs	r1, r4, #5
   10b0a:	f004 0c1f 	and.w	ip, r4, #31
   10b0e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   10b12:	f1bc 0f1f 	cmp.w	ip, #31
   10b16:	fa21 f10c 	lsr.w	r1, r1, ip
   10b1a:	bf18      	it	ne
   10b1c:	f001 0101 	andne.w	r1, r1, #1
   10b20:	b1a4      	cbz	r4, 10b4c <LLF_RND_AdaptiveProportionTest+0x68>
   10b22:	42ab      	cmp	r3, r5
   10b24:	d018      	beq.n	10b58 <LLF_RND_AdaptiveProportionTest+0x74>
   10b26:	428e      	cmp	r6, r1
   10b28:	bf08      	it	eq
   10b2a:	f10e 0e01 	addeq.w	lr, lr, #1
   10b2e:	45a8      	cmp	r8, r5
   10b30:	d015      	beq.n	10b5e <LLF_RND_AdaptiveProportionTest+0x7a>
   10b32:	3501      	adds	r5, #1
   10b34:	4631      	mov	r1, r6
   10b36:	3401      	adds	r4, #1
   10b38:	42bc      	cmp	r4, r7
   10b3a:	d001      	beq.n	10b40 <LLF_RND_AdaptiveProportionTest+0x5c>
   10b3c:	460e      	mov	r6, r1
   10b3e:	e7e3      	b.n	10b08 <LLF_RND_AdaptiveProportionTest+0x24>
   10b40:	2000      	movs	r0, #0
   10b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b46:	4809      	ldr	r0, [pc, #36]	; (10b6c <LLF_RND_AdaptiveProportionTest+0x88>)
   10b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b4c:	f04f 0e01 	mov.w	lr, #1
   10b50:	4674      	mov	r4, lr
   10b52:	4675      	mov	r5, lr
   10b54:	460e      	mov	r6, r1
   10b56:	e7d7      	b.n	10b08 <LLF_RND_AdaptiveProportionTest+0x24>
   10b58:	2501      	movs	r5, #1
   10b5a:	46ae      	mov	lr, r5
   10b5c:	e7eb      	b.n	10b36 <LLF_RND_AdaptiveProportionTest+0x52>
   10b5e:	4572      	cmp	r2, lr
   10b60:	d3f1      	bcc.n	10b46 <LLF_RND_AdaptiveProportionTest+0x62>
   10b62:	4631      	mov	r1, r6
   10b64:	461d      	mov	r5, r3
   10b66:	e7e6      	b.n	10b36 <LLF_RND_AdaptiveProportionTest+0x52>
   10b68:	4800      	ldr	r0, [pc, #0]	; (10b6c <LLF_RND_AdaptiveProportionTest+0x88>)
   10b6a:	4770      	bx	lr
   10b6c:	00f10c37 	.word	0x00f10c37

00010b70 <getTrngSource>:
   10b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b74:	b091      	sub	sp, #68	; 0x44
   10b76:	460d      	mov	r5, r1
   10b78:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   10b7c:	4681      	mov	r9, r0
   10b7e:	2900      	cmp	r1, #0
   10b80:	d14c      	bne.n	10c1c <getTrngSource+0xac>
   10b82:	6928      	ldr	r0, [r5, #16]
   10b84:	9006      	str	r0, [sp, #24]
   10b86:	981a      	ldr	r0, [sp, #104]	; 0x68
   10b88:	601c      	str	r4, [r3, #0]
   10b8a:	2300      	movs	r3, #0
   10b8c:	6003      	str	r3, [r0, #0]
   10b8e:	2a00      	cmp	r2, #0
   10b90:	f000 8124 	beq.w	10ddc <getTrngSource+0x26c>
   10b94:	4b9d      	ldr	r3, [pc, #628]	; (10e0c <getTrngSource+0x29c>)
   10b96:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10b98:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   10b9c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   10ba0:	429a      	cmp	r2, r3
   10ba2:	d147      	bne.n	10c34 <getTrngSource+0xc4>
   10ba4:	290a      	cmp	r1, #10
   10ba6:	d145      	bne.n	10c34 <getTrngSource+0xc4>
   10ba8:	f899 3003 	ldrb.w	r3, [r9, #3]
   10bac:	9308      	str	r3, [sp, #32]
   10bae:	f104 0308 	add.w	r3, r4, #8
   10bb2:	9a06      	ldr	r2, [sp, #24]
   10bb4:	9307      	str	r3, [sp, #28]
   10bb6:	4b96      	ldr	r3, [pc, #600]	; (10e10 <getTrngSource+0x2a0>)
   10bb8:	4c94      	ldr	r4, [pc, #592]	; (10e0c <getTrngSource+0x29c>)
   10bba:	fba3 1302 	umull	r1, r3, r3, r2
   10bbe:	089b      	lsrs	r3, r3, #2
   10bc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10bc4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   10bc8:	9303      	str	r3, [sp, #12]
   10bca:	2304      	movs	r3, #4
   10bcc:	9305      	str	r3, [sp, #20]
   10bce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10bd0:	9e06      	ldr	r6, [sp, #24]
   10bd2:	601e      	str	r6, [r3, #0]
   10bd4:	2e00      	cmp	r6, #0
   10bd6:	d033      	beq.n	10c40 <getTrngSource+0xd0>
   10bd8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10bdc:	2700      	movs	r7, #0
   10bde:	f04f 0a01 	mov.w	sl, #1
   10be2:	f000 fcbf 	bl	11564 <LLF_RND_TurnOffTrng>
   10be6:	2300      	movs	r3, #0
   10be8:	9309      	str	r3, [sp, #36]	; 0x24
   10bea:	f1b9 0f00 	cmp.w	r9, #0
   10bee:	f000 80df 	beq.w	10db0 <getTrngSource+0x240>
   10bf2:	2d00      	cmp	r5, #0
   10bf4:	f000 80dc 	beq.w	10db0 <getTrngSource+0x240>
   10bf8:	9b08      	ldr	r3, [sp, #32]
   10bfa:	b1eb      	cbz	r3, 10c38 <getTrngSource+0xc8>
   10bfc:	a908      	add	r1, sp, #32
   10bfe:	4628      	mov	r0, r5
   10c00:	f000 fca0 	bl	11544 <LLF_RND_GetFastestRosc>
   10c04:	2800      	cmp	r0, #0
   10c06:	d03e      	beq.n	10c86 <getTrngSource+0x116>
   10c08:	4b82      	ldr	r3, [pc, #520]	; (10e14 <getTrngSource+0x2a4>)
   10c0a:	4298      	cmp	r0, r3
   10c0c:	d118      	bne.n	10c40 <getTrngSource+0xd0>
   10c0e:	9003      	str	r0, [sp, #12]
   10c10:	f000 fca8 	bl	11564 <LLF_RND_TurnOffTrng>
   10c14:	9803      	ldr	r0, [sp, #12]
   10c16:	b011      	add	sp, #68	; 0x44
   10c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10c20:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   10c24:	3601      	adds	r6, #1
   10c26:	bf14      	ite	ne
   10c28:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   10c2c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   10c30:	9006      	str	r0, [sp, #24]
   10c32:	e7a8      	b.n	10b86 <getTrngSource+0x16>
   10c34:	4878      	ldr	r0, [pc, #480]	; (10e18 <getTrngSource+0x2a8>)
   10c36:	e7ea      	b.n	10c0e <getTrngSource+0x9e>
   10c38:	4878      	ldr	r0, [pc, #480]	; (10e1c <getTrngSource+0x2ac>)
   10c3a:	4b76      	ldr	r3, [pc, #472]	; (10e14 <getTrngSource+0x2a4>)
   10c3c:	4298      	cmp	r0, r3
   10c3e:	d0e6      	beq.n	10c0e <getTrngSource+0x9e>
   10c40:	9b08      	ldr	r3, [sp, #32]
   10c42:	2b08      	cmp	r3, #8
   10c44:	f000 80c8 	beq.w	10dd8 <getTrngSource+0x268>
   10c48:	005b      	lsls	r3, r3, #1
   10c4a:	2200      	movs	r2, #0
   10c4c:	9308      	str	r3, [sp, #32]
   10c4e:	9200      	str	r2, [sp, #0]
   10c50:	ab08      	add	r3, sp, #32
   10c52:	4629      	mov	r1, r5
   10c54:	4648      	mov	r0, r9
   10c56:	f7ff fe73 	bl	10940 <startTrngHW>
   10c5a:	4b70      	ldr	r3, [pc, #448]	; (10e1c <getTrngSource+0x2ac>)
   10c5c:	4298      	cmp	r0, r3
   10c5e:	f000 80b7 	beq.w	10dd0 <getTrngSource+0x260>
   10c62:	2800      	cmp	r0, #0
   10c64:	d1d3      	bne.n	10c0e <getTrngSource+0x9e>
   10c66:	f8d9 2000 	ldr.w	r2, [r9]
   10c6a:	0a13      	lsrs	r3, r2, #8
   10c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   10c70:	4313      	orrs	r3, r2
   10c72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10c76:	f8c9 3000 	str.w	r3, [r9]
   10c7a:	9b05      	ldr	r3, [sp, #20]
   10c7c:	3b01      	subs	r3, #1
   10c7e:	9305      	str	r3, [sp, #20]
   10c80:	d1a5      	bne.n	10bce <getTrngSource+0x5e>
   10c82:	2000      	movs	r0, #0
   10c84:	e7c3      	b.n	10c0e <getTrngSource+0x9e>
   10c86:	9808      	ldr	r0, [sp, #32]
   10c88:	4629      	mov	r1, r5
   10c8a:	f000 fc3d 	bl	11508 <LLF_RND_GetRoscSampleCnt>
   10c8e:	2800      	cmp	r0, #0
   10c90:	d1ba      	bne.n	10c08 <getTrngSource+0x98>
   10c92:	9b08      	ldr	r3, [sp, #32]
   10c94:	2b08      	cmp	r3, #8
   10c96:	f000 8095 	beq.w	10dc4 <getTrngSource+0x254>
   10c9a:	2b04      	cmp	r3, #4
   10c9c:	f000 8095 	beq.w	10dca <getTrngSource+0x25a>
   10ca0:	f1a3 0302 	sub.w	r3, r3, #2
   10ca4:	fab3 f383 	clz	r3, r3
   10ca8:	095b      	lsrs	r3, r3, #5
   10caa:	9304      	str	r3, [sp, #16]
   10cac:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   10cb0:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   10cb4:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   10cb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10cba:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   10cbe:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   10cc2:	4293      	cmp	r3, r2
   10cc4:	d1f6      	bne.n	10cb4 <getTrngSource+0x144>
   10cc6:	f04f 0b00 	mov.w	fp, #0
   10cca:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   10cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10cd2:	f7ff fd07 	bl	106e4 <CC_HalClearInterruptBit>
   10cd6:	f06f 031b 	mvn.w	r3, #27
   10cda:	4658      	mov	r0, fp
   10cdc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   10ce0:	f7ff fd0e 	bl	10700 <CC_HalMaskInterrupt>
   10ce4:	9b04      	ldr	r3, [sp, #16]
   10ce6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   10cea:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   10cee:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   10cf2:	f7ff fd05 	bl	10700 <CC_HalMaskInterrupt>
   10cf6:	230a      	movs	r3, #10
   10cf8:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   10cfc:	692b      	ldr	r3, [r5, #16]
   10cfe:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   10d02:	fbab 2303 	umull	r2, r3, fp, r3
   10d06:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10d08:	091b      	lsrs	r3, r3, #4
   10d0a:	fb02 f303 	mul.w	r3, r2, r3
   10d0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10d12:	03db      	lsls	r3, r3, #15
   10d14:	099b      	lsrs	r3, r3, #6
   10d16:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   10d1a:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   10d1e:	9908      	ldr	r1, [sp, #32]
   10d20:	f8d9 2000 	ldr.w	r2, [r9]
   10d24:	020b      	lsls	r3, r1, #8
   10d26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10d2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   10d2e:	4313      	orrs	r3, r2
   10d30:	f8c9 3000 	str.w	r3, [r9]
   10d34:	a809      	add	r0, sp, #36	; 0x24
   10d36:	f000 fbd7 	bl	114e8 <LLF_RND_WaitRngInterrupt>
   10d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d3c:	f003 031a 	and.w	r3, r3, #26
   10d40:	4303      	orrs	r3, r0
   10d42:	f47f af7d 	bne.w	10c40 <getTrngSource+0xd0>
   10d46:	fbab 3b06 	umull	r3, fp, fp, r6
   10d4a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   10d4e:	930a      	str	r3, [sp, #40]	; 0x28
   10d50:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   10d54:	930b      	str	r3, [sp, #44]	; 0x2c
   10d56:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   10d5a:	930c      	str	r3, [sp, #48]	; 0x30
   10d5c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   10d60:	930d      	str	r3, [sp, #52]	; 0x34
   10d62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   10d66:	930e      	str	r3, [sp, #56]	; 0x38
   10d68:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   10d6c:	930f      	str	r3, [sp, #60]	; 0x3c
   10d6e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   10d72:	d101      	bne.n	10d78 <getTrngSource+0x208>
   10d74:	9b03      	ldr	r3, [sp, #12]
   10d76:	b9eb      	cbnz	r3, 10db4 <getTrngSource+0x244>
   10d78:	4640      	mov	r0, r8
   10d7a:	2218      	movs	r2, #24
   10d7c:	a90a      	add	r1, sp, #40	; 0x28
   10d7e:	3e18      	subs	r6, #24
   10d80:	f108 0818 	add.w	r8, r8, #24
   10d84:	f7ff fd3c 	bl	10800 <CC_PalMemCopyPlat>
   10d88:	3701      	adds	r7, #1
   10d8a:	2e00      	cmp	r6, #0
   10d8c:	f47f af29 	bne.w	10be2 <getTrngSource+0x72>
   10d90:	9b06      	ldr	r3, [sp, #24]
   10d92:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   10d96:	d836      	bhi.n	10e06 <getTrngSource+0x296>
   10d98:	9e07      	ldr	r6, [sp, #28]
   10d9a:	696a      	ldr	r2, [r5, #20]
   10d9c:	4619      	mov	r1, r3
   10d9e:	4630      	mov	r0, r6
   10da0:	461f      	mov	r7, r3
   10da2:	f7ff fe75 	bl	10a90 <LLF_RND_RepetitionCounterTest.part.0>
   10da6:	b320      	cbz	r0, 10df2 <getTrngSource+0x282>
   10da8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   10daa:	2300      	movs	r3, #0
   10dac:	6013      	str	r3, [r2, #0]
   10dae:	e72b      	b.n	10c08 <getTrngSource+0x98>
   10db0:	481b      	ldr	r0, [pc, #108]	; (10e20 <getTrngSource+0x2b0>)
   10db2:	e729      	b.n	10c08 <getTrngSource+0x98>
   10db4:	4640      	mov	r0, r8
   10db6:	461a      	mov	r2, r3
   10db8:	a90a      	add	r1, sp, #40	; 0x28
   10dba:	1af6      	subs	r6, r6, r3
   10dbc:	4498      	add	r8, r3
   10dbe:	f7ff fd1f 	bl	10800 <CC_PalMemCopyPlat>
   10dc2:	e7e1      	b.n	10d88 <getTrngSource+0x218>
   10dc4:	2303      	movs	r3, #3
   10dc6:	9304      	str	r3, [sp, #16]
   10dc8:	e770      	b.n	10cac <getTrngSource+0x13c>
   10dca:	2302      	movs	r3, #2
   10dcc:	9304      	str	r3, [sp, #16]
   10dce:	e76d      	b.n	10cac <getTrngSource+0x13c>
   10dd0:	6a2b      	ldr	r3, [r5, #32]
   10dd2:	2b00      	cmp	r3, #0
   10dd4:	f43f af1b 	beq.w	10c0e <getTrngSource+0x9e>
   10dd8:	4812      	ldr	r0, [pc, #72]	; (10e24 <getTrngSource+0x2b4>)
   10dda:	e718      	b.n	10c0e <getTrngSource+0x9e>
   10ddc:	9100      	str	r1, [sp, #0]
   10dde:	ab08      	add	r3, sp, #32
   10de0:	2201      	movs	r2, #1
   10de2:	4629      	mov	r1, r5
   10de4:	4648      	mov	r0, r9
   10de6:	f7ff fdab 	bl	10940 <startTrngHW>
   10dea:	2800      	cmp	r0, #0
   10dec:	f43f aedf 	beq.w	10bae <getTrngSource+0x3e>
   10df0:	e70d      	b.n	10c0e <getTrngSource+0x9e>
   10df2:	69aa      	ldr	r2, [r5, #24]
   10df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10df8:	4639      	mov	r1, r7
   10dfa:	4630      	mov	r0, r6
   10dfc:	f7ff fe72 	bl	10ae4 <LLF_RND_AdaptiveProportionTest>
   10e00:	2800      	cmp	r0, #0
   10e02:	d1d1      	bne.n	10da8 <getTrngSource+0x238>
   10e04:	e73d      	b.n	10c82 <getTrngSource+0x112>
   10e06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10e08:	601e      	str	r6, [r3, #0]
   10e0a:	e719      	b.n	10c40 <getTrngSource+0xd0>
   10e0c:	5002b000 	.word	0x5002b000
   10e10:	aaaaaaab 	.word	0xaaaaaaab
   10e14:	00f10c02 	.word	0x00f10c02
   10e18:	00f10c30 	.word	0x00f10c30
   10e1c:	00f10c31 	.word	0x00f10c31
   10e20:	00f10c35 	.word	0x00f10c35
   10e24:	00f10c32 	.word	0x00f10c32

00010e28 <LLF_RND_GetTrngSource>:
   10e28:	b410      	push	{r4}
   10e2a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   10e2e:	9401      	str	r4, [sp, #4]
   10e30:	9c03      	ldr	r4, [sp, #12]
   10e32:	9402      	str	r4, [sp, #8]
   10e34:	2400      	movs	r4, #0
   10e36:	9403      	str	r4, [sp, #12]
   10e38:	bc10      	pop	{r4}
   10e3a:	f7ff be99 	b.w	10b70 <getTrngSource>
   10e3e:	bf00      	nop

00010e40 <LLF_RND_RunTrngStartupTest>:
   10e40:	b510      	push	{r4, lr}
   10e42:	b086      	sub	sp, #24
   10e44:	ab05      	add	r3, sp, #20
   10e46:	2401      	movs	r4, #1
   10e48:	e9cd 2401 	strd	r2, r4, [sp, #4]
   10e4c:	9300      	str	r3, [sp, #0]
   10e4e:	2200      	movs	r2, #0
   10e50:	ab04      	add	r3, sp, #16
   10e52:	f7ff fe8d 	bl	10b70 <getTrngSource>
   10e56:	b006      	add	sp, #24
   10e58:	bd10      	pop	{r4, pc}
   10e5a:	bf00      	nop

00010e5c <mbedtls_hardware_poll>:
   10e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e5e:	b089      	sub	sp, #36	; 0x24
   10e60:	9205      	str	r2, [sp, #20]
   10e62:	2900      	cmp	r1, #0
   10e64:	d064      	beq.n	10f30 <mbedtls_hardware_poll+0xd4>
   10e66:	461c      	mov	r4, r3
   10e68:	2b00      	cmp	r3, #0
   10e6a:	d061      	beq.n	10f30 <mbedtls_hardware_poll+0xd4>
   10e6c:	4615      	mov	r5, r2
   10e6e:	2a00      	cmp	r2, #0
   10e70:	d05e      	beq.n	10f30 <mbedtls_hardware_poll+0xd4>
   10e72:	4f31      	ldr	r7, [pc, #196]	; (10f38 <mbedtls_hardware_poll+0xdc>)
   10e74:	460e      	mov	r6, r1
   10e76:	6838      	ldr	r0, [r7, #0]
   10e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10e7c:	f7ff fcdc 	bl	10838 <CC_PalMutexLock>
   10e80:	2800      	cmp	r0, #0
   10e82:	d14b      	bne.n	10f1c <mbedtls_hardware_poll+0xc0>
   10e84:	2000      	movs	r0, #0
   10e86:	f7ff fd07 	bl	10898 <CC_PalPowerSaveModeSelect>
   10e8a:	2800      	cmp	r0, #0
   10e8c:	d142      	bne.n	10f14 <mbedtls_hardware_poll+0xb8>
   10e8e:	482b      	ldr	r0, [pc, #172]	; (10f3c <mbedtls_hardware_poll+0xe0>)
   10e90:	f000 fa9a 	bl	113c8 <RNG_PLAT_SetUserRngParameters>
   10e94:	b1d8      	cbz	r0, 10ece <mbedtls_hardware_poll+0x72>
   10e96:	2001      	movs	r0, #1
   10e98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10e9c:	f7ff fcfc 	bl	10898 <CC_PalPowerSaveModeSelect>
   10ea0:	2800      	cmp	r0, #0
   10ea2:	d133      	bne.n	10f0c <mbedtls_hardware_poll+0xb0>
   10ea4:	4826      	ldr	r0, [pc, #152]	; (10f40 <mbedtls_hardware_poll+0xe4>)
   10ea6:	f44f 7108 	mov.w	r1, #544	; 0x220
   10eaa:	f7fe fe5f 	bl	fb6c <mbedtls_zeroize_internal>
   10eae:	4825      	ldr	r0, [pc, #148]	; (10f44 <mbedtls_hardware_poll+0xe8>)
   10eb0:	2104      	movs	r1, #4
   10eb2:	f7fe fe5b 	bl	fb6c <mbedtls_zeroize_internal>
   10eb6:	4821      	ldr	r0, [pc, #132]	; (10f3c <mbedtls_hardware_poll+0xe0>)
   10eb8:	2128      	movs	r1, #40	; 0x28
   10eba:	f7fe fe57 	bl	fb6c <mbedtls_zeroize_internal>
   10ebe:	6838      	ldr	r0, [r7, #0]
   10ec0:	f7ff fcc2 	bl	10848 <CC_PalMutexUnlock>
   10ec4:	2800      	cmp	r0, #0
   10ec6:	d12d      	bne.n	10f24 <mbedtls_hardware_poll+0xc8>
   10ec8:	4630      	mov	r0, r6
   10eca:	b009      	add	sp, #36	; 0x24
   10ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ece:	4b1c      	ldr	r3, [pc, #112]	; (10f40 <mbedtls_hardware_poll+0xe4>)
   10ed0:	9302      	str	r3, [sp, #8]
   10ed2:	ab07      	add	r3, sp, #28
   10ed4:	9003      	str	r0, [sp, #12]
   10ed6:	4602      	mov	r2, r0
   10ed8:	9300      	str	r3, [sp, #0]
   10eda:	4918      	ldr	r1, [pc, #96]	; (10f3c <mbedtls_hardware_poll+0xe0>)
   10edc:	4819      	ldr	r0, [pc, #100]	; (10f44 <mbedtls_hardware_poll+0xe8>)
   10ede:	9401      	str	r4, [sp, #4]
   10ee0:	ab05      	add	r3, sp, #20
   10ee2:	f7ff ffa1 	bl	10e28 <LLF_RND_GetTrngSource>
   10ee6:	4603      	mov	r3, r0
   10ee8:	2800      	cmp	r0, #0
   10eea:	d1d4      	bne.n	10e96 <mbedtls_hardware_poll+0x3a>
   10eec:	6822      	ldr	r2, [r4, #0]
   10eee:	42aa      	cmp	r2, r5
   10ef0:	d3d1      	bcc.n	10e96 <mbedtls_hardware_poll+0x3a>
   10ef2:	9907      	ldr	r1, [sp, #28]
   10ef4:	4630      	mov	r0, r6
   10ef6:	3108      	adds	r1, #8
   10ef8:	462a      	mov	r2, r5
   10efa:	461e      	mov	r6, r3
   10efc:	f7ff fc80 	bl	10800 <CC_PalMemCopyPlat>
   10f00:	6025      	str	r5, [r4, #0]
   10f02:	2001      	movs	r0, #1
   10f04:	f7ff fcc8 	bl	10898 <CC_PalPowerSaveModeSelect>
   10f08:	2800      	cmp	r0, #0
   10f0a:	d0cb      	beq.n	10ea4 <mbedtls_hardware_poll+0x48>
   10f0c:	480e      	ldr	r0, [pc, #56]	; (10f48 <mbedtls_hardware_poll+0xec>)
   10f0e:	f7fe fd17 	bl	f940 <CC_PalAbort>
   10f12:	e7c7      	b.n	10ea4 <mbedtls_hardware_poll+0x48>
   10f14:	480d      	ldr	r0, [pc, #52]	; (10f4c <mbedtls_hardware_poll+0xf0>)
   10f16:	f7fe fd13 	bl	f940 <CC_PalAbort>
   10f1a:	e7b8      	b.n	10e8e <mbedtls_hardware_poll+0x32>
   10f1c:	480c      	ldr	r0, [pc, #48]	; (10f50 <mbedtls_hardware_poll+0xf4>)
   10f1e:	f7fe fd0f 	bl	f940 <CC_PalAbort>
   10f22:	e7af      	b.n	10e84 <mbedtls_hardware_poll+0x28>
   10f24:	480b      	ldr	r0, [pc, #44]	; (10f54 <mbedtls_hardware_poll+0xf8>)
   10f26:	f7fe fd0b 	bl	f940 <CC_PalAbort>
   10f2a:	4630      	mov	r0, r6
   10f2c:	b009      	add	sp, #36	; 0x24
   10f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10f34:	e7c8      	b.n	10ec8 <mbedtls_hardware_poll+0x6c>
   10f36:	bf00      	nop
   10f38:	200001dc 	.word	0x200001dc
   10f3c:	20002ce0 	.word	0x20002ce0
   10f40:	20002ac0 	.word	0x20002ac0
   10f44:	20002abc 	.word	0x20002abc
   10f48:	00014800 	.word	0x00014800
   10f4c:	000147e0 	.word	0x000147e0
   10f50:	000147c8 	.word	0x000147c8
   10f54:	00014858 	.word	0x00014858

00010f58 <cc_mbedtls_aes_init>:
   10f58:	b510      	push	{r4, lr}
   10f5a:	4604      	mov	r4, r0
   10f5c:	b130      	cbz	r0, 10f6c <cc_mbedtls_aes_init+0x14>
   10f5e:	2200      	movs	r2, #0
   10f60:	2301      	movs	r3, #1
   10f62:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   10f66:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   10f6a:	bd10      	pop	{r4, pc}
   10f6c:	4801      	ldr	r0, [pc, #4]	; (10f74 <cc_mbedtls_aes_init+0x1c>)
   10f6e:	f7fe fce7 	bl	f940 <CC_PalAbort>
   10f72:	e7f4      	b.n	10f5e <cc_mbedtls_aes_init+0x6>
   10f74:	00014870 	.word	0x00014870

00010f78 <cc_mbedtls_aes_free>:
   10f78:	b118      	cbz	r0, 10f82 <cc_mbedtls_aes_free+0xa>
   10f7a:	2274      	movs	r2, #116	; 0x74
   10f7c:	2100      	movs	r1, #0
   10f7e:	f7ff bc41 	b.w	10804 <CC_PalMemSetPlat>
   10f82:	4770      	bx	lr

00010f84 <cc_mbedtls_aes_setkey_enc>:
   10f84:	b190      	cbz	r0, 10fac <cc_mbedtls_aes_setkey_enc+0x28>
   10f86:	b1a1      	cbz	r1, 10fb2 <cc_mbedtls_aes_setkey_enc+0x2e>
   10f88:	b510      	push	{r4, lr}
   10f8a:	2a80      	cmp	r2, #128	; 0x80
   10f8c:	f04f 0400 	mov.w	r4, #0
   10f90:	6384      	str	r4, [r0, #56]	; 0x38
   10f92:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   10f96:	d106      	bne.n	10fa6 <cc_mbedtls_aes_setkey_enc+0x22>
   10f98:	2210      	movs	r2, #16
   10f9a:	6304      	str	r4, [r0, #48]	; 0x30
   10f9c:	4410      	add	r0, r2
   10f9e:	f7ff fc2f 	bl	10800 <CC_PalMemCopyPlat>
   10fa2:	4620      	mov	r0, r4
   10fa4:	bd10      	pop	{r4, pc}
   10fa6:	f06f 001f 	mvn.w	r0, #31
   10faa:	bd10      	pop	{r4, pc}
   10fac:	f06f 0021 	mvn.w	r0, #33	; 0x21
   10fb0:	4770      	bx	lr
   10fb2:	f06f 001f 	mvn.w	r0, #31
   10fb6:	4770      	bx	lr

00010fb8 <cc_mbedtls_aes_crypt_ecb>:
   10fb8:	b328      	cbz	r0, 11006 <cc_mbedtls_aes_crypt_ecb+0x4e>
   10fba:	b322      	cbz	r2, 11006 <cc_mbedtls_aes_crypt_ecb+0x4e>
   10fbc:	b31b      	cbz	r3, 11006 <cc_mbedtls_aes_crypt_ecb+0x4e>
   10fbe:	2901      	cmp	r1, #1
   10fc0:	d821      	bhi.n	11006 <cc_mbedtls_aes_crypt_ecb+0x4e>
   10fc2:	b570      	push	{r4, r5, r6, lr}
   10fc4:	4604      	mov	r4, r0
   10fc6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10fc8:	b086      	sub	sp, #24
   10fca:	d017      	beq.n	10ffc <cc_mbedtls_aes_crypt_ecb+0x44>
   10fcc:	2901      	cmp	r1, #1
   10fce:	d117      	bne.n	11000 <cc_mbedtls_aes_crypt_ecb+0x48>
   10fd0:	2510      	movs	r5, #16
   10fd2:	2100      	movs	r1, #0
   10fd4:	eb0d 0605 	add.w	r6, sp, r5
   10fd8:	6361      	str	r1, [r4, #52]	; 0x34
   10fda:	4610      	mov	r0, r2
   10fdc:	9500      	str	r5, [sp, #0]
   10fde:	9601      	str	r6, [sp, #4]
   10fe0:	aa02      	add	r2, sp, #8
   10fe2:	4629      	mov	r1, r5
   10fe4:	f000 faca 	bl	1157c <SetDataBuffersInfo>
   10fe8:	b950      	cbnz	r0, 11000 <cc_mbedtls_aes_crypt_ecb+0x48>
   10fea:	462b      	mov	r3, r5
   10fec:	4632      	mov	r2, r6
   10fee:	a902      	add	r1, sp, #8
   10ff0:	4620      	mov	r0, r4
   10ff2:	f000 fd4b 	bl	11a8c <ProcessAesDrv>
   10ff6:	b918      	cbnz	r0, 11000 <cc_mbedtls_aes_crypt_ecb+0x48>
   10ff8:	b006      	add	sp, #24
   10ffa:	bd70      	pop	{r4, r5, r6, pc}
   10ffc:	2900      	cmp	r1, #0
   10ffe:	d0e7      	beq.n	10fd0 <cc_mbedtls_aes_crypt_ecb+0x18>
   11000:	f06f 0021 	mvn.w	r0, #33	; 0x21
   11004:	e7f8      	b.n	10ff8 <cc_mbedtls_aes_crypt_ecb+0x40>
   11006:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1100a:	4770      	bx	lr

0001100c <cc_mbedtls_sha256_init>:
   1100c:	b510      	push	{r4, lr}
   1100e:	4604      	mov	r4, r0
   11010:	b128      	cbz	r0, 1101e <cc_mbedtls_sha256_init+0x12>
   11012:	4620      	mov	r0, r4
   11014:	21f4      	movs	r1, #244	; 0xf4
   11016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1101a:	f7ff bbf5 	b.w	10808 <CC_PalMemSetZeroPlat>
   1101e:	4804      	ldr	r0, [pc, #16]	; (11030 <cc_mbedtls_sha256_init+0x24>)
   11020:	f7fe fc8e 	bl	f940 <CC_PalAbort>
   11024:	4620      	mov	r0, r4
   11026:	21f4      	movs	r1, #244	; 0xf4
   11028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1102c:	f7ff bbec 	b.w	10808 <CC_PalMemSetZeroPlat>
   11030:	00014884 	.word	0x00014884

00011034 <cc_mbedtls_sha256_free>:
   11034:	b110      	cbz	r0, 1103c <cc_mbedtls_sha256_free+0x8>
   11036:	21f4      	movs	r1, #244	; 0xf4
   11038:	f7fe bd98 	b.w	fb6c <mbedtls_zeroize_internal>
   1103c:	4770      	bx	lr
   1103e:	bf00      	nop

00011040 <cc_mbedtls_sha256_starts>:
   11040:	b508      	push	{r3, lr}
   11042:	b161      	cbz	r1, 1105e <cc_mbedtls_sha256_starts+0x1e>
   11044:	2901      	cmp	r1, #1
   11046:	d107      	bne.n	11058 <cc_mbedtls_sha256_starts+0x18>
   11048:	2102      	movs	r1, #2
   1104a:	f000 f85b 	bl	11104 <mbedtls_sha_starts_internal>
   1104e:	2800      	cmp	r0, #0
   11050:	bf18      	it	ne
   11052:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   11056:	bd08      	pop	{r3, pc}
   11058:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1105c:	bd08      	pop	{r3, pc}
   1105e:	2101      	movs	r1, #1
   11060:	f000 f850 	bl	11104 <mbedtls_sha_starts_internal>
   11064:	e7f3      	b.n	1104e <cc_mbedtls_sha256_starts+0xe>
   11066:	bf00      	nop

00011068 <cc_mbedtls_sha256_update>:
   11068:	b530      	push	{r4, r5, lr}
   1106a:	4605      	mov	r5, r0
   1106c:	1888      	adds	r0, r1, r2
   1106e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   11072:	b0a1      	sub	sp, #132	; 0x84
   11074:	460b      	mov	r3, r1
   11076:	4614      	mov	r4, r2
   11078:	d801      	bhi.n	1107e <cc_mbedtls_sha256_update+0x16>
   1107a:	2a80      	cmp	r2, #128	; 0x80
   1107c:	d90c      	bls.n	11098 <cc_mbedtls_sha256_update+0x30>
   1107e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   11082:	d917      	bls.n	110b4 <cc_mbedtls_sha256_update+0x4c>
   11084:	4622      	mov	r2, r4
   11086:	4619      	mov	r1, r3
   11088:	4628      	mov	r0, r5
   1108a:	f000 f87d 	bl	11188 <mbedtls_sha_update_internal>
   1108e:	4604      	mov	r4, r0
   11090:	b984      	cbnz	r4, 110b4 <cc_mbedtls_sha256_update+0x4c>
   11092:	4620      	mov	r0, r4
   11094:	b021      	add	sp, #132	; 0x84
   11096:	bd30      	pop	{r4, r5, pc}
   11098:	4668      	mov	r0, sp
   1109a:	f7ff fbb1 	bl	10800 <CC_PalMemCopyPlat>
   1109e:	4622      	mov	r2, r4
   110a0:	4669      	mov	r1, sp
   110a2:	4628      	mov	r0, r5
   110a4:	f000 f870 	bl	11188 <mbedtls_sha_update_internal>
   110a8:	2180      	movs	r1, #128	; 0x80
   110aa:	4604      	mov	r4, r0
   110ac:	4668      	mov	r0, sp
   110ae:	f7ff fbab 	bl	10808 <CC_PalMemSetZeroPlat>
   110b2:	e7ed      	b.n	11090 <cc_mbedtls_sha256_update+0x28>
   110b4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   110b8:	e7eb      	b.n	11092 <cc_mbedtls_sha256_update+0x2a>
   110ba:	bf00      	nop

000110bc <cc_mbedtls_sha256_finish>:
   110bc:	b570      	push	{r4, r5, r6, lr}
   110be:	b1e8      	cbz	r0, 110fc <cc_mbedtls_sha256_finish+0x40>
   110c0:	460e      	mov	r6, r1
   110c2:	b1d9      	cbz	r1, 110fc <cc_mbedtls_sha256_finish+0x40>
   110c4:	4604      	mov	r4, r0
   110c6:	f000 f831 	bl	1112c <mbedtls_sha_finish_internal>
   110ca:	4605      	mov	r5, r0
   110cc:	b9b0      	cbnz	r0, 110fc <cc_mbedtls_sha256_finish+0x40>
   110ce:	6823      	ldr	r3, [r4, #0]
   110d0:	2b01      	cmp	r3, #1
   110d2:	d00b      	beq.n	110ec <cc_mbedtls_sha256_finish+0x30>
   110d4:	2b02      	cmp	r3, #2
   110d6:	d001      	beq.n	110dc <cc_mbedtls_sha256_finish+0x20>
   110d8:	4628      	mov	r0, r5
   110da:	bd70      	pop	{r4, r5, r6, pc}
   110dc:	221c      	movs	r2, #28
   110de:	f104 0108 	add.w	r1, r4, #8
   110e2:	4630      	mov	r0, r6
   110e4:	f7ff fb8c 	bl	10800 <CC_PalMemCopyPlat>
   110e8:	4628      	mov	r0, r5
   110ea:	bd70      	pop	{r4, r5, r6, pc}
   110ec:	2220      	movs	r2, #32
   110ee:	f104 0108 	add.w	r1, r4, #8
   110f2:	4630      	mov	r0, r6
   110f4:	f7ff fb84 	bl	10800 <CC_PalMemCopyPlat>
   110f8:	4628      	mov	r0, r5
   110fa:	bd70      	pop	{r4, r5, r6, pc}
   110fc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   11100:	e7ea      	b.n	110d8 <cc_mbedtls_sha256_finish+0x1c>
   11102:	bf00      	nop

00011104 <mbedtls_sha_starts_internal>:
   11104:	b178      	cbz	r0, 11126 <mbedtls_sha_starts_internal+0x22>
   11106:	b538      	push	{r3, r4, r5, lr}
   11108:	4604      	mov	r4, r0
   1110a:	460d      	mov	r5, r1
   1110c:	21f0      	movs	r1, #240	; 0xf0
   1110e:	f7ff fb7b 	bl	10808 <CC_PalMemSetZeroPlat>
   11112:	2340      	movs	r3, #64	; 0x40
   11114:	6025      	str	r5, [r4, #0]
   11116:	65e3      	str	r3, [r4, #92]	; 0x5c
   11118:	4620      	mov	r0, r4
   1111a:	f000 fa63 	bl	115e4 <InitHashDrv>
   1111e:	3800      	subs	r0, #0
   11120:	bf18      	it	ne
   11122:	2001      	movne	r0, #1
   11124:	bd38      	pop	{r3, r4, r5, pc}
   11126:	2001      	movs	r0, #1
   11128:	4770      	bx	lr
   1112a:	bf00      	nop

0001112c <mbedtls_sha_finish_internal>:
   1112c:	b570      	push	{r4, r5, r6, lr}
   1112e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   11130:	b0a4      	sub	sp, #144	; 0x90
   11132:	4604      	mov	r4, r0
   11134:	ae04      	add	r6, sp, #16
   11136:	b9e5      	cbnz	r5, 11172 <mbedtls_sha_finish_internal+0x46>
   11138:	2201      	movs	r2, #1
   1113a:	2300      	movs	r3, #0
   1113c:	6062      	str	r2, [r4, #4]
   1113e:	4630      	mov	r0, r6
   11140:	e9cd 3300 	strd	r3, r3, [sp]
   11144:	aa02      	add	r2, sp, #8
   11146:	4629      	mov	r1, r5
   11148:	f000 fa18 	bl	1157c <SetDataBuffersInfo>
   1114c:	b110      	cbz	r0, 11154 <mbedtls_sha_finish_internal+0x28>
   1114e:	2001      	movs	r0, #1
   11150:	b024      	add	sp, #144	; 0x90
   11152:	bd70      	pop	{r4, r5, r6, pc}
   11154:	462a      	mov	r2, r5
   11156:	a902      	add	r1, sp, #8
   11158:	4620      	mov	r0, r4
   1115a:	f000 fa6d 	bl	11638 <ProcessHashDrv>
   1115e:	2800      	cmp	r0, #0
   11160:	d1f5      	bne.n	1114e <mbedtls_sha_finish_internal+0x22>
   11162:	4620      	mov	r0, r4
   11164:	f000 fb7e 	bl	11864 <FinishHashDrv>
   11168:	2800      	cmp	r0, #0
   1116a:	d1f0      	bne.n	1114e <mbedtls_sha_finish_internal+0x22>
   1116c:	6620      	str	r0, [r4, #96]	; 0x60
   1116e:	b024      	add	sp, #144	; 0x90
   11170:	bd70      	pop	{r4, r5, r6, pc}
   11172:	2d80      	cmp	r5, #128	; 0x80
   11174:	462a      	mov	r2, r5
   11176:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1117a:	bf28      	it	cs
   1117c:	2280      	movcs	r2, #128	; 0x80
   1117e:	4630      	mov	r0, r6
   11180:	f7ff fb3e 	bl	10800 <CC_PalMemCopyPlat>
   11184:	6e25      	ldr	r5, [r4, #96]	; 0x60
   11186:	e7d7      	b.n	11138 <mbedtls_sha_finish_internal+0xc>

00011188 <mbedtls_sha_update_internal>:
   11188:	2800      	cmp	r0, #0
   1118a:	f000 80cd 	beq.w	11328 <mbedtls_sha_update_internal+0x1a0>
   1118e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11192:	4615      	mov	r5, r2
   11194:	b0a5      	sub	sp, #148	; 0x94
   11196:	2a00      	cmp	r2, #0
   11198:	f000 80b4 	beq.w	11304 <mbedtls_sha_update_internal+0x17c>
   1119c:	460f      	mov	r7, r1
   1119e:	2900      	cmp	r1, #0
   111a0:	f000 80ac 	beq.w	112fc <mbedtls_sha_update_internal+0x174>
   111a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   111a8:	4606      	mov	r6, r0
   111aa:	6e00      	ldr	r0, [r0, #96]	; 0x60
   111ac:	d37d      	bcc.n	112aa <mbedtls_sha_update_internal+0x122>
   111ae:	f64f 78ff 	movw	r8, #65535	; 0xffff
   111b2:	f106 0964 	add.w	r9, r6, #100	; 0x64
   111b6:	e014      	b.n	111e2 <mbedtls_sha_update_internal+0x5a>
   111b8:	4283      	cmp	r3, r0
   111ba:	46ba      	mov	sl, r7
   111bc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   111c0:	d029      	beq.n	11216 <mbedtls_sha_update_internal+0x8e>
   111c2:	fbb4 fbf3 	udiv	fp, r4, r3
   111c6:	fb03 fb0b 	mul.w	fp, r3, fp
   111ca:	f1bb 0f00 	cmp.w	fp, #0
   111ce:	d144      	bne.n	1125a <mbedtls_sha_update_internal+0xd2>
   111d0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   111d4:	4447      	add	r7, r8
   111d6:	3dff      	subs	r5, #255	; 0xff
   111d8:	2c00      	cmp	r4, #0
   111da:	d159      	bne.n	11290 <mbedtls_sha_update_internal+0x108>
   111dc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   111e0:	d363      	bcc.n	112aa <mbedtls_sha_update_internal+0x122>
   111e2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   111e4:	1a1c      	subs	r4, r3, r0
   111e6:	fbb4 f2f3 	udiv	r2, r4, r3
   111ea:	fb03 4412 	mls	r4, r3, r2, r4
   111ee:	2c00      	cmp	r4, #0
   111f0:	d0e2      	beq.n	111b8 <mbedtls_sha_update_internal+0x30>
   111f2:	4544      	cmp	r4, r8
   111f4:	bf28      	it	cs
   111f6:	4644      	movcs	r4, r8
   111f8:	4622      	mov	r2, r4
   111fa:	4448      	add	r0, r9
   111fc:	4639      	mov	r1, r7
   111fe:	f7ff faff 	bl	10800 <CC_PalMemCopyPlat>
   11202:	6e30      	ldr	r0, [r6, #96]	; 0x60
   11204:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   11206:	4420      	add	r0, r4
   11208:	4283      	cmp	r3, r0
   1120a:	eb07 0a04 	add.w	sl, r7, r4
   1120e:	6630      	str	r0, [r6, #96]	; 0x60
   11210:	eba8 0404 	sub.w	r4, r8, r4
   11214:	d1d5      	bne.n	111c2 <mbedtls_sha_update_internal+0x3a>
   11216:	2b80      	cmp	r3, #128	; 0x80
   11218:	bf28      	it	cs
   1121a:	2380      	movcs	r3, #128	; 0x80
   1121c:	461a      	mov	r2, r3
   1121e:	4649      	mov	r1, r9
   11220:	a804      	add	r0, sp, #16
   11222:	f7ff faed 	bl	10800 <CC_PalMemCopyPlat>
   11226:	2300      	movs	r3, #0
   11228:	e9cd 3300 	strd	r3, r3, [sp]
   1122c:	aa02      	add	r2, sp, #8
   1122e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   11230:	a804      	add	r0, sp, #16
   11232:	f000 f9a3 	bl	1157c <SetDataBuffersInfo>
   11236:	2800      	cmp	r0, #0
   11238:	d160      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   1123a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1123c:	a902      	add	r1, sp, #8
   1123e:	4630      	mov	r0, r6
   11240:	f000 f9fa 	bl	11638 <ProcessHashDrv>
   11244:	2800      	cmp	r0, #0
   11246:	d159      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   11248:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   1124a:	fbb4 fbf3 	udiv	fp, r4, r3
   1124e:	fb03 fb0b 	mul.w	fp, r3, fp
   11252:	6630      	str	r0, [r6, #96]	; 0x60
   11254:	f1bb 0f00 	cmp.w	fp, #0
   11258:	d0ba      	beq.n	111d0 <mbedtls_sha_update_internal+0x48>
   1125a:	2300      	movs	r3, #0
   1125c:	e9cd 3300 	strd	r3, r3, [sp]
   11260:	aa02      	add	r2, sp, #8
   11262:	4659      	mov	r1, fp
   11264:	4650      	mov	r0, sl
   11266:	f000 f989 	bl	1157c <SetDataBuffersInfo>
   1126a:	2800      	cmp	r0, #0
   1126c:	d146      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   1126e:	a902      	add	r1, sp, #8
   11270:	465a      	mov	r2, fp
   11272:	4630      	mov	r0, r6
   11274:	f000 f9e0 	bl	11638 <ProcessHashDrv>
   11278:	2800      	cmp	r0, #0
   1127a:	d13f      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   1127c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   11280:	eba4 040b 	sub.w	r4, r4, fp
   11284:	6e30      	ldr	r0, [r6, #96]	; 0x60
   11286:	44da      	add	sl, fp
   11288:	4447      	add	r7, r8
   1128a:	3dff      	subs	r5, #255	; 0xff
   1128c:	2c00      	cmp	r4, #0
   1128e:	d0a5      	beq.n	111dc <mbedtls_sha_update_internal+0x54>
   11290:	3019      	adds	r0, #25
   11292:	4651      	mov	r1, sl
   11294:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   11298:	4622      	mov	r2, r4
   1129a:	f7ff fab1 	bl	10800 <CC_PalMemCopyPlat>
   1129e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   112a0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   112a4:	4420      	add	r0, r4
   112a6:	6630      	str	r0, [r6, #96]	; 0x60
   112a8:	d29b      	bcs.n	111e2 <mbedtls_sha_update_internal+0x5a>
   112aa:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   112ac:	1a14      	subs	r4, r2, r0
   112ae:	fbb4 f3f2 	udiv	r3, r4, r2
   112b2:	fb02 4413 	mls	r4, r2, r3, r4
   112b6:	42ac      	cmp	r4, r5
   112b8:	bf28      	it	cs
   112ba:	462c      	movcs	r4, r5
   112bc:	bb34      	cbnz	r4, 1130c <mbedtls_sha_update_internal+0x184>
   112be:	4290      	cmp	r0, r2
   112c0:	d034      	beq.n	1132c <mbedtls_sha_update_internal+0x1a4>
   112c2:	fbb5 f4f2 	udiv	r4, r5, r2
   112c6:	fb02 f404 	mul.w	r4, r2, r4
   112ca:	b96c      	cbnz	r4, 112e8 <mbedtls_sha_update_internal+0x160>
   112cc:	b1d5      	cbz	r5, 11304 <mbedtls_sha_update_internal+0x17c>
   112ce:	6e33      	ldr	r3, [r6, #96]	; 0x60
   112d0:	3319      	adds	r3, #25
   112d2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   112d6:	462a      	mov	r2, r5
   112d8:	4639      	mov	r1, r7
   112da:	f7ff fa91 	bl	10800 <CC_PalMemCopyPlat>
   112de:	6e33      	ldr	r3, [r6, #96]	; 0x60
   112e0:	442b      	add	r3, r5
   112e2:	2000      	movs	r0, #0
   112e4:	6633      	str	r3, [r6, #96]	; 0x60
   112e6:	e00a      	b.n	112fe <mbedtls_sha_update_internal+0x176>
   112e8:	2300      	movs	r3, #0
   112ea:	e9cd 3300 	strd	r3, r3, [sp]
   112ee:	aa02      	add	r2, sp, #8
   112f0:	4621      	mov	r1, r4
   112f2:	4638      	mov	r0, r7
   112f4:	f000 f942 	bl	1157c <SetDataBuffersInfo>
   112f8:	2800      	cmp	r0, #0
   112fa:	d033      	beq.n	11364 <mbedtls_sha_update_internal+0x1dc>
   112fc:	2001      	movs	r0, #1
   112fe:	b025      	add	sp, #148	; 0x94
   11300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11304:	4628      	mov	r0, r5
   11306:	b025      	add	sp, #148	; 0x94
   11308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1130c:	f106 0364 	add.w	r3, r6, #100	; 0x64
   11310:	4639      	mov	r1, r7
   11312:	4622      	mov	r2, r4
   11314:	4418      	add	r0, r3
   11316:	f7ff fa73 	bl	10800 <CC_PalMemCopyPlat>
   1131a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   1131c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   1131e:	4420      	add	r0, r4
   11320:	1b2d      	subs	r5, r5, r4
   11322:	4427      	add	r7, r4
   11324:	6630      	str	r0, [r6, #96]	; 0x60
   11326:	e7ca      	b.n	112be <mbedtls_sha_update_internal+0x136>
   11328:	2001      	movs	r0, #1
   1132a:	4770      	bx	lr
   1132c:	2a80      	cmp	r2, #128	; 0x80
   1132e:	bf28      	it	cs
   11330:	2280      	movcs	r2, #128	; 0x80
   11332:	f106 0164 	add.w	r1, r6, #100	; 0x64
   11336:	a804      	add	r0, sp, #16
   11338:	f7ff fa62 	bl	10800 <CC_PalMemCopyPlat>
   1133c:	2300      	movs	r3, #0
   1133e:	e9cd 3300 	strd	r3, r3, [sp]
   11342:	a804      	add	r0, sp, #16
   11344:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   11346:	aa02      	add	r2, sp, #8
   11348:	f000 f918 	bl	1157c <SetDataBuffersInfo>
   1134c:	2800      	cmp	r0, #0
   1134e:	d1d5      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   11350:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   11352:	a902      	add	r1, sp, #8
   11354:	4630      	mov	r0, r6
   11356:	f000 f96f 	bl	11638 <ProcessHashDrv>
   1135a:	2800      	cmp	r0, #0
   1135c:	d1ce      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   1135e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   11360:	6630      	str	r0, [r6, #96]	; 0x60
   11362:	e7ae      	b.n	112c2 <mbedtls_sha_update_internal+0x13a>
   11364:	a902      	add	r1, sp, #8
   11366:	4622      	mov	r2, r4
   11368:	4630      	mov	r0, r6
   1136a:	f000 f965 	bl	11638 <ProcessHashDrv>
   1136e:	2800      	cmp	r0, #0
   11370:	d1c4      	bne.n	112fc <mbedtls_sha_update_internal+0x174>
   11372:	4427      	add	r7, r4
   11374:	1b2d      	subs	r5, r5, r4
   11376:	e7a9      	b.n	112cc <mbedtls_sha_update_internal+0x144>

00011378 <cc_mbedtls_sha256>:
   11378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1137a:	461c      	mov	r4, r3
   1137c:	4605      	mov	r5, r0
   1137e:	4811      	ldr	r0, [pc, #68]	; (113c4 <cc_mbedtls_sha256+0x4c>)
   11380:	460e      	mov	r6, r1
   11382:	4617      	mov	r7, r2
   11384:	f7ff fe42 	bl	1100c <cc_mbedtls_sha256_init>
   11388:	4621      	mov	r1, r4
   1138a:	480e      	ldr	r0, [pc, #56]	; (113c4 <cc_mbedtls_sha256+0x4c>)
   1138c:	f7ff fe58 	bl	11040 <cc_mbedtls_sha256_starts>
   11390:	4604      	mov	r4, r0
   11392:	b120      	cbz	r0, 1139e <cc_mbedtls_sha256+0x26>
   11394:	480b      	ldr	r0, [pc, #44]	; (113c4 <cc_mbedtls_sha256+0x4c>)
   11396:	f7ff fe4d 	bl	11034 <cc_mbedtls_sha256_free>
   1139a:	4620      	mov	r0, r4
   1139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1139e:	4809      	ldr	r0, [pc, #36]	; (113c4 <cc_mbedtls_sha256+0x4c>)
   113a0:	4632      	mov	r2, r6
   113a2:	4629      	mov	r1, r5
   113a4:	f7ff fe60 	bl	11068 <cc_mbedtls_sha256_update>
   113a8:	4604      	mov	r4, r0
   113aa:	2800      	cmp	r0, #0
   113ac:	d1f2      	bne.n	11394 <cc_mbedtls_sha256+0x1c>
   113ae:	4639      	mov	r1, r7
   113b0:	4804      	ldr	r0, [pc, #16]	; (113c4 <cc_mbedtls_sha256+0x4c>)
   113b2:	f7ff fe83 	bl	110bc <cc_mbedtls_sha256_finish>
   113b6:	4604      	mov	r4, r0
   113b8:	4802      	ldr	r0, [pc, #8]	; (113c4 <cc_mbedtls_sha256+0x4c>)
   113ba:	f7ff fe3b 	bl	11034 <cc_mbedtls_sha256_free>
   113be:	4620      	mov	r0, r4
   113c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   113c2:	bf00      	nop
   113c4:	20002d08 	.word	0x20002d08

000113c8 <RNG_PLAT_SetUserRngParameters>:
   113c8:	b530      	push	{r4, r5, lr}
   113ca:	b083      	sub	sp, #12
   113cc:	231c      	movs	r3, #28
   113ce:	a901      	add	r1, sp, #4
   113d0:	4604      	mov	r4, r0
   113d2:	9301      	str	r3, [sp, #4]
   113d4:	f000 f834 	bl	11440 <CC_PalTrngParamGet>
   113d8:	4605      	mov	r5, r0
   113da:	b938      	cbnz	r0, 113ec <RNG_PLAT_SetUserRngParameters+0x24>
   113dc:	9b01      	ldr	r3, [sp, #4]
   113de:	2b1c      	cmp	r3, #28
   113e0:	d007      	beq.n	113f2 <RNG_PLAT_SetUserRngParameters+0x2a>
   113e2:	4d15      	ldr	r5, [pc, #84]	; (11438 <RNG_PLAT_SetUserRngParameters+0x70>)
   113e4:	211c      	movs	r1, #28
   113e6:	4620      	mov	r0, r4
   113e8:	f7ff fa0e 	bl	10808 <CC_PalMemSetZeroPlat>
   113ec:	4628      	mov	r0, r5
   113ee:	b003      	add	sp, #12
   113f0:	bd30      	pop	{r4, r5, pc}
   113f2:	e9d4 3200 	ldrd	r3, r2, [r4]
   113f6:	2101      	movs	r1, #1
   113f8:	3b00      	subs	r3, #0
   113fa:	61e1      	str	r1, [r4, #28]
   113fc:	bf18      	it	ne
   113fe:	2301      	movne	r3, #1
   11400:	b10a      	cbz	r2, 11406 <RNG_PLAT_SetUserRngParameters+0x3e>
   11402:	f043 0302 	orr.w	r3, r3, #2
   11406:	68a2      	ldr	r2, [r4, #8]
   11408:	b932      	cbnz	r2, 11418 <RNG_PLAT_SetUserRngParameters+0x50>
   1140a:	68e2      	ldr	r2, [r4, #12]
   1140c:	b942      	cbnz	r2, 11420 <RNG_PLAT_SetUserRngParameters+0x58>
   1140e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   11412:	b97b      	cbnz	r3, 11434 <RNG_PLAT_SetUserRngParameters+0x6c>
   11414:	4d09      	ldr	r5, [pc, #36]	; (1143c <RNG_PLAT_SetUserRngParameters+0x74>)
   11416:	e7e5      	b.n	113e4 <RNG_PLAT_SetUserRngParameters+0x1c>
   11418:	68e2      	ldr	r2, [r4, #12]
   1141a:	f043 0304 	orr.w	r3, r3, #4
   1141e:	b13a      	cbz	r2, 11430 <RNG_PLAT_SetUserRngParameters+0x68>
   11420:	f043 0308 	orr.w	r3, r3, #8
   11424:	2200      	movs	r2, #0
   11426:	4628      	mov	r0, r5
   11428:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1142c:	b003      	add	sp, #12
   1142e:	bd30      	pop	{r4, r5, pc}
   11430:	e9c4 3208 	strd	r3, r2, [r4, #32]
   11434:	4615      	mov	r5, r2
   11436:	e7d9      	b.n	113ec <RNG_PLAT_SetUserRngParameters+0x24>
   11438:	00f00c37 	.word	0x00f00c37
   1143c:	00f00c0e 	.word	0x00f00c0e

00011440 <CC_PalTrngParamGet>:
   11440:	b118      	cbz	r0, 1144a <CC_PalTrngParamGet+0xa>
   11442:	b111      	cbz	r1, 1144a <CC_PalTrngParamGet+0xa>
   11444:	680b      	ldr	r3, [r1, #0]
   11446:	2b1c      	cmp	r3, #28
   11448:	d001      	beq.n	1144e <CC_PalTrngParamGet+0xe>
   1144a:	2001      	movs	r0, #1
   1144c:	4770      	bx	lr
   1144e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11452:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   11456:	3201      	adds	r2, #1
   11458:	bf14      	ite	ne
   1145a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1145e:	f241 225c 	movweq	r2, #4700	; 0x125c
   11462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11466:	6002      	str	r2, [r0, #0]
   11468:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1146c:	3201      	adds	r2, #1
   1146e:	bf14      	ite	ne
   11470:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   11474:	f641 1264 	movweq	r2, #6500	; 0x1964
   11478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1147c:	6042      	str	r2, [r0, #4]
   1147e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   11482:	3201      	adds	r2, #1
   11484:	bf14      	ite	ne
   11486:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1148a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1148e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11492:	6082      	str	r2, [r0, #8]
   11494:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   11498:	3201      	adds	r2, #1
   1149a:	bf14      	ite	ne
   1149c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   114a0:	f241 3288 	movweq	r2, #5000	; 0x1388
   114a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   114a8:	60c2      	str	r2, [r0, #12]
   114aa:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   114ae:	3201      	adds	r2, #1
   114b0:	bf14      	ite	ne
   114b2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   114b6:	2290      	moveq	r2, #144	; 0x90
   114b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   114bc:	6102      	str	r2, [r0, #16]
   114be:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   114c2:	3201      	adds	r2, #1
   114c4:	bf14      	ite	ne
   114c6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   114ca:	2251      	moveq	r2, #81	; 0x51
   114cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   114d0:	6142      	str	r2, [r0, #20]
   114d2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   114d6:	3201      	adds	r2, #1
   114d8:	bf14      	ite	ne
   114da:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   114de:	f240 3337 	movweq	r3, #823	; 0x337
   114e2:	6183      	str	r3, [r0, #24]
   114e4:	2000      	movs	r0, #0
   114e6:	4770      	bx	lr

000114e8 <LLF_RND_WaitRngInterrupt>:
   114e8:	b508      	push	{r3, lr}
   114ea:	4601      	mov	r1, r0
   114ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
   114f0:	f7ff f912 	bl	10718 <CC_HalWaitInterruptRND>
   114f4:	4b03      	ldr	r3, [pc, #12]	; (11504 <LLF_RND_WaitRngInterrupt+0x1c>)
   114f6:	2200      	movs	r2, #0
   114f8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   114fc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   11500:	bd08      	pop	{r3, pc}
   11502:	bf00      	nop
   11504:	5002b000 	.word	0x5002b000

00011508 <LLF_RND_GetRoscSampleCnt>:
   11508:	3801      	subs	r0, #1
   1150a:	2807      	cmp	r0, #7
   1150c:	d805      	bhi.n	1151a <LLF_RND_GetRoscSampleCnt+0x12>
   1150e:	e8df f000 	tbb	[pc, r0]
   11512:	0e12      	.short	0x0e12
   11514:	04040a04 	.word	0x04040a04
   11518:	0604      	.short	0x0604
   1151a:	4809      	ldr	r0, [pc, #36]	; (11540 <LLF_RND_GetRoscSampleCnt+0x38>)
   1151c:	4770      	bx	lr
   1151e:	68cb      	ldr	r3, [r1, #12]
   11520:	624b      	str	r3, [r1, #36]	; 0x24
   11522:	2000      	movs	r0, #0
   11524:	4770      	bx	lr
   11526:	688b      	ldr	r3, [r1, #8]
   11528:	624b      	str	r3, [r1, #36]	; 0x24
   1152a:	2000      	movs	r0, #0
   1152c:	4770      	bx	lr
   1152e:	684b      	ldr	r3, [r1, #4]
   11530:	624b      	str	r3, [r1, #36]	; 0x24
   11532:	2000      	movs	r0, #0
   11534:	4770      	bx	lr
   11536:	680b      	ldr	r3, [r1, #0]
   11538:	624b      	str	r3, [r1, #36]	; 0x24
   1153a:	2000      	movs	r0, #0
   1153c:	4770      	bx	lr
   1153e:	bf00      	nop
   11540:	00f10c31 	.word	0x00f10c31

00011544 <LLF_RND_GetFastestRosc>:
   11544:	680b      	ldr	r3, [r1, #0]
   11546:	e002      	b.n	1154e <LLF_RND_GetFastestRosc+0xa>
   11548:	2b08      	cmp	r3, #8
   1154a:	600b      	str	r3, [r1, #0]
   1154c:	d806      	bhi.n	1155c <LLF_RND_GetFastestRosc+0x18>
   1154e:	6a02      	ldr	r2, [r0, #32]
   11550:	4213      	tst	r3, r2
   11552:	ea4f 0343 	mov.w	r3, r3, lsl #1
   11556:	d0f7      	beq.n	11548 <LLF_RND_GetFastestRosc+0x4>
   11558:	2000      	movs	r0, #0
   1155a:	4770      	bx	lr
   1155c:	4800      	ldr	r0, [pc, #0]	; (11560 <LLF_RND_GetFastestRosc+0x1c>)
   1155e:	4770      	bx	lr
   11560:	00f10c31 	.word	0x00f10c31

00011564 <LLF_RND_TurnOffTrng>:
   11564:	4b04      	ldr	r3, [pc, #16]	; (11578 <LLF_RND_TurnOffTrng+0x14>)
   11566:	2200      	movs	r2, #0
   11568:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1156c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   11570:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11574:	f7ff b8b6 	b.w	106e4 <CC_HalClearInterruptBit>
   11578:	5002b000 	.word	0x5002b000

0001157c <SetDataBuffersInfo>:
   1157c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1157e:	b083      	sub	sp, #12
   11580:	461d      	mov	r5, r3
   11582:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   11586:	f04f 0300 	mov.w	r3, #0
   1158a:	f88d 3007 	strb.w	r3, [sp, #7]
   1158e:	d324      	bcc.n	115da <SetDataBuffersInfo+0x5e>
   11590:	468c      	mov	ip, r1
   11592:	4484      	add	ip, r0
   11594:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   11598:	4604      	mov	r4, r0
   1159a:	d81e      	bhi.n	115da <SetDataBuffersInfo+0x5e>
   1159c:	4617      	mov	r7, r2
   1159e:	f10d 0307 	add.w	r3, sp, #7
   115a2:	2201      	movs	r2, #1
   115a4:	f000 fe68 	bl	12278 <CC_PalDataBufferAttrGet>
   115a8:	4606      	mov	r6, r0
   115aa:	b9b0      	cbnz	r0, 115da <SetDataBuffersInfo+0x5e>
   115ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   115ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   115b2:	603c      	str	r4, [r7, #0]
   115b4:	713b      	strb	r3, [r7, #4]
   115b6:	b192      	cbz	r2, 115de <SetDataBuffersInfo+0x62>
   115b8:	b14d      	cbz	r5, 115ce <SetDataBuffersInfo+0x52>
   115ba:	4602      	mov	r2, r0
   115bc:	9908      	ldr	r1, [sp, #32]
   115be:	f10d 0307 	add.w	r3, sp, #7
   115c2:	4628      	mov	r0, r5
   115c4:	f000 fe58 	bl	12278 <CC_PalDataBufferAttrGet>
   115c8:	b938      	cbnz	r0, 115da <SetDataBuffersInfo+0x5e>
   115ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   115ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   115d0:	4630      	mov	r0, r6
   115d2:	6015      	str	r5, [r2, #0]
   115d4:	7113      	strb	r3, [r2, #4]
   115d6:	b003      	add	sp, #12
   115d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115da:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   115de:	4630      	mov	r0, r6
   115e0:	b003      	add	sp, #12
   115e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000115e4 <InitHashDrv>:
   115e4:	b1e8      	cbz	r0, 11622 <InitHashDrv+0x3e>
   115e6:	b510      	push	{r4, lr}
   115e8:	6804      	ldr	r4, [r0, #0]
   115ea:	2c01      	cmp	r4, #1
   115ec:	d004      	beq.n	115f8 <InitHashDrv+0x14>
   115ee:	2c02      	cmp	r4, #2
   115f0:	d010      	beq.n	11614 <InitHashDrv+0x30>
   115f2:	b144      	cbz	r4, 11606 <InitHashDrv+0x22>
   115f4:	480c      	ldr	r0, [pc, #48]	; (11628 <InitHashDrv+0x44>)
   115f6:	bd10      	pop	{r4, pc}
   115f8:	490c      	ldr	r1, [pc, #48]	; (1162c <InitHashDrv+0x48>)
   115fa:	2220      	movs	r2, #32
   115fc:	3008      	adds	r0, #8
   115fe:	f7ff f8ff 	bl	10800 <CC_PalMemCopyPlat>
   11602:	2000      	movs	r0, #0
   11604:	bd10      	pop	{r4, pc}
   11606:	490a      	ldr	r1, [pc, #40]	; (11630 <InitHashDrv+0x4c>)
   11608:	2214      	movs	r2, #20
   1160a:	3008      	adds	r0, #8
   1160c:	f7ff f8f8 	bl	10800 <CC_PalMemCopyPlat>
   11610:	4620      	mov	r0, r4
   11612:	bd10      	pop	{r4, pc}
   11614:	4907      	ldr	r1, [pc, #28]	; (11634 <InitHashDrv+0x50>)
   11616:	2220      	movs	r2, #32
   11618:	3008      	adds	r0, #8
   1161a:	f7ff f8f1 	bl	10800 <CC_PalMemCopyPlat>
   1161e:	2000      	movs	r0, #0
   11620:	bd10      	pop	{r4, pc}
   11622:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   11626:	4770      	bx	lr
   11628:	00f30001 	.word	0x00f30001
   1162c:	000148c8 	.word	0x000148c8
   11630:	00014894 	.word	0x00014894
   11634:	000148a8 	.word	0x000148a8

00011638 <ProcessHashDrv>:
   11638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1163c:	2900      	cmp	r1, #0
   1163e:	f000 80f9 	beq.w	11834 <ProcessHashDrv+0x1fc>
   11642:	4604      	mov	r4, r0
   11644:	2800      	cmp	r0, #0
   11646:	f000 80f9 	beq.w	1183c <ProcessHashDrv+0x204>
   1164a:	6803      	ldr	r3, [r0, #0]
   1164c:	4690      	mov	r8, r2
   1164e:	460f      	mov	r7, r1
   11650:	2b00      	cmp	r3, #0
   11652:	f000 80c3 	beq.w	117dc <ProcessHashDrv+0x1a4>
   11656:	3b01      	subs	r3, #1
   11658:	2b01      	cmp	r3, #1
   1165a:	f200 80d7 	bhi.w	1180c <ProcessHashDrv+0x1d4>
   1165e:	4879      	ldr	r0, [pc, #484]	; (11844 <ProcessHashDrv+0x20c>)
   11660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11664:	f04f 0902 	mov.w	r9, #2
   11668:	f7ff f8e6 	bl	10838 <CC_PalMutexLock>
   1166c:	2800      	cmp	r0, #0
   1166e:	f040 80bf 	bne.w	117f0 <ProcessHashDrv+0x1b8>
   11672:	2000      	movs	r0, #0
   11674:	f7ff f910 	bl	10898 <CC_PalPowerSaveModeSelect>
   11678:	4606      	mov	r6, r0
   1167a:	2800      	cmp	r0, #0
   1167c:	f040 80c2 	bne.w	11804 <ProcessHashDrv+0x1cc>
   11680:	4a71      	ldr	r2, [pc, #452]	; (11848 <ProcessHashDrv+0x210>)
   11682:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   11686:	2b00      	cmp	r3, #0
   11688:	d1fb      	bne.n	11682 <ProcessHashDrv+0x4a>
   1168a:	4d6f      	ldr	r5, [pc, #444]	; (11848 <ProcessHashDrv+0x210>)
   1168c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   11690:	2b00      	cmp	r3, #0
   11692:	d1fb      	bne.n	1168c <ProcessHashDrv+0x54>
   11694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11698:	f7ff f824 	bl	106e4 <CC_HalClearInterruptBit>
   1169c:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   116a0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   116a4:	f7ff f82c 	bl	10700 <CC_HalMaskInterrupt>
   116a8:	2301      	movs	r3, #1
   116aa:	2207      	movs	r2, #7
   116ac:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   116b0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   116b4:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   116b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   116ba:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   116be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   116c0:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   116c4:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   116c8:	6823      	ldr	r3, [r4, #0]
   116ca:	b15b      	cbz	r3, 116e4 <ProcessHashDrv+0xac>
   116cc:	3b01      	subs	r3, #1
   116ce:	2b01      	cmp	r3, #1
   116d0:	d818      	bhi.n	11704 <ProcessHashDrv+0xcc>
   116d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   116d4:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   116d8:	6a23      	ldr	r3, [r4, #32]
   116da:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   116de:	69e3      	ldr	r3, [r4, #28]
   116e0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   116e4:	4b58      	ldr	r3, [pc, #352]	; (11848 <ProcessHashDrv+0x210>)
   116e6:	69a2      	ldr	r2, [r4, #24]
   116e8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   116ec:	6962      	ldr	r2, [r4, #20]
   116ee:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   116f2:	6922      	ldr	r2, [r4, #16]
   116f4:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   116f8:	68e2      	ldr	r2, [r4, #12]
   116fa:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   116fe:	68a2      	ldr	r2, [r4, #8]
   11700:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   11704:	4a50      	ldr	r2, [pc, #320]	; (11848 <ProcessHashDrv+0x210>)
   11706:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1170a:	2b00      	cmp	r3, #0
   1170c:	d1fb      	bne.n	11706 <ProcessHashDrv+0xce>
   1170e:	f1b8 0f00 	cmp.w	r8, #0
   11712:	d05f      	beq.n	117d4 <ProcessHashDrv+0x19c>
   11714:	6863      	ldr	r3, [r4, #4]
   11716:	2b01      	cmp	r3, #1
   11718:	bf08      	it	eq
   1171a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1171e:	4b4a      	ldr	r3, [pc, #296]	; (11848 <ProcessHashDrv+0x210>)
   11720:	683a      	ldr	r2, [r7, #0]
   11722:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   11726:	2040      	movs	r0, #64	; 0x40
   11728:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1172c:	f7fe ffee 	bl	1070c <CC_HalWaitInterrupt>
   11730:	4606      	mov	r6, r0
   11732:	4a45      	ldr	r2, [pc, #276]	; (11848 <ProcessHashDrv+0x210>)
   11734:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11738:	2b00      	cmp	r3, #0
   1173a:	d1fb      	bne.n	11734 <ProcessHashDrv+0xfc>
   1173c:	4a42      	ldr	r2, [pc, #264]	; (11848 <ProcessHashDrv+0x210>)
   1173e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   11742:	2b00      	cmp	r3, #0
   11744:	d1fb      	bne.n	1173e <ProcessHashDrv+0x106>
   11746:	6823      	ldr	r3, [r4, #0]
   11748:	b15b      	cbz	r3, 11762 <ProcessHashDrv+0x12a>
   1174a:	3b01      	subs	r3, #1
   1174c:	2b01      	cmp	r3, #1
   1174e:	d818      	bhi.n	11782 <ProcessHashDrv+0x14a>
   11750:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   11754:	6263      	str	r3, [r4, #36]	; 0x24
   11756:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1175a:	6223      	str	r3, [r4, #32]
   1175c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   11760:	61e3      	str	r3, [r4, #28]
   11762:	4b39      	ldr	r3, [pc, #228]	; (11848 <ProcessHashDrv+0x210>)
   11764:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   11768:	61a2      	str	r2, [r4, #24]
   1176a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1176e:	6162      	str	r2, [r4, #20]
   11770:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   11774:	6122      	str	r2, [r4, #16]
   11776:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1177a:	60e2      	str	r2, [r4, #12]
   1177c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   11780:	60a3      	str	r3, [r4, #8]
   11782:	4a31      	ldr	r2, [pc, #196]	; (11848 <ProcessHashDrv+0x210>)
   11784:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   11788:	64a1      	str	r1, [r4, #72]	; 0x48
   1178a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1178e:	64e1      	str	r1, [r4, #76]	; 0x4c
   11790:	2300      	movs	r3, #0
   11792:	2101      	movs	r1, #1
   11794:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   11798:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1179c:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   117a0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   117a4:	2b00      	cmp	r3, #0
   117a6:	d1fb      	bne.n	117a0 <ProcessHashDrv+0x168>
   117a8:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   117ac:	2e00      	cmp	r6, #0
   117ae:	d13b      	bne.n	11828 <ProcessHashDrv+0x1f0>
   117b0:	4b25      	ldr	r3, [pc, #148]	; (11848 <ProcessHashDrv+0x210>)
   117b2:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   117b6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   117ba:	f7fe ffa1 	bl	10700 <CC_HalMaskInterrupt>
   117be:	2001      	movs	r0, #1
   117c0:	f7ff f86a 	bl	10898 <CC_PalPowerSaveModeSelect>
   117c4:	bb60      	cbnz	r0, 11820 <ProcessHashDrv+0x1e8>
   117c6:	481f      	ldr	r0, [pc, #124]	; (11844 <ProcessHashDrv+0x20c>)
   117c8:	f7ff f83e 	bl	10848 <CC_PalMutexUnlock>
   117cc:	bb10      	cbnz	r0, 11814 <ProcessHashDrv+0x1dc>
   117ce:	4630      	mov	r0, r6
   117d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   117d4:	2304      	movs	r3, #4
   117d6:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   117da:	e7aa      	b.n	11732 <ProcessHashDrv+0xfa>
   117dc:	4819      	ldr	r0, [pc, #100]	; (11844 <ProcessHashDrv+0x20c>)
   117de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   117e2:	f04f 0901 	mov.w	r9, #1
   117e6:	f7ff f827 	bl	10838 <CC_PalMutexLock>
   117ea:	2800      	cmp	r0, #0
   117ec:	f43f af41 	beq.w	11672 <ProcessHashDrv+0x3a>
   117f0:	4816      	ldr	r0, [pc, #88]	; (1184c <ProcessHashDrv+0x214>)
   117f2:	f7fe f8a5 	bl	f940 <CC_PalAbort>
   117f6:	2000      	movs	r0, #0
   117f8:	f7ff f84e 	bl	10898 <CC_PalPowerSaveModeSelect>
   117fc:	4606      	mov	r6, r0
   117fe:	2800      	cmp	r0, #0
   11800:	f43f af3e 	beq.w	11680 <ProcessHashDrv+0x48>
   11804:	4812      	ldr	r0, [pc, #72]	; (11850 <ProcessHashDrv+0x218>)
   11806:	f7fe f89b 	bl	f940 <CC_PalAbort>
   1180a:	e739      	b.n	11680 <ProcessHashDrv+0x48>
   1180c:	4e11      	ldr	r6, [pc, #68]	; (11854 <ProcessHashDrv+0x21c>)
   1180e:	4630      	mov	r0, r6
   11810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11814:	4810      	ldr	r0, [pc, #64]	; (11858 <ProcessHashDrv+0x220>)
   11816:	f7fe f893 	bl	f940 <CC_PalAbort>
   1181a:	4630      	mov	r0, r6
   1181c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11820:	480e      	ldr	r0, [pc, #56]	; (1185c <ProcessHashDrv+0x224>)
   11822:	f7fe f88d 	bl	f940 <CC_PalAbort>
   11826:	e7ce      	b.n	117c6 <ProcessHashDrv+0x18e>
   11828:	2110      	movs	r1, #16
   1182a:	f104 0008 	add.w	r0, r4, #8
   1182e:	f7fe ffeb 	bl	10808 <CC_PalMemSetZeroPlat>
   11832:	e7bd      	b.n	117b0 <ProcessHashDrv+0x178>
   11834:	4e0a      	ldr	r6, [pc, #40]	; (11860 <ProcessHashDrv+0x228>)
   11836:	4630      	mov	r0, r6
   11838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1183c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   11840:	e7c5      	b.n	117ce <ProcessHashDrv+0x196>
   11842:	bf00      	nop
   11844:	200001d8 	.word	0x200001d8
   11848:	5002b000 	.word	0x5002b000
   1184c:	000147c8 	.word	0x000147c8
   11850:	000147e0 	.word	0x000147e0
   11854:	00f30001 	.word	0x00f30001
   11858:	00014820 	.word	0x00014820
   1185c:	00014800 	.word	0x00014800
   11860:	00f30003 	.word	0x00f30003

00011864 <FinishHashDrv>:
   11864:	b398      	cbz	r0, 118ce <FinishHashDrv+0x6a>
   11866:	b470      	push	{r4, r5, r6}
   11868:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1186c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   11870:	ba26      	rev	r6, r4
   11872:	ba0d      	rev	r5, r1
   11874:	ba14      	rev	r4, r2
   11876:	ba19      	rev	r1, r3
   11878:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1187c:	ba12      	rev	r2, r2
   1187e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   11882:	6182      	str	r2, [r0, #24]
   11884:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   11888:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1188c:	ba1b      	rev	r3, r3
   1188e:	ba25      	rev	r5, r4
   11890:	e9c0 3507 	strd	r3, r5, [r0, #28]
   11894:	ba14      	rev	r4, r2
   11896:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1189a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1189c:	ba12      	rev	r2, r2
   1189e:	ba09      	rev	r1, r1
   118a0:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   118a4:	62c2      	str	r2, [r0, #44]	; 0x2c
   118a6:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   118aa:	ba1b      	rev	r3, r3
   118ac:	ba25      	rev	r5, r4
   118ae:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   118b2:	ba14      	rev	r4, r2
   118b4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   118b8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   118ba:	ba12      	rev	r2, r2
   118bc:	ba09      	rev	r1, r1
   118be:	ba1b      	rev	r3, r3
   118c0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   118c4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   118c8:	2000      	movs	r0, #0
   118ca:	bc70      	pop	{r4, r5, r6}
   118cc:	4770      	bx	lr
   118ce:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   118d2:	4770      	bx	lr

000118d4 <LoadAesKey>:
   118d4:	2800      	cmp	r0, #0
   118d6:	d046      	beq.n	11966 <LoadAesKey+0x92>
   118d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   118dc:	2b00      	cmp	r3, #0
   118de:	d033      	beq.n	11948 <LoadAesKey+0x74>
   118e0:	2b03      	cmp	r3, #3
   118e2:	b510      	push	{r4, lr}
   118e4:	d013      	beq.n	1190e <LoadAesKey+0x3a>
   118e6:	4821      	ldr	r0, [pc, #132]	; (1196c <LoadAesKey+0x98>)
   118e8:	4c21      	ldr	r4, [pc, #132]	; (11970 <LoadAesKey+0x9c>)
   118ea:	6822      	ldr	r2, [r4, #0]
   118ec:	4b21      	ldr	r3, [pc, #132]	; (11974 <LoadAesKey+0xa0>)
   118ee:	6812      	ldr	r2, [r2, #0]
   118f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   118f4:	6822      	ldr	r2, [r4, #0]
   118f6:	6852      	ldr	r2, [r2, #4]
   118f8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   118fc:	6822      	ldr	r2, [r4, #0]
   118fe:	6892      	ldr	r2, [r2, #8]
   11900:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   11904:	6822      	ldr	r2, [r4, #0]
   11906:	68d2      	ldr	r2, [r2, #12]
   11908:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1190c:	bd10      	pop	{r4, pc}
   1190e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   11910:	6c00      	ldr	r0, [r0, #64]	; 0x40
   11912:	4c17      	ldr	r4, [pc, #92]	; (11970 <LoadAesKey+0x9c>)
   11914:	f000 fbac 	bl	12070 <kmu_validate_kdr_slot_and_size>
   11918:	2800      	cmp	r0, #0
   1191a:	d1e6      	bne.n	118ea <LoadAesKey+0x16>
   1191c:	6822      	ldr	r2, [r4, #0]
   1191e:	4b15      	ldr	r3, [pc, #84]	; (11974 <LoadAesKey+0xa0>)
   11920:	6812      	ldr	r2, [r2, #0]
   11922:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   11926:	6822      	ldr	r2, [r4, #0]
   11928:	6852      	ldr	r2, [r2, #4]
   1192a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1192e:	6822      	ldr	r2, [r4, #0]
   11930:	6892      	ldr	r2, [r2, #8]
   11932:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   11936:	6822      	ldr	r2, [r4, #0]
   11938:	68d2      	ldr	r2, [r2, #12]
   1193a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1193e:	f000 fba3 	bl	12088 <kmu_use_kdr_key>
   11942:	2800      	cmp	r0, #0
   11944:	d1d1      	bne.n	118ea <LoadAesKey+0x16>
   11946:	bd10      	pop	{r4, pc}
   11948:	4a0a      	ldr	r2, [pc, #40]	; (11974 <LoadAesKey+0xa0>)
   1194a:	6901      	ldr	r1, [r0, #16]
   1194c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   11950:	6941      	ldr	r1, [r0, #20]
   11952:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   11956:	6981      	ldr	r1, [r0, #24]
   11958:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   1195c:	69c1      	ldr	r1, [r0, #28]
   1195e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   11962:	4618      	mov	r0, r3
   11964:	4770      	bx	lr
   11966:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1196a:	4770      	bx	lr
   1196c:	00f10009 	.word	0x00f10009
   11970:	200001c8 	.word	0x200001c8
   11974:	5002b000 	.word	0x5002b000

00011978 <InitAes.part.0>:
   11978:	4a37      	ldr	r2, [pc, #220]	; (11a58 <InitAes.part.0+0xe0>)
   1197a:	b538      	push	{r3, r4, r5, lr}
   1197c:	4604      	mov	r4, r0
   1197e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11982:	2b00      	cmp	r3, #0
   11984:	d1fb      	bne.n	1197e <InitAes.part.0+0x6>
   11986:	4a34      	ldr	r2, [pc, #208]	; (11a58 <InitAes.part.0+0xe0>)
   11988:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1198c:	2b00      	cmp	r3, #0
   1198e:	d1fb      	bne.n	11988 <InitAes.part.0+0x10>
   11990:	4a31      	ldr	r2, [pc, #196]	; (11a58 <InitAes.part.0+0xe0>)
   11992:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   11996:	2b00      	cmp	r3, #0
   11998:	d1fb      	bne.n	11992 <InitAes.part.0+0x1a>
   1199a:	4a2f      	ldr	r2, [pc, #188]	; (11a58 <InitAes.part.0+0xe0>)
   1199c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   119a0:	2b00      	cmp	r3, #0
   119a2:	d1fb      	bne.n	1199c <InitAes.part.0+0x24>
   119a4:	4a2c      	ldr	r2, [pc, #176]	; (11a58 <InitAes.part.0+0xe0>)
   119a6:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   119aa:	2b00      	cmp	r3, #0
   119ac:	d1fb      	bne.n	119a6 <InitAes.part.0+0x2e>
   119ae:	4d2a      	ldr	r5, [pc, #168]	; (11a58 <InitAes.part.0+0xe0>)
   119b0:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   119b4:	2b00      	cmp	r3, #0
   119b6:	d1fb      	bne.n	119b0 <InitAes.part.0+0x38>
   119b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   119bc:	f7fe fe92 	bl	106e4 <CC_HalClearInterruptBit>
   119c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119c2:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   119c6:	f023 0304 	bic.w	r3, r3, #4
   119ca:	2b03      	cmp	r3, #3
   119cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   119ce:	d039      	beq.n	11a44 <InitAes.part.0+0xcc>
   119d0:	2b01      	cmp	r3, #1
   119d2:	bf0c      	ite	eq
   119d4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   119d8:	f020 0020 	bicne.w	r0, r0, #32
   119dc:	f7fe fe90 	bl	10700 <CC_HalMaskInterrupt>
   119e0:	4a1d      	ldr	r2, [pc, #116]	; (11a58 <InitAes.part.0+0xe0>)
   119e2:	2301      	movs	r3, #1
   119e4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   119e8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   119ec:	2b00      	cmp	r3, #0
   119ee:	d1fb      	bne.n	119e8 <InitAes.part.0+0x70>
   119f0:	4a19      	ldr	r2, [pc, #100]	; (11a58 <InitAes.part.0+0xe0>)
   119f2:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   119f6:	2b00      	cmp	r3, #0
   119f8:	d1fb      	bne.n	119f2 <InitAes.part.0+0x7a>
   119fa:	4917      	ldr	r1, [pc, #92]	; (11a58 <InitAes.part.0+0xe0>)
   119fc:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   11a00:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   11a04:	2b00      	cmp	r3, #0
   11a06:	d1fb      	bne.n	11a00 <InitAes.part.0+0x88>
   11a08:	4a13      	ldr	r2, [pc, #76]	; (11a58 <InitAes.part.0+0xe0>)
   11a0a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   11a0e:	2b00      	cmp	r3, #0
   11a10:	d1fb      	bne.n	11a0a <InitAes.part.0+0x92>
   11a12:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11a14:	f022 0104 	bic.w	r1, r2, #4
   11a18:	2903      	cmp	r1, #3
   11a1a:	bf18      	it	ne
   11a1c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   11a1e:	490e      	ldr	r1, [pc, #56]	; (11a58 <InitAes.part.0+0xe0>)
   11a20:	ea4f 0282 	mov.w	r2, r2, lsl #2
   11a24:	bf18      	it	ne
   11a26:	f003 0301 	andne.w	r3, r3, #1
   11a2a:	f002 021c 	and.w	r2, r2, #28
   11a2e:	4313      	orrs	r3, r2
   11a30:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   11a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a36:	2b07      	cmp	r3, #7
   11a38:	bf04      	itt	eq
   11a3a:	2301      	moveq	r3, #1
   11a3c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   11a40:	2000      	movs	r0, #0
   11a42:	bd38      	pop	{r3, r4, r5, pc}
   11a44:	2b01      	cmp	r3, #1
   11a46:	bf0c      	ite	eq
   11a48:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   11a4c:	f020 0010 	bicne.w	r0, r0, #16
   11a50:	f7fe fe56 	bl	10700 <CC_HalMaskInterrupt>
   11a54:	e7c4      	b.n	119e0 <InitAes.part.0+0x68>
   11a56:	bf00      	nop
   11a58:	5002b000 	.word	0x5002b000

00011a5c <write_invalid_key>:
   11a5c:	4a09      	ldr	r2, [pc, #36]	; (11a84 <write_invalid_key+0x28>)
   11a5e:	4b0a      	ldr	r3, [pc, #40]	; (11a88 <write_invalid_key+0x2c>)
   11a60:	6811      	ldr	r1, [r2, #0]
   11a62:	6809      	ldr	r1, [r1, #0]
   11a64:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   11a68:	6811      	ldr	r1, [r2, #0]
   11a6a:	6849      	ldr	r1, [r1, #4]
   11a6c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   11a70:	6811      	ldr	r1, [r2, #0]
   11a72:	6889      	ldr	r1, [r1, #8]
   11a74:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   11a78:	6812      	ldr	r2, [r2, #0]
   11a7a:	68d2      	ldr	r2, [r2, #12]
   11a7c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   11a80:	4770      	bx	lr
   11a82:	bf00      	nop
   11a84:	200001c8 	.word	0x200001c8
   11a88:	5002b000 	.word	0x5002b000

00011a8c <ProcessAesDrv>:
   11a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a90:	b085      	sub	sp, #20
   11a92:	2900      	cmp	r1, #0
   11a94:	f000 80a3 	beq.w	11bde <ProcessAesDrv+0x152>
   11a98:	4690      	mov	r8, r2
   11a9a:	2a00      	cmp	r2, #0
   11a9c:	f000 809f 	beq.w	11bde <ProcessAesDrv+0x152>
   11aa0:	4605      	mov	r5, r0
   11aa2:	2800      	cmp	r0, #0
   11aa4:	f000 813c 	beq.w	11d20 <ProcessAesDrv+0x294>
   11aa8:	4699      	mov	r9, r3
   11aaa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   11aac:	460e      	mov	r6, r1
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d151      	bne.n	11b56 <ProcessAesDrv+0xca>
   11ab2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   11ab6:	d253      	bcs.n	11b60 <ProcessAesDrv+0xd4>
   11ab8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   11abc:	2b04      	cmp	r3, #4
   11abe:	f000 8112 	beq.w	11ce6 <ProcessAesDrv+0x25a>
   11ac2:	2700      	movs	r7, #0
   11ac4:	48a6      	ldr	r0, [pc, #664]	; (11d60 <ProcessAesDrv+0x2d4>)
   11ac6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11aca:	f7fe feb5 	bl	10838 <CC_PalMutexLock>
   11ace:	2800      	cmp	r0, #0
   11ad0:	f040 80e8 	bne.w	11ca4 <ProcessAesDrv+0x218>
   11ad4:	2000      	movs	r0, #0
   11ad6:	f7fe fedf 	bl	10898 <CC_PalPowerSaveModeSelect>
   11ada:	2800      	cmp	r0, #0
   11adc:	f040 80eb 	bne.w	11cb6 <ProcessAesDrv+0x22a>
   11ae0:	48a0      	ldr	r0, [pc, #640]	; (11d64 <ProcessAesDrv+0x2d8>)
   11ae2:	2301      	movs	r3, #1
   11ae4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   11ae8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   11aec:	2c00      	cmp	r4, #0
   11aee:	d1fb      	bne.n	11ae8 <ProcessAesDrv+0x5c>
   11af0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11af2:	2b03      	cmp	r3, #3
   11af4:	dc39      	bgt.n	11b6a <ProcessAesDrv+0xde>
   11af6:	2b00      	cmp	r3, #0
   11af8:	da3a      	bge.n	11b70 <ProcessAesDrv+0xe4>
   11afa:	4c9b      	ldr	r4, [pc, #620]	; (11d68 <ProcessAesDrv+0x2dc>)
   11afc:	4a99      	ldr	r2, [pc, #612]	; (11d64 <ProcessAesDrv+0x2d8>)
   11afe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11b02:	2b00      	cmp	r3, #0
   11b04:	d1fb      	bne.n	11afe <ProcessAesDrv+0x72>
   11b06:	2f00      	cmp	r7, #0
   11b08:	f040 80e4 	bne.w	11cd4 <ProcessAesDrv+0x248>
   11b0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11b0e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   11b10:	f023 0304 	bic.w	r3, r3, #4
   11b14:	2b03      	cmp	r3, #3
   11b16:	4b93      	ldr	r3, [pc, #588]	; (11d64 <ProcessAesDrv+0x2d8>)
   11b18:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   11b1c:	d056      	beq.n	11bcc <ProcessAesDrv+0x140>
   11b1e:	2a01      	cmp	r2, #1
   11b20:	bf0c      	ite	eq
   11b22:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   11b26:	f040 0020 	orrne.w	r0, r0, #32
   11b2a:	f7fe fde9 	bl	10700 <CC_HalMaskInterrupt>
   11b2e:	4b8d      	ldr	r3, [pc, #564]	; (11d64 <ProcessAesDrv+0x2d8>)
   11b30:	2200      	movs	r2, #0
   11b32:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   11b36:	2001      	movs	r0, #1
   11b38:	f7fe feae 	bl	10898 <CC_PalPowerSaveModeSelect>
   11b3c:	2800      	cmp	r0, #0
   11b3e:	f040 80c5 	bne.w	11ccc <ProcessAesDrv+0x240>
   11b42:	4887      	ldr	r0, [pc, #540]	; (11d60 <ProcessAesDrv+0x2d4>)
   11b44:	f7fe fe80 	bl	10848 <CC_PalMutexUnlock>
   11b48:	2800      	cmp	r0, #0
   11b4a:	f040 80b8 	bne.w	11cbe <ProcessAesDrv+0x232>
   11b4e:	4620      	mov	r0, r4
   11b50:	b005      	add	sp, #20
   11b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b56:	2b01      	cmp	r3, #1
   11b58:	d1ae      	bne.n	11ab8 <ProcessAesDrv+0x2c>
   11b5a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   11b5e:	d3ab      	bcc.n	11ab8 <ProcessAesDrv+0x2c>
   11b60:	4c82      	ldr	r4, [pc, #520]	; (11d6c <ProcessAesDrv+0x2e0>)
   11b62:	4620      	mov	r0, r4
   11b64:	b005      	add	sp, #20
   11b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b6a:	3b06      	subs	r3, #6
   11b6c:	2b01      	cmp	r3, #1
   11b6e:	d8c4      	bhi.n	11afa <ProcessAesDrv+0x6e>
   11b70:	6bab      	ldr	r3, [r5, #56]	; 0x38
   11b72:	2b01      	cmp	r3, #1
   11b74:	f200 80d2 	bhi.w	11d1c <ProcessAesDrv+0x290>
   11b78:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   11b7a:	2b01      	cmp	r3, #1
   11b7c:	d834      	bhi.n	11be8 <ProcessAesDrv+0x15c>
   11b7e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   11b80:	2b01      	cmp	r3, #1
   11b82:	f200 8122 	bhi.w	11dca <ProcessAesDrv+0x33e>
   11b86:	4628      	mov	r0, r5
   11b88:	f7ff fef6 	bl	11978 <InitAes.part.0>
   11b8c:	4604      	mov	r4, r0
   11b8e:	2800      	cmp	r0, #0
   11b90:	d1b4      	bne.n	11afc <ProcessAesDrv+0x70>
   11b92:	4628      	mov	r0, r5
   11b94:	f7ff fe9e 	bl	118d4 <LoadAesKey>
   11b98:	4604      	mov	r4, r0
   11b9a:	2800      	cmp	r0, #0
   11b9c:	d1ae      	bne.n	11afc <ProcessAesDrv+0x70>
   11b9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11ba0:	2b07      	cmp	r3, #7
   11ba2:	d8aa      	bhi.n	11afa <ProcessAesDrv+0x6e>
   11ba4:	a201      	add	r2, pc, #4	; (adr r2, 11bac <ProcessAesDrv+0x120>)
   11ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11baa:	bf00      	nop
   11bac:	00011c09 	.word	0x00011c09
   11bb0:	00011bed 	.word	0x00011bed
   11bb4:	00011d91 	.word	0x00011d91
   11bb8:	00011bed 	.word	0x00011bed
   11bbc:	00011afb 	.word	0x00011afb
   11bc0:	00011afb 	.word	0x00011afb
   11bc4:	00011d91 	.word	0x00011d91
   11bc8:	00011bed 	.word	0x00011bed
   11bcc:	2a01      	cmp	r2, #1
   11bce:	bf0c      	ite	eq
   11bd0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   11bd4:	f040 0010 	orrne.w	r0, r0, #16
   11bd8:	f7fe fd92 	bl	10700 <CC_HalMaskInterrupt>
   11bdc:	e7a7      	b.n	11b2e <ProcessAesDrv+0xa2>
   11bde:	4c64      	ldr	r4, [pc, #400]	; (11d70 <ProcessAesDrv+0x2e4>)
   11be0:	4620      	mov	r0, r4
   11be2:	b005      	add	sp, #20
   11be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11be8:	4c62      	ldr	r4, [pc, #392]	; (11d74 <ProcessAesDrv+0x2e8>)
   11bea:	e787      	b.n	11afc <ProcessAesDrv+0x70>
   11bec:	4b5d      	ldr	r3, [pc, #372]	; (11d64 <ProcessAesDrv+0x2d8>)
   11bee:	682a      	ldr	r2, [r5, #0]
   11bf0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   11bf4:	686a      	ldr	r2, [r5, #4]
   11bf6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   11bfa:	68aa      	ldr	r2, [r5, #8]
   11bfc:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   11c00:	68ea      	ldr	r2, [r5, #12]
   11c02:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   11c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11c08:	6832      	ldr	r2, [r6, #0]
   11c0a:	f023 0304 	bic.w	r3, r3, #4
   11c0e:	2b03      	cmp	r3, #3
   11c10:	d00d      	beq.n	11c2e <ProcessAesDrv+0x1a2>
   11c12:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   11c14:	f8d8 1000 	ldr.w	r1, [r8]
   11c18:	2b01      	cmp	r3, #1
   11c1a:	4b52      	ldr	r3, [pc, #328]	; (11d64 <ProcessAesDrv+0x2d8>)
   11c1c:	bf0b      	itete	eq
   11c1e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   11c22:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   11c26:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   11c2a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   11c2e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   11c30:	2b01      	cmp	r3, #1
   11c32:	4b4c      	ldr	r3, [pc, #304]	; (11d64 <ProcessAesDrv+0x2d8>)
   11c34:	bf0b      	itete	eq
   11c36:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   11c3a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   11c3e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   11c42:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   11c46:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11c48:	f023 0304 	bic.w	r3, r3, #4
   11c4c:	2b03      	cmp	r3, #3
   11c4e:	d06a      	beq.n	11d26 <ProcessAesDrv+0x29a>
   11c50:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   11c52:	2b01      	cmp	r3, #1
   11c54:	bf0c      	ite	eq
   11c56:	2080      	moveq	r0, #128	; 0x80
   11c58:	2020      	movne	r0, #32
   11c5a:	f7fe fd57 	bl	1070c <CC_HalWaitInterrupt>
   11c5e:	4604      	mov	r4, r0
   11c60:	2800      	cmp	r0, #0
   11c62:	f47f af4b 	bne.w	11afc <ProcessAesDrv+0x70>
   11c66:	4b3f      	ldr	r3, [pc, #252]	; (11d64 <ProcessAesDrv+0x2d8>)
   11c68:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   11c6c:	2c00      	cmp	r4, #0
   11c6e:	d1fb      	bne.n	11c68 <ProcessAesDrv+0x1dc>
   11c70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11c72:	3b01      	subs	r3, #1
   11c74:	2b06      	cmp	r3, #6
   11c76:	d812      	bhi.n	11c9e <ProcessAesDrv+0x212>
   11c78:	e8df f003 	tbb	[pc, r3]
   11c7c:	11049904 	.word	0x11049904
   11c80:	9911      	.short	0x9911
   11c82:	04          	.byte	0x04
   11c83:	00          	.byte	0x00
   11c84:	4b37      	ldr	r3, [pc, #220]	; (11d64 <ProcessAesDrv+0x2d8>)
   11c86:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   11c8a:	602a      	str	r2, [r5, #0]
   11c8c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   11c90:	606a      	str	r2, [r5, #4]
   11c92:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   11c96:	60aa      	str	r2, [r5, #8]
   11c98:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   11c9c:	60eb      	str	r3, [r5, #12]
   11c9e:	2301      	movs	r3, #1
   11ca0:	65ab      	str	r3, [r5, #88]	; 0x58
   11ca2:	e72b      	b.n	11afc <ProcessAesDrv+0x70>
   11ca4:	4834      	ldr	r0, [pc, #208]	; (11d78 <ProcessAesDrv+0x2ec>)
   11ca6:	f7fd fe4b 	bl	f940 <CC_PalAbort>
   11caa:	2000      	movs	r0, #0
   11cac:	f7fe fdf4 	bl	10898 <CC_PalPowerSaveModeSelect>
   11cb0:	2800      	cmp	r0, #0
   11cb2:	f43f af15 	beq.w	11ae0 <ProcessAesDrv+0x54>
   11cb6:	4831      	ldr	r0, [pc, #196]	; (11d7c <ProcessAesDrv+0x2f0>)
   11cb8:	f7fd fe42 	bl	f940 <CC_PalAbort>
   11cbc:	e710      	b.n	11ae0 <ProcessAesDrv+0x54>
   11cbe:	4830      	ldr	r0, [pc, #192]	; (11d80 <ProcessAesDrv+0x2f4>)
   11cc0:	f7fd fe3e 	bl	f940 <CC_PalAbort>
   11cc4:	4620      	mov	r0, r4
   11cc6:	b005      	add	sp, #20
   11cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ccc:	482d      	ldr	r0, [pc, #180]	; (11d84 <ProcessAesDrv+0x2f8>)
   11cce:	f7fd fe37 	bl	f940 <CC_PalAbort>
   11cd2:	e736      	b.n	11b42 <ProcessAesDrv+0xb6>
   11cd4:	2304      	movs	r3, #4
   11cd6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   11cda:	2120      	movs	r1, #32
   11cdc:	f105 0010 	add.w	r0, r5, #16
   11ce0:	f7fe fd92 	bl	10808 <CC_PalMemSetZeroPlat>
   11ce4:	e712      	b.n	11b0c <ProcessAesDrv+0x80>
   11ce6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11ce8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   11cea:	f000 f9b5 	bl	12058 <kmu_validate_slot_and_size>
   11cee:	b998      	cbnz	r0, 11d18 <ProcessAesDrv+0x28c>
   11cf0:	4f25      	ldr	r7, [pc, #148]	; (11d88 <ProcessAesDrv+0x2fc>)
   11cf2:	4c1c      	ldr	r4, [pc, #112]	; (11d64 <ProcessAesDrv+0x2d8>)
   11cf4:	683b      	ldr	r3, [r7, #0]
   11cf6:	681b      	ldr	r3, [r3, #0]
   11cf8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   11cfc:	683b      	ldr	r3, [r7, #0]
   11cfe:	685b      	ldr	r3, [r3, #4]
   11d00:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   11d04:	683b      	ldr	r3, [r7, #0]
   11d06:	689b      	ldr	r3, [r3, #8]
   11d08:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   11d0c:	683b      	ldr	r3, [r7, #0]
   11d0e:	68db      	ldr	r3, [r3, #12]
   11d10:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   11d14:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11d16:	b161      	cbz	r1, 11d32 <ProcessAesDrv+0x2a6>
   11d18:	2701      	movs	r7, #1
   11d1a:	e6d3      	b.n	11ac4 <ProcessAesDrv+0x38>
   11d1c:	4c1b      	ldr	r4, [pc, #108]	; (11d8c <ProcessAesDrv+0x300>)
   11d1e:	e6ed      	b.n	11afc <ProcessAesDrv+0x70>
   11d20:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   11d24:	e713      	b.n	11b4e <ProcessAesDrv+0xc2>
   11d26:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   11d28:	2b01      	cmp	r3, #1
   11d2a:	bf0c      	ite	eq
   11d2c:	2040      	moveq	r0, #64	; 0x40
   11d2e:	2010      	movne	r0, #16
   11d30:	e793      	b.n	11c5a <ProcessAesDrv+0x1ce>
   11d32:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   11d34:	9301      	str	r3, [sp, #4]
   11d36:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   11d38:	9300      	str	r3, [sp, #0]
   11d3a:	f105 0a10 	add.w	sl, r5, #16
   11d3e:	f04f 0b10 	mov.w	fp, #16
   11d42:	f8cd a008 	str.w	sl, [sp, #8]
   11d46:	f8cd b00c 	str.w	fp, [sp, #12]
   11d4a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   11d4e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   11d50:	f000 f9a4 	bl	1209c <kmu_derive_cmac>
   11d54:	2800      	cmp	r0, #0
   11d56:	d13a      	bne.n	11dce <ProcessAesDrv+0x342>
   11d58:	2300      	movs	r3, #0
   11d5a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   11d5e:	e7db      	b.n	11d18 <ProcessAesDrv+0x28c>
   11d60:	200001d8 	.word	0x200001d8
   11d64:	5002b000 	.word	0x5002b000
   11d68:	00f10001 	.word	0x00f10001
   11d6c:	00f10005 	.word	0x00f10005
   11d70:	00f1000b 	.word	0x00f1000b
   11d74:	00f10003 	.word	0x00f10003
   11d78:	000147c8 	.word	0x000147c8
   11d7c:	000147e0 	.word	0x000147e0
   11d80:	00014820 	.word	0x00014820
   11d84:	00014800 	.word	0x00014800
   11d88:	200001c8 	.word	0x200001c8
   11d8c:	00f10002 	.word	0x00f10002
   11d90:	4b19      	ldr	r3, [pc, #100]	; (11df8 <ProcessAesDrv+0x36c>)
   11d92:	682a      	ldr	r2, [r5, #0]
   11d94:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   11d98:	686a      	ldr	r2, [r5, #4]
   11d9a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   11d9e:	68aa      	ldr	r2, [r5, #8]
   11da0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   11da4:	68ea      	ldr	r2, [r5, #12]
   11da6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   11daa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11dac:	e72c      	b.n	11c08 <ProcessAesDrv+0x17c>
   11dae:	4b12      	ldr	r3, [pc, #72]	; (11df8 <ProcessAesDrv+0x36c>)
   11db0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   11db4:	602a      	str	r2, [r5, #0]
   11db6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   11dba:	606a      	str	r2, [r5, #4]
   11dbc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   11dc0:	60aa      	str	r2, [r5, #8]
   11dc2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   11dc6:	60eb      	str	r3, [r5, #12]
   11dc8:	e769      	b.n	11c9e <ProcessAesDrv+0x212>
   11dca:	4c0c      	ldr	r4, [pc, #48]	; (11dfc <ProcessAesDrv+0x370>)
   11dcc:	e696      	b.n	11afc <ProcessAesDrv+0x70>
   11dce:	683b      	ldr	r3, [r7, #0]
   11dd0:	681b      	ldr	r3, [r3, #0]
   11dd2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   11dd6:	683b      	ldr	r3, [r7, #0]
   11dd8:	685b      	ldr	r3, [r3, #4]
   11dda:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   11dde:	683b      	ldr	r3, [r7, #0]
   11de0:	689b      	ldr	r3, [r3, #8]
   11de2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   11de6:	683b      	ldr	r3, [r7, #0]
   11de8:	68db      	ldr	r3, [r3, #12]
   11dea:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   11dee:	4659      	mov	r1, fp
   11df0:	4650      	mov	r0, sl
   11df2:	f7fe fd09 	bl	10808 <CC_PalMemSetZeroPlat>
   11df6:	e7af      	b.n	11d58 <ProcessAesDrv+0x2cc>
   11df8:	5002b000 	.word	0x5002b000
   11dfc:	00f10004 	.word	0x00f10004

00011e00 <FinishAesDrv>:
   11e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e04:	b301      	cbz	r1, 11e48 <FinishAesDrv+0x48>
   11e06:	b1fa      	cbz	r2, 11e48 <FinishAesDrv+0x48>
   11e08:	4604      	mov	r4, r0
   11e0a:	2800      	cmp	r0, #0
   11e0c:	d07c      	beq.n	11f08 <FinishAesDrv+0x108>
   11e0e:	461d      	mov	r5, r3
   11e10:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11e12:	2b07      	cmp	r3, #7
   11e14:	460e      	mov	r6, r1
   11e16:	d01b      	beq.n	11e50 <FinishAesDrv+0x50>
   11e18:	b95d      	cbnz	r5, 11e32 <FinishAesDrv+0x32>
   11e1a:	2b03      	cmp	r3, #3
   11e1c:	d110      	bne.n	11e40 <FinishAesDrv+0x40>
   11e1e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   11e20:	b973      	cbnz	r3, 11e40 <FinishAesDrv+0x40>
   11e22:	f100 0364 	add.w	r3, r0, #100	; 0x64
   11e26:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   11e2a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   11e2e:	600b      	str	r3, [r1, #0]
   11e30:	2510      	movs	r5, #16
   11e32:	462b      	mov	r3, r5
   11e34:	4631      	mov	r1, r6
   11e36:	4620      	mov	r0, r4
   11e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11e3c:	f7ff be26 	b.w	11a8c <ProcessAesDrv>
   11e40:	462f      	mov	r7, r5
   11e42:	4638      	mov	r0, r7
   11e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e48:	4f77      	ldr	r7, [pc, #476]	; (12028 <FinishAesDrv+0x228>)
   11e4a:	4638      	mov	r0, r7
   11e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e50:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   11e52:	2b00      	cmp	r3, #0
   11e54:	d15b      	bne.n	11f0e <FinishAesDrv+0x10e>
   11e56:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   11e5a:	d25d      	bcs.n	11f18 <FinishAesDrv+0x118>
   11e5c:	b915      	cbnz	r5, 11e64 <FinishAesDrv+0x64>
   11e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   11e60:	2b00      	cmp	r3, #0
   11e62:	d159      	bne.n	11f18 <FinishAesDrv+0x118>
   11e64:	4871      	ldr	r0, [pc, #452]	; (1202c <FinishAesDrv+0x22c>)
   11e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11e6a:	f7fe fce5 	bl	10838 <CC_PalMutexLock>
   11e6e:	2800      	cmp	r0, #0
   11e70:	f040 80b8 	bne.w	11fe4 <FinishAesDrv+0x1e4>
   11e74:	2000      	movs	r0, #0
   11e76:	f7fe fd0f 	bl	10898 <CC_PalPowerSaveModeSelect>
   11e7a:	2800      	cmp	r0, #0
   11e7c:	f040 80ae 	bne.w	11fdc <FinishAesDrv+0x1dc>
   11e80:	4a6b      	ldr	r2, [pc, #428]	; (12030 <FinishAesDrv+0x230>)
   11e82:	2301      	movs	r3, #1
   11e84:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   11e88:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11e8c:	2b00      	cmp	r3, #0
   11e8e:	d1fb      	bne.n	11e88 <FinishAesDrv+0x88>
   11e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e92:	2b03      	cmp	r3, #3
   11e94:	dd20      	ble.n	11ed8 <FinishAesDrv+0xd8>
   11e96:	3b06      	subs	r3, #6
   11e98:	2b01      	cmp	r3, #1
   11e9a:	d81f      	bhi.n	11edc <FinishAesDrv+0xdc>
   11e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11e9e:	2b01      	cmp	r3, #1
   11ea0:	d83c      	bhi.n	11f1c <FinishAesDrv+0x11c>
   11ea2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   11ea4:	2b01      	cmp	r3, #1
   11ea6:	f200 80a5 	bhi.w	11ff4 <FinishAesDrv+0x1f4>
   11eaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
   11eac:	2b01      	cmp	r3, #1
   11eae:	f200 80a3 	bhi.w	11ff8 <FinishAesDrv+0x1f8>
   11eb2:	4620      	mov	r0, r4
   11eb4:	f7ff fd60 	bl	11978 <InitAes.part.0>
   11eb8:	4607      	mov	r7, r0
   11eba:	b980      	cbnz	r0, 11ede <FinishAesDrv+0xde>
   11ebc:	4620      	mov	r0, r4
   11ebe:	f7ff fd09 	bl	118d4 <LoadAesKey>
   11ec2:	4607      	mov	r7, r0
   11ec4:	b958      	cbnz	r0, 11ede <FinishAesDrv+0xde>
   11ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11ec8:	2b07      	cmp	r3, #7
   11eca:	d807      	bhi.n	11edc <FinishAesDrv+0xdc>
   11ecc:	e8df f003 	tbb	[pc, r3]
   11ed0:	285c2835 	.word	0x285c2835
   11ed4:	285c0606 	.word	0x285c0606
   11ed8:	2b00      	cmp	r3, #0
   11eda:	dadf      	bge.n	11e9c <FinishAesDrv+0x9c>
   11edc:	4f55      	ldr	r7, [pc, #340]	; (12034 <FinishAesDrv+0x234>)
   11ede:	4a54      	ldr	r2, [pc, #336]	; (12030 <FinishAesDrv+0x230>)
   11ee0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   11ee4:	2b00      	cmp	r3, #0
   11ee6:	d1fb      	bne.n	11ee0 <FinishAesDrv+0xe0>
   11ee8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   11eec:	2001      	movs	r0, #1
   11eee:	f7fe fcd3 	bl	10898 <CC_PalPowerSaveModeSelect>
   11ef2:	2800      	cmp	r0, #0
   11ef4:	d17a      	bne.n	11fec <FinishAesDrv+0x1ec>
   11ef6:	484d      	ldr	r0, [pc, #308]	; (1202c <FinishAesDrv+0x22c>)
   11ef8:	f7fe fca6 	bl	10848 <CC_PalMutexUnlock>
   11efc:	2800      	cmp	r0, #0
   11efe:	d0a0      	beq.n	11e42 <FinishAesDrv+0x42>
   11f00:	484d      	ldr	r0, [pc, #308]	; (12038 <FinishAesDrv+0x238>)
   11f02:	f7fd fd1d 	bl	f940 <CC_PalAbort>
   11f06:	e79c      	b.n	11e42 <FinishAesDrv+0x42>
   11f08:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   11f0c:	e799      	b.n	11e42 <FinishAesDrv+0x42>
   11f0e:	2b01      	cmp	r3, #1
   11f10:	d1a4      	bne.n	11e5c <FinishAesDrv+0x5c>
   11f12:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   11f16:	d3a1      	bcc.n	11e5c <FinishAesDrv+0x5c>
   11f18:	4f48      	ldr	r7, [pc, #288]	; (1203c <FinishAesDrv+0x23c>)
   11f1a:	e792      	b.n	11e42 <FinishAesDrv+0x42>
   11f1c:	4f48      	ldr	r7, [pc, #288]	; (12040 <FinishAesDrv+0x240>)
   11f1e:	e7de      	b.n	11ede <FinishAesDrv+0xde>
   11f20:	4b43      	ldr	r3, [pc, #268]	; (12030 <FinishAesDrv+0x230>)
   11f22:	6822      	ldr	r2, [r4, #0]
   11f24:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   11f28:	6862      	ldr	r2, [r4, #4]
   11f2a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   11f2e:	68a2      	ldr	r2, [r4, #8]
   11f30:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   11f34:	68e2      	ldr	r2, [r4, #12]
   11f36:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   11f3a:	4b3d      	ldr	r3, [pc, #244]	; (12030 <FinishAesDrv+0x230>)
   11f3c:	2201      	movs	r2, #1
   11f3e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   11f42:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   11f46:	2d00      	cmp	r5, #0
   11f48:	d158      	bne.n	11ffc <FinishAesDrv+0x1fc>
   11f4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   11f4c:	b909      	cbnz	r1, 11f52 <FinishAesDrv+0x152>
   11f4e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   11f52:	4b37      	ldr	r3, [pc, #220]	; (12030 <FinishAesDrv+0x230>)
   11f54:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   11f58:	2f00      	cmp	r7, #0
   11f5a:	d1fb      	bne.n	11f54 <FinishAesDrv+0x154>
   11f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11f5e:	3b01      	subs	r3, #1
   11f60:	2b06      	cmp	r3, #6
   11f62:	d8bc      	bhi.n	11ede <FinishAesDrv+0xde>
   11f64:	a201      	add	r2, pc, #4	; (adr r2, 11f6c <FinishAesDrv+0x16c>)
   11f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11f6a:	bf00      	nop
   11f6c:	00011fa5 	.word	0x00011fa5
   11f70:	00011fc1 	.word	0x00011fc1
   11f74:	00011fa5 	.word	0x00011fa5
   11f78:	00011edf 	.word	0x00011edf
   11f7c:	00011edf 	.word	0x00011edf
   11f80:	00011fc1 	.word	0x00011fc1
   11f84:	00011fa5 	.word	0x00011fa5
   11f88:	4b29      	ldr	r3, [pc, #164]	; (12030 <FinishAesDrv+0x230>)
   11f8a:	6822      	ldr	r2, [r4, #0]
   11f8c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   11f90:	6862      	ldr	r2, [r4, #4]
   11f92:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   11f96:	68a2      	ldr	r2, [r4, #8]
   11f98:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   11f9c:	68e2      	ldr	r2, [r4, #12]
   11f9e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   11fa2:	e7ca      	b.n	11f3a <FinishAesDrv+0x13a>
   11fa4:	4b22      	ldr	r3, [pc, #136]	; (12030 <FinishAesDrv+0x230>)
   11fa6:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   11faa:	6022      	str	r2, [r4, #0]
   11fac:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   11fb0:	6062      	str	r2, [r4, #4]
   11fb2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   11fb6:	60a2      	str	r2, [r4, #8]
   11fb8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   11fbc:	60e3      	str	r3, [r4, #12]
   11fbe:	e78e      	b.n	11ede <FinishAesDrv+0xde>
   11fc0:	4b1b      	ldr	r3, [pc, #108]	; (12030 <FinishAesDrv+0x230>)
   11fc2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   11fc6:	6022      	str	r2, [r4, #0]
   11fc8:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   11fcc:	6062      	str	r2, [r4, #4]
   11fce:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   11fd2:	60a2      	str	r2, [r4, #8]
   11fd4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   11fd8:	60e3      	str	r3, [r4, #12]
   11fda:	e780      	b.n	11ede <FinishAesDrv+0xde>
   11fdc:	4819      	ldr	r0, [pc, #100]	; (12044 <FinishAesDrv+0x244>)
   11fde:	f7fd fcaf 	bl	f940 <CC_PalAbort>
   11fe2:	e74d      	b.n	11e80 <FinishAesDrv+0x80>
   11fe4:	4818      	ldr	r0, [pc, #96]	; (12048 <FinishAesDrv+0x248>)
   11fe6:	f7fd fcab 	bl	f940 <CC_PalAbort>
   11fea:	e743      	b.n	11e74 <FinishAesDrv+0x74>
   11fec:	4817      	ldr	r0, [pc, #92]	; (1204c <FinishAesDrv+0x24c>)
   11fee:	f7fd fca7 	bl	f940 <CC_PalAbort>
   11ff2:	e780      	b.n	11ef6 <FinishAesDrv+0xf6>
   11ff4:	4f16      	ldr	r7, [pc, #88]	; (12050 <FinishAesDrv+0x250>)
   11ff6:	e772      	b.n	11ede <FinishAesDrv+0xde>
   11ff8:	4f16      	ldr	r7, [pc, #88]	; (12054 <FinishAesDrv+0x254>)
   11ffa:	e770      	b.n	11ede <FinishAesDrv+0xde>
   11ffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   11ffe:	6832      	ldr	r2, [r6, #0]
   12000:	2901      	cmp	r1, #1
   12002:	d00a      	beq.n	1201a <FinishAesDrv+0x21a>
   12004:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   12008:	2010      	movs	r0, #16
   1200a:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1200e:	f7fe fb7d 	bl	1070c <CC_HalWaitInterrupt>
   12012:	4607      	mov	r7, r0
   12014:	2800      	cmp	r0, #0
   12016:	d09c      	beq.n	11f52 <FinishAesDrv+0x152>
   12018:	e761      	b.n	11ede <FinishAesDrv+0xde>
   1201a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1201e:	2040      	movs	r0, #64	; 0x40
   12020:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   12024:	e7f3      	b.n	1200e <FinishAesDrv+0x20e>
   12026:	bf00      	nop
   12028:	00f1000b 	.word	0x00f1000b
   1202c:	200001d8 	.word	0x200001d8
   12030:	5002b000 	.word	0x5002b000
   12034:	00f10001 	.word	0x00f10001
   12038:	00014820 	.word	0x00014820
   1203c:	00f10005 	.word	0x00f10005
   12040:	00f10002 	.word	0x00f10002
   12044:	000147e0 	.word	0x000147e0
   12048:	000147c8 	.word	0x000147c8
   1204c:	00014800 	.word	0x00014800
   12050:	00f10003 	.word	0x00f10003
   12054:	00f10004 	.word	0x00f10004

00012058 <kmu_validate_slot_and_size>:
   12058:	b921      	cbnz	r1, 12064 <kmu_validate_slot_and_size+0xc>
   1205a:	4b03      	ldr	r3, [pc, #12]	; (12068 <kmu_validate_slot_and_size+0x10>)
   1205c:	2800      	cmp	r0, #0
   1205e:	bf18      	it	ne
   12060:	4618      	movne	r0, r3
   12062:	4770      	bx	lr
   12064:	4801      	ldr	r0, [pc, #4]	; (1206c <kmu_validate_slot_and_size+0x14>)
   12066:	4770      	bx	lr
   12068:	00f70001 	.word	0x00f70001
   1206c:	00f70003 	.word	0x00f70003

00012070 <kmu_validate_kdr_slot_and_size>:
   12070:	b921      	cbnz	r1, 1207c <kmu_validate_kdr_slot_and_size+0xc>
   12072:	4b03      	ldr	r3, [pc, #12]	; (12080 <kmu_validate_kdr_slot_and_size+0x10>)
   12074:	2800      	cmp	r0, #0
   12076:	bf18      	it	ne
   12078:	4618      	movne	r0, r3
   1207a:	4770      	bx	lr
   1207c:	4801      	ldr	r0, [pc, #4]	; (12084 <kmu_validate_kdr_slot_and_size+0x14>)
   1207e:	4770      	bx	lr
   12080:	00f70001 	.word	0x00f70001
   12084:	00f70003 	.word	0x00f70003

00012088 <kmu_use_kdr_key>:
   12088:	4b03      	ldr	r3, [pc, #12]	; (12098 <kmu_use_kdr_key+0x10>)
   1208a:	2000      	movs	r0, #0
   1208c:	2201      	movs	r2, #1
   1208e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   12092:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   12096:	4770      	bx	lr
   12098:	5002b000 	.word	0x5002b000

0001209c <kmu_derive_cmac>:
   1209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120a0:	b0cc      	sub	sp, #304	; 0x130
   120a2:	2400      	movs	r4, #0
   120a4:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   120a6:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   120aa:	4682      	mov	sl, r0
   120ac:	4689      	mov	r9, r1
   120ae:	4616      	mov	r6, r2
   120b0:	4621      	mov	r1, r4
   120b2:	2274      	movs	r2, #116	; 0x74
   120b4:	a80e      	add	r0, sp, #56	; 0x38
   120b6:	461f      	mov	r7, r3
   120b8:	f000 fe13 	bl	12ce2 <memset>
   120bc:	2280      	movs	r2, #128	; 0x80
   120be:	4621      	mov	r1, r4
   120c0:	a82c      	add	r0, sp, #176	; 0xb0
   120c2:	942b      	str	r4, [sp, #172]	; 0xac
   120c4:	f000 fe0d 	bl	12ce2 <memset>
   120c8:	2384      	movs	r3, #132	; 0x84
   120ca:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   120ce:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   120d2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   120d6:	9305      	str	r3, [sp, #20]
   120d8:	d863      	bhi.n	121a2 <kmu_derive_cmac+0x106>
   120da:	f7ff fcbf 	bl	11a5c <write_invalid_key>
   120de:	ab05      	add	r3, sp, #20
   120e0:	4630      	mov	r0, r6
   120e2:	ae2b      	add	r6, sp, #172	; 0xac
   120e4:	9301      	str	r3, [sp, #4]
   120e6:	9502      	str	r5, [sp, #8]
   120e8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   120ec:	4639      	mov	r1, r7
   120ee:	9600      	str	r6, [sp, #0]
   120f0:	f000 f862 	bl	121b8 <UtilCmacBuildDataForDerivation>
   120f4:	2800      	cmp	r0, #0
   120f6:	d14f      	bne.n	12198 <kmu_derive_cmac+0xfc>
   120f8:	2303      	movs	r3, #3
   120fa:	f88d 3013 	strb.w	r3, [sp, #19]
   120fe:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12102:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   12106:	2307      	movs	r3, #7
   12108:	2200      	movs	r2, #0
   1210a:	901c      	str	r0, [sp, #112]	; 0x70
   1210c:	2110      	movs	r1, #16
   1210e:	a80e      	add	r0, sp, #56	; 0x38
   12110:	931b      	str	r3, [sp, #108]	; 0x6c
   12112:	2401      	movs	r4, #1
   12114:	2301      	movs	r3, #1
   12116:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1211a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   1211e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   12122:	9426      	str	r4, [sp, #152]	; 0x98
   12124:	f10d 0920 	add.w	r9, sp, #32
   12128:	f7fe fb6e 	bl	10808 <CC_PalMemSetZeroPlat>
   1212c:	2210      	movs	r2, #16
   1212e:	9200      	str	r2, [sp, #0]
   12130:	9905      	ldr	r1, [sp, #20]
   12132:	f8cd 9004 	str.w	r9, [sp, #4]
   12136:	ab0a      	add	r3, sp, #40	; 0x28
   12138:	4630      	mov	r0, r6
   1213a:	aa06      	add	r2, sp, #24
   1213c:	f7ff fa1e 	bl	1157c <SetDataBuffersInfo>
   12140:	4607      	mov	r7, r0
   12142:	b170      	cbz	r0, 12162 <kmu_derive_cmac+0xc6>
   12144:	e01d      	b.n	12182 <kmu_derive_cmac+0xe6>
   12146:	a90e      	add	r1, sp, #56	; 0x38
   12148:	eb08 0007 	add.w	r0, r8, r7
   1214c:	f7fe fb58 	bl	10800 <CC_PalMemCopyPlat>
   12150:	2110      	movs	r1, #16
   12152:	a80e      	add	r0, sp, #56	; 0x38
   12154:	f7fe fb58 	bl	10808 <CC_PalMemSetZeroPlat>
   12158:	3401      	adds	r4, #1
   1215a:	1bad      	subs	r5, r5, r6
   1215c:	4437      	add	r7, r6
   1215e:	b2e4      	uxtb	r4, r4
   12160:	d024      	beq.n	121ac <kmu_derive_cmac+0x110>
   12162:	2d10      	cmp	r5, #16
   12164:	464a      	mov	r2, r9
   12166:	9b05      	ldr	r3, [sp, #20]
   12168:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1216c:	a906      	add	r1, sp, #24
   1216e:	a80e      	add	r0, sp, #56	; 0x38
   12170:	462e      	mov	r6, r5
   12172:	bf28      	it	cs
   12174:	2610      	movcs	r6, #16
   12176:	f7ff fe43 	bl	11e00 <FinishAesDrv>
   1217a:	4632      	mov	r2, r6
   1217c:	2800      	cmp	r0, #0
   1217e:	d0e2      	beq.n	12146 <kmu_derive_cmac+0xaa>
   12180:	4607      	mov	r7, r0
   12182:	a80e      	add	r0, sp, #56	; 0x38
   12184:	2274      	movs	r2, #116	; 0x74
   12186:	2100      	movs	r1, #0
   12188:	f7fe fb3c 	bl	10804 <CC_PalMemSetPlat>
   1218c:	f7ff fc66 	bl	11a5c <write_invalid_key>
   12190:	4638      	mov	r0, r7
   12192:	b04c      	add	sp, #304	; 0x130
   12194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12198:	4f05      	ldr	r7, [pc, #20]	; (121b0 <kmu_derive_cmac+0x114>)
   1219a:	4638      	mov	r0, r7
   1219c:	b04c      	add	sp, #304	; 0x130
   1219e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   121a2:	4f04      	ldr	r7, [pc, #16]	; (121b4 <kmu_derive_cmac+0x118>)
   121a4:	4638      	mov	r0, r7
   121a6:	b04c      	add	sp, #304	; 0x130
   121a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   121ac:	462f      	mov	r7, r5
   121ae:	e7e8      	b.n	12182 <kmu_derive_cmac+0xe6>
   121b0:	00f1000e 	.word	0x00f1000e
   121b4:	00f1000f 	.word	0x00f1000f

000121b8 <UtilCmacBuildDataForDerivation>:
   121b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121bc:	b082      	sub	sp, #8
   121be:	461e      	mov	r6, r3
   121c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   121c2:	2300      	movs	r3, #0
   121c4:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   121c8:	9301      	str	r3, [sp, #4]
   121ca:	d83e      	bhi.n	1224a <UtilCmacBuildDataForDerivation+0x92>
   121cc:	00e4      	lsls	r4, r4, #3
   121ce:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   121d2:	4617      	mov	r7, r2
   121d4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   121d8:	bf34      	ite	cc
   121da:	2303      	movcc	r3, #3
   121dc:	2304      	movcs	r3, #4
   121de:	2a3f      	cmp	r2, #63	; 0x3f
   121e0:	460d      	mov	r5, r1
   121e2:	9300      	str	r3, [sp, #0]
   121e4:	d831      	bhi.n	1224a <UtilCmacBuildDataForDerivation+0x92>
   121e6:	b380      	cbz	r0, 1224a <UtilCmacBuildDataForDerivation+0x92>
   121e8:	b116      	cbz	r6, 121f0 <UtilCmacBuildDataForDerivation+0x38>
   121ea:	b377      	cbz	r7, 1224a <UtilCmacBuildDataForDerivation+0x92>
   121ec:	2e40      	cmp	r6, #64	; 0x40
   121ee:	d82c      	bhi.n	1224a <UtilCmacBuildDataForDerivation+0x92>
   121f0:	9a08      	ldr	r2, [sp, #32]
   121f2:	b352      	cbz	r2, 1224a <UtilCmacBuildDataForDerivation+0x92>
   121f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   121f6:	6811      	ldr	r1, [r2, #0]
   121f8:	b339      	cbz	r1, 1224a <UtilCmacBuildDataForDerivation+0x92>
   121fa:	19aa      	adds	r2, r5, r6
   121fc:	4413      	add	r3, r2
   121fe:	4299      	cmp	r1, r3
   12200:	d323      	bcc.n	1224a <UtilCmacBuildDataForDerivation+0x92>
   12202:	9b08      	ldr	r3, [sp, #32]
   12204:	4601      	mov	r1, r0
   12206:	462a      	mov	r2, r5
   12208:	1c58      	adds	r0, r3, #1
   1220a:	f7fe faf9 	bl	10800 <CC_PalMemCopyPlat>
   1220e:	9b08      	ldr	r3, [sp, #32]
   12210:	f105 0802 	add.w	r8, r5, #2
   12214:	441d      	add	r5, r3
   12216:	2300      	movs	r3, #0
   12218:	706b      	strb	r3, [r5, #1]
   1221a:	bb0e      	cbnz	r6, 12260 <UtilCmacBuildDataForDerivation+0xa8>
   1221c:	9b08      	ldr	r3, [sp, #32]
   1221e:	9400      	str	r4, [sp, #0]
   12220:	2cff      	cmp	r4, #255	; 0xff
   12222:	eb03 0008 	add.w	r0, r3, r8
   12226:	d914      	bls.n	12252 <UtilCmacBuildDataForDerivation+0x9a>
   12228:	0223      	lsls	r3, r4, #8
   1222a:	b29b      	uxth	r3, r3
   1222c:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   12230:	2202      	movs	r2, #2
   12232:	a901      	add	r1, sp, #4
   12234:	9401      	str	r4, [sp, #4]
   12236:	f7fe fae3 	bl	10800 <CC_PalMemCopyPlat>
   1223a:	f108 0302 	add.w	r3, r8, #2
   1223e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12240:	2000      	movs	r0, #0
   12242:	6013      	str	r3, [r2, #0]
   12244:	b002      	add	sp, #8
   12246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1224a:	480a      	ldr	r0, [pc, #40]	; (12274 <UtilCmacBuildDataForDerivation+0xbc>)
   1224c:	b002      	add	sp, #8
   1224e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12252:	2201      	movs	r2, #1
   12254:	4669      	mov	r1, sp
   12256:	f7fe fad3 	bl	10800 <CC_PalMemCopyPlat>
   1225a:	f108 0301 	add.w	r3, r8, #1
   1225e:	e7ee      	b.n	1223e <UtilCmacBuildDataForDerivation+0x86>
   12260:	9b08      	ldr	r3, [sp, #32]
   12262:	4632      	mov	r2, r6
   12264:	eb03 0008 	add.w	r0, r3, r8
   12268:	4639      	mov	r1, r7
   1226a:	f7fe fac9 	bl	10800 <CC_PalMemCopyPlat>
   1226e:	44b0      	add	r8, r6
   12270:	e7d4      	b.n	1221c <UtilCmacBuildDataForDerivation+0x64>
   12272:	bf00      	nop
   12274:	80000006 	.word	0x80000006

00012278 <CC_PalDataBufferAttrGet>:
   12278:	2000      	movs	r0, #0
   1227a:	7018      	strb	r0, [r3, #0]
   1227c:	4770      	bx	lr
   1227e:	bf00      	nop

00012280 <z_log_msg_static_create.constprop.0>:
   12280:	2300      	movs	r3, #0
   12282:	f7f3 ba19 	b.w	56b8 <z_impl_z_log_msg_static_create>

00012286 <cbpprintf_external>:
{
   12286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1228a:	4606      	mov	r6, r0
   1228c:	460d      	mov	r5, r1
   1228e:	4617      	mov	r7, r2
	if (buf == NULL) {
   12290:	4698      	mov	r8, r3
   12292:	b32b      	cbz	r3, 122e0 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   12294:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   12298:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1229c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1229e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   122a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   122a4:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   122a8:	441c      	add	r4, r3
   122aa:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   122ac:	f04f 0a00 	mov.w	sl, #0
   122b0:	45ca      	cmp	sl, r9
   122b2:	d309      	bcc.n	122c8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   122b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   122b8:	f108 0308 	add.w	r3, r8, #8
   122bc:	4639      	mov	r1, r7
   122be:	4630      	mov	r0, r6
   122c0:	46ac      	mov	ip, r5
}
   122c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   122c6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   122c8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   122cc:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   122d0:	4620      	mov	r0, r4
   122d2:	f000 fcc4 	bl	12c5e <strlen>
   122d6:	3001      	adds	r0, #1
   122d8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   122da:	f10a 0a01 	add.w	sl, sl, #1
   122de:	e7e7      	b.n	122b0 <cbpprintf_external+0x2a>
}
   122e0:	f06f 0015 	mvn.w	r0, #21
   122e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000122e8 <is_ptr>:
{
   122e8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   122ea:	2500      	movs	r5, #0
{
   122ec:	4602      	mov	r2, r0
	bool mod = false;
   122ee:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   122f0:	4614      	mov	r4, r2
   122f2:	f814 3b01 	ldrb.w	r3, [r4], #1
   122f6:	b90b      	cbnz	r3, 122fc <is_ptr+0x14>
					return false;
   122f8:	4618      	mov	r0, r3
   122fa:	e009      	b.n	12310 <is_ptr+0x28>
		if (mod) {
   122fc:	b198      	cbz	r0, 12326 <is_ptr+0x3e>
			if (cnt == n) {
   122fe:	428d      	cmp	r5, r1
   12300:	d107      	bne.n	12312 <is_ptr+0x2a>
				if (c == 'p') {
   12302:	2b70      	cmp	r3, #112	; 0x70
   12304:	d004      	beq.n	12310 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   12306:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1230a:	2a3a      	cmp	r2, #58	; 0x3a
   1230c:	d80b      	bhi.n	12326 <is_ptr+0x3e>
					return false;
   1230e:	2000      	movs	r0, #0
}
   12310:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   12312:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   12316:	2e3a      	cmp	r6, #58	; 0x3a
   12318:	d805      	bhi.n	12326 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1231a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1231c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1231e:	1c94      	adds	r4, r2, #2
   12320:	2b00      	cmp	r3, #0
   12322:	d0e9      	beq.n	122f8 <is_ptr+0x10>
   12324:	2000      	movs	r0, #0
		if (c == '%') {
   12326:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   12328:	bf08      	it	eq
   1232a:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   1232e:	4622      	mov	r2, r4
   12330:	e7de      	b.n	122f0 <is_ptr+0x8>

00012332 <arch_printk_char_out>:
}
   12332:	2000      	movs	r0, #0
   12334:	4770      	bx	lr

00012336 <str_out>:
{
   12336:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   12338:	688a      	ldr	r2, [r1, #8]
   1233a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1233c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1233e:	b114      	cbz	r4, 12346 <str_out+0x10>
   12340:	684b      	ldr	r3, [r1, #4]
   12342:	4293      	cmp	r3, r2
   12344:	dc01      	bgt.n	1234a <str_out+0x14>
		ctx->count++;
   12346:	608d      	str	r5, [r1, #8]
}
   12348:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1234a:	3b01      	subs	r3, #1
   1234c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1234e:	bf08      	it	eq
   12350:	2200      	moveq	r2, #0
   12352:	608d      	str	r5, [r1, #8]
   12354:	bf0c      	ite	eq
   12356:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   12358:	54a0      	strbne	r0, [r4, r2]
   1235a:	e7f5      	b.n	12348 <str_out+0x12>

0001235c <printk>:
{
   1235c:	b40f      	push	{r0, r1, r2, r3}
   1235e:	b507      	push	{r0, r1, r2, lr}
   12360:	a904      	add	r1, sp, #16
   12362:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   12366:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   12368:	f7f2 fa1a 	bl	47a0 <vprintk>
}
   1236c:	b003      	add	sp, #12
   1236e:	f85d eb04 	ldr.w	lr, [sp], #4
   12372:	b004      	add	sp, #16
   12374:	4770      	bx	lr

00012376 <snprintk>:
{
   12376:	b40c      	push	{r2, r3}
   12378:	b507      	push	{r0, r1, r2, lr}
   1237a:	ab04      	add	r3, sp, #16
   1237c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   12380:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   12382:	f7f2 fa1b 	bl	47bc <vsnprintk>
}
   12386:	b003      	add	sp, #12
   12388:	f85d eb04 	ldr.w	lr, [sp], #4
   1238c:	b002      	add	sp, #8
   1238e:	4770      	bx	lr

00012390 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   12390:	4604      	mov	r4, r0
   12392:	b508      	push	{r3, lr}
   12394:	4608      	mov	r0, r1
   12396:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   12398:	461a      	mov	r2, r3
   1239a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1239c:	f7fc f95e 	bl	e65c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   123a0:	f7f4 fbde 	bl	6b60 <z_impl_k_thread_abort>

000123a4 <sys_slist_find_and_remove>:
	return list->head;
   123a4:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   123a6:	2200      	movs	r2, #0
   123a8:	b90b      	cbnz	r3, 123ae <sys_slist_find_and_remove+0xa>
   123aa:	4618      	mov	r0, r3
   123ac:	4770      	bx	lr
   123ae:	428b      	cmp	r3, r1
   123b0:	d110      	bne.n	123d4 <sys_slist_find_and_remove+0x30>
	return node->next;
   123b2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   123b4:	b942      	cbnz	r2, 123c8 <sys_slist_find_and_remove+0x24>
   123b6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   123b8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   123ba:	4291      	cmp	r1, r2
   123bc:	d100      	bne.n	123c0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   123be:	6043      	str	r3, [r0, #4]
	parent->next = child;
   123c0:	2300      	movs	r3, #0
   123c2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   123c4:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   123c6:	4770      	bx	lr
	parent->next = child;
   123c8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   123ca:	6843      	ldr	r3, [r0, #4]
   123cc:	4299      	cmp	r1, r3
	list->tail = node;
   123ce:	bf08      	it	eq
   123d0:	6042      	streq	r2, [r0, #4]
}
   123d2:	e7f5      	b.n	123c0 <sys_slist_find_and_remove+0x1c>
	return node->next;
   123d4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   123d6:	681b      	ldr	r3, [r3, #0]
   123d8:	e7e6      	b.n	123a8 <sys_slist_find_and_remove+0x4>

000123da <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   123da:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   123dc:	f013 0307 	ands.w	r3, r3, #7
   123e0:	d105      	bne.n	123ee <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   123e2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   123e4:	2b00      	cmp	r3, #0
   123e6:	bf0c      	ite	eq
   123e8:	2000      	moveq	r0, #0
   123ea:	2003      	movne	r0, #3
   123ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   123ee:	2b02      	cmp	r3, #2
   123f0:	d105      	bne.n	123fe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   123f2:	8b40      	ldrh	r0, [r0, #26]
   123f4:	fab0 f080 	clz	r0, r0
   123f8:	0940      	lsrs	r0, r0, #5
   123fa:	0080      	lsls	r0, r0, #2
   123fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   123fe:	2b01      	cmp	r3, #1
   12400:	d105      	bne.n	1240e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   12402:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   12404:	2b00      	cmp	r3, #0
   12406:	bf0c      	ite	eq
   12408:	2000      	moveq	r0, #0
   1240a:	2005      	movne	r0, #5
   1240c:	4770      	bx	lr
	int evt = EVT_NOP;
   1240e:	2000      	movs	r0, #0
}
   12410:	4770      	bx	lr

00012412 <validate_args>:
{
   12412:	b510      	push	{r4, lr}
   12414:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   12416:	b100      	cbz	r0, 1241a <validate_args+0x8>
   12418:	b911      	cbnz	r1, 12420 <validate_args+0xe>
		return -EINVAL;
   1241a:	f06f 0015 	mvn.w	r0, #21
}
   1241e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   12420:	1d08      	adds	r0, r1, #4
   12422:	f000 f8d6 	bl	125d2 <sys_notify_validate>
	if ((rv == 0)
   12426:	2800      	cmp	r0, #0
   12428:	d1f9      	bne.n	1241e <validate_args+0xc>
	    && ((cli->notify.flags
   1242a:	68a3      	ldr	r3, [r4, #8]
   1242c:	2b03      	cmp	r3, #3
   1242e:	d9f6      	bls.n	1241e <validate_args+0xc>
   12430:	e7f3      	b.n	1241a <validate_args+0x8>

00012432 <notify_one>:
{
   12432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12436:	460d      	mov	r5, r1
   12438:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1243a:	4619      	mov	r1, r3
   1243c:	1d28      	adds	r0, r5, #4
{
   1243e:	4690      	mov	r8, r2
   12440:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   12442:	f000 f8d7 	bl	125f4 <sys_notify_finalize>
	if (cb) {
   12446:	4604      	mov	r4, r0
   12448:	b138      	cbz	r0, 1245a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1244a:	4633      	mov	r3, r6
   1244c:	4642      	mov	r2, r8
   1244e:	4629      	mov	r1, r5
   12450:	4638      	mov	r0, r7
   12452:	46a4      	mov	ip, r4
}
   12454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   12458:	4760      	bx	ip
}
   1245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001245e <transition_complete>:
{
   1245e:	b410      	push	{r4}
	__asm__ volatile(
   12460:	f04f 0440 	mov.w	r4, #64	; 0x40
   12464:	f3ef 8211 	mrs	r2, BASEPRI
   12468:	f384 8812 	msr	BASEPRI_MAX, r4
   1246c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   12470:	6141      	str	r1, [r0, #20]
}
   12472:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   12474:	2101      	movs	r1, #1
   12476:	f7f2 b9b7 	b.w	47e8 <process_event>

0001247a <onoff_manager_init>:
{
   1247a:	b538      	push	{r3, r4, r5, lr}
   1247c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1247e:	4605      	mov	r5, r0
   12480:	b158      	cbz	r0, 1249a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   12482:	b151      	cbz	r1, 1249a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   12484:	680b      	ldr	r3, [r1, #0]
   12486:	b143      	cbz	r3, 1249a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   12488:	684b      	ldr	r3, [r1, #4]
   1248a:	b133      	cbz	r3, 1249a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1248c:	221c      	movs	r2, #28
   1248e:	2100      	movs	r1, #0
   12490:	f000 fc27 	bl	12ce2 <memset>
   12494:	612c      	str	r4, [r5, #16]
	return 0;
   12496:	2000      	movs	r0, #0
}
   12498:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1249a:	f06f 0015 	mvn.w	r0, #21
   1249e:	e7fb      	b.n	12498 <onoff_manager_init+0x1e>

000124a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   124a0:	b570      	push	{r4, r5, r6, lr}
   124a2:	4605      	mov	r5, r0
   124a4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   124a6:	f7ff ffb4 	bl	12412 <validate_args>

	if (rv < 0) {
   124aa:	1e04      	subs	r4, r0, #0
   124ac:	db15      	blt.n	124da <onoff_request+0x3a>
   124ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   124b2:	f3ef 8211 	mrs	r2, BASEPRI
   124b6:	f383 8812 	msr	BASEPRI_MAX, r3
   124ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   124be:	8b6b      	ldrh	r3, [r5, #26]
   124c0:	8b2c      	ldrh	r4, [r5, #24]
   124c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   124c6:	428b      	cmp	r3, r1
   124c8:	f004 0407 	and.w	r4, r4, #7
   124cc:	d107      	bne.n	124de <onoff_request+0x3e>
	__asm__ volatile(
   124ce:	f382 8811 	msr	BASEPRI, r2
   124d2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   124d6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   124da:	4620      	mov	r0, r4
   124dc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   124de:	2c02      	cmp	r4, #2
   124e0:	d10c      	bne.n	124fc <onoff_request+0x5c>
		mgr->refs += 1U;
   124e2:	3301      	adds	r3, #1
   124e4:	836b      	strh	r3, [r5, #26]
   124e6:	f382 8811 	msr	BASEPRI, r2
   124ea:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   124ee:	2300      	movs	r3, #0
   124f0:	4622      	mov	r2, r4
   124f2:	4631      	mov	r1, r6
   124f4:	4628      	mov	r0, r5
   124f6:	f7ff ff9c 	bl	12432 <notify_one>
   124fa:	e7ee      	b.n	124da <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   124fc:	2c06      	cmp	r4, #6
   124fe:	d814      	bhi.n	1252a <onoff_request+0x8a>
   12500:	e8df f004 	tbb	[pc, r4]
   12504:	13131304 	.word	0x13131304
   12508:	1a04      	.short	0x1a04
   1250a:	04          	.byte	0x04
   1250b:	00          	.byte	0x00
	parent->next = child;
   1250c:	2300      	movs	r3, #0
   1250e:	6033      	str	r3, [r6, #0]
	return list->tail;
   12510:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   12512:	b93b      	cbnz	r3, 12524 <onoff_request+0x84>
	list->head = node;
   12514:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   12518:	b9ac      	cbnz	r4, 12546 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1251a:	2102      	movs	r1, #2
   1251c:	4628      	mov	r0, r5
   1251e:	f7f2 f963 	bl	47e8 <process_event>
   12522:	e7da      	b.n	124da <onoff_request+0x3a>
	parent->next = child;
   12524:	601e      	str	r6, [r3, #0]
	list->tail = node;
   12526:	606e      	str	r6, [r5, #4]
}
   12528:	e7f6      	b.n	12518 <onoff_request+0x78>
   1252a:	f382 8811 	msr	BASEPRI, r2
   1252e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   12532:	f06f 0404 	mvn.w	r4, #4
   12536:	e7d0      	b.n	124da <onoff_request+0x3a>
   12538:	f382 8811 	msr	BASEPRI, r2
   1253c:	f3bf 8f6f 	isb	sy
   12540:	f06f 0485 	mvn.w	r4, #133	; 0x85
   12544:	e7c9      	b.n	124da <onoff_request+0x3a>
   12546:	f382 8811 	msr	BASEPRI, r2
   1254a:	f3bf 8f6f 	isb	sy
		if (notify) {
   1254e:	e7c4      	b.n	124da <onoff_request+0x3a>

00012550 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   12550:	b510      	push	{r4, lr}
	__asm__ volatile(
   12552:	f04f 0340 	mov.w	r3, #64	; 0x40
   12556:	f3ef 8211 	mrs	r2, BASEPRI
   1255a:	f383 8812 	msr	BASEPRI_MAX, r3
   1255e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12562:	8b04      	ldrh	r4, [r0, #24]
   12564:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   12568:	2c02      	cmp	r4, #2
   1256a:	d00a      	beq.n	12582 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1256c:	2c01      	cmp	r4, #1
   1256e:	bf0c      	ite	eq
   12570:	f06f 0004 	mvneq.w	r0, #4
   12574:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   12578:	f382 8811 	msr	BASEPRI, r2
   1257c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   12580:	e008      	b.n	12594 <onoff_release+0x44>
	mgr->refs -= 1U;
   12582:	8b43      	ldrh	r3, [r0, #26]
   12584:	3b01      	subs	r3, #1
   12586:	b29b      	uxth	r3, r3
   12588:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1258a:	b923      	cbnz	r3, 12596 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1258c:	4621      	mov	r1, r4
   1258e:	f7f2 f92b 	bl	47e8 <process_event>
	int rv = state;
   12592:	4620      	mov	r0, r4
}
   12594:	bd10      	pop	{r4, pc}
	int rv = state;
   12596:	4620      	mov	r0, r4
   12598:	e7ee      	b.n	12578 <onoff_release+0x28>

0001259a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   1259a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   1259c:	b1b0      	cbz	r0, 125cc <onoff_cancel+0x32>
   1259e:	b1a9      	cbz	r1, 125cc <onoff_cancel+0x32>
	__asm__ volatile(
   125a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   125a4:	f3ef 8511 	mrs	r5, BASEPRI
   125a8:	f382 8812 	msr	BASEPRI_MAX, r2
   125ac:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   125b0:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   125b2:	f7ff fef7 	bl	123a4 <sys_slist_find_and_remove>
   125b6:	b130      	cbz	r0, 125c6 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   125b8:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   125bc:	f385 8811 	msr	BASEPRI, r5
   125c0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   125c4:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   125c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   125ca:	e7f7      	b.n	125bc <onoff_cancel+0x22>
		return -EINVAL;
   125cc:	f06f 0015 	mvn.w	r0, #21
   125d0:	e7f8      	b.n	125c4 <onoff_cancel+0x2a>

000125d2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   125d2:	4603      	mov	r3, r0
   125d4:	b158      	cbz	r0, 125ee <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   125d6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   125d8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   125dc:	2a01      	cmp	r2, #1
   125de:	d003      	beq.n	125e8 <sys_notify_validate+0x16>
   125e0:	2a03      	cmp	r2, #3
   125e2:	d104      	bne.n	125ee <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   125e4:	6802      	ldr	r2, [r0, #0]
   125e6:	b112      	cbz	r2, 125ee <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   125e8:	2000      	movs	r0, #0
   125ea:	6098      	str	r0, [r3, #8]
   125ec:	4770      	bx	lr
   125ee:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   125f2:	4770      	bx	lr

000125f4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   125f4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   125f6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   125f8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   125fc:	2a03      	cmp	r2, #3
   125fe:	f04f 0200 	mov.w	r2, #0
{
   12602:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   12604:	bf0c      	ite	eq
   12606:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   12608:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1260a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1260c:	4770      	bx	lr

0001260e <encode_uint>:
{
   1260e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12612:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   12614:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   12616:	2b6f      	cmp	r3, #111	; 0x6f
{
   12618:	4680      	mov	r8, r0
   1261a:	460f      	mov	r7, r1
   1261c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1261e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   12622:	d029      	beq.n	12678 <encode_uint+0x6a>
   12624:	d824      	bhi.n	12670 <encode_uint+0x62>
		return 10;
   12626:	2b58      	cmp	r3, #88	; 0x58
   12628:	bf0c      	ite	eq
   1262a:	2610      	moveq	r6, #16
   1262c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1262e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   12632:	4632      	mov	r2, r6
   12634:	2300      	movs	r3, #0
   12636:	4640      	mov	r0, r8
   12638:	4639      	mov	r1, r7
   1263a:	f7ed fdb1 	bl	1a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1263e:	2a09      	cmp	r2, #9
   12640:	b2d4      	uxtb	r4, r2
   12642:	d81e      	bhi.n	12682 <encode_uint+0x74>
   12644:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   12646:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12648:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1264a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1264e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   12652:	d301      	bcc.n	12658 <encode_uint+0x4a>
   12654:	45d1      	cmp	r9, sl
   12656:	d811      	bhi.n	1267c <encode_uint+0x6e>
	if (conv->flag_hash) {
   12658:	782b      	ldrb	r3, [r5, #0]
   1265a:	069b      	lsls	r3, r3, #26
   1265c:	d505      	bpl.n	1266a <encode_uint+0x5c>
		if (radix == 8) {
   1265e:	2e08      	cmp	r6, #8
   12660:	d115      	bne.n	1268e <encode_uint+0x80>
			conv->altform_0 = true;
   12662:	78ab      	ldrb	r3, [r5, #2]
   12664:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   12668:	70ab      	strb	r3, [r5, #2]
}
   1266a:	4648      	mov	r0, r9
   1266c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   12670:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   12674:	2b70      	cmp	r3, #112	; 0x70
   12676:	e7d7      	b.n	12628 <encode_uint+0x1a>
	switch (specifier) {
   12678:	2608      	movs	r6, #8
   1267a:	e7d8      	b.n	1262e <encode_uint+0x20>
		value /= radix;
   1267c:	4680      	mov	r8, r0
   1267e:	460f      	mov	r7, r1
   12680:	e7d7      	b.n	12632 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12682:	f1bb 0f19 	cmp.w	fp, #25
   12686:	bf94      	ite	ls
   12688:	3437      	addls	r4, #55	; 0x37
   1268a:	3457      	addhi	r4, #87	; 0x57
   1268c:	e7db      	b.n	12646 <encode_uint+0x38>
		} else if (radix == 16) {
   1268e:	2e10      	cmp	r6, #16
   12690:	d1eb      	bne.n	1266a <encode_uint+0x5c>
			conv->altform_0c = true;
   12692:	78ab      	ldrb	r3, [r5, #2]
   12694:	f043 0310 	orr.w	r3, r3, #16
   12698:	e7e6      	b.n	12668 <encode_uint+0x5a>

0001269a <outs>:
{
   1269a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1269e:	4607      	mov	r7, r0
   126a0:	4688      	mov	r8, r1
   126a2:	4615      	mov	r5, r2
   126a4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   126a6:	4614      	mov	r4, r2
   126a8:	42b4      	cmp	r4, r6
   126aa:	d305      	bcc.n	126b8 <outs+0x1e>
   126ac:	b10e      	cbz	r6, 126b2 <outs+0x18>
	return (int)count;
   126ae:	1b60      	subs	r0, r4, r5
   126b0:	e008      	b.n	126c4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   126b2:	7823      	ldrb	r3, [r4, #0]
   126b4:	2b00      	cmp	r3, #0
   126b6:	d0fa      	beq.n	126ae <outs+0x14>
		int rc = out((int)*sp++, ctx);
   126b8:	f814 0b01 	ldrb.w	r0, [r4], #1
   126bc:	4641      	mov	r1, r8
   126be:	47b8      	blx	r7
		if (rc < 0) {
   126c0:	2800      	cmp	r0, #0
   126c2:	daf1      	bge.n	126a8 <outs+0xe>
}
   126c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000126c8 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   126c8:	68c3      	ldr	r3, [r0, #12]
   126ca:	6802      	ldr	r2, [r0, #0]
   126cc:	4293      	cmp	r3, r2
   126ce:	d904      	bls.n	126da <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   126d0:	3b01      	subs	r3, #1
   126d2:	1a9a      	subs	r2, r3, r2

		return false;
   126d4:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   126d6:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   126d8:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   126da:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   126dc:	b913      	cbnz	r3, 126e4 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   126de:	3801      	subs	r0, #1
   126e0:	1a82      	subs	r2, r0, r2
		return false;
   126e2:	e7f7      	b.n	126d4 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   126e4:	1a82      	subs	r2, r0, r2
	return true;
   126e6:	2001      	movs	r0, #1
   126e8:	e7f5      	b.n	126d6 <free_space+0xe>

000126ea <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   126ea:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   126ec:	a901      	add	r1, sp, #4
{
   126ee:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   126f0:	f7ff ffea 	bl	126c8 <free_space>
   126f4:	b120      	cbz	r0, 12700 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   126f6:	9b01      	ldr	r3, [sp, #4]
   126f8:	68e2      	ldr	r2, [r4, #12]
   126fa:	3b01      	subs	r3, #1
   126fc:	4413      	add	r3, r2
   126fe:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   12700:	6a20      	ldr	r0, [r4, #32]
   12702:	9b01      	ldr	r3, [sp, #4]
   12704:	1ac0      	subs	r0, r0, r3
}
   12706:	3801      	subs	r0, #1
   12708:	b002      	add	sp, #8
   1270a:	bd10      	pop	{r4, pc}

0001270c <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   1270c:	b510      	push	{r4, lr}
   1270e:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   12710:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12712:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   12714:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   12716:	07d2      	lsls	r2, r2, #31
   12718:	d502      	bpl.n	12720 <idx_inc+0x14>
		return i & (buffer->size - 1);
   1271a:	3b01      	subs	r3, #1
   1271c:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   1271e:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   12720:	4298      	cmp	r0, r3
   12722:	bf28      	it	cs
   12724:	1ac0      	subcs	r0, r0, r3
   12726:	e7fa      	b.n	1271e <idx_inc+0x12>

00012728 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   12728:	b538      	push	{r3, r4, r5, lr}
   1272a:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1272c:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1272e:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   12730:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   12732:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   12736:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1273a:	462a      	mov	r2, r5
   1273c:	6801      	ldr	r1, [r0, #0]
{
   1273e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   12740:	f7ff ffe4 	bl	1270c <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   12744:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   12746:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   12748:	462a      	mov	r2, r5
   1274a:	4620      	mov	r0, r4
   1274c:	f7ff ffde 	bl	1270c <idx_inc>
   12750:	6060      	str	r0, [r4, #4]
}
   12752:	bd38      	pop	{r3, r4, r5, pc}

00012754 <max_utilization_update>:
{
   12754:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   12756:	6903      	ldr	r3, [r0, #16]
   12758:	075b      	lsls	r3, r3, #29
{
   1275a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1275c:	d506      	bpl.n	1276c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   1275e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   12760:	f7ff ffc3 	bl	126ea <get_usage>
   12764:	4285      	cmp	r5, r0
   12766:	bf2c      	ite	cs
   12768:	6265      	strcs	r5, [r4, #36]	; 0x24
   1276a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1276c:	bd38      	pop	{r3, r4, r5, pc}

0001276e <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   1276e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12772:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   12774:	2300      	movs	r3, #0
   12776:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   12778:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   1277c:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   12780:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   12784:	f003 0303 	and.w	r3, r3, #3
   12788:	2b02      	cmp	r3, #2
{
   1278a:	4604      	mov	r4, r0
   1278c:	468b      	mov	fp, r1
   1278e:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   12790:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   12794:	d103      	bne.n	1279e <drop_item_locked+0x30>
		return item->skip.len;
   12796:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   1279a:	08ad      	lsrs	r5, r5, #2
   1279c:	d12e      	bne.n	127fc <drop_item_locked+0x8e>
   1279e:	69a3      	ldr	r3, [r4, #24]
   127a0:	4630      	mov	r0, r6
   127a2:	4798      	blx	r3
   127a4:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   127a6:	f1b8 0f00 	cmp.w	r8, #0
   127aa:	d038      	beq.n	1281e <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   127ac:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   127b0:	079b      	lsls	r3, r3, #30
   127b2:	d531      	bpl.n	12818 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   127b4:	f10b 0101 	add.w	r1, fp, #1
   127b8:	4620      	mov	r0, r4
   127ba:	f7ff ffb5 	bl	12728 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   127be:	6861      	ldr	r1, [r4, #4]
   127c0:	462a      	mov	r2, r5
   127c2:	4620      	mov	r0, r4
   127c4:	f7ff ffa2 	bl	1270c <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   127c8:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   127ca:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   127cc:	462a      	mov	r2, r5
   127ce:	4620      	mov	r0, r4
   127d0:	f7ff ff9c 	bl	1270c <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   127d4:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   127d6:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   127d8:	68e1      	ldr	r1, [r4, #12]
   127da:	4620      	mov	r0, r4
   127dc:	f7ff ff96 	bl	1270c <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   127e0:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   127e2:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   127e6:	f002 0203 	and.w	r2, r2, #3
   127ea:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   127ec:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   127f0:	d10e      	bne.n	12810 <drop_item_locked+0xa2>
		return item->skip.len;
   127f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   127f6:	089b      	lsrs	r3, r3, #2
   127f8:	d00a      	beq.n	12810 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   127fa:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   127fc:	68e1      	ldr	r1, [r4, #12]
   127fe:	462a      	mov	r2, r5
   12800:	4620      	mov	r0, r4
   12802:	f7ff ff83 	bl	1270c <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   12806:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   1280a:	4630      	mov	r0, r6
   1280c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   12810:	69a3      	ldr	r3, [r4, #24]
   12812:	4630      	mov	r0, r6
   12814:	4798      	blx	r3
   12816:	4405      	add	r5, r0
			*user_packet = true;
   12818:	2301      	movs	r3, #1
   1281a:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   1281c:	e7ee      	b.n	127fc <drop_item_locked+0x8e>
		item = NULL;
   1281e:	4646      	mov	r6, r8
	return item;
   12820:	e7f3      	b.n	1280a <drop_item_locked+0x9c>

00012822 <mpsc_pbuf_init>:
{
   12822:	b538      	push	{r3, r4, r5, lr}
   12824:	460d      	mov	r5, r1
   12826:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   12828:	221c      	movs	r2, #28
   1282a:	2100      	movs	r1, #0
   1282c:	f000 fa59 	bl	12ce2 <memset>
	buffer->get_wlen = cfg->get_wlen;
   12830:	68eb      	ldr	r3, [r5, #12]
   12832:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   12834:	68ab      	ldr	r3, [r5, #8]
   12836:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   12838:	682b      	ldr	r3, [r5, #0]
   1283a:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1283c:	686b      	ldr	r3, [r5, #4]
   1283e:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   12840:	2200      	movs	r2, #0
   12842:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   12844:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   12846:	b123      	cbz	r3, 12852 <mpsc_pbuf_init+0x30>
   12848:	1e59      	subs	r1, r3, #1
   1284a:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1284c:	bf08      	it	eq
   1284e:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   12852:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12854:	2201      	movs	r2, #1
   12856:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1285a:	2100      	movs	r1, #0
}
   1285c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12860:	f001 b956 	b.w	13b10 <z_impl_k_sem_init>

00012864 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   12864:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12868:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   1286a:	6a03      	ldr	r3, [r0, #32]
   1286c:	3b01      	subs	r3, #1
   1286e:	428b      	cmp	r3, r1
{
   12870:	4604      	mov	r4, r0
   12872:	460e      	mov	r6, r1
   12874:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   12876:	d351      	bcc.n	1291c <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   12878:	2500      	movs	r5, #0
	__asm__ volatile(
   1287a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1287e:	f3ef 8911 	mrs	r9, BASEPRI
   12882:	f383 8812 	msr	BASEPRI_MAX, r3
   12886:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   1288a:	a901      	add	r1, sp, #4
   1288c:	4620      	mov	r0, r4
   1288e:	f7ff ff1b 	bl	126c8 <free_space>

		if (free_wlen >= wlen) {
   12892:	f8dd a004 	ldr.w	sl, [sp, #4]
   12896:	45b2      	cmp	sl, r6
   12898:	d317      	bcc.n	128ca <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1289a:	6822      	ldr	r2, [r4, #0]
			item =
   1289c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   1289e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   128a2:	f021 0103 	bic.w	r1, r1, #3
   128a6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   128aa:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   128ae:	6821      	ldr	r1, [r4, #0]
   128b0:	4632      	mov	r2, r6
   128b2:	4620      	mov	r0, r4
   128b4:	f7ff ff2a 	bl	1270c <idx_inc>
   128b8:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   128ba:	f389 8811 	msr	BASEPRI, r9
   128be:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   128c2:	4628      	mov	r0, r5
   128c4:	b002      	add	sp, #8
   128c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   128ca:	b150      	cbz	r0, 128e2 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   128cc:	4651      	mov	r1, sl
   128ce:	4620      	mov	r0, r4
   128d0:	f7ff ff2a 	bl	12728 <add_skip_item>
   128d4:	f389 8811 	msr	BASEPRI, r9
   128d8:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   128dc:	2d00      	cmp	r5, #0
   128de:	d0cb      	beq.n	12878 <mpsc_pbuf_alloc+0x14>
   128e0:	e033      	b.n	1294a <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   128e2:	ea57 0308 	orrs.w	r3, r7, r8
   128e6:	d020      	beq.n	1292a <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   128e8:	f001 f8ef 	bl	13aca <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   128ec:	b9e8      	cbnz	r0, 1292a <mpsc_pbuf_alloc+0xc6>
   128ee:	f389 8811 	msr	BASEPRI, r9
   128f2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   128f6:	463a      	mov	r2, r7
   128f8:	4643      	mov	r3, r8
   128fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   128fe:	f7fb fa11 	bl	dd24 <z_impl_k_sem_take>
	__asm__ volatile(
   12902:	f04f 0240 	mov.w	r2, #64	; 0x40
   12906:	f3ef 8311 	mrs	r3, BASEPRI
   1290a:	f382 8812 	msr	BASEPRI_MAX, r2
   1290e:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   12912:	b128      	cbz	r0, 12920 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   12914:	f383 8811 	msr	BASEPRI, r3
   12918:	f3bf 8f6f 	isb	sy
		return NULL;
   1291c:	2500      	movs	r5, #0
   1291e:	e7d0      	b.n	128c2 <mpsc_pbuf_alloc+0x5e>
   12920:	f383 8811 	msr	BASEPRI, r3
   12924:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   12928:	e7d8      	b.n	128dc <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   1292a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   1292c:	f10d 0303 	add.w	r3, sp, #3
   12930:	f3c2 0240 	ubfx	r2, r2, #1, #1
   12934:	4651      	mov	r1, sl
   12936:	4620      	mov	r0, r4
   12938:	f7ff ff19 	bl	1276e <drop_item_locked>
   1293c:	4605      	mov	r5, r0
   1293e:	f389 8811 	msr	BASEPRI, r9
   12942:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   12946:	2800      	cmp	r0, #0
   12948:	d0e8      	beq.n	1291c <mpsc_pbuf_alloc+0xb8>
   1294a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1294e:	2b00      	cmp	r3, #0
   12950:	d093      	beq.n	1287a <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   12952:	6963      	ldr	r3, [r4, #20]
   12954:	2b00      	cmp	r3, #0
   12956:	d08f      	beq.n	12878 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   12958:	4629      	mov	r1, r5
   1295a:	4620      	mov	r0, r4
   1295c:	4798      	blx	r3
   1295e:	e78b      	b.n	12878 <mpsc_pbuf_alloc+0x14>

00012960 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   12960:	b570      	push	{r4, r5, r6, lr}
   12962:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   12964:	6983      	ldr	r3, [r0, #24]
   12966:	4608      	mov	r0, r1
{
   12968:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1296a:	4798      	blx	r3
   1296c:	4602      	mov	r2, r0
	__asm__ volatile(
   1296e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12972:	f3ef 8611 	mrs	r6, BASEPRI
   12976:	f383 8812 	msr	BASEPRI_MAX, r3
   1297a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1297e:	782b      	ldrb	r3, [r5, #0]
   12980:	f043 0301 	orr.w	r3, r3, #1
   12984:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   12986:	6861      	ldr	r1, [r4, #4]
   12988:	4620      	mov	r0, r4
   1298a:	f7ff febf 	bl	1270c <idx_inc>
   1298e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   12990:	4620      	mov	r0, r4
   12992:	f7ff fedf 	bl	12754 <max_utilization_update>
	__asm__ volatile(
   12996:	f386 8811 	msr	BASEPRI, r6
   1299a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   1299e:	bd70      	pop	{r4, r5, r6, pc}

000129a0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   129a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129a2:	4604      	mov	r4, r0
	__asm__ volatile(
   129a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   129a8:	f3ef 8611 	mrs	r6, BASEPRI
   129ac:	f383 8812 	msr	BASEPRI_MAX, r3
   129b0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   129b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   129b8:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   129ba:	bf88      	it	hi
   129bc:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   129be:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   129c0:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   129c2:	b132      	cbz	r2, 129d2 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   129c4:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   129c8:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   129cc:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   129d0:	d105      	bne.n	129de <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   129d2:	f386 8811 	msr	BASEPRI, r6
   129d6:	f3bf 8f6f 	isb	sy
			item = NULL;
   129da:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   129dc:	e02e      	b.n	12a3c <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   129de:	2802      	cmp	r0, #2
   129e0:	d103      	bne.n	129ea <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   129e2:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   129e6:	08ad      	lsrs	r5, r5, #2
   129e8:	d105      	bne.n	129f6 <mpsc_pbuf_claim+0x56>
   129ea:	07d0      	lsls	r0, r2, #31
   129ec:	d414      	bmi.n	12a18 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   129ee:	69a3      	ldr	r3, [r4, #24]
   129f0:	4638      	mov	r0, r7
   129f2:	4798      	blx	r3
   129f4:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   129f6:	68a1      	ldr	r1, [r4, #8]
   129f8:	462a      	mov	r2, r5
   129fa:	4620      	mov	r0, r4
   129fc:	f7ff fe86 	bl	1270c <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   12a00:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   12a02:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   12a04:	462a      	mov	r2, r5
   12a06:	4620      	mov	r0, r4
   12a08:	f7ff fe80 	bl	1270c <idx_inc>
				buffer->rd_idx =
   12a0c:	60e0      	str	r0, [r4, #12]
   12a0e:	f386 8811 	msr	BASEPRI, r6
   12a12:	f3bf 8f6f 	isb	sy
	} while (cont);
   12a16:	e7c5      	b.n	129a4 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   12a18:	f042 0202 	orr.w	r2, r2, #2
   12a1c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   12a20:	4638      	mov	r0, r7
   12a22:	69a3      	ldr	r3, [r4, #24]
   12a24:	68a5      	ldr	r5, [r4, #8]
   12a26:	4798      	blx	r3
   12a28:	4629      	mov	r1, r5
   12a2a:	4602      	mov	r2, r0
   12a2c:	4620      	mov	r0, r4
   12a2e:	f7ff fe6d 	bl	1270c <idx_inc>
				buffer->tmp_rd_idx =
   12a32:	60a0      	str	r0, [r4, #8]
   12a34:	f386 8811 	msr	BASEPRI, r6
   12a38:	f3bf 8f6f 	isb	sy
}
   12a3c:	4638      	mov	r0, r7
   12a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012a40 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   12a40:	b570      	push	{r4, r5, r6, lr}
   12a42:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   12a44:	6983      	ldr	r3, [r0, #24]
   12a46:	4608      	mov	r0, r1
{
   12a48:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   12a4a:	4798      	blx	r3
   12a4c:	4602      	mov	r2, r0
	__asm__ volatile(
   12a4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12a52:	f3ef 8611 	mrs	r6, BASEPRI
   12a56:	f383 8812 	msr	BASEPRI_MAX, r3
   12a5a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   12a5e:	782b      	ldrb	r3, [r5, #0]
   12a60:	f36f 0300 	bfc	r3, #0, #1
   12a64:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12a66:	6923      	ldr	r3, [r4, #16]
   12a68:	079b      	lsls	r3, r3, #30
   12a6a:	d505      	bpl.n	12a78 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   12a6c:	68e1      	ldr	r1, [r4, #12]
   12a6e:	69e3      	ldr	r3, [r4, #28]
   12a70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12a74:	429d      	cmp	r5, r3
   12a76:	d112      	bne.n	12a9e <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   12a78:	782b      	ldrb	r3, [r5, #0]
   12a7a:	f36f 0341 	bfc	r3, #1, #1
   12a7e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   12a80:	68e1      	ldr	r1, [r4, #12]
   12a82:	4620      	mov	r0, r4
   12a84:	f7ff fe42 	bl	1270c <idx_inc>
   12a88:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12a8a:	f386 8811 	msr	BASEPRI, r6
   12a8e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   12a92:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   12a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a9a:	f7fb b923 	b.w	dce4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   12a9e:	682b      	ldr	r3, [r5, #0]
   12aa0:	f360 039f 	bfi	r3, r0, #2, #30
   12aa4:	602b      	str	r3, [r5, #0]
   12aa6:	e7f0      	b.n	12a8a <mpsc_pbuf_free+0x4a>

00012aa8 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   12aa8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   12aac:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   12aae:	bf88      	it	hi
   12ab0:	6a02      	ldrhi	r2, [r0, #32]
   12ab2:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   12ab4:	1e18      	subs	r0, r3, #0
   12ab6:	bf18      	it	ne
   12ab8:	2001      	movne	r0, #1
   12aba:	4770      	bx	lr

00012abc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_PTT_CLK_OUT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_PTT_POWER_MGMT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_PTT_CACHE_MGMT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_PTT_RF_INIT_PRIORITY, 50);

GEN_ABS_SYM_END
   12abc:	4770      	bx	lr

00012abe <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   12abe:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   12ac0:	075b      	lsls	r3, r3, #29
   12ac2:	d40b      	bmi.n	12adc <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   12ac4:	6803      	ldr	r3, [r0, #0]
   12ac6:	8842      	ldrh	r2, [r0, #2]
   12ac8:	f3c3 2349 	ubfx	r3, r3, #9, #10
   12acc:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   12ad0:	1898      	adds	r0, r3, r2
   12ad2:	3017      	adds	r0, #23
   12ad4:	f020 0007 	bic.w	r0, r0, #7
   12ad8:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   12ada:	4770      	bx	lr
	return 0;
   12adc:	2000      	movs	r0, #0
}
   12ade:	4770      	bx	lr

00012ae0 <dummy_timestamp>:
}
   12ae0:	2000      	movs	r0, #0
   12ae2:	4770      	bx	lr

00012ae4 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   12ae4:	f000 bac9 	b.w	1307a <sys_clock_cycle_get_32>

00012ae8 <atomic_inc>:
{
   12ae8:	4603      	mov	r3, r0
}
   12aea:	f3bf 8f5b 	dmb	ish
   12aee:	e853 0f00 	ldrex	r0, [r3]
   12af2:	1c42      	adds	r2, r0, #1
   12af4:	e843 2100 	strex	r1, r2, [r3]
   12af8:	2900      	cmp	r1, #0
   12afa:	d1f8      	bne.n	12aee <atomic_inc+0x6>
   12afc:	f3bf 8f5b 	dmb	ish
   12b00:	4770      	bx	lr

00012b02 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   12b02:	2001      	movs	r0, #1
   12b04:	f7f2 bc18 	b.w	5338 <z_log_dropped>

00012b08 <z_log_get_tag>:
}
   12b08:	2000      	movs	r0, #0
   12b0a:	4770      	bx	lr

00012b0c <z_cbprintf_cpy>:
{
   12b0c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   12b0e:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   12b12:	1b9b      	subs	r3, r3, r6
   12b14:	428b      	cmp	r3, r1
{
   12b16:	460c      	mov	r4, r1
   12b18:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   12b1a:	d30a      	bcc.n	12b32 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   12b1c:	6813      	ldr	r3, [r2, #0]
   12b1e:	460a      	mov	r2, r1
   12b20:	4601      	mov	r1, r0
   12b22:	1998      	adds	r0, r3, r6
   12b24:	f000 f8d2 	bl	12ccc <memcpy>
	desc->off += len;
   12b28:	68ab      	ldr	r3, [r5, #8]
   12b2a:	4423      	add	r3, r4
   12b2c:	60ab      	str	r3, [r5, #8]
	return len;
   12b2e:	4620      	mov	r0, r4
}
   12b30:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   12b32:	f06f 001b 	mvn.w	r0, #27
   12b36:	e7fb      	b.n	12b30 <z_cbprintf_cpy+0x24>

00012b38 <z_log_msg_finalize>:
{
   12b38:	b570      	push	{r4, r5, r6, lr}
   12b3a:	460e      	mov	r6, r1
   12b3c:	4615      	mov	r5, r2
   12b3e:	4619      	mov	r1, r3
	if (!msg) {
   12b40:	4604      	mov	r4, r0
   12b42:	b918      	cbnz	r0, 12b4c <z_log_msg_finalize+0x14>
}
   12b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   12b48:	f7f2 bbf6 	b.w	5338 <z_log_dropped>
	if (data) {
   12b4c:	b13b      	cbz	r3, 12b5e <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   12b4e:	f3c2 2349 	ubfx	r3, r2, #9, #10
   12b52:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   12b54:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   12b58:	4418      	add	r0, r3
   12b5a:	f000 f8b7 	bl	12ccc <memcpy>
	msg->hdr.source = source;
   12b5e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   12b62:	4620      	mov	r0, r4
}
   12b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   12b68:	f7f2 bd72 	b.w	5650 <z_log_msg_commit>

00012b6c <buffer_write>:
{
   12b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b6e:	4606      	mov	r6, r0
   12b70:	460d      	mov	r5, r1
   12b72:	4614      	mov	r4, r2
   12b74:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   12b76:	4621      	mov	r1, r4
   12b78:	4628      	mov	r0, r5
   12b7a:	463a      	mov	r2, r7
   12b7c:	47b0      	blx	r6
	} while (len != 0);
   12b7e:	1a24      	subs	r4, r4, r0
		buf += processed;
   12b80:	4405      	add	r5, r0
	} while (len != 0);
   12b82:	d1f8      	bne.n	12b76 <buffer_write+0xa>
}
   12b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012b86 <cbvprintf>:
{
   12b86:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12b88:	2400      	movs	r4, #0
   12b8a:	9400      	str	r4, [sp, #0]
   12b8c:	f7f1 ff3a 	bl	4a04 <z_cbvprintf_impl>
}
   12b90:	b002      	add	sp, #8
   12b92:	bd10      	pop	{r4, pc}

00012b94 <log_output_flush>:
{
   12b94:	b510      	push	{r4, lr}
		     output->control_block->offset,
   12b96:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   12b98:	6881      	ldr	r1, [r0, #8]
{
   12b9a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   12b9c:	e9d2 2300 	ldrd	r2, r3, [r2]
   12ba0:	6800      	ldr	r0, [r0, #0]
   12ba2:	f7ff ffe3 	bl	12b6c <buffer_write>
	output->control_block->offset = 0;
   12ba6:	6863      	ldr	r3, [r4, #4]
   12ba8:	2200      	movs	r2, #0
   12baa:	601a      	str	r2, [r3, #0]
}
   12bac:	bd10      	pop	{r4, pc}

00012bae <out_func>:
{
   12bae:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   12bb0:	684b      	ldr	r3, [r1, #4]
   12bb2:	681a      	ldr	r2, [r3, #0]
   12bb4:	68cb      	ldr	r3, [r1, #12]
   12bb6:	429a      	cmp	r2, r3
{
   12bb8:	4605      	mov	r5, r0
   12bba:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   12bbc:	d102      	bne.n	12bc4 <out_func+0x16>
		log_output_flush(out_ctx);
   12bbe:	4608      	mov	r0, r1
   12bc0:	f7ff ffe8 	bl	12b94 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12bc4:	6863      	ldr	r3, [r4, #4]
   12bc6:	f3bf 8f5b 	dmb	ish
   12bca:	e853 2f00 	ldrex	r2, [r3]
   12bce:	1c51      	adds	r1, r2, #1
   12bd0:	e843 1000 	strex	r0, r1, [r3]
   12bd4:	2800      	cmp	r0, #0
   12bd6:	d1f8      	bne.n	12bca <out_func+0x1c>
   12bd8:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   12bdc:	68a3      	ldr	r3, [r4, #8]
   12bde:	549d      	strb	r5, [r3, r2]
}
   12be0:	2000      	movs	r0, #0
   12be2:	bd38      	pop	{r3, r4, r5, pc}

00012be4 <cr_out_func>:
	if (c == '\n') {
   12be4:	280a      	cmp	r0, #10
{
   12be6:	b538      	push	{r3, r4, r5, lr}
   12be8:	4604      	mov	r4, r0
   12bea:	460d      	mov	r5, r1
	if (c == '\n') {
   12bec:	d102      	bne.n	12bf4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   12bee:	200d      	movs	r0, #13
   12bf0:	f7ff ffdd 	bl	12bae <out_func>
	out_func(c, ctx);
   12bf4:	4629      	mov	r1, r5
   12bf6:	4620      	mov	r0, r4
   12bf8:	f7ff ffd9 	bl	12bae <out_func>
}
   12bfc:	2000      	movs	r0, #0
   12bfe:	bd38      	pop	{r3, r4, r5, pc}

00012c00 <log_backend_uart_init>:
}
   12c00:	4770      	bx	lr

00012c02 <abort_function>:
{
   12c02:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   12c04:	2000      	movs	r0, #0
   12c06:	f7f2 faaf 	bl	5168 <sys_reboot>

00012c0a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   12c0a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12c0c:	6800      	ldr	r0, [r0, #0]
   12c0e:	f7f3 ba9b 	b.w	6148 <z_arm_fatal_error>

00012c12 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12c12:	2100      	movs	r1, #0
   12c14:	2001      	movs	r0, #1
   12c16:	f7f3 ba97 	b.w	6148 <z_arm_fatal_error>

00012c1a <arch_irq_connect_dynamic>:
#ifdef CONFIG_DYNAMIC_INTERRUPTS
#ifdef CONFIG_GEN_ISR_TABLES
int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
			     void (*routine)(const void *parameter),
			     const void *parameter, uint32_t flags)
{
   12c1a:	b538      	push	{r3, r4, r5, lr}
   12c1c:	4604      	mov	r4, r0
   12c1e:	460d      	mov	r5, r1
   12c20:	4611      	mov	r1, r2
	z_isr_install(irq, routine, parameter);
   12c22:	461a      	mov	r2, r3
   12c24:	f7f3 fa68 	bl	60f8 <z_isr_install>
	z_arm_irq_priority_set(irq, priority, flags);
   12c28:	4620      	mov	r0, r4
   12c2a:	9a04      	ldr	r2, [sp, #16]
   12c2c:	4629      	mov	r1, r5
   12c2e:	f7f3 fb21 	bl	6274 <z_arm_irq_priority_set>
	return irq;
}
   12c32:	4620      	mov	r0, r4
   12c34:	bd38      	pop	{r3, r4, r5, pc}

00012c36 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   12c36:	b508      	push	{r3, lr}
	handler();
   12c38:	f7f3 fb44 	bl	62c4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   12c40:	f7f3 bc1c 	b.w	647c <z_arm_exc_exit>

00012c44 <z_log_msg_static_create.constprop.0>:
   12c44:	2300      	movs	r3, #0
   12c46:	f7f2 bd37 	b.w	56b8 <z_impl_z_log_msg_static_create>

00012c4a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   12c4a:	3901      	subs	r1, #1
   12c4c:	4603      	mov	r3, r0
   12c4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12c52:	b90a      	cbnz	r2, 12c58 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   12c54:	701a      	strb	r2, [r3, #0]

	return dest;
}
   12c56:	4770      	bx	lr
		*d = *s;
   12c58:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   12c5c:	e7f7      	b.n	12c4e <strcpy+0x4>

00012c5e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12c5e:	4603      	mov	r3, r0
	size_t n = 0;
   12c60:	2000      	movs	r0, #0

	while (*s != '\0') {
   12c62:	5c1a      	ldrb	r2, [r3, r0]
   12c64:	b902      	cbnz	r2, 12c68 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   12c66:	4770      	bx	lr
		n++;
   12c68:	3001      	adds	r0, #1
   12c6a:	e7fa      	b.n	12c62 <strlen+0x4>

00012c6c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12c6c:	4603      	mov	r3, r0
	size_t n = 0;
   12c6e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   12c70:	5c1a      	ldrb	r2, [r3, r0]
   12c72:	b10a      	cbz	r2, 12c78 <strnlen+0xc>
   12c74:	4288      	cmp	r0, r1
   12c76:	d100      	bne.n	12c7a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   12c78:	4770      	bx	lr
		n++;
   12c7a:	3001      	adds	r0, #1
   12c7c:	e7f8      	b.n	12c70 <strnlen+0x4>

00012c7e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   12c7e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12c80:	b15a      	cbz	r2, 12c9a <memcmp+0x1c>
   12c82:	3901      	subs	r1, #1
   12c84:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12c86:	f810 2b01 	ldrb.w	r2, [r0], #1
   12c8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   12c8e:	42a0      	cmp	r0, r4
   12c90:	d001      	beq.n	12c96 <memcmp+0x18>
   12c92:	429a      	cmp	r2, r3
   12c94:	d0f7      	beq.n	12c86 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   12c96:	1ad0      	subs	r0, r2, r3
}
   12c98:	bd10      	pop	{r4, pc}
		return 0;
   12c9a:	4610      	mov	r0, r2
   12c9c:	e7fc      	b.n	12c98 <memcmp+0x1a>

00012c9e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   12c9e:	1a43      	subs	r3, r0, r1
   12ca0:	4293      	cmp	r3, r2
{
   12ca2:	b510      	push	{r4, lr}
   12ca4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   12ca8:	d308      	bcc.n	12cbc <memmove+0x1e>
   12caa:	3901      	subs	r1, #1
	char *dest = d;
   12cac:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   12cae:	429a      	cmp	r2, r3
   12cb0:	d00b      	beq.n	12cca <memmove+0x2c>
			*dest = *src;
   12cb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12cb6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   12cba:	e7f8      	b.n	12cae <memmove+0x10>
   12cbc:	440a      	add	r2, r1
			dest[n] = src[n];
   12cbe:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   12cc2:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   12cc6:	428a      	cmp	r2, r1
   12cc8:	d1f9      	bne.n	12cbe <memmove+0x20>
		}
	}

	return d;
}
   12cca:	bd10      	pop	{r4, pc}

00012ccc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   12ccc:	b510      	push	{r4, lr}
   12cce:	1e43      	subs	r3, r0, #1
   12cd0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   12cd2:	4291      	cmp	r1, r2
   12cd4:	d100      	bne.n	12cd8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   12cd6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   12cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
   12cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   12ce0:	e7f7      	b.n	12cd2 <memcpy+0x6>

00012ce2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   12ce2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   12ce4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   12ce6:	4603      	mov	r3, r0
	while (n > 0) {
   12ce8:	4293      	cmp	r3, r2
   12cea:	d100      	bne.n	12cee <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   12cec:	4770      	bx	lr
		*(d_byte++) = c_byte;
   12cee:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12cf2:	e7f9      	b.n	12ce8 <memset+0x6>

00012cf4 <_stdout_hook_default>:
}
   12cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12cf8:	4770      	bx	lr

00012cfa <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   12cfa:	2806      	cmp	r0, #6
   12cfc:	d108      	bne.n	12d10 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   12cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12d02:	2201      	movs	r2, #1
   12d04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   12d08:	f3bf 8f4f 	dsb	sy
        __WFE();
   12d0c:	bf20      	wfe
    while (true)
   12d0e:	e7fd      	b.n	12d0c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   12d10:	4770      	bx	lr

00012d12 <pm_state_exit_post_ops>:
   12d12:	2300      	movs	r3, #0
   12d14:	f383 8811 	msr	BASEPRI, r3
   12d18:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12d1c:	4770      	bx	lr

00012d1e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   12d1e:	6903      	ldr	r3, [r0, #16]
   12d20:	b2c9      	uxtb	r1, r1
   12d22:	220c      	movs	r2, #12
   12d24:	fb01 3302 	mla	r3, r1, r2, r3
   12d28:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   12d2a:	f000 0007 	and.w	r0, r0, #7
   12d2e:	4770      	bx	lr

00012d30 <set_on_state>:
	__asm__ volatile(
   12d30:	f04f 0340 	mov.w	r3, #64	; 0x40
   12d34:	f3ef 8211 	mrs	r2, BASEPRI
   12d38:	f383 8812 	msr	BASEPRI_MAX, r3
   12d3c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   12d40:	6803      	ldr	r3, [r0, #0]
   12d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12d46:	f043 0302 	orr.w	r3, r3, #2
   12d4a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   12d4c:	f382 8811 	msr	BASEPRI, r2
   12d50:	f3bf 8f6f 	isb	sy
}
   12d54:	4770      	bx	lr

00012d56 <stop>:
{
   12d56:	b570      	push	{r4, r5, r6, lr}
   12d58:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   12d5a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   12d5c:	f04f 0440 	mov.w	r4, #64	; 0x40
   12d60:	f3ef 8511 	mrs	r5, BASEPRI
   12d64:	f384 8812 	msr	BASEPRI_MAX, r4
   12d68:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12d6c:	260c      	movs	r6, #12
   12d6e:	fb06 3401 	mla	r4, r6, r1, r3
   12d72:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   12d74:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   12d78:	d008      	beq.n	12d8c <stop+0x36>
   12d7a:	42a2      	cmp	r2, r4
   12d7c:	d006      	beq.n	12d8c <stop+0x36>
	__asm__ volatile(
   12d7e:	f385 8811 	msr	BASEPRI, r5
   12d82:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   12d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12d8a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   12d8c:	4371      	muls	r1, r6
   12d8e:	440b      	add	r3, r1
   12d90:	2201      	movs	r2, #1
   12d92:	641a      	str	r2, [r3, #64]	; 0x40
   12d94:	f385 8811 	msr	BASEPRI, r5
   12d98:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   12d9c:	6843      	ldr	r3, [r0, #4]
   12d9e:	440b      	add	r3, r1
   12da0:	685b      	ldr	r3, [r3, #4]
   12da2:	4798      	blx	r3
	return 0;
   12da4:	2000      	movs	r0, #0
   12da6:	e7f0      	b.n	12d8a <stop+0x34>

00012da8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   12da8:	2280      	movs	r2, #128	; 0x80
   12daa:	f7ff bfd4 	b.w	12d56 <stop>

00012dae <async_start>:
{
   12dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12db0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   12db2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   12db4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   12db6:	f04f 0540 	mov.w	r5, #64	; 0x40
   12dba:	f3ef 8611 	mrs	r6, BASEPRI
   12dbe:	f385 8812 	msr	BASEPRI_MAX, r5
   12dc2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12dc6:	250c      	movs	r5, #12
   12dc8:	4369      	muls	r1, r5
   12dca:	440c      	add	r4, r1
   12dcc:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   12dce:	f005 0c07 	and.w	ip, r5, #7
   12dd2:	f1bc 0f01 	cmp.w	ip, #1
   12dd6:	d10b      	bne.n	12df0 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   12dd8:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   12dda:	f386 8811 	msr	BASEPRI, r6
   12dde:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   12de2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   12de6:	6843      	ldr	r3, [r0, #4]
   12de8:	585b      	ldr	r3, [r3, r1]
   12dea:	4798      	blx	r3
	return 0;
   12dec:	2000      	movs	r0, #0
}
   12dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   12df0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   12df4:	42af      	cmp	r7, r5
   12df6:	f386 8811 	msr	BASEPRI, r6
   12dfa:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   12dfe:	bf0c      	ite	eq
   12e00:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   12e04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   12e08:	e7f1      	b.n	12dee <async_start+0x40>

00012e0a <api_start>:
{
   12e0a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   12e0c:	2480      	movs	r4, #128	; 0x80
   12e0e:	9400      	str	r4, [sp, #0]
   12e10:	f7ff ffcd 	bl	12dae <async_start>
}
   12e14:	b002      	add	sp, #8
   12e16:	bd10      	pop	{r4, pc}

00012e18 <onoff_started_callback>:
{
   12e18:	b410      	push	{r4}
	return &data->mgr[type];
   12e1a:	6900      	ldr	r0, [r0, #16]
   12e1c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   12e1e:	241c      	movs	r4, #28
   12e20:	fb03 0004 	mla	r0, r3, r4, r0
   12e24:	2100      	movs	r1, #0
}
   12e26:	bc10      	pop	{r4}
	notify(mgr, 0);
   12e28:	4710      	bx	r2

00012e2a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12e2a:	2000      	movs	r0, #0
   12e2c:	f7f5 b9c8 	b.w	81c0 <nrfx_clock_start>

00012e30 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   12e30:	2000      	movs	r0, #0
   12e32:	f000 b979 	b.w	13128 <nrfx_clock_stop>

00012e36 <blocking_start_callback>:
{
   12e36:	4610      	mov	r0, r2
   12e38:	f7fa bf54 	b.w	dce4 <z_impl_k_sem_give>

00012e3c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12e3c:	6843      	ldr	r3, [r0, #4]
   12e3e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   12e40:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   12e44:	600b      	str	r3, [r1, #0]
}
   12e46:	2000      	movs	r0, #0
   12e48:	4770      	bx	lr

00012e4a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12e4a:	6843      	ldr	r3, [r0, #4]
   12e4c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   12e4e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   12e52:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   12e56:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   12e5a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   12e5e:	2000      	movs	r0, #0
   12e60:	4770      	bx	lr

00012e62 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12e62:	6843      	ldr	r3, [r0, #4]
   12e64:	685b      	ldr	r3, [r3, #4]
}
   12e66:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   12e68:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   12e6c:	4770      	bx	lr

00012e6e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12e6e:	6843      	ldr	r3, [r0, #4]
   12e70:	685b      	ldr	r3, [r3, #4]
}
   12e72:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   12e74:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   12e78:	4770      	bx	lr

00012e7a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12e7a:	6843      	ldr	r3, [r0, #4]
   12e7c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12e7e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   12e82:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   12e86:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   12e88:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   12e8c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   12e90:	2000      	movs	r0, #0
   12e92:	4770      	bx	lr

00012e94 <gpio_nrfx_manage_callback>:
{
   12e94:	b510      	push	{r4, lr}
	return port->data;
   12e96:	6903      	ldr	r3, [r0, #16]
	return list->head;
   12e98:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12e9a:	b1f8      	cbz	r0, 12edc <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12e9c:	4288      	cmp	r0, r1
   12e9e:	d119      	bne.n	12ed4 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   12ea0:	689c      	ldr	r4, [r3, #8]
	return node->next;
   12ea2:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   12ea4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   12ea6:	42a1      	cmp	r1, r4
   12ea8:	d100      	bne.n	12eac <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   12eaa:	6098      	str	r0, [r3, #8]
	parent->next = child;
   12eac:	2000      	movs	r0, #0
   12eae:	6008      	str	r0, [r1, #0]
	if (set) {
   12eb0:	b12a      	cbz	r2, 12ebe <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   12eb2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   12eb4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   12eb6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   12eb8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   12eba:	b902      	cbnz	r2, 12ebe <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   12ebc:	6099      	str	r1, [r3, #8]
	return 0;
   12ebe:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12ec0:	e010      	b.n	12ee4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12ec2:	4281      	cmp	r1, r0
   12ec4:	d106      	bne.n	12ed4 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   12ec6:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   12ec8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   12eca:	6898      	ldr	r0, [r3, #8]
   12ecc:	4281      	cmp	r1, r0
   12ece:	d1ed      	bne.n	12eac <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   12ed0:	609c      	str	r4, [r3, #8]
}
   12ed2:	e7eb      	b.n	12eac <gpio_nrfx_manage_callback+0x18>
	return node->next;
   12ed4:	4604      	mov	r4, r0
   12ed6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12ed8:	2800      	cmp	r0, #0
   12eda:	d1f2      	bne.n	12ec2 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   12edc:	2a00      	cmp	r2, #0
   12ede:	d1e8      	bne.n	12eb2 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   12ee0:	f06f 0015 	mvn.w	r0, #21
}
   12ee4:	bd10      	pop	{r4, pc}

00012ee6 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   12ee6:	6902      	ldr	r2, [r0, #16]
{
   12ee8:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   12eea:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   12eee:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12ef2:	2000      	movs	r0, #0
   12ef4:	4770      	bx	lr

00012ef6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   12ef6:	6843      	ldr	r3, [r0, #4]
   12ef8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12efa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12efe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12f02:	4770      	bx	lr

00012f04 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   12f04:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   12f06:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   12f08:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f0a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12f0e:	b150      	cbz	r0, 12f26 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   12f10:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f12:	2000      	movs	r0, #0
   12f14:	7812      	ldrb	r2, [r2, #0]
   12f16:	700a      	strb	r2, [r1, #0]
   12f18:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12f1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12f20:	2201      	movs	r2, #1
   12f22:	601a      	str	r2, [r3, #0]
	return 0;
   12f24:	4770      	bx	lr
		return -1;
   12f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   12f2a:	4770      	bx	lr

00012f2c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   12f2c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   12f2e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f30:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12f34:	b940      	cbnz	r0, 12f48 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12f36:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12f38:	079b      	lsls	r3, r3, #30
   12f3a:	d406      	bmi.n	12f4a <is_tx_ready.isra.0+0x1e>
   12f3c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   12f40:	3800      	subs	r0, #0
   12f42:	bf18      	it	ne
   12f44:	2001      	movne	r0, #1
   12f46:	4770      	bx	lr
   12f48:	2001      	movs	r0, #1
}
   12f4a:	4770      	bx	lr

00012f4c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   12f4c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   12f4e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   12f50:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   12f54:	05c9      	lsls	r1, r1, #23
   12f56:	d518      	bpl.n	12f8a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f58:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   12f5c:	b1a9      	cbz	r1, 12f8a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   12f5e:	f04f 0040 	mov.w	r0, #64	; 0x40
   12f62:	f3ef 8111 	mrs	r1, BASEPRI
   12f66:	f380 8812 	msr	BASEPRI_MAX, r0
   12f6a:	f3bf 8f6f 	isb	sy
   12f6e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   12f72:	b130      	cbz	r0, 12f82 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f74:	2000      	movs	r0, #0
   12f76:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   12f7a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12f7e:	2001      	movs	r0, #1
   12f80:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   12f82:	f381 8811 	msr	BASEPRI, r1
   12f86:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12f8a:	6852      	ldr	r2, [r2, #4]
   12f8c:	06d2      	lsls	r2, r2, #27
   12f8e:	d515      	bpl.n	12fbc <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   12f90:	f04f 0140 	mov.w	r1, #64	; 0x40
   12f94:	f3ef 8211 	mrs	r2, BASEPRI
   12f98:	f381 8812 	msr	BASEPRI_MAX, r1
   12f9c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12fa0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12fa4:	b111      	cbz	r1, 12fac <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12fa6:	2100      	movs	r1, #0
   12fa8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   12fac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12fb0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   12fb4:	f382 8811 	msr	BASEPRI, r2
   12fb8:	f3bf 8f6f 	isb	sy
}
   12fbc:	4770      	bx	lr

00012fbe <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   12fbe:	b510      	push	{r4, lr}
   12fc0:	2200      	movs	r2, #0
   12fc2:	4604      	mov	r4, r0
   12fc4:	2101      	movs	r1, #1
   12fc6:	2028      	movs	r0, #40	; 0x28
   12fc8:	f7f3 f954 	bl	6274 <z_arm_irq_priority_set>
   12fcc:	2028      	movs	r0, #40	; 0x28
   12fce:	f7f3 f921 	bl	6214 <arch_irq_enable>
   12fd2:	4620      	mov	r0, r4
   12fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12fd8:	f7f4 baaa 	b.w	7530 <uarte_instance_init.constprop.0>

00012fdc <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   12fdc:	b510      	push	{r4, lr}
   12fde:	2200      	movs	r2, #0
   12fe0:	4604      	mov	r4, r0
   12fe2:	2101      	movs	r1, #1
   12fe4:	2002      	movs	r0, #2
   12fe6:	f7f3 f945 	bl	6274 <z_arm_irq_priority_set>
   12fea:	2002      	movs	r0, #2
   12fec:	f7f3 f912 	bl	6214 <arch_irq_enable>
   12ff0:	4620      	mov	r0, r4
   12ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12ff6:	f7f4 ba9b 	b.w	7530 <uarte_instance_init.constprop.0>

00012ffa <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   12ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12ffc:	460f      	mov	r7, r1
   12ffe:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   13000:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   13004:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   13006:	42a6      	cmp	r6, r4
   13008:	d803      	bhi.n	13012 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   1300a:	d016      	beq.n	1303a <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   1300c:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   1300e:	b003      	add	sp, #12
   13010:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   13012:	1b33      	subs	r3, r6, r4
   13014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13018:	bf38      	it	cc
   1301a:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1301c:	462a      	mov	r2, r5
   1301e:	ab01      	add	r3, sp, #4
   13020:	1939      	adds	r1, r7, r4
   13022:	2000      	movs	r0, #0
   13024:	f7fc fce0 	bl	f9e8 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   13028:	b920      	cbnz	r0, 13034 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   1302a:	9b01      	ldr	r3, [sp, #4]
   1302c:	42ab      	cmp	r3, r5
   1302e:	d101      	bne.n	13034 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   13030:	442c      	add	r4, r5
   13032:	e7e8      	b.n	13006 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   13034:	f06f 0015 	mvn.w	r0, #21
   13038:	e7e9      	b.n	1300e <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   1303a:	2000      	movs	r0, #0
   1303c:	e7e7      	b.n	1300e <entropy_cc3xx_rng_get_entropy+0x14>

0001303e <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1303e:	2200      	movs	r2, #0
{
   13040:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   13042:	4611      	mov	r1, r2
   13044:	4610      	mov	r0, r2
   13046:	f7fc fc9d 	bl	f984 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   1304a:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   1304c:	bf18      	it	ne
   1304e:	f06f 0015 	mvnne.w	r0, #21
   13052:	bd08      	pop	{r3, pc}

00013054 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   13054:	4770      	bx	lr

00013056 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13056:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1305a:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1305c:	b29b      	uxth	r3, r3
   1305e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13062:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13066:	2200      	movs	r2, #0
   13068:	601a      	str	r2, [r3, #0]
   1306a:	681b      	ldr	r3, [r3, #0]
}
   1306c:	4770      	bx	lr

0001306e <z_nrf_rtc_timer_compare_int_lock>:
	return compare_int_lock(chan);
   1306e:	f7f4 bc99 	b.w	79a4 <compare_int_lock>

00013072 <z_nrf_rtc_timer_compare_int_unlock>:
	compare_int_unlock(chan, key);
   13072:	f7f4 bcfb 	b.w	7a6c <compare_int_unlock>

00013076 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   13076:	f7f4 bd81 	b.w	7b7c <compare_set>

0001307a <sys_clock_cycle_get_32>:
{
   1307a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1307c:	f7f4 fd5c 	bl	7b38 <z_nrf_rtc_timer_read>
}
   13080:	bd08      	pop	{r3, pc}

00013082 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   13082:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   13084:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   13086:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   1308a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1308c:	7a05      	ldrb	r5, [r0, #8]
   1308e:	6844      	ldr	r4, [r0, #4]
   13090:	4435      	add	r5, r6
   13092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   13096:	42a3      	cmp	r3, r4
   13098:	d902      	bls.n	130a0 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   1309a:	f06f 0001 	mvn.w	r0, #1
}
   1309e:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   130a0:	795c      	ldrb	r4, [r3, #5]
   130a2:	428c      	cmp	r4, r1
   130a4:	d001      	beq.n	130aa <pinctrl_lookup_state+0x28>
		(*state)++;
   130a6:	3308      	adds	r3, #8
   130a8:	e7ef      	b.n	1308a <pinctrl_lookup_state+0x8>
			return 0;
   130aa:	2000      	movs	r0, #0
   130ac:	e7f7      	b.n	1309e <pinctrl_lookup_state+0x1c>

000130ae <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   130ae:	4668      	mov	r0, sp
   130b0:	f020 0107 	bic.w	r1, r0, #7
   130b4:	468d      	mov	sp, r1
   130b6:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   130b8:	f7ef f82a 	bl	2110 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   130bc:	f7f3 f8f4 	bl	62a8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   130c0:	f7f3 f9dc 	bl	647c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   130c4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   130c8:	4685      	mov	sp, r0
   130ca:	4770      	bx	lr

000130cc <mpsl_low_prio_work_handler>:
{
   130cc:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   130ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   130d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   130d6:	f7f4 ffcf 	bl	8078 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   130da:	f7f0 fde7 	bl	3cac <mpsl_low_priority_process>
}
   130de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   130e2:	f7f4 bfd1 	b.w	8088 <multithreading_lock_release>

000130e6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   130e6:	4668      	mov	r0, sp
   130e8:	f020 0107 	bic.w	r1, r0, #7
   130ec:	468d      	mov	sp, r1
   130ee:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   130f0:	f7ee ff84 	bl	1ffc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   130f4:	f7f3 f8d8 	bl	62a8 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   130f8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   130fc:	4685      	mov	sp, r0
   130fe:	4770      	bx	lr

00013100 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   13100:	4668      	mov	r0, sp
   13102:	f020 0107 	bic.w	r1, r0, #7
   13106:	468d      	mov	sp, r1
   13108:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1310a:	f7ed f8e1 	bl	2d0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1310e:	f7f3 f8cb 	bl	62a8 <_arch_isr_direct_pm>
   13112:	f7f3 f9b3 	bl	647c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   13116:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1311a:	4685      	mov	sp, r0
   1311c:	4770      	bx	lr

0001311e <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   1311e:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   13120:	f7f0 ff5f 	bl	3fe2 <mpsl_fem_init>

	return 0;
}
   13124:	2000      	movs	r0, #0
   13126:	bd08      	pop	{r3, pc}

00013128 <nrfx_clock_stop>:
	switch (domain) {
   13128:	2801      	cmp	r0, #1
   1312a:	d101      	bne.n	13130 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1312c:	f7ef be32 	b.w	2d94 <mpsl_clock_hfclk_release>
}
   13130:	4770      	bx	lr

00013132 <nrfx_clock_enable>:
}
   13132:	4770      	bx	lr

00013134 <nrfx_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   13134:	f7ef bc42 	b.w	29bc <MPSL_IRQ_CLOCK_Handler>

00013138 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   13138:	2000      	movs	r0, #0
   1313a:	4770      	bx	lr

0001313c <temp_nrf5_mpsl_sample_fetch>:
{
   1313c:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   1313e:	2939      	cmp	r1, #57	; 0x39
	struct temp_nrf5_mpsl_data *data = dev->data;
   13140:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   13142:	d001      	beq.n	13148 <temp_nrf5_mpsl_sample_fetch+0xc>
   13144:	290c      	cmp	r1, #12
   13146:	d104      	bne.n	13152 <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   13148:	f7ef ffe2 	bl	3110 <mpsl_temperature_get>
   1314c:	6020      	str	r0, [r4, #0]
	return 0;
   1314e:	2000      	movs	r0, #0
}
   13150:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   13152:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13156:	e7fb      	b.n	13150 <temp_nrf5_mpsl_sample_fetch+0x14>

00013158 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   13158:	f7fc bbbe 	b.w	f8d8 <nrf_cc3xx_platform_init>

0001315c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1315c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1315e:	f7f2 fedf 	bl	5f20 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   13162:	f7f2 ffb3 	bl	60cc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   13166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1316a:	f7fc bbb5 	b.w	f8d8 <nrf_cc3xx_platform_init>

0001316e <nrf_802154_clock_init>:
}
   1316e:	4770      	bx	lr

00013170 <nrf_802154_irq_init>:
{
   13170:	b513      	push	{r0, r1, r4, lr}
	if (prio < 0) {
   13172:	2900      	cmp	r1, #0
		flags |= IRQ_ZERO_LATENCY;
   13174:	bfae      	itee	ge
   13176:	2400      	movge	r4, #0
   13178:	2401      	movlt	r4, #1
   1317a:	2100      	movlt	r1, #0
static inline int
irq_connect_dynamic(unsigned int irq, unsigned int priority,
		    void (*routine)(const void *parameter),
		    const void *parameter, uint32_t flags)
{
	return arch_irq_connect_dynamic(irq, priority, routine, parameter,
   1317c:	9400      	str	r4, [sp, #0]
   1317e:	2300      	movs	r3, #0
   13180:	f7ff fd4b 	bl	12c1a <arch_irq_connect_dynamic>
}
   13184:	b002      	add	sp, #8
   13186:	bd10      	pop	{r4, pc}

00013188 <nrf_802154_irq_enable>:
	irq_enable(irqn);
   13188:	f7f3 b844 	b.w	6214 <arch_irq_enable>

0001318c <nrf_802154_irq_disable>:
	irq_disable(irqn);
   1318c:	f7f3 b850 	b.w	6230 <arch_irq_disable>

00013190 <nrf_802154_temperature_init>:
}
   13190:	4770      	bx	lr

00013192 <timer_handler>:
{
   13192:	b508      	push	{r3, lr}
	uint64_t curr_time = z_nrf_rtc_timer_read();
   13194:	f7f4 fcd0 	bl	7b38 <z_nrf_rtc_timer_read>
}
   13198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	nrf_802154_sl_timer_handler(curr_time);
   1319c:	f7fc b988 	b.w	f4b0 <nrf_802154_sl_timer_handler>

000131a0 <timer_start_at>:
{
   131a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	z_nrf_rtc_timer_set(timer->chan, target_time, timer->handler, NULL);
   131a2:	2100      	movs	r1, #0
   131a4:	9101      	str	r1, [sp, #4]
   131a6:	6801      	ldr	r1, [r0, #0]
   131a8:	9100      	str	r1, [sp, #0]
{
   131aa:	4604      	mov	r4, r0
	z_nrf_rtc_timer_set(timer->chan, target_time, timer->handler, NULL);
   131ac:	6900      	ldr	r0, [r0, #16]
{
   131ae:	4616      	mov	r6, r2
   131b0:	461d      	mov	r5, r3
	z_nrf_rtc_timer_set(timer->chan, target_time, timer->handler, NULL);
   131b2:	f7ff ff60 	bl	13076 <z_nrf_rtc_timer_set>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   131b6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   131ba:	b672      	cpsid	i
	timer->target_time = target_time;
   131bc:	e9c4 6502 	strd	r6, r5, [r4, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   131c0:	f383 8810 	msr	PRIMASK, r3
}
   131c4:	b002      	add	sp, #8
   131c6:	bd70      	pop	{r4, r5, r6, pc}

000131c8 <nrf_802154_platform_sl_lptimer_current_lpticks_get>:
	return z_nrf_rtc_timer_read();
   131c8:	f7f4 bcb6 	b.w	7b38 <z_nrf_rtc_timer_read>

000131cc <nrf_802154_platform_sl_lptimer_us_to_lpticks_convert>:
	return NRF_802154_SL_US_TO_RTC_TICKS(us, round_up);
   131cc:	f7fc b98a 	b.w	f4e4 <NRF_802154_SL_US_TO_RTC_TICKS>

000131d0 <nrf_802154_platform_sl_lptimer_lpticks_to_us_convert>:
	return NRF_802154_SL_RTC_TICKS_TO_US(lpticks);
   131d0:	f643 5209 	movw	r2, #15625	; 0x3d09
   131d4:	fba0 0302 	umull	r0, r3, r0, r2
   131d8:	fb02 3101 	mla	r1, r2, r1, r3
   131dc:	f240 13ff 	movw	r3, #511	; 0x1ff
   131e0:	18c0      	adds	r0, r0, r3
   131e2:	f141 0100 	adc.w	r1, r1, #0
   131e6:	0a40      	lsrs	r0, r0, #9
}
   131e8:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
   131ec:	0a49      	lsrs	r1, r1, #9
   131ee:	4770      	bx	lr

000131f0 <nrf_802154_platform_sl_lptimer_granularity_get>:
}
   131f0:	201f      	movs	r0, #31
   131f2:	4770      	bx	lr

000131f4 <nrf_802154_channel_set>:
{
   131f4:	b538      	push	{r3, r4, r5, lr}
   131f6:	4604      	mov	r4, r0
    bool changed = nrf_802154_pib_channel_get() != channel;
   131f8:	f7f6 fd4e 	bl	9c98 <nrf_802154_pib_channel_get>
   131fc:	4605      	mov	r5, r0
    nrf_802154_pib_channel_set(channel);
   131fe:	4620      	mov	r0, r4
   13200:	f7f6 fd50 	bl	9ca4 <nrf_802154_pib_channel_set>
    if (changed)
   13204:	42a5      	cmp	r5, r4
   13206:	d004      	beq.n	13212 <nrf_802154_channel_set+0x1e>
}
   13208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void)nrf_802154_request_channel_update(REQ_ORIG_HIGHER_LAYER);
   1320c:	2000      	movs	r0, #0
   1320e:	f000 bb54 	b.w	138ba <nrf_802154_request_channel_update>
}
   13212:	bd38      	pop	{r3, r4, r5, pc}

00013214 <nrf_802154_channel_get>:
    return nrf_802154_pib_channel_get();
   13214:	f7f6 bd40 	b.w	9c98 <nrf_802154_pib_channel_get>

00013218 <nrf_802154_temperature_changed>:
    nrf_802154_request_cca_cfg_update();
   13218:	f000 bb6b 	b.w	138f2 <nrf_802154_request_cca_cfg_update>

0001321c <nrf_802154_pan_id_set>:
    nrf_802154_pib_pan_id_set(p_pan_id);
   1321c:	f7f6 bd54 	b.w	9cc8 <nrf_802154_pib_pan_id_set>

00013220 <nrf_802154_extended_address_set>:
    nrf_802154_pib_extended_address_set(p_extended_address);
   13220:	f7f6 bd5e 	b.w	9ce0 <nrf_802154_pib_extended_address_set>

00013224 <nrf_802154_custom_part_of_radio_init>:
}
   13224:	4770      	bx	lr

00013226 <nrf_802154_tx_ack_started>:
}
   13226:	4770      	bx	lr

00013228 <nrf_802154_received_timestamp_raw>:
    result = nrf_802154_request_buffer_free(p_data);
   13228:	f000 bb2c 	b.w	13884 <nrf_802154_request_buffer_free>

0001322c <nrf_802154_receive_failed>:

__WEAK void nrf_802154_receive_failed(nrf_802154_rx_error_t error, uint32_t id)
{
    (void)error;
    (void)id;
}
   1322c:	4770      	bx	lr

0001322e <nrf_802154_energy_detected>:
}

__WEAK void nrf_802154_energy_detected(uint8_t result)
{
    (void)result;
}
   1322e:	4770      	bx	lr

00013230 <nrf_802154_energy_detection_failed>:

__WEAK void nrf_802154_energy_detection_failed(nrf_802154_ed_error_t error)
   13230:	4770      	bx	lr

00013232 <nrf_802154_cca_done>:
}

__WEAK void nrf_802154_cca_done(bool channel_free)
{
    (void)channel_free;
}
   13232:	4770      	bx	lr

00013234 <nrf_802154_cca_failed>:

__WEAK void nrf_802154_cca_failed(nrf_802154_cca_error_t error)
   13234:	4770      	bx	lr

00013236 <request_preconditions_for_state>:
{
   13236:	b508      	push	{r3, lr}
    nrf_802154_rsch_crit_sect_prio_request(min_required_rsch_prio(state));
   13238:	f7f5 fa2c 	bl	8694 <min_required_rsch_prio>
}
   1323c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_rsch_crit_sect_prio_request(min_required_rsch_prio(state));
   13240:	f000 bf26 	b.w	14090 <nrf_802154_rsch_crit_sect_prio_request>

00013244 <transmit_failed_notify>:
{
   13244:	b570      	push	{r4, r5, r6, lr}
   13246:	4604      	mov	r4, r0
   13248:	460d      	mov	r5, r1
   1324a:	4616      	mov	r6, r2
    if (nrf_802154_core_hooks_tx_failed(p_frame, error))
   1324c:	f7f6 fc3e 	bl	9acc <nrf_802154_core_hooks_tx_failed>
   13250:	b130      	cbz	r0, 13260 <transmit_failed_notify+0x1c>
        nrf_802154_notify_transmit_failed(p_frame, error, p_meta);
   13252:	4632      	mov	r2, r6
   13254:	4629      	mov	r1, r5
   13256:	4620      	mov	r0, r4
}
   13258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        nrf_802154_notify_transmit_failed(p_frame, error, p_meta);
   1325c:	f000 baa2 	b.w	137a4 <nrf_802154_notify_transmit_failed>
}
   13260:	bd70      	pop	{r4, r5, r6, pc}

00013262 <ack_is_requested>:
{
   13262:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool result = nrf_802154_frame_parser_data_init(p_frame,
   13264:	7801      	ldrb	r1, [r0, #0]
   13266:	3101      	adds	r1, #1
   13268:	466b      	mov	r3, sp
   1326a:	2201      	movs	r2, #1
   1326c:	b2c9      	uxtb	r1, r1
   1326e:	f000 f9ff 	bl	13670 <nrf_802154_frame_parser_data_init>
    return result && nrf_802154_frame_parser_ar_bit_is_set(&frame_data);
   13272:	b118      	cbz	r0, 1327c <ack_is_requested+0x1a>
    return (p_parser_data->p_frame[ACK_REQUEST_OFFSET] & ACK_REQUEST_BIT) ? true : false;
   13274:	9b00      	ldr	r3, [sp, #0]
   13276:	7858      	ldrb	r0, [r3, #1]
   13278:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1327c:	b007      	add	sp, #28
   1327e:	f85d fb04 	ldr.w	pc, [sp], #4

00013282 <rssi_last_measurement_get>:
{
   13282:	b508      	push	{r3, lr}
    uint8_t rssi_sample = nrf_802154_trx_rssi_last_sample_get();
   13284:	f7f7 f96c 	bl	a560 <nrf_802154_trx_rssi_last_sample_get>
    rssi_sample = nrf_802154_rssi_sample_corrected_get(rssi_sample);
   13288:	f000 f8eb 	bl	13462 <nrf_802154_rssi_sample_corrected_get>
    return -((int8_t)rssi_sample);
   1328c:	4240      	negs	r0, r0
}
   1328e:	b240      	sxtb	r0, r0
   13290:	bd08      	pop	{r3, pc}

00013292 <timer_coord_timestamp_get>:
{
   13292:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint64_t timestamp          = NRF_802154_NO_TIMESTAMP;
   13294:	2400      	movs	r4, #0
   13296:	2500      	movs	r5, #0
    bool     timestamp_received = nrf_802154_timer_coord_timestamp_get(&timestamp);
   13298:	4668      	mov	r0, sp
    uint64_t timestamp          = NRF_802154_NO_TIMESTAMP;
   1329a:	e9cd 4500 	strd	r4, r5, [sp]
    bool     timestamp_received = nrf_802154_timer_coord_timestamp_get(&timestamp);
   1329e:	f7fc f9c1 	bl	f624 <nrf_802154_timer_coord_timestamp_get>
    if (!timestamp_received)
   132a2:	b928      	cbnz	r0, 132b0 <timer_coord_timestamp_get+0x1e>
        timestamp = NRF_802154_NO_TIMESTAMP;
   132a4:	e9cd 4500 	strd	r4, r5, [sp]
}
   132a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   132ac:	b003      	add	sp, #12
   132ae:	bd30      	pop	{r4, r5, pc}
    else if (timestamp == NRF_802154_NO_TIMESTAMP)
   132b0:	e9dd 3200 	ldrd	r3, r2, [sp]
   132b4:	4313      	orrs	r3, r2
   132b6:	d1f7      	bne.n	132a8 <timer_coord_timestamp_get+0x16>
        timestamp++;
   132b8:	2201      	movs	r2, #1
   132ba:	2300      	movs	r3, #0
   132bc:	e9cd 2300 	strd	r2, r3, [sp]
   132c0:	e7f2      	b.n	132a8 <timer_coord_timestamp_get+0x16>

000132c2 <critical_section_enter_and_verify_timeslot_length>:
{
   132c2:	b508      	push	{r3, lr}
    bool result = nrf_802154_critical_section_enter();
   132c4:	f000 f878 	bl	133b8 <nrf_802154_critical_section_enter>
    if (result)
   132c8:	b120      	cbz	r0, 132d4 <critical_section_enter_and_verify_timeslot_length+0x12>
        if (!critical_section_can_be_processed_now())
   132ca:	f7f5 fac5 	bl	8858 <critical_section_can_be_processed_now>
   132ce:	b910      	cbnz	r0, 132d6 <critical_section_enter_and_verify_timeslot_length+0x14>
            nrf_802154_critical_section_exit();
   132d0:	f7f6 fc2e 	bl	9b30 <nrf_802154_critical_section_exit>
    bool result = nrf_802154_critical_section_enter();
   132d4:	2000      	movs	r0, #0
}
   132d6:	bd08      	pop	{r3, pc}

000132d8 <trx_abort>:
{
   132d8:	b510      	push	{r4, lr}
    trx_state_t trx_state       = nrf_802154_trx_state_get();
   132da:	f7f7 fb1d 	bl	a918 <nrf_802154_trx_state_get>
    switch (trx_state)
   132de:	2803      	cmp	r0, #3
    trx_state_t trx_state       = nrf_802154_trx_state_get();
   132e0:	4604      	mov	r4, r0
    switch (trx_state)
   132e2:	d001      	beq.n	132e8 <trx_abort+0x10>
   132e4:	2805      	cmp	r0, #5
   132e6:	d109      	bne.n	132fc <trx_abort+0x24>
    nrf_802154_trx_abort();
   132e8:	f7f7 fa5e 	bl	a7a8 <nrf_802154_trx_abort>
        uint32_t timestamp = nrf_802154_hp_timer_current_time_get();
   132ec:	f7f5 f8ae 	bl	844c <nrf_802154_hp_timer_current_time_get>
   132f0:	4601      	mov	r1, r0
        operation_terminated_update_total_times(trx_state, timestamp);
   132f2:	4620      	mov	r0, r4
}
   132f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        operation_terminated_update_total_times(trx_state, timestamp);
   132f8:	f7f5 bb16 	b.w	8928 <operation_terminated_update_total_times>
}
   132fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_trx_abort();
   13300:	f7f7 ba52 	b.w	a7a8 <nrf_802154_trx_abort>

00013304 <nrf_802154_trx_receive_ack_started>:
    nrf_802154_core_hooks_rx_ack_started();
   13304:	f000 b855 	b.w	133b2 <nrf_802154_core_hooks_rx_ack_started>

00013308 <nrf_802154_trx_go_idle_finished>:
{
   13308:	b508      	push	{r3, lr}
    sleep_init();
   1330a:	f7f5 fa15 	bl	8738 <sleep_init>
}
   1330e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    state_set(RADIO_STATE_SLEEP);
   13312:	2000      	movs	r0, #0
   13314:	f7f5 ba3c 	b.w	8790 <state_set>

00013318 <nrf_802154_trx_standalone_cca_finished>:
{
   13318:	b510      	push	{r4, lr}
   1331a:	4604      	mov	r4, r0
    state_set(RADIO_STATE_RX);
   1331c:	2002      	movs	r0, #2
   1331e:	f7f5 fa37 	bl	8790 <state_set>
    rx_init();
   13322:	f7f5 fb1b 	bl	895c <rx_init>
    nrf_802154_critical_section_nesting_allow();
   13326:	f7f6 fc69 	bl	9bfc <nrf_802154_critical_section_nesting_allow>
    nrf_802154_notify_cca(result);
   1332a:	4620      	mov	r0, r4
   1332c:	f000 fa40 	bl	137b0 <nrf_802154_notify_cca>
}
   13330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrf_802154_critical_section_nesting_deny();
   13334:	f7f6 bc1e 	b.w	9b74 <nrf_802154_critical_section_nesting_deny>

00013338 <nrf_802154_trx_transmit_frame_ccastarted>:
}
   13338:	4770      	bx	lr

0001333a <nrf_802154_core_cca>:
{
   1333a:	b538      	push	{r3, r4, r5, lr}
   1333c:	4605      	mov	r5, r0
    bool result = critical_section_enter_and_verify_timeslot_length();
   1333e:	f7ff ffc0 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>
    if (result)
   13342:	4604      	mov	r4, r0
   13344:	b168      	cbz	r0, 13362 <nrf_802154_core_cca+0x28>
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
   13346:	2201      	movs	r2, #1
   13348:	4611      	mov	r1, r2
   1334a:	4628      	mov	r0, r5
   1334c:	f7f5 fc54 	bl	8bf8 <current_operation_terminate>
        if (result)
   13350:	4604      	mov	r4, r0
   13352:	b120      	cbz	r0, 1335e <nrf_802154_core_cca+0x24>
            state_set(RADIO_STATE_CCA);
   13354:	2008      	movs	r0, #8
   13356:	f7f5 fa1b 	bl	8790 <state_set>
            cca_init();
   1335a:	f7f5 fb5f 	bl	8a1c <cca_init>
        nrf_802154_critical_section_exit();
   1335e:	f7f6 fbe7 	bl	9b30 <nrf_802154_critical_section_exit>
}
   13362:	4620      	mov	r0, r4
   13364:	bd38      	pop	{r3, r4, r5, pc}

00013366 <nrf_802154_core_continuous_carrier>:
{
   13366:	b538      	push	{r3, r4, r5, lr}
   13368:	4605      	mov	r5, r0
    bool result = critical_section_enter_and_verify_timeslot_length();
   1336a:	f7ff ffaa 	bl	132c2 <critical_section_enter_and_verify_timeslot_length>
    if (result)
   1336e:	4604      	mov	r4, r0
   13370:	b168      	cbz	r0, 1338e <nrf_802154_core_continuous_carrier+0x28>
        result = current_operation_terminate(term_lvl, REQ_ORIG_CORE, true);
   13372:	2201      	movs	r2, #1
   13374:	4611      	mov	r1, r2
   13376:	4628      	mov	r0, r5
   13378:	f7f5 fc3e 	bl	8bf8 <current_operation_terminate>
        if (result)
   1337c:	4604      	mov	r4, r0
   1337e:	b120      	cbz	r0, 1338a <nrf_802154_core_continuous_carrier+0x24>
            state_set(RADIO_STATE_CONTINUOUS_CARRIER);
   13380:	2009      	movs	r0, #9
   13382:	f7f5 fa05 	bl	8790 <state_set>
            continuous_carrier_init();
   13386:	f7f5 fb5b 	bl	8a40 <continuous_carrier_init>
        nrf_802154_critical_section_exit();
   1338a:	f7f6 fbd1 	bl	9b30 <nrf_802154_critical_section_exit>
}
   1338e:	4620      	mov	r0, r4
   13390:	bd38      	pop	{r3, r4, r5, pc}

00013392 <nrf_802154_core_hooks_pre_transmission>:
        result = m_pre_transmission_hooks[i](p_frame, p_params, notify_function);
   13392:	f7f8 bc55 	b.w	bc40 <nrf_802154_ifs_pretransmission>

00013396 <nrf_802154_core_hooks_tx_setup>:
}
   13396:	2001      	movs	r0, #1
   13398:	4770      	bx	lr

0001339a <nrf_802154_core_hooks_transmitted>:
{
   1339a:	b510      	push	{r4, lr}
   1339c:	4604      	mov	r4, r0
        m_transmitted_hooks[i](p_frame);
   1339e:	f000 f9ad 	bl	136fc <nrf_802154_ack_timeout_transmitted_hook>
   133a2:	4620      	mov	r0, r4
}
   133a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_transmitted_hooks[i](p_frame);
   133a8:	f7f8 bce0 	b.w	bd6c <nrf_802154_ifs_transmitted_hook>

000133ac <nrf_802154_core_hooks_tx_ack_failed>:
}
   133ac:	4770      	bx	lr

000133ae <nrf_802154_core_hooks_rx_started>:
        if (m_rx_started_hooks[i] == NULL)
        {
            break;
        }

        m_rx_started_hooks[i](p_frame);
   133ae:	f7f8 b9ef 	b.w	b790 <nrf_802154_delayed_trx_rx_started_hook>

000133b2 <nrf_802154_core_hooks_rx_ack_started>:
        if (m_rx_ack_started_hooks[i] == NULL)
        {
            break;
        }

        m_rx_ack_started_hooks[i]();
   133b2:	f000 b9a5 	b.w	13700 <nrf_802154_ack_timeout_rx_ack_started_hook>

000133b6 <nrf_802154_core_hooks_tx_ack_started>:
            break;
        }

        m_tx_ack_started_hooks[i](p_ack);
    }
}
   133b6:	4770      	bx	lr

000133b8 <nrf_802154_critical_section_enter>:
    result = critical_section_enter(false);
   133b8:	2000      	movs	r0, #0
   133ba:	f7f6 bbef 	b.w	9b9c <critical_section_enter>

000133be <nrf_802154_critical_section_forcefully_enter>:
    critical_section_entered = critical_section_enter(true);
   133be:	2001      	movs	r0, #1
   133c0:	f7f6 bbec 	b.w	9b9c <critical_section_enter>

000133c4 <nrf_802154_debug_init>:
#if ENABLE_DEBUG_LOG
#warning attempt to use deprecated ENABLE_DEBUG_LOG switch
// When linking with SL use NRF_802154_SL_ENABLE_DEBUG_LOG instead
#endif // ENABLE_DEBUG_LOG

    nrf_802154_sl_log_init();
   133c4:	f000 bdd1 	b.w	13f6a <nrf_802154_sl_log_init>

000133c8 <nrf_802154_queue_init>:
    assert(item_size != 0U);

    /* Due uint8_t type of nrf_802154_queue_t::item_size */
    assert(item_size <= UINT8_MAX);

    size_t capacity = memory_size / item_size;
   133c8:	fbb2 f2f3 	udiv	r2, r2, r3
    /* Due uint8_t type of nrf_802154_queue_t::capacity */
    assert(capacity <= UINT8_MAX);

    p_queue->p_memory  = p_memory;
    p_queue->capacity  = capacity;
    p_queue->item_size = item_size;
   133cc:	7103      	strb	r3, [r0, #4]
    p_queue->wridx     = 0U;
   133ce:	2300      	movs	r3, #0
   133d0:	7183      	strb	r3, [r0, #6]
    p_queue->p_memory  = p_memory;
   133d2:	6001      	str	r1, [r0, #0]
    p_queue->capacity  = capacity;
   133d4:	7142      	strb	r2, [r0, #5]
    p_queue->rdidx     = 0U;
   133d6:	71c3      	strb	r3, [r0, #7]
}
   133d8:	4770      	bx	lr

000133da <nrf_802154_queue_push_begin>:

void * nrf_802154_queue_push_begin(const nrf_802154_queue_t * p_queue)
{
    return idx2ptr(p_queue, p_queue->wridx);
   133da:	7982      	ldrb	r2, [r0, #6]
    return ((uint8_t *)(p_queue->p_memory)) + idx * p_queue->item_size;
   133dc:	7901      	ldrb	r1, [r0, #4]
   133de:	6800      	ldr	r0, [r0, #0]
}
   133e0:	fb01 0002 	mla	r0, r1, r2, r0
   133e4:	4770      	bx	lr

000133e6 <nrf_802154_queue_push_commit>:

void nrf_802154_queue_push_commit(nrf_802154_queue_t * p_queue)
{
    p_queue->wridx = increment_modulo(p_queue->wridx, p_queue->capacity);
   133e6:	7983      	ldrb	r3, [r0, #6]
    if (v >= wrap_at_value)
   133e8:	7942      	ldrb	r2, [r0, #5]
    v++;
   133ea:	3301      	adds	r3, #1
   133ec:	b2db      	uxtb	r3, r3
        v = 0U;
   133ee:	429a      	cmp	r2, r3
   133f0:	bf98      	it	ls
   133f2:	2300      	movls	r3, #0
    p_queue->wridx = increment_modulo(p_queue->wridx, p_queue->capacity);
   133f4:	7183      	strb	r3, [r0, #6]
}
   133f6:	4770      	bx	lr

000133f8 <nrf_802154_queue_pop_begin>:

void * nrf_802154_queue_pop_begin(const nrf_802154_queue_t * p_queue)
{
    return idx2ptr(p_queue, p_queue->rdidx);
   133f8:	79c2      	ldrb	r2, [r0, #7]
    return ((uint8_t *)(p_queue->p_memory)) + idx * p_queue->item_size;
   133fa:	7901      	ldrb	r1, [r0, #4]
   133fc:	6800      	ldr	r0, [r0, #0]
}
   133fe:	fb01 0002 	mla	r0, r1, r2, r0
   13402:	4770      	bx	lr

00013404 <nrf_802154_queue_pop_commit>:

void nrf_802154_queue_pop_commit(nrf_802154_queue_t * p_queue)
{
    p_queue->rdidx = increment_modulo(p_queue->rdidx, p_queue->capacity);
   13404:	79c3      	ldrb	r3, [r0, #7]
    if (v >= wrap_at_value)
   13406:	7942      	ldrb	r2, [r0, #5]
    v++;
   13408:	3301      	adds	r3, #1
   1340a:	b2db      	uxtb	r3, r3
        v = 0U;
   1340c:	429a      	cmp	r2, r3
   1340e:	bf98      	it	ls
   13410:	2300      	movls	r3, #0
    p_queue->rdidx = increment_modulo(p_queue->rdidx, p_queue->capacity);
   13412:	71c3      	strb	r3, [r0, #7]
}
   13414:	4770      	bx	lr

00013416 <nrf_802154_rssi_sample_temp_corr_value_get>:

#if defined(NRF52_SERIES)

/* Implementation for nRF52 family. */
int8_t nrf_802154_rssi_sample_temp_corr_value_get(uint8_t rssi_sample)
{
   13416:	b508      	push	{r3, lr}
    (void)rssi_sample;

    int8_t temp = nrf_802154_temperature_get();
   13418:	f7f4 ffc4 	bl	83a4 <nrf_802154_temperature_get>
    int8_t result;

#if defined(NRF52840_XXAA) || defined(NRF52833_XXAA)
    /* Implementation based on Errata 153 for nRF52840 SoC and Errata 225 for nRF52833 SoCs.. */
    if (temp <= -30)
   1341c:	f110 0f1d 	cmn.w	r0, #29
   13420:	db11      	blt.n	13446 <nrf_802154_rssi_sample_temp_corr_value_get+0x30>
    {
        result = 3;
    }
    else if (temp <= -10)
   13422:	f110 0f09 	cmn.w	r0, #9
   13426:	db10      	blt.n	1344a <nrf_802154_rssi_sample_temp_corr_value_get+0x34>
    {
        result = 2;
    }
    else if (temp <= 10)
   13428:	280a      	cmp	r0, #10
   1342a:	dd10      	ble.n	1344e <nrf_802154_rssi_sample_temp_corr_value_get+0x38>
    {
        result = 1;
    }
    else if (temp <= 30)
   1342c:	281e      	cmp	r0, #30
   1342e:	dd10      	ble.n	13452 <nrf_802154_rssi_sample_temp_corr_value_get+0x3c>
    {
        result = 0;
    }
    else if (temp <= 50)
   13430:	2832      	cmp	r0, #50	; 0x32
   13432:	dd10      	ble.n	13456 <nrf_802154_rssi_sample_temp_corr_value_get+0x40>
    {
        result = -1;
    }
    else if (temp <= 70)
   13434:	2846      	cmp	r0, #70	; 0x46
   13436:	dd11      	ble.n	1345c <nrf_802154_rssi_sample_temp_corr_value_get+0x46>
    {
        result = -2;
    }
    else if (temp <= 85)
    {
        result = -3;
   13438:	2855      	cmp	r0, #85	; 0x55
   1343a:	bfcc      	ite	gt
   1343c:	f06f 0003 	mvngt.w	r0, #3
   13440:	f06f 0002 	mvnle.w	r0, #2
#else
    /* Implementation for other SoCs from nRF52 family */
    result = 0;
#endif
    return result;
}
   13444:	bd08      	pop	{r3, pc}
        result = 3;
   13446:	2003      	movs	r0, #3
   13448:	e7fc      	b.n	13444 <nrf_802154_rssi_sample_temp_corr_value_get+0x2e>
        result = 2;
   1344a:	2002      	movs	r0, #2
   1344c:	e7fa      	b.n	13444 <nrf_802154_rssi_sample_temp_corr_value_get+0x2e>
        result = 1;
   1344e:	2001      	movs	r0, #1
   13450:	e7f8      	b.n	13444 <nrf_802154_rssi_sample_temp_corr_value_get+0x2e>
        result = 0;
   13452:	2000      	movs	r0, #0
   13454:	e7f6      	b.n	13444 <nrf_802154_rssi_sample_temp_corr_value_get+0x2e>
        result = -1;
   13456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1345a:	e7f3      	b.n	13444 <nrf_802154_rssi_sample_temp_corr_value_get+0x2e>
        result = -2;
   1345c:	f06f 0001 	mvn.w	r0, #1
   13460:	e7f0      	b.n	13444 <nrf_802154_rssi_sample_temp_corr_value_get+0x2e>

00013462 <nrf_802154_rssi_sample_corrected_get>:
#else
#error Unsupported chip family
#endif

uint8_t nrf_802154_rssi_sample_corrected_get(uint8_t rssi_sample)
{
   13462:	b510      	push	{r4, lr}
   13464:	4604      	mov	r4, r0
    return rssi_sample + nrf_802154_rssi_sample_temp_corr_value_get(rssi_sample);
   13466:	f7ff ffd6 	bl	13416 <nrf_802154_rssi_sample_temp_corr_value_get>
   1346a:	4420      	add	r0, r4
}
   1346c:	b2c0      	uxtb	r0, r0
   1346e:	bd10      	pop	{r4, pc}

00013470 <nrf_802154_rssi_lqi_corrected_get>:

uint8_t nrf_802154_rssi_lqi_corrected_get(uint8_t lqi)
{
   13470:	b510      	push	{r4, lr}
   13472:	4604      	mov	r4, r0
    return lqi - nrf_802154_rssi_sample_temp_corr_value_get(lqi);
   13474:	f7ff ffcf 	bl	13416 <nrf_802154_rssi_sample_temp_corr_value_get>
   13478:	1a20      	subs	r0, r4, r0
}
   1347a:	b2c0      	uxtb	r0, r0
   1347c:	bd10      	pop	{r4, pc}

0001347e <nrf_802154_rssi_ed_corrected_get>:

int16_t nrf_802154_rssi_ed_corrected_get(int16_t ed)
{
   1347e:	b510      	push	{r4, lr}
   13480:	4604      	mov	r4, r0
    return ed - nrf_802154_rssi_sample_temp_corr_value_get(ed);
   13482:	b2c0      	uxtb	r0, r0
   13484:	f7ff ffc7 	bl	13416 <nrf_802154_rssi_sample_temp_corr_value_get>
   13488:	1a20      	subs	r0, r4, r0
}
   1348a:	b200      	sxth	r0, r0
   1348c:	bd10      	pop	{r4, pc}

0001348e <nrf_802154_rssi_cca_ed_threshold_corrected_get>:

uint8_t nrf_802154_rssi_cca_ed_threshold_corrected_get(uint8_t cca_ed)
   1348e:	f7ff bfef 	b.w	13470 <nrf_802154_rssi_lqi_corrected_get>

00013492 <nrf_802154_rssi_ed_sample_convert>:
{
    return cca_ed - nrf_802154_rssi_sample_temp_corr_value_get(cca_ed);
}

uint8_t nrf_802154_rssi_ed_sample_convert(uint8_t ed_sample)
{
   13492:	b508      	push	{r3, lr}
    int16_t result;

    result = nrf_802154_rssi_ed_corrected_get(ed_sample);
   13494:	f7ff fff3 	bl	1347e <nrf_802154_rssi_ed_corrected_get>
    result = ED_RESULT_MAX * (result - EDSAMPLE_MIN_REPORTED_VALUE) /
   13498:	3811      	subs	r0, #17
   1349a:	232e      	movs	r3, #46	; 0x2e
   1349c:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   134a0:	fb90 f0f3 	sdiv	r0, r0, r3
    if (result < 0)
    {
        result = 0;
    }

    if (result > ED_RESULT_MAX)
   134a4:	b200      	sxth	r0, r0
    {
        result = ED_RESULT_MAX;
    }

    return (uint8_t)result;
   134a6:	f380 0008 	usat	r0, #8, r0
}
   134aa:	b2c0      	uxtb	r0, r0
   134ac:	bd08      	pop	{r3, pc}

000134ae <swi_irq_handler>:
{
   134ae:	b508      	push	{r3, lr}
    nrf_802154_trx_swi_irq_handler();
   134b0:	f7f7 fc74 	bl	ad9c <nrf_802154_trx_swi_irq_handler>
    nrf_802154_notification_swi_irq_handler();
   134b4:	f7f9 fa20 	bl	c8f8 <nrf_802154_notification_swi_irq_handler>
    nrf_802154_request_swi_irq_handler();
   134b8:	f7f9 fab4 	bl	ca24 <nrf_802154_request_swi_irq_handler>
}
   134bc:	bd08      	pop	{r3, pc}

000134be <txframe_finish_disable_ppis>:
    nrf_802154_trx_ppi_for_ramp_up_clear(cca ? NRF_RADIO_TASK_RXEN : NRF_RADIO_TASK_TXEN, false);
   134be:	0080      	lsls	r0, r0, #2
   134c0:	2100      	movs	r1, #0
   134c2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
   134c6:	f7f7 bcd5 	b.w	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>

000134ca <rxframe_finish_disable_ppis>:
{
   134ca:	b508      	push	{r3, lr}
    nrf_802154_trx_ppi_for_ramp_up_clear(NRF_RADIO_TASK_RXEN, true);
   134cc:	2004      	movs	r0, #4
   134ce:	2101      	movs	r1, #1
   134d0:	f7f7 fcd0 	bl	ae74 <nrf_802154_trx_ppi_for_ramp_up_clear>
}
   134d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_trx_ppi_for_radio_sync_clear(EGU_SYNC_TASK);
   134d8:	200c      	movs	r0, #12
   134da:	f7f7 bd63 	b.w	afa4 <nrf_802154_trx_ppi_for_radio_sync_clear>

000134de <nrf_802154_trx_init>:
{
   134de:	b508      	push	{r3, lr}
    nrf_802154_trx_module_reset();
   134e0:	f7f6 fdbc 	bl	a05c <nrf_802154_trx_module_reset>
}
   134e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_swi_init();
   134e8:	f7f6 bc5c 	b.w	9da4 <nrf_802154_swi_init>

000134ec <nrf_802154_trx_channel_set>:
    channel_set(channel);
   134ec:	f7f6 bd4a 	b.w	9f84 <channel_set>

000134f0 <nrf_802154_trx_cca_configuration_update>:
    cca_configuration_update();
   134f0:	f7f6 bd2c 	b.w	9f4c <cca_configuration_update>

000134f4 <nrf_802154_trx_ppi_for_enable>:
}
   134f4:	4770      	bx	lr

000134f6 <nrf_802154_trx_ppi_for_disable>:
void nrf_802154_trx_ppi_for_disable(void)
   134f6:	4770      	bx	lr

000134f8 <nrf_802154_trx_ppi_for_ramp_up_propagation_delay_wait>:
    __ASM("nop");
   134f8:	bf00      	nop
    __ASM("nop");
   134fa:	bf00      	nop
    __ASM("nop");
   134fc:	bf00      	nop
    __ASM("nop");
   134fe:	bf00      	nop
    __ASM("nop");
   13500:	bf00      	nop
    __ASM("nop");
   13502:	bf00      	nop
}
   13504:	4770      	bx	lr

00013506 <nrf_802154_tx_power_convert_metadata_to_tx_power_split>:

int8_t nrf_802154_tx_power_convert_metadata_to_tx_power_split(
    uint8_t                                 channel,
    nrf_802154_tx_power_metadata_t          tx_power,
    nrf_802154_fal_tx_power_split_t * const p_tx_power_split)
{
   13506:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13508:	f8ad 1004 	strh.w	r1, [sp, #4]
    int8_t power_unconstrained =
   1350c:	b2c9      	uxtb	r1, r1
{
   1350e:	4604      	mov	r4, r0
   13510:	4615      	mov	r5, r2
    int8_t power_unconstrained =
   13512:	b141      	cbz	r1, 13526 <nrf_802154_tx_power_convert_metadata_to_tx_power_split+0x20>
   13514:	f99d 1005 	ldrsb.w	r1, [sp, #5]
        tx_power.use_metadata_value ? tx_power.power : nrf_802154_pib_tx_power_get();

    return nrf_802154_fal_tx_power_split(channel, power_unconstrained, p_tx_power_split);
   13518:	462a      	mov	r2, r5
   1351a:	4620      	mov	r0, r4
}
   1351c:	b003      	add	sp, #12
   1351e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return nrf_802154_fal_tx_power_split(channel, power_unconstrained, p_tx_power_split);
   13522:	f7f0 bd0e 	b.w	3f42 <nrf_802154_fal_tx_power_split>
        tx_power.use_metadata_value ? tx_power.power : nrf_802154_pib_tx_power_get();
   13526:	f7f6 fbc5 	bl	9cb4 <nrf_802154_pib_tx_power_get>
   1352a:	4601      	mov	r1, r0
   1352c:	e7f4      	b.n	13518 <nrf_802154_tx_power_convert_metadata_to_tx_power_split+0x12>

0001352e <nrf_802154_tx_power_split_pib_power_get>:

int8_t nrf_802154_tx_power_split_pib_power_get(
    nrf_802154_fal_tx_power_split_t * const p_split_power)
{
   1352e:	b538      	push	{r3, r4, r5, lr}
   13530:	4605      	mov	r5, r0
    return nrf_802154_fal_tx_power_split(nrf_802154_pib_channel_get(),
   13532:	f7f6 fbb1 	bl	9c98 <nrf_802154_pib_channel_get>
   13536:	4604      	mov	r4, r0
   13538:	f7f6 fbbc 	bl	9cb4 <nrf_802154_pib_tx_power_get>
   1353c:	462a      	mov	r2, r5
   1353e:	4601      	mov	r1, r0
   13540:	4620      	mov	r0, r4
                                         nrf_802154_pib_tx_power_get(),
                                         p_split_power);
}
   13542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return nrf_802154_fal_tx_power_split(nrf_802154_pib_channel_get(),
   13546:	f7f0 bcfc 	b.w	3f42 <nrf_802154_fal_tx_power_split>

0001354a <dly_op_state_set>:
    switch (p_dly_op_data->op)
   1354a:	7a03      	ldrb	r3, [r0, #8]
   1354c:	2b01      	cmp	r3, #1
   1354e:	d901      	bls.n	13554 <dly_op_state_set+0xa>
    bool result = false;
   13550:	2000      	movs	r0, #0
   13552:	4770      	bx	lr
  __ASM volatile ("dmb 0xF":::"memory");
   13554:	f3bf 8f5f 	dmb	sy
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
   13558:	e8d0 3f4f 	ldrexb	r3, [r0]
        if ( old_val != *p_expected)
   1355c:	b2db      	uxtb	r3, r3
   1355e:	428b      	cmp	r3, r1
   13560:	d002      	beq.n	13568 <dly_op_state_set+0x1e>
  __ASM volatile ("clrex" ::: "memory");
   13562:	f3bf 8f2f 	clrex
            return false;
   13566:	e7f3      	b.n	13550 <dly_op_state_set+0x6>
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   13568:	e8c0 2f43 	strexb	r3, r2, [r0]
    while (__STREXB(desired, (volatile uint8_t *)p_obj));
   1356c:	2b00      	cmp	r3, #0
   1356e:	d1f3      	bne.n	13558 <dly_op_state_set+0xe>
  __ASM volatile ("dmb 0xF":::"memory");
   13570:	f3bf 8f5f 	dmb	sy
    return true;
   13574:	2001      	movs	r0, #1
}
   13576:	4770      	bx	lr

00013578 <available_dly_ts_slot_from_pool_get>:
    for (uint32_t i = 0; i < pool_len; i++)
   13578:	2358      	movs	r3, #88	; 0x58
{
   1357a:	b570      	push	{r4, r5, r6, lr}
   1357c:	4604      	mov	r4, r0
   1357e:	fb03 0501 	mla	r5, r3, r1, r0
    for (uint32_t i = 0; i < pool_len; i++)
   13582:	42ac      	cmp	r4, r5
   13584:	d101      	bne.n	1358a <available_dly_ts_slot_from_pool_get+0x12>
    return NULL;
   13586:	2600      	movs	r6, #0
   13588:	e008      	b.n	1359c <available_dly_ts_slot_from_pool_get+0x24>
        if (dly_op_state_set(&p_dly_op_data_pool[i],
   1358a:	4620      	mov	r0, r4
   1358c:	2202      	movs	r2, #2
   1358e:	2101      	movs	r1, #1
   13590:	f7ff ffdb 	bl	1354a <dly_op_state_set>
   13594:	4626      	mov	r6, r4
   13596:	3458      	adds	r4, #88	; 0x58
   13598:	2800      	cmp	r0, #0
   1359a:	d0f2      	beq.n	13582 <available_dly_ts_slot_from_pool_get+0xa>
}
   1359c:	4630      	mov	r0, r6
   1359e:	bd70      	pop	{r4, r5, r6, pc}

000135a0 <notify_rx_timeout>:
{
   135a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dly_op_data_t * p_dly_op_data = (dly_op_data_t *)(p_timer->user_data.p_pointer);
   135a2:	6984      	ldr	r4, [r0, #24]
    uint64_t        now           = nrf_802154_sl_timer_current_time_get();
   135a4:	f000 fd95 	bl	140d2 <nrf_802154_sl_timer_current_time_get>
    uint64_t        sof_timestamp = p_dly_op_data->rx.extension_frame.sof_timestamp;
   135a8:	e9d4 6710 	ldrd	r6, r7, [r4, #64]	; 0x40
   135ac:	f3bf 8f5f 	dmb	sy
    uint8_t  psdu_length   = p_dly_op_data->rx.extension_frame.psdu_length;
   135b0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    bool     ack_requested = p_dly_op_data->rx.extension_frame.ack_requested;
   135b4:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SYMBOLS_FROM_OCTETS(PHR_SIZE));
   135b8:	3301      	adds	r3, #1
   135ba:	015b      	lsls	r3, r3, #5
    if (ack_requested)
   135bc:	b97a      	cbnz	r2, 135de <notify_rx_timeout+0x3e>
        us_time += PHY_US_TIME_FROM_SYMBOLS(PHY_SHR_SYMBOLS);
   135be:	33a0      	adds	r3, #160	; 0xa0
    if (nrf_802154_sl_time64_is_in_future(now, sof_timestamp + frame_length))
   135c0:	199d      	adds	r5, r3, r6
   135c2:	f147 0200 	adc.w	r2, r7, #0
   135c6:	42a8      	cmp	r0, r5
   135c8:	4191      	sbcs	r1, r2
   135ca:	d20b      	bcs.n	135e4 <notify_rx_timeout+0x44>
        p_dly_op_data->rx.timeout_timer.trigger_time = sof_timestamp + frame_length;
   135cc:	e9c4 5208 	strd	r5, r2, [r4, #32]
    uint32_t frame_length  = nrf_802154_rx_duration_get(psdu_length, ack_requested);
   135d0:	63a3      	str	r3, [r4, #56]	; 0x38
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
   135d2:	f104 0010 	add.w	r0, r4, #16
}
   135d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        ret = nrf_802154_sl_timer_add(&p_dly_op_data->rx.timeout_timer);
   135da:	f7fb bf37 	b.w	f44c <nrf_802154_sl_timer_add>
        us_time += PHY_US_TIME_FROM_SYMBOLS(A_TURNAROUND_TIME_SYMBOLS +
   135de:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   135e2:	e7ed      	b.n	135c0 <notify_rx_timeout+0x20>
        bool notified = nrf_802154_notify_receive_failed(
   135e4:	6861      	ldr	r1, [r4, #4]
   135e6:	2200      	movs	r2, #0
   135e8:	2008      	movs	r0, #8
   135ea:	f000 f8ce 	bl	1378a <nrf_802154_notify_receive_failed>
        p_dly_op_data->id = NRF_802154_RESERVED_INVALID_ID;
   135ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   135f2:	6063      	str	r3, [r4, #4]
        bool result = dly_op_state_set(p_dly_op_data,
   135f4:	4620      	mov	r0, r4
   135f6:	2201      	movs	r2, #1
}
   135f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        bool result = dly_op_state_set(p_dly_op_data,
   135fc:	2104      	movs	r1, #4
   135fe:	f7ff bfa4 	b.w	1354a <dly_op_state_set>

00013602 <nrf_802154_frame_parser_ie_iterator_end>:
 * @returns  Identifier of currently iterated information element.
 *
 */
static inline uint8_t nrf_802154_frame_parser_ie_id_get(const uint8_t * p_ie_iterator)
{
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
   13602:	7803      	ldrb	r3, [r0, #0]
{
    uint8_t ie_id = nrf_802154_frame_parser_ie_id_get(p_ie_iterator);

    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
            ((ie_id == IE_HT1) || (ie_id == IE_HT2)))
           || (p_ie_iterator >= p_end_addr);
   13604:	065a      	lsls	r2, r3, #25
   13606:	d107      	bne.n	13618 <nrf_802154_frame_parser_ie_iterator_end+0x16>
    return (p_ie_iterator[IE_ID_OFFSET_0] >> 7) | (p_ie_iterator[IE_ID_OFFSET_1] << 1);
   13608:	7842      	ldrb	r2, [r0, #1]
   1360a:	09db      	lsrs	r3, r3, #7
   1360c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            ((ie_id == IE_HT1) || (ie_id == IE_HT2)))
   13610:	3b7e      	subs	r3, #126	; 0x7e
    return ((nrf_802154_frame_parser_ie_length_get(p_ie_iterator) == 0) &&
   13612:	b2db      	uxtb	r3, r3
   13614:	2b01      	cmp	r3, #1
   13616:	d904      	bls.n	13622 <nrf_802154_frame_parser_ie_iterator_end+0x20>
           || (p_ie_iterator >= p_end_addr);
   13618:	4288      	cmp	r0, r1
   1361a:	bf34      	ite	cc
   1361c:	2000      	movcc	r0, #0
   1361e:	2001      	movcs	r0, #1
   13620:	4770      	bx	lr
   13622:	2001      	movs	r0, #1
}
   13624:	4770      	bx	lr

00013626 <mic_size_get>:
    return p_parser_data->mhr.aux_sec_hdr.sec_ctrl_offset;
   13626:	7a83      	ldrb	r3, [r0, #10]
    if (offset == NRF_802154_FRAME_PARSER_INVALID_OFFSET)
   13628:	2bff      	cmp	r3, #255	; 0xff
   1362a:	d012      	beq.n	13652 <mic_size_get+0x2c>
    return p_parser_data->p_frame[offset] & SECURITY_LEVEL_MASK;
   1362c:	6802      	ldr	r2, [r0, #0]
   1362e:	5cd2      	ldrb	r2, [r2, r3]
   13630:	2301      	movs	r3, #1
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_parser_data))
   13632:	f002 0207 	and.w	r2, r2, #7
   13636:	4093      	lsls	r3, r2
   13638:	f013 0f22 	tst.w	r3, #34	; 0x22
   1363c:	d10b      	bne.n	13656 <mic_size_get+0x30>
   1363e:	f013 0f44 	tst.w	r3, #68	; 0x44
   13642:	d10a      	bne.n	1365a <mic_size_get+0x34>
   13644:	f013 0f88 	tst.w	r3, #136	; 0x88
   13648:	bf14      	ite	ne
   1364a:	2001      	movne	r0, #1
   1364c:	2000      	moveq	r0, #0
   1364e:	0100      	lsls	r0, r0, #4
   13650:	4770      	bx	lr
            return 0;
   13652:	2000      	movs	r0, #0
   13654:	4770      	bx	lr
            return MIC_32_SIZE;
   13656:	2004      	movs	r0, #4
   13658:	4770      	bx	lr
    switch (nrf_802154_frame_parser_sec_ctrl_sec_lvl_get(p_parser_data))
   1365a:	2008      	movs	r0, #8
}
   1365c:	4770      	bx	lr

0001365e <key_source_size_get>:
    switch (key_id_mode)
   1365e:	2802      	cmp	r0, #2
   13660:	d004      	beq.n	1366c <key_source_size_get+0xe>
   13662:	1ec3      	subs	r3, r0, #3
   13664:	4258      	negs	r0, r3
   13666:	4158      	adcs	r0, r3
   13668:	00c0      	lsls	r0, r0, #3
   1366a:	4770      	bx	lr
   1366c:	2004      	movs	r0, #4
}
   1366e:	4770      	bx	lr

00013670 <nrf_802154_frame_parser_data_init>:

bool nrf_802154_frame_parser_data_init(const uint8_t                  * p_frame,
                                       uint8_t                          valid_data_len,
                                       nrf_802154_frame_parser_level_t  requested_parse_level,
                                       nrf_802154_frame_parser_data_t * p_parser_data)
{
   13670:	b538      	push	{r3, r4, r5, lr}
   13672:	4615      	mov	r5, r2
   13674:	461c      	mov	r4, r3
    if (p_frame == NULL)
   13676:	b1d0      	cbz	r0, 136ae <nrf_802154_frame_parser_data_init+0x3e>
    {
        return false;
    }

    p_parser_data->p_frame        = p_frame;
   13678:	6018      	str	r0, [r3, #0]
    p_parser_data->valid_data_len = valid_data_len;
   1367a:	7159      	strb	r1, [r3, #5]
    p_parser_data->parse_level    = PARSE_LEVEL_NONE;
   1367c:	2300      	movs	r3, #0
   1367e:	7123      	strb	r3, [r4, #4]

    memset(&p_parser_data->mhr, NRF_802154_FRAME_PARSER_INVALID_OFFSET, sizeof(p_parser_data->mhr));
   13680:	220a      	movs	r2, #10
   13682:	21ff      	movs	r1, #255	; 0xff
   13684:	1da0      	adds	r0, r4, #6
   13686:	f7ff fb2c 	bl	12ce2 <memset>
    memset(&p_parser_data->mac_payload,
   1368a:	2201      	movs	r2, #1
   1368c:	21ff      	movs	r1, #255	; 0xff
   1368e:	f104 0010 	add.w	r0, r4, #16
   13692:	f7ff fb26 	bl	12ce2 <memset>
           NRF_802154_FRAME_PARSER_INVALID_OFFSET,
           sizeof(p_parser_data->mac_payload));
    memset(&p_parser_data->helper,
   13696:	21ff      	movs	r1, #255	; 0xff
   13698:	f104 0011 	add.w	r0, r4, #17
   1369c:	2207      	movs	r2, #7
   1369e:	f7ff fb20 	bl	12ce2 <memset>
           NRF_802154_FRAME_PARSER_INVALID_OFFSET,
           sizeof(p_parser_data->helper));

    return parse_state_advance(p_parser_data, requested_parse_level);
   136a2:	4629      	mov	r1, r5
   136a4:	4620      	mov	r0, r4
}
   136a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return parse_state_advance(p_parser_data, requested_parse_level);
   136aa:	f7f8 b947 	b.w	b93c <parse_state_advance>
}
   136ae:	bd38      	pop	{r3, r4, r5, pc}

000136b0 <nrf_802154_frame_parser_valid_data_extend>:

bool nrf_802154_frame_parser_valid_data_extend(nrf_802154_frame_parser_data_t * p_parser_data,
                                               uint8_t                          valid_data_len,
                                               nrf_802154_frame_parser_level_t  requested_parse_level)
{
   136b0:	460b      	mov	r3, r1
   136b2:	4611      	mov	r1, r2
    if (valid_data_len > p_parser_data->valid_data_len)
   136b4:	7942      	ldrb	r2, [r0, #5]
   136b6:	429a      	cmp	r2, r3
    {
        p_parser_data->valid_data_len = valid_data_len;
   136b8:	bf38      	it	cc
   136ba:	7143      	strbcc	r3, [r0, #5]
    }

    return parse_state_advance(p_parser_data, requested_parse_level);
   136bc:	f7f8 b93e 	b.w	b93c <parse_state_advance>

000136c0 <key_matches>:
{
   136c0:	b510      	push	{r4, lr}
   136c2:	4603      	mov	r3, r0
    if (!p_key->taken)
   136c4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
   136c8:	b1a8      	cbz	r0, 136f6 <key_matches+0x36>
    if (p_key->mode != p_id->mode)
   136ca:	780a      	ldrb	r2, [r1, #0]
   136cc:	7e5c      	ldrb	r4, [r3, #25]
   136ce:	4294      	cmp	r4, r2
   136d0:	d112      	bne.n	136f8 <key_matches+0x38>
    if (p_id->mode == KEY_ID_MODE_0)
   136d2:	b184      	cbz	r4, 136f6 <key_matches+0x36>
    else if ((p_id->p_key_id == NULL) ||
   136d4:	6848      	ldr	r0, [r1, #4]
   136d6:	b170      	cbz	r0, 136f6 <key_matches+0x36>
             (memcmp(p_id->p_key_id, p_key->id, id_length_get(p_id->mode)) != 0))
   136d8:	f103 0110 	add.w	r1, r3, #16
   136dc:	1e63      	subs	r3, r4, #1
   136de:	2b02      	cmp	r3, #2
   136e0:	bf9a      	itte	ls
   136e2:	f06f 0202 	mvnls.w	r2, #2
   136e6:	eb02 0284 	addls.w	r2, r2, r4, lsl #2
   136ea:	2200      	movhi	r2, #0
   136ec:	f7ff fac7 	bl	12c7e <memcmp>
    else if ((p_id->p_key_id == NULL) ||
   136f0:	fab0 f080 	clz	r0, r0
   136f4:	0940      	lsrs	r0, r0, #5
}
   136f6:	bd10      	pop	{r4, pc}
        return false;
   136f8:	2000      	movs	r0, #0
   136fa:	e7fc      	b.n	136f6 <key_matches+0x36>

000136fc <nrf_802154_ack_timeout_transmitted_hook>:

void nrf_802154_ack_timeout_transmitted_hook(const uint8_t * p_frame)
{
    assert((p_frame == mp_frame) || (!m_procedure_is_active));

    timeout_timer_stop();
   136fc:	f7f8 bbe0 	b.w	bec0 <timeout_timer_stop>

00013700 <nrf_802154_ack_timeout_rx_ack_started_hook>:

void nrf_802154_ack_timeout_rx_ack_started_hook(void)
{
    assert(m_procedure_is_active);

    timeout_timer_stop();
   13700:	f7f8 bbde 	b.w	bec0 <timeout_timer_stop>

00013704 <nrf_802154_ack_timeout_tx_failed_hook>:
}

bool nrf_802154_ack_timeout_tx_failed_hook(uint8_t * p_frame, nrf_802154_tx_error_t error)
{
   13704:	b508      	push	{r3, lr}
    (void)error;
    assert((p_frame == mp_frame) || (!m_procedure_is_active));

    timeout_timer_stop();
   13706:	f7f8 fbdb 	bl	bec0 <timeout_timer_stop>

    return true;
}
   1370a:	2001      	movs	r0, #1
   1370c:	bd08      	pop	{r3, pc}

0001370e <nrf_802154_ack_generator_init>:
            return FRAME_VERSION_INVALID;
    }
}

void nrf_802154_ack_generator_init(void)
{
   1370e:	b508      	push	{r3, lr}
    // Both generators are initialized to enable sending both Imm-Acks and Enh-Acks.
    nrf_802154_imm_ack_generator_init();
   13710:	f7f8 ff9a 	bl	c648 <nrf_802154_imm_ack_generator_init>
    nrf_802154_enh_ack_generator_init();
}
   13714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_enh_ack_generator_init();
   13718:	f000 b818 	b.w	1374c <nrf_802154_enh_ack_generator_init>

0001371c <nrf_802154_ack_generator_reset>:

void nrf_802154_ack_generator_reset(void)
{
   1371c:	b508      	push	{r3, lr}
    // Both generators are reset to enable sending both Imm-Ack and Enh-Ack.
    nrf_802154_imm_ack_generator_reset();
   1371e:	f000 f816 	bl	1374e <nrf_802154_imm_ack_generator_reset>
    nrf_802154_enh_ack_generator_reset();
}
   13722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_802154_enh_ack_generator_reset();
   13726:	f7f8 bd55 	b.w	c1d4 <nrf_802154_enh_ack_generator_reset>

0001372a <nrf_802154_ack_generator_create>:
    return p_parser_data->p_frame[FRAME_VERSION_OFFSET] & FRAME_VERSION_MASK;
   1372a:	6803      	ldr	r3, [r0, #0]
   1372c:	789b      	ldrb	r3, [r3, #2]
   1372e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    switch (nrf_802154_frame_parser_frame_version_get(p_frame_data))
   13732:	2b10      	cmp	r3, #16

uint8_t * nrf_802154_ack_generator_create(const nrf_802154_frame_parser_data_t * p_frame_data)
{
   13734:	4602      	mov	r2, r0
    switch (nrf_802154_frame_parser_frame_version_get(p_frame_data))
   13736:	d002      	beq.n	1373e <nrf_802154_ack_generator_create+0x14>
   13738:	2b20      	cmp	r3, #32
   1373a:	d003      	beq.n	13744 <nrf_802154_ack_generator_create+0x1a>
   1373c:	b923      	cbnz	r3, 13748 <nrf_802154_ack_generator_create+0x1e>
    assert(nrf_802154_frame_parser_ar_bit_is_set(p_frame_data));

    switch (frame_version_is_2015_or_above(p_frame_data))
    {
        case FRAME_VERSION_BELOW_2015:
            return nrf_802154_imm_ack_generator_create(p_frame_data);
   1373e:	4610      	mov	r0, r2
   13740:	f7f8 bf96 	b.w	c670 <nrf_802154_imm_ack_generator_create>

        case FRAME_VERSION_2015_OR_ABOVE:
            return nrf_802154_enh_ack_generator_create(p_frame_data);
   13744:	f7f8 bd66 	b.w	c214 <nrf_802154_enh_ack_generator_create>

        default:
            return NULL;
    }
}
   13748:	2000      	movs	r0, #0
   1374a:	4770      	bx	lr

0001374c <nrf_802154_enh_ack_generator_init>:
}
   1374c:	4770      	bx	lr

0001374e <nrf_802154_imm_ack_generator_reset>:
}
   1374e:	4770      	bx	lr

00013750 <ntf_slot_alloc>:
{
   13750:	b570      	push	{r4, r5, r6, lr}
    for (size_t i = 0; i < pool_len; i++)
   13752:	2300      	movs	r3, #0
            uint8_t taken = __LDREXB(&p_pool[i].taken);
   13754:	2628      	movs	r6, #40	; 0x28
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   13756:	2401      	movs	r4, #1
   13758:	fb06 0503 	mla	r5, r6, r3, r0
   __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
   1375c:	e8d5 2f4f 	ldrexb	r2, [r5]
            if (taken)
   13760:	b2d2      	uxtb	r2, r2
   13762:	b142      	cbz	r2, 13776 <ntf_slot_alloc+0x26>
  __ASM volatile ("clrex" ::: "memory");
   13764:	f3bf 8f2f 	clrex
  __ASM volatile ("dmb 0xF":::"memory");
   13768:	f3bf 8f5f 	dmb	sy
    for (size_t i = 0; i < pool_len; i++)
   1376c:	3301      	adds	r3, #1
   1376e:	4299      	cmp	r1, r3
   13770:	d1f2      	bne.n	13758 <ntf_slot_alloc+0x8>
    return NTF_INVALID_SLOT_ID;
   13772:	20ff      	movs	r0, #255	; 0xff
}
   13774:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   13776:	e8c5 4f42 	strexb	r2, r4, [r5]
        while (__STREXB(true, &p_pool[i].taken));
   1377a:	2a00      	cmp	r2, #0
   1377c:	d1ee      	bne.n	1375c <ntf_slot_alloc+0xc>
  __ASM volatile ("dmb 0xF":::"memory");
   1377e:	f3bf 8f5f 	dmb	sy
            return i;
   13782:	b2d8      	uxtb	r0, r3
   13784:	e7f6      	b.n	13774 <ntf_slot_alloc+0x24>

00013786 <nrf_802154_notify_received>:
    bool notified = swi_notify_received(p_data, power, lqi);
   13786:	f7f8 bfa7 	b.w	c6d8 <swi_notify_received>

0001378a <nrf_802154_notify_receive_failed>:
    bool notified = swi_notify_receive_failed(error, id, allow_drop);
   1378a:	f7f8 bfc3 	b.w	c714 <swi_notify_receive_failed>

0001378e <nrf_802154_notify_transmitted>:
{
   1378e:	b538      	push	{r3, r4, r5, lr}
   13790:	4604      	mov	r4, r0
   13792:	460d      	mov	r5, r1
    nrf_802154_tx_work_buffer_original_frame_update(p_frame,
   13794:	f7f7 fc38 	bl	b008 <nrf_802154_tx_work_buffer_original_frame_update>
    bool notified = swi_notify_transmitted(p_frame, p_metadata);
   13798:	4629      	mov	r1, r5
   1379a:	4620      	mov	r0, r4
}
   1379c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bool notified = swi_notify_transmitted(p_frame, p_metadata);
   137a0:	f7f8 bfe0 	b.w	c764 <swi_notify_transmitted>

000137a4 <nrf_802154_notify_transmit_failed>:
    bool notified = swi_notify_transmit_failed(p_frame, error, p_metadata);
   137a4:	f7f9 b802 	b.w	c7ac <swi_notify_transmit_failed>

000137a8 <nrf_802154_notify_energy_detected>:
    bool notified = swi_notify_energy_detected(result);
   137a8:	f7f9 b828 	b.w	c7fc <swi_notify_energy_detected>

000137ac <nrf_802154_notify_energy_detection_failed>:
    bool notified = swi_notify_energy_detection_failed(error);
   137ac:	f7f9 b840 	b.w	c830 <swi_notify_energy_detection_failed>

000137b0 <nrf_802154_notify_cca>:
    bool notified = swi_notify_cca(is_free);
   137b0:	f7f9 b858 	b.w	c864 <swi_notify_cca>

000137b4 <nrf_802154_notify_cca_failed>:
    bool notified = swi_notify_cca_failed(error);
   137b4:	f7f9 b870 	b.w	c898 <swi_notify_cca_failed>

000137b8 <active_vector_priority_is_high>:
{
   137b8:	b510      	push	{r4, lr}
    return nrf_802154_critical_section_active_vector_priority_get() <=
   137ba:	f7f6 f9e1 	bl	9b80 <nrf_802154_critical_section_active_vector_priority_get>
   137be:	4604      	mov	r4, r0
           nrf_802154_irq_priority_get(NRF_802154_EGU_IRQN);
   137c0:	2017      	movs	r0, #23
   137c2:	f7f4 fda5 	bl	8310 <nrf_802154_irq_priority_get>
}
   137c6:	4284      	cmp	r4, r0
   137c8:	bf8c      	ite	hi
   137ca:	2000      	movhi	r0, #0
   137cc:	2001      	movls	r0, #1
   137ce:	bd10      	pop	{r4, pc}

000137d0 <nrf_802154_request_receive>:
{
   137d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   137d4:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_core_receive,
   137d6:	2300      	movs	r3, #0
{
   137d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_core_receive,
   137dc:	f88d 300f 	strb.w	r3, [sp, #15]
{
   137e0:	4607      	mov	r7, r0
   137e2:	460e      	mov	r6, r1
   137e4:	4615      	mov	r5, r2
    REQUEST_FUNCTION(nrf_802154_core_receive,
   137e6:	f7ff ffe7 	bl	137b8 <active_vector_priority_is_high>
   137ea:	b170      	cbz	r0, 1380a <nrf_802154_request_receive+0x3a>
   137ec:	f8cd 8000 	str.w	r8, [sp]
   137f0:	4623      	mov	r3, r4
   137f2:	462a      	mov	r2, r5
   137f4:	4631      	mov	r1, r6
   137f6:	4638      	mov	r0, r7
   137f8:	f7f5 ffae 	bl	9758 <nrf_802154_core_receive>
   137fc:	f88d 000f 	strb.w	r0, [sp, #15]
}
   13800:	f89d 000f 	ldrb.w	r0, [sp, #15]
   13804:	b004      	add	sp, #16
   13806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
   1380a:	f7f9 f8d7 	bl	c9bc <req_enter>
    p_slot->type                     = REQ_TYPE_RECEIVE;
   1380e:	2301      	movs	r3, #1
   13810:	7003      	strb	r3, [r0, #0]
    p_slot->data.receive.p_result    = p_result;
   13812:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.receive.term_lvl    = term_lvl;
   13816:	7307      	strb	r7, [r0, #12]
    p_slot->data.receive.req_orig    = req_orig;
   13818:	7346      	strb	r6, [r0, #13]
    p_slot->data.receive.notif_func  = notify_function;
   1381a:	6085      	str	r5, [r0, #8]
    p_slot->data.receive.notif_abort = notify_abort;
   1381c:	7384      	strb	r4, [r0, #14]
    p_slot->data.receive.id          = id;
   1381e:	f8c0 8010 	str.w	r8, [r0, #16]
    p_slot->data.receive.p_result    = p_result;
   13822:	6143      	str	r3, [r0, #20]
    req_exit();
   13824:	f7f9 f8d6 	bl	c9d4 <req_exit>
}
   13828:	e7ea      	b.n	13800 <nrf_802154_request_receive+0x30>

0001382a <nrf_802154_request_transmit>:
{
   1382a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1382e:	461c      	mov	r4, r3
    REQUEST_FUNCTION(nrf_802154_core_transmit,
   13830:	2300      	movs	r3, #0
{
   13832:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    REQUEST_FUNCTION(nrf_802154_core_transmit,
   13836:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1383a:	4607      	mov	r7, r0
   1383c:	460e      	mov	r6, r1
   1383e:	4615      	mov	r5, r2
    REQUEST_FUNCTION(nrf_802154_core_transmit,
   13840:	f7ff ffba 	bl	137b8 <active_vector_priority_is_high>
   13844:	b170      	cbz	r0, 13864 <nrf_802154_request_transmit+0x3a>
   13846:	f8cd 8000 	str.w	r8, [sp]
   1384a:	4623      	mov	r3, r4
   1384c:	462a      	mov	r2, r5
   1384e:	4631      	mov	r1, r6
   13850:	4638      	mov	r0, r7
   13852:	f7f5 ffc1 	bl	97d8 <nrf_802154_core_transmit>
   13856:	f88d 000f 	strb.w	r0, [sp, #15]
}
   1385a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1385e:	b004      	add	sp, #16
   13860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
   13864:	f7f9 f8aa 	bl	c9bc <req_enter>
    p_slot->type                     = REQ_TYPE_TRANSMIT;
   13868:	2302      	movs	r3, #2
   1386a:	7003      	strb	r3, [r0, #0]
    p_slot->data.transmit.p_result   = p_result;
   1386c:	f10d 030f 	add.w	r3, sp, #15
    p_slot->data.transmit.p_params   = p_params;
   13870:	e9c0 5404 	strd	r5, r4, [r0, #16]
    p_slot->data.transmit.term_lvl   = term_lvl;
   13874:	7307      	strb	r7, [r0, #12]
    p_slot->data.transmit.req_orig   = req_orig;
   13876:	7346      	strb	r6, [r0, #13]
    p_slot->data.transmit.notif_func = notify_function;
   13878:	f8c0 8008 	str.w	r8, [r0, #8]
    p_slot->data.transmit.p_result   = p_result;
   1387c:	6183      	str	r3, [r0, #24]
    req_exit();
   1387e:	f7f9 f8a9 	bl	c9d4 <req_exit>
}
   13882:	e7ea      	b.n	1385a <nrf_802154_request_transmit+0x30>

00013884 <nrf_802154_request_buffer_free>:
{
   13884:	b513      	push	{r0, r1, r4, lr}
    REQUEST_FUNCTION(nrf_802154_core_notify_buffer_free, swi_buffer_free, p_data)
   13886:	2300      	movs	r3, #0
{
   13888:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_notify_buffer_free, swi_buffer_free, p_data)
   1388a:	f88d 3007 	strb.w	r3, [sp, #7]
   1388e:	f7ff ff93 	bl	137b8 <active_vector_priority_is_high>
   13892:	b140      	cbz	r0, 138a6 <nrf_802154_request_buffer_free+0x22>
   13894:	4620      	mov	r0, r4
   13896:	f7f6 f859 	bl	994c <nrf_802154_core_notify_buffer_free>
   1389a:	f88d 0007 	strb.w	r0, [sp, #7]
}
   1389e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   138a2:	b002      	add	sp, #8
   138a4:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
   138a6:	f7f9 f889 	bl	c9bc <req_enter>
    p_slot->type                      = REQ_TYPE_BUFFER_FREE;
   138aa:	2307      	movs	r3, #7
   138ac:	7003      	strb	r3, [r0, #0]
    p_slot->data.buffer_free.p_result = p_result;
   138ae:	446b      	add	r3, sp
    p_slot->data.buffer_free.p_data   = p_data;
   138b0:	6084      	str	r4, [r0, #8]
    p_slot->data.buffer_free.p_result = p_result;
   138b2:	60c3      	str	r3, [r0, #12]
    req_exit();
   138b4:	f7f9 f88e 	bl	c9d4 <req_exit>
}
   138b8:	e7f1      	b.n	1389e <nrf_802154_request_buffer_free+0x1a>

000138ba <nrf_802154_request_channel_update>:
{
   138ba:	b513      	push	{r0, r1, r4, lr}
    REQUEST_FUNCTION(nrf_802154_core_channel_update, swi_channel_update, req_orig)
   138bc:	2300      	movs	r3, #0
{
   138be:	4604      	mov	r4, r0
    REQUEST_FUNCTION(nrf_802154_core_channel_update, swi_channel_update, req_orig)
   138c0:	f88d 3007 	strb.w	r3, [sp, #7]
   138c4:	f7ff ff78 	bl	137b8 <active_vector_priority_is_high>
   138c8:	b140      	cbz	r0, 138dc <nrf_802154_request_channel_update+0x22>
   138ca:	4620      	mov	r0, r4
   138cc:	f7f6 f85a 	bl	9984 <nrf_802154_core_channel_update>
   138d0:	f88d 0007 	strb.w	r0, [sp, #7]
}
   138d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   138d8:	b002      	add	sp, #8
   138da:	bd10      	pop	{r4, pc}
    nrf_802154_req_data_t * p_slot = req_enter();
   138dc:	f7f9 f86e 	bl	c9bc <req_enter>
    p_slot->type                         = REQ_TYPE_CHANNEL_UPDATE;
   138e0:	2308      	movs	r3, #8
   138e2:	7003      	strb	r3, [r0, #0]
    p_slot->data.channel_update.p_result = p_result;
   138e4:	f10d 0307 	add.w	r3, sp, #7
   138e8:	60c3      	str	r3, [r0, #12]
    p_slot->data.channel_update.req_orig = req_orig;
   138ea:	7204      	strb	r4, [r0, #8]
    req_exit();
   138ec:	f7f9 f872 	bl	c9d4 <req_exit>
}
   138f0:	e7f0      	b.n	138d4 <nrf_802154_request_channel_update+0x1a>

000138f2 <nrf_802154_request_cca_cfg_update>:
{
   138f2:	b507      	push	{r0, r1, r2, lr}
    REQUEST_FUNCTION_NO_ARGS(nrf_802154_core_cca_cfg_update, swi_cca_cfg_update)
   138f4:	2300      	movs	r3, #0
   138f6:	f88d 3007 	strb.w	r3, [sp, #7]
   138fa:	f7ff ff5d 	bl	137b8 <active_vector_priority_is_high>
   138fe:	b140      	cbz	r0, 13912 <nrf_802154_request_cca_cfg_update+0x20>
   13900:	f7f6 f872 	bl	99e8 <nrf_802154_core_cca_cfg_update>
   13904:	f88d 0007 	strb.w	r0, [sp, #7]
}
   13908:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1390c:	b003      	add	sp, #12
   1390e:	f85d fb04 	ldr.w	pc, [sp], #4
    nrf_802154_req_data_t * p_slot = req_enter();
   13912:	f7f9 f853 	bl	c9bc <req_enter>
    p_slot->type                         = REQ_TYPE_CCA_CFG_UPDATE;
   13916:	2309      	movs	r3, #9
   13918:	7003      	strb	r3, [r0, #0]
    p_slot->data.cca_cfg_update.p_result = p_result;
   1391a:	f10d 0307 	add.w	r3, sp, #7
   1391e:	6083      	str	r3, [r0, #8]
    req_exit();
   13920:	f7f9 f858 	bl	c9d4 <req_exit>
}
   13924:	e7f0      	b.n	13908 <nrf_802154_request_cca_cfg_update+0x16>

00013926 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   13926:	4700      	bx	r0

00013928 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   13928:	f000 baa7 	b.w	13e7a <z_impl_k_busy_wait>

0001392c <nrf_gpio_reconfigure>:
{
   1392c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1392e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13930:	a801      	add	r0, sp, #4
{
   13932:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   13936:	4616      	mov	r6, r2
   13938:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1393a:	f7f9 fa49 	bl	cdd0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1393e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13940:	f1b6 0c00 	subs.w	ip, r6, #0
   13944:	bf18      	it	ne
   13946:	f04f 0c01 	movne.w	ip, #1
   1394a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1394e:	1e0b      	subs	r3, r1, #0
   13950:	bf18      	it	ne
   13952:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13954:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13956:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1395a:	bf14      	ite	ne
   1395c:	f04f 0c0c 	movne.w	ip, #12
   13960:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   13964:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   13966:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1396a:	bf14      	ite	ne
   1396c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   13970:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   13974:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   13976:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1397a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1397e:	bf14      	ite	ne
   13980:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   13984:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   13988:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1398c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   13990:	b101      	cbz	r1, 13994 <nrf_gpio_reconfigure+0x68>
   13992:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   13994:	b10e      	cbz	r6, 1399a <nrf_gpio_reconfigure+0x6e>
   13996:	7836      	ldrb	r6, [r6, #0]
   13998:	0076      	lsls	r6, r6, #1
   1399a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1399c:	b10d      	cbz	r5, 139a2 <nrf_gpio_reconfigure+0x76>
   1399e:	782d      	ldrb	r5, [r5, #0]
   139a0:	00ad      	lsls	r5, r5, #2
   139a2:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   139a4:	b10c      	cbz	r4, 139aa <nrf_gpio_reconfigure+0x7e>
   139a6:	7824      	ldrb	r4, [r4, #0]
   139a8:	0224      	lsls	r4, r4, #8
   139aa:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   139ac:	b10f      	cbz	r7, 139b2 <nrf_gpio_reconfigure+0x86>
   139ae:	783f      	ldrb	r7, [r7, #0]
   139b0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   139b2:	430c      	orrs	r4, r1
   139b4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   139b6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   139ba:	b003      	add	sp, #12
   139bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000139be <nrf_gpio_cfg_sense_set>:
{
   139be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   139c0:	f10d 030f 	add.w	r3, sp, #15
   139c4:	9301      	str	r3, [sp, #4]
   139c6:	2300      	movs	r3, #0
{
   139c8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   139cc:	9300      	str	r3, [sp, #0]
   139ce:	461a      	mov	r2, r3
   139d0:	4619      	mov	r1, r3
   139d2:	f7ff ffab 	bl	1392c <nrf_gpio_reconfigure>
}
   139d6:	b005      	add	sp, #20
   139d8:	f85d fb04 	ldr.w	pc, [sp], #4

000139dc <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   139dc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   139e0:	681a      	ldr	r2, [r3, #0]
   139e2:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   139e4:	bf1f      	itttt	ne
   139e6:	2200      	movne	r2, #0
   139e8:	601a      	strne	r2, [r3, #0]
   139ea:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   139ec:	2001      	movne	r0, #1
   139ee:	bf08      	it	eq
   139f0:	2000      	moveq	r0, #0
}
   139f2:	4770      	bx	lr

000139f4 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   139f4:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   139f6:	f7f9 fd53 	bl	d4a0 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   139fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   139fe:	f7ff bb99 	b.w	13134 <nrfx_clock_irq_handler>

00013a02 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   13a02:	f7f9 bda3 	b.w	d54c <_DoInit>

00013a06 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   13a06:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   13a08:	f7ff fffb 	bl	13a02 <SEGGER_RTT_Init>

	return 0;
}
   13a0c:	2000      	movs	r0, #0
   13a0e:	bd08      	pop	{r3, pc}

00013a10 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   13a10:	4770      	bx	lr

00013a12 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   13a12:	b140      	cbz	r0, 13a26 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   13a14:	68c3      	ldr	r3, [r0, #12]
   13a16:	7858      	ldrb	r0, [r3, #1]
   13a18:	f010 0001 	ands.w	r0, r0, #1
   13a1c:	bf1e      	ittt	ne
   13a1e:	7818      	ldrbne	r0, [r3, #0]
   13a20:	fab0 f080 	clzne	r0, r0
   13a24:	0940      	lsrne	r0, r0, #5
}
   13a26:	4770      	bx	lr

00013a28 <z_early_memset>:
	(void) memset(dst, c, n);
   13a28:	f7ff b95b 	b.w	12ce2 <memset>

00013a2c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   13a2c:	f7ff b94e 	b.w	12ccc <memcpy>

00013a30 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13a30:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   13a34:	4313      	orrs	r3, r2
   13a36:	f013 0303 	ands.w	r3, r3, #3
   13a3a:	d10c      	bne.n	13a56 <create_free_list+0x26>
	slab->free_list = NULL;
   13a3c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13a3e:	6881      	ldr	r1, [r0, #8]
   13a40:	4299      	cmp	r1, r3
   13a42:	d801      	bhi.n	13a48 <create_free_list+0x18>
	return 0;
   13a44:	2000      	movs	r0, #0
   13a46:	4770      	bx	lr
		*(char **)p = slab->free_list;
   13a48:	6941      	ldr	r1, [r0, #20]
   13a4a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   13a4c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   13a4e:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13a50:	3301      	adds	r3, #1
		p += slab->block_size;
   13a52:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   13a54:	e7f3      	b.n	13a3e <create_free_list+0xe>
		return -EINVAL;
   13a56:	f06f 0015 	mvn.w	r0, #21
}
   13a5a:	4770      	bx	lr

00013a5c <k_mem_slab_init>:
{
   13a5c:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   13a5e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   13a62:	2300      	movs	r3, #0
	slab->buffer = buffer;
   13a64:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   13a66:	6183      	str	r3, [r0, #24]
{
   13a68:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   13a6a:	f7ff ffe1 	bl	13a30 <create_free_list>
	if (rc < 0) {
   13a6e:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
   13a70:	bfa8      	it	ge
   13a72:	e9c4 4400 	strdge	r4, r4, [r4]
}
   13a76:	bd10      	pop	{r4, pc}

00013a78 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   13a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a7a:	4604      	mov	r4, r0
   13a7c:	460d      	mov	r5, r1
	__asm__ volatile(
   13a7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13a82:	f3ef 8611 	mrs	r6, BASEPRI
   13a86:	f383 8812 	msr	BASEPRI_MAX, r3
   13a8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   13a8e:	6947      	ldr	r7, [r0, #20]
   13a90:	b977      	cbnz	r7, 13ab0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   13a92:	f000 f955 	bl	13d40 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   13a96:	b158      	cbz	r0, 13ab0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   13a98:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   13a9a:	6142      	str	r2, [r0, #20]
   13a9c:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   13a9e:	f000 f918 	bl	13cd2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   13aa2:	4631      	mov	r1, r6
   13aa4:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   13aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   13aac:	f7fa bc9c 	b.w	e3e8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   13ab0:	682b      	ldr	r3, [r5, #0]
   13ab2:	6962      	ldr	r2, [r4, #20]
   13ab4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   13ab6:	682b      	ldr	r3, [r5, #0]
   13ab8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   13aba:	69a3      	ldr	r3, [r4, #24]
   13abc:	3b01      	subs	r3, #1
   13abe:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   13ac0:	f386 8811 	msr	BASEPRI, r6
   13ac4:	f3bf 8f6f 	isb	sy
}
   13ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013aca <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13aca:	f3ef 8005 	mrs	r0, IPSR
}
   13ace:	3800      	subs	r0, #0
   13ad0:	bf18      	it	ne
   13ad2:	2001      	movne	r0, #1
   13ad4:	4770      	bx	lr

00013ad6 <z_impl_k_thread_name_set>:
}
   13ad6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   13ada:	4770      	bx	lr

00013adc <k_thread_name_get>:
}
   13adc:	2000      	movs	r0, #0
   13ade:	4770      	bx	lr

00013ae0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   13ae0:	f7fa bc94 	b.w	e40c <z_sched_start>

00013ae4 <z_pm_save_idle_exit>:
{
   13ae4:	b508      	push	{r3, lr}
	pm_system_resume();
   13ae6:	f7f2 f911 	bl	5d0c <pm_system_resume>
}
   13aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   13aee:	f7ff bab1 	b.w	13054 <sys_clock_idle_exit>

00013af2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   13af2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   13af6:	428b      	cmp	r3, r1
   13af8:	d001      	beq.n	13afe <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   13afa:	f7fa bc2f 	b.w	e35c <z_set_prio>
}
   13afe:	2000      	movs	r0, #0
   13b00:	4770      	bx	lr

00013b02 <z_impl_k_mutex_init>:
{
   13b02:	4603      	mov	r3, r0
	mutex->owner = NULL;
   13b04:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   13b06:	e9c3 0002 	strd	r0, r0, [r3, #8]
   13b0a:	e9c3 3300 	strd	r3, r3, [r3]
}
   13b0e:	4770      	bx	lr

00013b10 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   13b10:	b13a      	cbz	r2, 13b22 <z_impl_k_sem_init+0x12>
   13b12:	428a      	cmp	r2, r1
   13b14:	d305      	bcc.n	13b22 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   13b16:	e9c0 1202 	strd	r1, r2, [r0, #8]
   13b1a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   13b1e:	2000      	movs	r0, #0
   13b20:	4770      	bx	lr
		return -EINVAL;
   13b22:	f06f 0015 	mvn.w	r0, #21
}
   13b26:	4770      	bx	lr

00013b28 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   13b28:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   13b2a:	2301      	movs	r3, #1
   13b2c:	408b      	lsls	r3, r1
   13b2e:	ea22 0303 	bic.w	r3, r2, r3
   13b32:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   13b34:	fa22 f001 	lsr.w	r0, r2, r1
}
   13b38:	f000 0001 	and.w	r0, r0, #1
   13b3c:	4770      	bx	lr

00013b3e <unschedule_locked>:
{
   13b3e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   13b40:	2103      	movs	r1, #3
{
   13b42:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   13b44:	300c      	adds	r0, #12
   13b46:	f7ff ffef 	bl	13b28 <flag_test_and_clear>
   13b4a:	4604      	mov	r4, r0
   13b4c:	b118      	cbz	r0, 13b56 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   13b4e:	f105 0010 	add.w	r0, r5, #16
   13b52:	f000 f94a 	bl	13dea <z_abort_timeout>
}
   13b56:	4620      	mov	r0, r4
   13b58:	bd38      	pop	{r3, r4, r5, pc}

00013b5a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   13b5a:	b120      	cbz	r0, 13b66 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   13b5c:	2200      	movs	r2, #0
   13b5e:	4611      	mov	r1, r2
   13b60:	3088      	adds	r0, #136	; 0x88
   13b62:	f000 b91f 	b.w	13da4 <z_sched_wake>
}
   13b66:	4770      	bx	lr

00013b68 <work_timeout>:
{
   13b68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13b6a:	4604      	mov	r4, r0
	__asm__ volatile(
   13b6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13b70:	f3ef 8511 	mrs	r5, BASEPRI
   13b74:	f383 8812 	msr	BASEPRI_MAX, r3
   13b78:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   13b7c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   13b7e:	f1a0 0610 	sub.w	r6, r0, #16
   13b82:	2103      	movs	r1, #3
   13b84:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   13b86:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   13b88:	f7ff ffce 	bl	13b28 <flag_test_and_clear>
   13b8c:	b128      	cbz	r0, 13b9a <work_timeout+0x32>
		queue = dw->queue;
   13b8e:	69a3      	ldr	r3, [r4, #24]
   13b90:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   13b92:	a901      	add	r1, sp, #4
   13b94:	4630      	mov	r0, r6
   13b96:	f7fa f989 	bl	deac <submit_to_queue_locked>
	__asm__ volatile(
   13b9a:	f385 8811 	msr	BASEPRI, r5
   13b9e:	f3bf 8f6f 	isb	sy
}
   13ba2:	b002      	add	sp, #8
   13ba4:	bd70      	pop	{r4, r5, r6, pc}

00013ba6 <k_work_init>:
{
   13ba6:	b538      	push	{r3, r4, r5, lr}
   13ba8:	4604      	mov	r4, r0
   13baa:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   13bac:	2210      	movs	r2, #16
   13bae:	2100      	movs	r1, #0
   13bb0:	f7ff f897 	bl	12ce2 <memset>
   13bb4:	6065      	str	r5, [r4, #4]
}
   13bb6:	bd38      	pop	{r3, r4, r5, pc}

00013bb8 <z_work_submit_to_queue>:
{
   13bb8:	b513      	push	{r0, r1, r4, lr}
   13bba:	9001      	str	r0, [sp, #4]
   13bbc:	4608      	mov	r0, r1
	__asm__ volatile(
   13bbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   13bc2:	f3ef 8411 	mrs	r4, BASEPRI
   13bc6:	f383 8812 	msr	BASEPRI_MAX, r3
   13bca:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   13bce:	a901      	add	r1, sp, #4
   13bd0:	f7fa f96c 	bl	deac <submit_to_queue_locked>
	__asm__ volatile(
   13bd4:	f384 8811 	msr	BASEPRI, r4
   13bd8:	f3bf 8f6f 	isb	sy
}
   13bdc:	b002      	add	sp, #8
   13bde:	bd10      	pop	{r4, pc}

00013be0 <k_work_submit_to_queue>:
{
   13be0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   13be2:	f7ff ffe9 	bl	13bb8 <z_work_submit_to_queue>
	if (ret > 0) {
   13be6:	1e04      	subs	r4, r0, #0
   13be8:	dd09      	ble.n	13bfe <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   13bea:	f04f 0340 	mov.w	r3, #64	; 0x40
   13bee:	f3ef 8011 	mrs	r0, BASEPRI
   13bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   13bf6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   13bfa:	f000 f8bd 	bl	13d78 <z_reschedule_irqlock>
}
   13bfe:	4620      	mov	r0, r4
   13c00:	bd10      	pop	{r4, pc}

00013c02 <k_work_init_delayable>:
{
   13c02:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   13c04:	2230      	movs	r2, #48	; 0x30
{
   13c06:	4604      	mov	r4, r0
   13c08:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   13c0a:	2100      	movs	r1, #0
   13c0c:	f7ff f869 	bl	12ce2 <memset>
   13c10:	f44f 7380 	mov.w	r3, #256	; 0x100
   13c14:	6065      	str	r5, [r4, #4]
   13c16:	60e3      	str	r3, [r4, #12]
}
   13c18:	bd38      	pop	{r3, r4, r5, pc}

00013c1a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   13c1a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   13c1e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13c20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13c22:	2300      	movs	r3, #0
	node->prev = NULL;
   13c24:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   13c28:	4770      	bx	lr

00013c2a <unpend_thread_no_timeout>:
{
   13c2a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   13c2c:	f7ff fff5 	bl	13c1a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13c30:	7b43      	ldrb	r3, [r0, #13]
   13c32:	f023 0302 	bic.w	r3, r3, #2
   13c36:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   13c38:	2300      	movs	r3, #0
   13c3a:	6083      	str	r3, [r0, #8]
}
   13c3c:	bd08      	pop	{r3, pc}

00013c3e <z_thread_timeout>:
{
   13c3e:	b510      	push	{r4, lr}
   13c40:	4601      	mov	r1, r0
   13c42:	f04f 0340 	mov.w	r3, #64	; 0x40
   13c46:	f3ef 8411 	mrs	r4, BASEPRI
   13c4a:	f383 8812 	msr	BASEPRI_MAX, r3
   13c4e:	f3bf 8f6f 	isb	sy
		if (!killed) {
   13c52:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   13c56:	f013 0f28 	tst.w	r3, #40	; 0x28
   13c5a:	d10d      	bne.n	13c78 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   13c5c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   13c60:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   13c62:	b10b      	cbz	r3, 13c68 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   13c64:	f7ff ffe1 	bl	13c2a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13c68:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   13c6c:	f023 0314 	bic.w	r3, r3, #20
   13c70:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   13c74:	f7fa fa7c 	bl	e170 <ready_thread>
	__asm__ volatile(
   13c78:	f384 8811 	msr	BASEPRI, r4
   13c7c:	f3bf 8f6f 	isb	sy
}
   13c80:	bd10      	pop	{r4, pc}

00013c82 <add_to_waitq_locked>:
{
   13c82:	b538      	push	{r3, r4, r5, lr}
   13c84:	4604      	mov	r4, r0
   13c86:	460d      	mov	r5, r1
	unready_thread(thread);
   13c88:	f7fa faa6 	bl	e1d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   13c8c:	7b63      	ldrb	r3, [r4, #13]
   13c8e:	f043 0302 	orr.w	r3, r3, #2
   13c92:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   13c94:	b1e5      	cbz	r5, 13cd0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   13c96:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   13c98:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c9a:	429d      	cmp	r5, r3
   13c9c:	d109      	bne.n	13cb2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   13c9e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   13ca0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   13ca4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13ca6:	606c      	str	r4, [r5, #4]
}
   13ca8:	e012      	b.n	13cd0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   13caa:	686a      	ldr	r2, [r5, #4]
   13cac:	4293      	cmp	r3, r2
   13cae:	d0f6      	beq.n	13c9e <add_to_waitq_locked+0x1c>
   13cb0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	d0f3      	beq.n	13c9e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   13cb6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   13cba:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   13cbe:	428a      	cmp	r2, r1
   13cc0:	d0f3      	beq.n	13caa <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13cc2:	4291      	cmp	r1, r2
   13cc4:	ddf1      	ble.n	13caa <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   13cc6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   13cc8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   13ccc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   13cce:	605c      	str	r4, [r3, #4]
}
   13cd0:	bd38      	pop	{r3, r4, r5, pc}

00013cd2 <z_ready_thread>:
{
   13cd2:	b510      	push	{r4, lr}
	__asm__ volatile(
   13cd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   13cd8:	f3ef 8411 	mrs	r4, BASEPRI
   13cdc:	f383 8812 	msr	BASEPRI_MAX, r3
   13ce0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   13ce4:	f7fa fa44 	bl	e170 <ready_thread>
	__asm__ volatile(
   13ce8:	f384 8811 	msr	BASEPRI, r4
   13cec:	f3bf 8f6f 	isb	sy
}
   13cf0:	bd10      	pop	{r4, pc}

00013cf2 <z_unpend_thread_no_timeout>:
{
   13cf2:	b508      	push	{r3, lr}
	__asm__ volatile(
   13cf4:	f04f 0340 	mov.w	r3, #64	; 0x40
   13cf8:	f3ef 8111 	mrs	r1, BASEPRI
   13cfc:	f383 8812 	msr	BASEPRI_MAX, r3
   13d00:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   13d04:	f7ff ff91 	bl	13c2a <unpend_thread_no_timeout>
	__asm__ volatile(
   13d08:	f381 8811 	msr	BASEPRI, r1
   13d0c:	f3bf 8f6f 	isb	sy
}
   13d10:	bd08      	pop	{r3, pc}

00013d12 <z_unpend1_no_timeout>:
{
   13d12:	b508      	push	{r3, lr}
   13d14:	4603      	mov	r3, r0
	__asm__ volatile(
   13d16:	f04f 0240 	mov.w	r2, #64	; 0x40
   13d1a:	f3ef 8111 	mrs	r1, BASEPRI
   13d1e:	f382 8812 	msr	BASEPRI_MAX, r2
   13d22:	f3bf 8f6f 	isb	sy
	return list->head == list;
   13d26:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d28:	4283      	cmp	r3, r0
   13d2a:	d007      	beq.n	13d3c <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   13d2c:	b108      	cbz	r0, 13d32 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   13d2e:	f7ff ff7c 	bl	13c2a <unpend_thread_no_timeout>
	__asm__ volatile(
   13d32:	f381 8811 	msr	BASEPRI, r1
   13d36:	f3bf 8f6f 	isb	sy
}
   13d3a:	bd08      	pop	{r3, pc}
   13d3c:	2000      	movs	r0, #0
   13d3e:	e7f8      	b.n	13d32 <z_unpend1_no_timeout+0x20>

00013d40 <z_unpend_first_thread>:
{
   13d40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13d42:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d46:	f3ef 8511 	mrs	r5, BASEPRI
   13d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   13d4e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   13d52:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d54:	42a0      	cmp	r0, r4
   13d56:	d00d      	beq.n	13d74 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   13d58:	b134      	cbz	r4, 13d68 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   13d5a:	4620      	mov	r0, r4
   13d5c:	f7ff ff65 	bl	13c2a <unpend_thread_no_timeout>
   13d60:	f104 0018 	add.w	r0, r4, #24
   13d64:	f000 f841 	bl	13dea <z_abort_timeout>
	__asm__ volatile(
   13d68:	f385 8811 	msr	BASEPRI, r5
   13d6c:	f3bf 8f6f 	isb	sy
}
   13d70:	4620      	mov	r0, r4
   13d72:	bd38      	pop	{r3, r4, r5, pc}
   13d74:	2400      	movs	r4, #0
   13d76:	e7f7      	b.n	13d68 <z_unpend_first_thread+0x28>

00013d78 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13d78:	4603      	mov	r3, r0
   13d7a:	b920      	cbnz	r0, 13d86 <z_reschedule_irqlock+0xe>
   13d7c:	f3ef 8205 	mrs	r2, IPSR
   13d80:	b90a      	cbnz	r2, 13d86 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   13d82:	f7f2 babf 	b.w	6304 <arch_swap>
   13d86:	f383 8811 	msr	BASEPRI, r3
   13d8a:	f3bf 8f6f 	isb	sy
}
   13d8e:	4770      	bx	lr

00013d90 <z_reschedule_unlocked>:
	__asm__ volatile(
   13d90:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d94:	f3ef 8011 	mrs	r0, BASEPRI
   13d98:	f383 8812 	msr	BASEPRI_MAX, r3
   13d9c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   13da0:	f7ff bfea 	b.w	13d78 <z_reschedule_irqlock>

00013da4 <z_sched_wake>:
{
   13da4:	b538      	push	{r3, r4, r5, lr}
   13da6:	f04f 0340 	mov.w	r3, #64	; 0x40
   13daa:	f3ef 8511 	mrs	r5, BASEPRI
   13dae:	f383 8812 	msr	BASEPRI_MAX, r3
   13db2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   13db6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13db8:	42a0      	cmp	r0, r4
   13dba:	d012      	beq.n	13de2 <z_sched_wake+0x3e>
		if (thread != NULL) {
   13dbc:	b19c      	cbz	r4, 13de6 <z_sched_wake+0x42>
   13dbe:	67a1      	str	r1, [r4, #120]	; 0x78
   13dc0:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   13dc2:	4620      	mov	r0, r4
   13dc4:	f7ff ff31 	bl	13c2a <unpend_thread_no_timeout>
   13dc8:	f104 0018 	add.w	r0, r4, #24
   13dcc:	f000 f80d 	bl	13dea <z_abort_timeout>
			ready_thread(thread);
   13dd0:	4620      	mov	r0, r4
   13dd2:	f7fa f9cd 	bl	e170 <ready_thread>
			ret = true;
   13dd6:	2001      	movs	r0, #1
	__asm__ volatile(
   13dd8:	f385 8811 	msr	BASEPRI, r5
   13ddc:	f3bf 8f6f 	isb	sy
}
   13de0:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   13de2:	2000      	movs	r0, #0
   13de4:	e7f8      	b.n	13dd8 <z_sched_wake+0x34>
   13de6:	4620      	mov	r0, r4
   13de8:	e7f6      	b.n	13dd8 <z_sched_wake+0x34>

00013dea <z_abort_timeout>:
{
   13dea:	b510      	push	{r4, lr}
	__asm__ volatile(
   13dec:	f04f 0240 	mov.w	r2, #64	; 0x40
   13df0:	f3ef 8411 	mrs	r4, BASEPRI
   13df4:	f382 8812 	msr	BASEPRI_MAX, r2
   13df8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   13dfc:	6803      	ldr	r3, [r0, #0]
   13dfe:	b13b      	cbz	r3, 13e10 <z_abort_timeout+0x26>
			remove_timeout(to);
   13e00:	f7fa fcf0 	bl	e7e4 <remove_timeout>
			ret = 0;
   13e04:	2000      	movs	r0, #0
	__asm__ volatile(
   13e06:	f384 8811 	msr	BASEPRI, r4
   13e0a:	f3bf 8f6f 	isb	sy
}
   13e0e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   13e10:	f06f 0015 	mvn.w	r0, #21
   13e14:	e7f7      	b.n	13e06 <z_abort_timeout+0x1c>

00013e16 <z_get_next_timeout_expiry>:
{
   13e16:	b510      	push	{r4, lr}
	__asm__ volatile(
   13e18:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e1c:	f3ef 8411 	mrs	r4, BASEPRI
   13e20:	f383 8812 	msr	BASEPRI_MAX, r3
   13e24:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   13e28:	f7fa fcb4 	bl	e794 <next_timeout>
	__asm__ volatile(
   13e2c:	f384 8811 	msr	BASEPRI, r4
   13e30:	f3bf 8f6f 	isb	sy
}
   13e34:	bd10      	pop	{r4, pc}

00013e36 <z_set_timeout_expiry>:
{
   13e36:	b570      	push	{r4, r5, r6, lr}
   13e38:	4604      	mov	r4, r0
   13e3a:	460d      	mov	r5, r1
	__asm__ volatile(
   13e3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e40:	f3ef 8611 	mrs	r6, BASEPRI
   13e44:	f383 8812 	msr	BASEPRI_MAX, r3
   13e48:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   13e4c:	f7fa fca2 	bl	e794 <next_timeout>
			      || (ticks <= next_to);
   13e50:	2801      	cmp	r0, #1
   13e52:	dd07      	ble.n	13e64 <z_set_timeout_expiry+0x2e>
   13e54:	42a0      	cmp	r0, r4
   13e56:	db05      	blt.n	13e64 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   13e58:	42a0      	cmp	r0, r4
   13e5a:	4629      	mov	r1, r5
   13e5c:	bfa8      	it	ge
   13e5e:	4620      	movge	r0, r4
   13e60:	f7f4 f814 	bl	7e8c <sys_clock_set_timeout>
	__asm__ volatile(
   13e64:	f386 8811 	msr	BASEPRI, r6
   13e68:	f3bf 8f6f 	isb	sy
}
   13e6c:	bd70      	pop	{r4, r5, r6, pc}

00013e6e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   13e6e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   13e70:	f7fa fdac 	bl	e9cc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   13e74:	bd08      	pop	{r3, pc}

00013e76 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   13e76:	f7fa bda9 	b.w	e9cc <sys_clock_tick_get>

00013e7a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   13e7a:	b108      	cbz	r0, 13e80 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   13e7c:	f7f2 bfbc 	b.w	6df8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   13e80:	4770      	bx	lr

00013e82 <k_timer_init>:
	timer->status = 0U;
   13e82:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   13e84:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   13e88:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   13e8c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   13e90:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   13e94:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   13e96:	6343      	str	r3, [r0, #52]	; 0x34
}
   13e98:	4770      	bx	lr

00013e9a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   13e9a:	b510      	push	{r4, lr}
   13e9c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   13e9e:	f7ff ffa4 	bl	13dea <z_abort_timeout>

	if (inactive) {
   13ea2:	b9b0      	cbnz	r0, 13ed2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   13ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13ea6:	b10b      	cbz	r3, 13eac <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   13ea8:	4620      	mov	r0, r4
   13eaa:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   13eac:	f104 0018 	add.w	r0, r4, #24
   13eb0:	f7ff ff2f 	bl	13d12 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   13eb4:	b168      	cbz	r0, 13ed2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   13eb6:	f7ff ff0c 	bl	13cd2 <z_ready_thread>
	__asm__ volatile(
   13eba:	f04f 0340 	mov.w	r3, #64	; 0x40
   13ebe:	f3ef 8011 	mrs	r0, BASEPRI
   13ec2:	f383 8812 	msr	BASEPRI_MAX, r3
   13ec6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   13eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ece:	f7ff bf53 	b.w	13d78 <z_reschedule_irqlock>
   13ed2:	bd10      	pop	{r4, pc}

00013ed4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   13ed4:	4770      	bx	lr

00013ed6 <nrf_gpio_pin_toggle>:
   13ed6:	b507      	push	{r0, r1, r2, lr}
   13ed8:	9001      	str	r0, [sp, #4]
   13eda:	a801      	add	r0, sp, #4
   13edc:	f7fa fe66 	bl	ebac <nrf_gpio_pin_port_decode>
   13ee0:	9901      	ldr	r1, [sp, #4]
   13ee2:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
   13ee6:	2301      	movs	r3, #1
   13ee8:	408b      	lsls	r3, r1
   13eea:	ea23 0102 	bic.w	r1, r3, r2
   13eee:	4013      	ands	r3, r2
   13ef0:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
   13ef4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   13ef8:	b003      	add	sp, #12
   13efa:	f85d fb04 	ldr.w	pc, [sp], #4

00013efe <nrf_802154_sl_ant_div_antenna_set>:
   13efe:	b513      	push	{r0, r1, r4, lr}
   13f00:	4604      	mov	r4, r0
   13f02:	f7fa fff7 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
   13f06:	b170      	cbz	r0, 13f26 <nrf_802154_sl_ant_div_antenna_set+0x28>
   13f08:	2c01      	cmp	r4, #1
   13f0a:	d818      	bhi.n	13f3e <nrf_802154_sl_ant_div_antenna_set+0x40>
   13f0c:	7803      	ldrb	r3, [r0, #0]
   13f0e:	9301      	str	r3, [sp, #4]
   13f10:	a801      	add	r0, sp, #4
   13f12:	b954      	cbnz	r4, 13f2a <nrf_802154_sl_ant_div_antenna_set+0x2c>
   13f14:	f7fa fe4a 	bl	ebac <nrf_gpio_pin_port_decode>
   13f18:	9a01      	ldr	r2, [sp, #4]
   13f1a:	4603      	mov	r3, r0
   13f1c:	2001      	movs	r0, #1
   13f1e:	fa00 f202 	lsl.w	r2, r0, r2
   13f22:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   13f26:	b002      	add	sp, #8
   13f28:	bd10      	pop	{r4, pc}
   13f2a:	f7fa fe3f 	bl	ebac <nrf_gpio_pin_port_decode>
   13f2e:	9a01      	ldr	r2, [sp, #4]
   13f30:	4603      	mov	r3, r0
   13f32:	2001      	movs	r0, #1
   13f34:	fa00 f202 	lsl.w	r2, r0, r2
   13f38:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   13f3c:	e7f3      	b.n	13f26 <nrf_802154_sl_ant_div_antenna_set+0x28>
   13f3e:	2000      	movs	r0, #0
   13f40:	e7f1      	b.n	13f26 <nrf_802154_sl_ant_div_antenna_set+0x28>

00013f42 <nrf_802154_sl_ant_div_antenna_get>:
   13f42:	b507      	push	{r0, r1, r2, lr}
   13f44:	f7fa ffd6 	bl	eef4 <nrf_802154_sl_ant_div_internal_cfg_get>
   13f48:	b168      	cbz	r0, 13f66 <nrf_802154_sl_ant_div_antenna_get+0x24>
   13f4a:	7803      	ldrb	r3, [r0, #0]
   13f4c:	9301      	str	r3, [sp, #4]
   13f4e:	a801      	add	r0, sp, #4
   13f50:	f7fa fe2c 	bl	ebac <nrf_gpio_pin_port_decode>
   13f54:	9b01      	ldr	r3, [sp, #4]
   13f56:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
   13f5a:	40d8      	lsrs	r0, r3
   13f5c:	f000 0001 	and.w	r0, r0, #1
   13f60:	b003      	add	sp, #12
   13f62:	f85d fb04 	ldr.w	pc, [sp], #4
   13f66:	2002      	movs	r0, #2
   13f68:	e7fa      	b.n	13f60 <nrf_802154_sl_ant_div_antenna_get+0x1e>

00013f6a <nrf_802154_sl_log_init>:
   13f6a:	4770      	bx	lr

00013f6c <nrf_802154_sl_atomic_cas_u8>:
   13f6c:	b510      	push	{r4, lr}
   13f6e:	f3bf 8f5f 	dmb	sy
   13f72:	e8d0 3f4f 	ldrexb	r3, [r0]
   13f76:	780c      	ldrb	r4, [r1, #0]
   13f78:	b2db      	uxtb	r3, r3
   13f7a:	429c      	cmp	r4, r3
   13f7c:	d004      	beq.n	13f88 <nrf_802154_sl_atomic_cas_u8+0x1c>
   13f7e:	700b      	strb	r3, [r1, #0]
   13f80:	f3bf 8f2f 	clrex
   13f84:	2000      	movs	r0, #0
   13f86:	bd10      	pop	{r4, pc}
   13f88:	e8c0 2f43 	strexb	r3, r2, [r0]
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d1f0      	bne.n	13f72 <nrf_802154_sl_atomic_cas_u8+0x6>
   13f90:	f3bf 8f5f 	dmb	sy
   13f94:	2001      	movs	r0, #1
   13f96:	e7f6      	b.n	13f86 <nrf_802154_sl_atomic_cas_u8+0x1a>

00013f98 <dly_ts_from_pool_alloc>:
   13f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13f9a:	2300      	movs	r3, #0
   13f9c:	4604      	mov	r4, r0
   13f9e:	460d      	mov	r5, r1
   13fa0:	2201      	movs	r2, #1
   13fa2:	f10d 0107 	add.w	r1, sp, #7
   13fa6:	3040      	adds	r0, #64	; 0x40
   13fa8:	f88d 3007 	strb.w	r3, [sp, #7]
   13fac:	f7ff ffde 	bl	13f6c <nrf_802154_sl_atomic_cas_u8>
   13fb0:	b970      	cbnz	r0, 13fd0 <dly_ts_from_pool_alloc+0x38>
   13fb2:	2d02      	cmp	r5, #2
   13fb4:	d108      	bne.n	13fc8 <dly_ts_from_pool_alloc+0x30>
   13fb6:	f88d 0007 	strb.w	r0, [sp, #7]
   13fba:	f104 0088 	add.w	r0, r4, #136	; 0x88
   13fbe:	f104 0548 	add.w	r5, r4, #72	; 0x48
   13fc2:	f7ff ffd3 	bl	13f6c <nrf_802154_sl_atomic_cas_u8>
   13fc6:	b900      	cbnz	r0, 13fca <dly_ts_from_pool_alloc+0x32>
   13fc8:	2500      	movs	r5, #0
   13fca:	4628      	mov	r0, r5
   13fcc:	b003      	add	sp, #12
   13fce:	bd30      	pop	{r4, r5, pc}
   13fd0:	4625      	mov	r5, r4
   13fd2:	e7fa      	b.n	13fca <dly_ts_from_pool_alloc+0x32>

00013fd4 <dly_ts_release>:
   13fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13fd6:	f100 0540 	add.w	r5, r0, #64	; 0x40
   13fda:	4604      	mov	r4, r0
   13fdc:	f88d 1007 	strb.w	r1, [sp, #7]
   13fe0:	2203      	movs	r2, #3
   13fe2:	f10d 0107 	add.w	r1, sp, #7
   13fe6:	4628      	mov	r0, r5
   13fe8:	f7ff ffc0 	bl	13f6c <nrf_802154_sl_atomic_cas_u8>
   13fec:	b158      	cbz	r0, 14006 <dly_ts_release+0x32>
   13fee:	2300      	movs	r3, #0
   13ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ff4:	63a0      	str	r0, [r4, #56]	; 0x38
   13ff6:	f88d 2007 	strb.w	r2, [sp, #7]
   13ffa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   13ffe:	461a      	mov	r2, r3
   14000:	4628      	mov	r0, r5
   14002:	f7ff ffb3 	bl	13f6c <nrf_802154_sl_atomic_cas_u8>
   14006:	b003      	add	sp, #12
   14008:	bd30      	pop	{r4, r5, pc}

0001400a <delayed_timeslot_start>:
   1400a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1400c:	6984      	ldr	r4, [r0, #24]
   1400e:	2301      	movs	r3, #1
   14010:	2202      	movs	r2, #2
   14012:	f10d 0107 	add.w	r1, sp, #7
   14016:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1401a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1401c:	f88d 3007 	strb.w	r3, [sp, #7]
   14020:	f7ff ffa4 	bl	13f6c <nrf_802154_sl_atomic_cas_u8>
   14024:	b128      	cbz	r0, 14032 <delayed_timeslot_start+0x28>
   14026:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14028:	4628      	mov	r0, r5
   1402a:	b003      	add	sp, #12
   1402c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14030:	4718      	bx	r3
   14032:	b003      	add	sp, #12
   14034:	bd30      	pop	{r4, r5, pc}

00014036 <nrf_802154_rsch_timeslot_request>:
   14036:	f7ef bf7a 	b.w	3f2e <nrf_raal_timeslot_request>

0001403a <nrf_802154_rsch_delayed_timeslot_cancel>:
   1403a:	b570      	push	{r4, r5, r6, lr}
   1403c:	460d      	mov	r5, r1
   1403e:	f7fa ff87 	bl	ef50 <dly_ts_by_id_search>
   14042:	2d00      	cmp	r5, #0
   14044:	bf14      	ite	ne
   14046:	2602      	movne	r6, #2
   14048:	2601      	moveq	r6, #1
   1404a:	4604      	mov	r4, r0
   1404c:	b910      	cbnz	r0, 14054 <nrf_802154_rsch_delayed_timeslot_cancel+0x1a>
   1404e:	2400      	movs	r4, #0
   14050:	4620      	mov	r0, r4
   14052:	bd70      	pop	{r4, r5, r6, pc}
   14054:	f7fb fa1a 	bl	f48c <nrf_802154_sl_timer_remove>
   14058:	b90d      	cbnz	r5, 1405e <nrf_802154_rsch_delayed_timeslot_cancel+0x24>
   1405a:	2800      	cmp	r0, #0
   1405c:	d1f7      	bne.n	1404e <nrf_802154_rsch_delayed_timeslot_cancel+0x14>
   1405e:	4631      	mov	r1, r6
   14060:	4620      	mov	r0, r4
   14062:	f7ff ffb7 	bl	13fd4 <dly_ts_release>
   14066:	4604      	mov	r4, r0
   14068:	f7fa ff82 	bl	ef70 <all_prec_update>
   1406c:	f7fb f85c 	bl	f128 <notify_core>
   14070:	e7ee      	b.n	14050 <nrf_802154_rsch_delayed_timeslot_cancel+0x16>

00014072 <nrf_802154_rsch_delayed_timeslot_priority_update>:
   14072:	b510      	push	{r4, lr}
   14074:	460c      	mov	r4, r1
   14076:	f7fa ff6b 	bl	ef50 <dly_ts_by_id_search>
   1407a:	4603      	mov	r3, r0
   1407c:	b128      	cbz	r0, 1408a <nrf_802154_rsch_delayed_timeslot_priority_update+0x18>
   1407e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   14082:	b110      	cbz	r0, 1408a <nrf_802154_rsch_delayed_timeslot_priority_update+0x18>
   14084:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
   14088:	2001      	movs	r0, #1
   1408a:	bd10      	pop	{r4, pc}

0001408c <nrf_802154_rsch_timeslot_us_left_get>:
   1408c:	f7ef b9f2 	b.w	3474 <nrf_raal_timeslot_us_left_get>

00014090 <nrf_802154_rsch_crit_sect_prio_request>:
   14090:	f7fb b88e 	b.w	f1b0 <nrf_802154_rsch_continuous_mode_priority_set>

00014094 <cmp_trigger_time>:
   14094:	b510      	push	{r4, lr}
   14096:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
   1409a:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
   1409e:	4284      	cmp	r4, r0
   140a0:	eb73 0102 	sbcs.w	r1, r3, r2
   140a4:	d306      	bcc.n	140b4 <cmp_trigger_time+0x20>
   140a6:	42a0      	cmp	r0, r4
   140a8:	eb72 0303 	sbcs.w	r3, r2, r3
   140ac:	bf34      	ite	cc
   140ae:	2001      	movcc	r0, #1
   140b0:	2000      	movcs	r0, #0
   140b2:	bd10      	pop	{r4, pc}
   140b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140b8:	e7fb      	b.n	140b2 <cmp_trigger_time+0x1e>

000140ba <check_timed_out>:
   140ba:	b510      	push	{r4, lr}
   140bc:	e9d0 4300 	ldrd	r4, r3, [r0]
   140c0:	e9d1 0200 	ldrd	r0, r2, [r1]
   140c4:	42a0      	cmp	r0, r4
   140c6:	eb72 0303 	sbcs.w	r3, r2, r3
   140ca:	bf2c      	ite	cs
   140cc:	2001      	movcs	r0, #1
   140ce:	2000      	movcc	r0, #0
   140d0:	bd10      	pop	{r4, pc}

000140d2 <nrf_802154_sl_timer_current_time_get>:
   140d2:	b508      	push	{r3, lr}
   140d4:	f7ff f878 	bl	131c8 <nrf_802154_platform_sl_lptimer_current_lpticks_get>
   140d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   140dc:	f7ff b878 	b.w	131d0 <nrf_802154_platform_sl_lptimer_lpticks_to_us_convert>

000140e0 <nrf_802154_sl_timer_init>:
   140e0:	4770      	bx	lr

000140e2 <nrf_802154_wifi_coex_is_enabled>:
   140e2:	2001      	movs	r0, #1
   140e4:	4770      	bx	lr

000140e6 <nrf_802154_wifi_coex_on_raal_timeslot_ended>:
   140e6:	f7ef b905 	b.w	32f4 <mpsl_cx_release>

000140ea <nrf_802154_sl_atomic_list_init>:
   140ea:	2300      	movs	r3, #0
   140ec:	6003      	str	r3, [r0, #0]
   140ee:	7103      	strb	r3, [r0, #4]
   140f0:	4770      	bx	lr

000140f2 <nrf_802154_sl_atomic_list_insert_ordered>:
   140f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140f6:	4604      	mov	r4, r0
   140f8:	460d      	mov	r5, r1
   140fa:	4617      	mov	r7, r2
   140fc:	4699      	mov	r9, r3
   140fe:	f3bf 8f5f 	dmb	sy
   14102:	eb01 0b02 	add.w	fp, r1, r2
   14106:	f894 a004 	ldrb.w	sl, [r4, #4]
   1410a:	46a0      	mov	r8, r4
   1410c:	fa5f fa8a 	uxtb.w	sl, sl
   14110:	e858 6f00 	ldrex	r6, [r8]
   14114:	b13e      	cbz	r6, 14126 <nrf_802154_sl_atomic_list_insert_ordered+0x34>
   14116:	4631      	mov	r1, r6
   14118:	4628      	mov	r0, r5
   1411a:	47c8      	blx	r9
   1411c:	2800      	cmp	r0, #0
   1411e:	db02      	blt.n	14126 <nrf_802154_sl_atomic_list_insert_ordered+0x34>
   14120:	eb06 0807 	add.w	r8, r6, r7
   14124:	e7f4      	b.n	14110 <nrf_802154_sl_atomic_list_insert_ordered+0x1e>
   14126:	7923      	ldrb	r3, [r4, #4]
   14128:	4553      	cmp	r3, sl
   1412a:	d1ec      	bne.n	14106 <nrf_802154_sl_atomic_list_insert_ordered+0x14>
   1412c:	f8cb 6000 	str.w	r6, [fp]
   14130:	e848 5300 	strex	r3, r5, [r8]
   14134:	2b00      	cmp	r3, #0
   14136:	d1e6      	bne.n	14106 <nrf_802154_sl_atomic_list_insert_ordered+0x14>
   14138:	1d20      	adds	r0, r4, #4
   1413a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1413e:	f000 b863 	b.w	14208 <nrf_802154_sl_atomic_uint8_inc>

00014142 <nrf_802154_sl_atomic_list_remove>:
   14142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14144:	f3bf 8f5f 	dmb	sy
   14148:	7906      	ldrb	r6, [r0, #4]
   1414a:	4605      	mov	r5, r0
   1414c:	b2f6      	uxtb	r6, r6
   1414e:	e855 4f00 	ldrex	r4, [r5]
   14152:	b1a4      	cbz	r4, 1417e <nrf_802154_sl_atomic_list_remove+0x3c>
   14154:	428c      	cmp	r4, r1
   14156:	eb04 0302 	add.w	r3, r4, r2
   1415a:	d10e      	bne.n	1417a <nrf_802154_sl_atomic_list_remove+0x38>
   1415c:	681b      	ldr	r3, [r3, #0]
   1415e:	2401      	movs	r4, #1
   14160:	7907      	ldrb	r7, [r0, #4]
   14162:	42b7      	cmp	r7, r6
   14164:	d1f0      	bne.n	14148 <nrf_802154_sl_atomic_list_remove+0x6>
   14166:	e845 3600 	strex	r6, r3, [r5]
   1416a:	2e00      	cmp	r6, #0
   1416c:	d1ec      	bne.n	14148 <nrf_802154_sl_atomic_list_remove+0x6>
   1416e:	b114      	cbz	r4, 14176 <nrf_802154_sl_atomic_list_remove+0x34>
   14170:	3004      	adds	r0, #4
   14172:	f000 f849 	bl	14208 <nrf_802154_sl_atomic_uint8_inc>
   14176:	4620      	mov	r0, r4
   14178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1417a:	461d      	mov	r5, r3
   1417c:	e7e7      	b.n	1414e <nrf_802154_sl_atomic_list_remove+0xc>
   1417e:	4623      	mov	r3, r4
   14180:	e7ee      	b.n	14160 <nrf_802154_sl_atomic_list_remove+0x1e>

00014182 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met>:
   14182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14186:	4606      	mov	r6, r0
   14188:	460f      	mov	r7, r1
   1418a:	4690      	mov	r8, r2
   1418c:	4699      	mov	r9, r3
   1418e:	f3bf 8f5f 	dmb	sy
   14192:	e856 5f00 	ldrex	r5, [r6]
   14196:	b92d      	cbnz	r5, 141a4 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x22>
   14198:	f3bf 8f2f 	clrex
   1419c:	462c      	mov	r4, r5
   1419e:	4620      	mov	r0, r4
   141a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   141a4:	4649      	mov	r1, r9
   141a6:	4628      	mov	r0, r5
   141a8:	47c0      	blx	r8
   141aa:	4604      	mov	r4, r0
   141ac:	b110      	cbz	r0, 141b4 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x32>
   141ae:	59eb      	ldr	r3, [r5, r7]
   141b0:	462c      	mov	r4, r5
   141b2:	461d      	mov	r5, r3
   141b4:	e846 5300 	strex	r3, r5, [r6]
   141b8:	2b00      	cmp	r3, #0
   141ba:	d1ea      	bne.n	14192 <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x10>
   141bc:	2c00      	cmp	r4, #0
   141be:	d0ee      	beq.n	1419e <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x1c>
   141c0:	1d30      	adds	r0, r6, #4
   141c2:	f000 f821 	bl	14208 <nrf_802154_sl_atomic_uint8_inc>
   141c6:	e7ea      	b.n	1419e <nrf_802154_sl_atomic_list_remove_head_if_criteria_met+0x1c>

000141c8 <nrf_802154_sl_mutex_init>:
   141c8:	2300      	movs	r3, #0
   141ca:	6003      	str	r3, [r0, #0]
   141cc:	4770      	bx	lr

000141ce <nrf_802154_sl_mutex_try_acquire>:
   141ce:	e850 3f00 	ldrex	r3, [r0]
   141d2:	1c5a      	adds	r2, r3, #1
   141d4:	bf18      	it	ne
   141d6:	3301      	addne	r3, #1
   141d8:	e840 3200 	strex	r2, r3, [r0]
   141dc:	2a00      	cmp	r2, #0
   141de:	d1f6      	bne.n	141ce <nrf_802154_sl_mutex_try_acquire>
   141e0:	f3bf 8f5f 	dmb	sy
   141e4:	3b01      	subs	r3, #1
   141e6:	4258      	negs	r0, r3
   141e8:	4158      	adcs	r0, r3
   141ea:	4770      	bx	lr

000141ec <nrf_802154_sl_mutex_release>:
   141ec:	f3bf 8f5f 	dmb	sy
   141f0:	2300      	movs	r3, #0
   141f2:	e850 2f00 	ldrex	r2, [r0]
   141f6:	e840 3100 	strex	r1, r3, [r0]
   141fa:	2900      	cmp	r1, #0
   141fc:	d1f9      	bne.n	141f2 <nrf_802154_sl_mutex_release+0x6>
   141fe:	2a01      	cmp	r2, #1
   14200:	bf94      	ite	ls
   14202:	2000      	movls	r0, #0
   14204:	2001      	movhi	r0, #1
   14206:	4770      	bx	lr

00014208 <nrf_802154_sl_atomic_uint8_inc>:
   14208:	e8d0 3f4f 	ldrexb	r3, [r0]
   1420c:	3301      	adds	r3, #1
   1420e:	b2db      	uxtb	r3, r3
   14210:	e8c0 3f42 	strexb	r2, r3, [r0]
   14214:	2a00      	cmp	r2, #0
   14216:	d1f7      	bne.n	14208 <nrf_802154_sl_atomic_uint8_inc>
   14218:	f3bf 8f5f 	dmb	sy
   1421c:	4770      	bx	lr
	...
